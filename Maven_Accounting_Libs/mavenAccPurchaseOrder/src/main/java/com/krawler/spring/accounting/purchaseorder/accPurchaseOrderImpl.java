/*
 * Copyright (C) 2012  Krawler Information Systems Pvt Ltd
 * All rights reserved.
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package com.krawler.spring.accounting.purchaseorder;

import com.krawler.common.admin.*;
import com.krawler.common.dao.BaseDAO;
import com.krawler.common.service.ServiceException;
import com.krawler.common.util.Constants;
import com.krawler.common.util.StringUtil;
import com.krawler.hql.accounting.*;
import com.krawler.spring.accounting.costCenter.CCConstants;
import com.krawler.spring.accounting.handler.AccountingManager;
import com.krawler.spring.accounting.salesorder.accSalesOrderImpl;
import com.krawler.spring.authHandler.authHandler;
import com.krawler.spring.common.KwlReturnObject;
import com.krawler.spring.storageHandler.storageHandlerImpl;
import com.krawler.utils.json.base.JSONArray;
import com.krawler.utils.json.base.JSONObject;
import java.net.URLDecoder;
import java.text.DateFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import org.hibernate.Session;
import org.springframework.context.MessageSource;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

/**
 *
 * @author krawler
 */
public class accPurchaseOrderImpl extends BaseDAO implements accPurchaseOrderDAO {
    
     private MessageSource messageSource;
     public void setMessageSource(MessageSource ms) {
        this.messageSource = ms;
    }


    public KwlReturnObject addPurchaseOrder(HashMap hm) throws ServiceException {
        List list = new ArrayList();
        try {
            PurchaseOrder po = new PurchaseOrder();
            po.setDeleted(false);
            if (hm.containsKey(Constants.SEQFORMAT)) {
                po.setSeqformat((SequenceFormat) get(SequenceFormat.class, (String) hm.get(Constants.SEQFORMAT)));
            }
            if (hm.containsKey(Constants.SEQNUMBER)) {
                po.setSeqnumber(Integer.parseInt(hm.get(Constants.SEQNUMBER).toString()));
            }
            if (hm.containsKey(Constants.DATEPREFIX) && hm.get(Constants.DATEPREFIX) != null) {
                po.setDatePreffixValue((String) hm.get(Constants.DATEPREFIX));
            }
            if (hm.containsKey(Constants.DATEAFTERPREFIX) && hm.get(Constants.DATEAFTERPREFIX) != null) {
                po.setDateAfterPreffixValue((String) hm.get(Constants.DATEAFTERPREFIX));
            }
            if (hm.containsKey(Constants.DATESUFFIX) && hm.get(Constants.DATESUFFIX) != null) {
                po.setDateSuffixValue((String) hm.get(Constants.DATESUFFIX));
            }
            if (hm.containsKey("entrynumber")) {
                po.setPurchaseOrderNumber((String) hm.get("entrynumber"));
            }
            if (hm.containsKey("autogenerated")) {
                po.setAutoGenerated((Boolean) hm.get("autogenerated"));
            }
            if (hm.containsKey("memo")) {
                po.setMemo((String) hm.get("memo"));
            }
            if (hm.containsKey("vendorid")) {
                Vendor vendor = (hm.get("vendorid") == null ? null : (Vendor) get(Vendor.class, (String) hm.get("vendorid")));
                po.setVendor(vendor);
            }
            if (hm.containsKey("billdate")) {
                po.setOrderDate((Date) hm.get("billdate"));
            }
            if (hm.containsKey("duedate")) {
                po.setDueDate((Date) hm.get("duedate"));
            }
            if (hm.containsKey("posttext")) {
                po.setPostText((String) hm.get("posttext"));
            }
            if (hm.containsKey("companyid")) {
                Company cmp = (hm.get("companyid") == null ? null : (Company) get(Company.class, (String) hm.get("companyid")));
                po.setCompany(cmp);
            }
            if (hm.containsKey("podetails")) {
                po.setRows((Set<PurchaseOrderDetail>) hm.get("podetails"));
            }
            saveOrUpdate(po);
            list.add(po);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.addPurchaseOrder : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Purchase Order has been added successfully", null, list, list.size());
    }
    
    public KwlReturnObject getCheckPOForSGE(String poid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from SecurityGateDetails ge where ge.podetail.purchaseOrder.ID = ? and ge.company.companyID= ? and ge.securityGateEntry.deleted = false";
        list = executeQuery( q, new Object[]{poid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    public KwlReturnObject getSGIDFromPOD(String soid,String grorderId) throws ServiceException {
       String selQuery="";
       ArrayList params=new ArrayList();
       params.add(soid);
       selQuery = "from SecurityGateDetails ge where ge.podetail.ID = ? and ge.securityGateEntry.deleted = false";
//        if(!StringUtil.isNullOrEmpty(grorderId)){
//            params.add(grorderId);
//          selQuery = "from SecurityGateDetails ge where ge.podetail.ID = ? and ge.securityGateEntry.ID= ? and ge.securityGateEntry.deleted = false";
//        }else{
//            selQuery = "from SecurityGateDetails ge where ge.podetail.ID = ? and ge.securityGateEntry.deleted = false";
//        }
        List list = executeQuery( selQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject updatePOLinkflag(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            PurchaseOrder purchaseOrder = (PurchaseOrder) requestParams.get("purchaseOrder");
            if (requestParams.containsKey("value")) {
                int num = Integer.parseInt((String) requestParams.get("value"));
                purchaseOrder.setLinkflag(num);
            }
            Boolean isOpen = (Boolean) requestParams.get("isOpen") != null ? (Boolean) requestParams.get("isOpen") : true;
            purchaseOrder.setIsOpen(isOpen);
            saveOrUpdate(purchaseOrder);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.updateSOLinkflag:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }

    public KwlReturnObject updatePurchaseOrder(HashMap hm) throws ServiceException {
        List list = new ArrayList();
        try {
            String poid = (String) hm.get("poid");
            PurchaseOrder po = (PurchaseOrder) get(PurchaseOrder.class, poid);
            if (po != null) {
                if (hm.containsKey(Constants.SEQFORMAT)) {
                    po.setSeqformat((SequenceFormat) get(SequenceFormat.class, (String) hm.get(Constants.SEQFORMAT)));
                }
                if (hm.containsKey(Constants.SEQNUMBER)) {
                    po.setSeqnumber(Integer.parseInt(hm.get(Constants.SEQNUMBER).toString()));
                }
                if (hm.containsKey(Constants.DATEPREFIX) && hm.get(Constants.DATEPREFIX) != null) {
                    po.setDatePreffixValue((String) hm.get(Constants.DATEPREFIX));
                }
                if (hm.containsKey(Constants.DATEAFTERPREFIX) && hm.get(Constants.DATEAFTERPREFIX) != null) {
                    po.setDateAfterPreffixValue((String) hm.get(Constants.DATEAFTERPREFIX));
                }
                if (hm.containsKey(Constants.DATESUFFIX) && hm.get(Constants.DATESUFFIX) != null) {
                    po.setDateSuffixValue((String) hm.get(Constants.DATESUFFIX));
                }
                if (hm.containsKey("entrynumber")) {
                    po.setPurchaseOrderNumber((String) hm.get("entrynumber"));
                }
                if (hm.containsKey("autogenerated")) {
                    po.setAutoGenerated((Boolean) hm.get("autogenerated"));
                }
                if (hm.containsKey("memo")) {
                    po.setMemo((String) hm.get("memo"));
                }
                if (hm.containsKey("vendorid")) {
                    Vendor vendor = (hm.get("vendorid") == null ? null : (Vendor) get(Vendor.class, (String) hm.get("vendorid")));
                    po.setVendor(vendor);
                }
                if (hm.containsKey("billdate")) {
                    po.setOrderDate((Date) hm.get("billdate"));
                }
                if (hm.containsKey("duedate")) {
                    po.setDueDate((Date) hm.get("duedate"));
                }
                if (hm.containsKey("companyid")) {
                    Company cmp = (hm.get("companyid") == null ? null : (Company) get(Company.class, (String) hm.get("companyid")));
                    po.setCompany(cmp);
                }
                if (hm.containsKey("purchaseordercustomdataref")) {
                    PurchaseOrderCustomData cmp = (hm.get("purchaseordercustomdataref") == null ? null : (PurchaseOrderCustomData) get(PurchaseOrderCustomData.class, (String) hm.get("purchaseordercustomdataref")));
                    po.setPoCustomData(cmp);
                }
                if (hm.containsKey("podetails")) {
                    po.setRows((Set<PurchaseOrderDetail>) hm.get("podetails"));
                }
                if (hm.containsKey("posttext")) {
                    po.setPostText((String) hm.get("posttext"));
                }
                if (hm.containsKey("shipLength")) {
                    po.setShiplength(Double.parseDouble((String) hm.get("shipLength")));
                }
                if (hm.containsKey("invoicetype")) {
                    po.setInvoicetype((String) hm.get("invoicetype"));
                }
                if (hm.containsKey(Constants.termsincludegst)) {
                    po.setTermsincludegst((Boolean) hm.get(Constants.termsincludegst));
                }
                if (hm.containsKey("approvalStatusLevel")) {
                    po.setApprovestatuslevel((Integer) hm.get("approvalStatusLevel"));
                }
                saveOrUpdate(po);
            }
            list.add(po);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.updatePurchaseOrder : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Purchase Order has been updated successfully", null, list, list.size());
    }

    @Override
    public KwlReturnObject savePurchaseOrder(HashMap<String, Object> dataMap) throws ServiceException ,AccountingException{
        List list = new ArrayList();
        String companyid = "";
        try {
            String poid = (String) dataMap.get("id");
            PurchaseOrder po = new PurchaseOrder();
            if (dataMap.containsKey("companyid")) {
                companyid = (String) dataMap.get("companyid");
            }
            if (StringUtil.isNullOrEmpty(poid)) {
                po.setDeleted(false);
                if (dataMap.containsKey("createdby")) {
                    User createdby = dataMap.get("createdby") == null ? null : (User) get(User.class, (String) dataMap.get("createdby"));
                    po.setCreatedby(createdby);
                }
                if (dataMap.containsKey("modifiedby")) {
                    User modifiedby = dataMap.get("modifiedby") == null ? null : (User) get(User.class, (String) dataMap.get("modifiedby"));
                    po.setModifiedby(modifiedby);
                }
                if (dataMap.containsKey("createdon")) {
                    po.setCreatedon((Long) dataMap.get("createdon"));
                }
                if (dataMap.containsKey("updatedon")) {
                    po.setUpdatedon((Long) dataMap.get("updatedon"));
                }
            } else {
                po = (PurchaseOrder) get(PurchaseOrder.class, poid);
                if (dataMap.containsKey("modifiedby")) {
                    User modifiedby = dataMap.get("modifiedby") == null ? null : (User) get(User.class, (String) dataMap.get("modifiedby"));
                    po.setModifiedby(modifiedby);
                }
                if (dataMap.containsKey("updatedon")) {
                    po.setUpdatedon((Long) dataMap.get("updatedon"));
                }
            }
            if (dataMap.containsKey(Constants.SEQFORMAT)) {
                po.setSeqformat((SequenceFormat) get(SequenceFormat.class, (String) dataMap.get(Constants.SEQFORMAT)));
            }
            if (dataMap.containsKey(Constants.isApplyTaxToTerms) && dataMap.get(Constants.isApplyTaxToTerms) != null) {  
                po.setApplyTaxToTerms((Boolean) dataMap.get(Constants.isApplyTaxToTerms));
            }
            if (dataMap.containsKey(Constants.SEQNUMBER) && dataMap.get(Constants.SEQNUMBER)!=null && !StringUtil.isNullOrEmpty(dataMap.get(Constants.SEQNUMBER).toString())) {
                po.setSeqnumber(Integer.parseInt(dataMap.get(Constants.SEQNUMBER).toString()));
            }
            if (dataMap.containsKey(Constants.DATEPREFIX) && dataMap.get(Constants.DATEPREFIX) != null) {
                po.setDatePreffixValue((String) dataMap.get(Constants.DATEPREFIX));
            }
            if (dataMap.containsKey(Constants.DATEAFTERPREFIX) && dataMap.get(Constants.DATEAFTERPREFIX) != null) {
                po.setDateAfterPreffixValue((String) dataMap.get(Constants.DATEAFTERPREFIX));
            }
            if (dataMap.containsKey(Constants.DATESUFFIX) && dataMap.get(Constants.DATESUFFIX) != null) {
                po.setDateSuffixValue((String) dataMap.get(Constants.DATESUFFIX));
            }
            if (dataMap.containsKey("entrynumber")) {
                po.setPurchaseOrderNumber((String) dataMap.get("entrynumber"));
            }
            if (dataMap.containsKey("autogenerated")) {
                po.setAutoGenerated((Boolean) dataMap.get("autogenerated"));
            }
            if (dataMap.containsKey("memo")) {
                po.setMemo((String) dataMap.get("memo"));
            }
            if (dataMap.containsKey("perDiscount")) {
                po.setPerDiscount((Boolean) dataMap.get("perDiscount"));
            }
            if (dataMap.containsKey("discount")) {
                po.setDiscount((Double) dataMap.get("discount"));
            }          
            if (dataMap.containsKey("posttext")) {
                po.setPostText((String) dataMap.get("posttext"));
            }
            if (dataMap.containsKey("vendorid")) {
                Vendor vendor = (dataMap.get("vendorid") == null ? null : (Vendor) get(Vendor.class, (String) dataMap.get("vendorid")));
                po.setVendor(vendor);
            }
            if (dataMap.containsKey("orderdate")) {
                po.setOrderDate((Date) dataMap.get("orderdate"));
            }
            if (dataMap.containsKey("duedate")) {
                po.setDueDate((Date) dataMap.get("duedate"));
            }
            if (dataMap.containsKey("shipdate")) {
                po.setShipdate((Date) dataMap.get("shipdate"));
            }
            if (dataMap.containsKey("shipvia")) {
                po.setShipvia((String) dataMap.get("shipvia"));
            }
            if (dataMap.containsKey("venbilladdress")) {
                po.setBillTo((String) dataMap.get("venbilladdress"));
            }
            if (dataMap.containsKey("venshipaddress")) {
                po.setShipTo((String) dataMap.get("venshipaddress"));
            }
            if (dataMap.containsKey("fob")) {
                po.setFob((String) dataMap.get("fob"));
            }
            if (dataMap.containsKey("formtypeid")) {
                po.setFormtype((String) dataMap.get("formtypeid"));
            }
            if (dataMap.containsKey("gtaapplicable") && dataMap.get("gtaapplicable")!=null){  //Special Case - Service Tax ( India Compliance)
                   po.setGtaapplicable((Boolean) dataMap.get("gtaapplicable"));
            }
            if (dataMap.containsKey("companyid")) {
                Company cmp = (dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid")));
                po.setCompany(cmp);
            }
            
            

            if (dataMap.containsKey("taxid")) {
                Tax tax = (dataMap.get("taxid") == null ? null : (Tax) get(Tax.class, (String) dataMap.get("taxid")));
                po.setTax(tax);
            }
            if (dataMap.containsKey("costCenterId")) {
                CostCenter costCenter = dataMap.get("costCenterId") == null ? null : (CostCenter) get(CostCenter.class, (String) dataMap.get("costCenterId"));
                po.setCostcenter(costCenter);
            } else {
                po.setCostcenter(null);
            }
            if (dataMap.containsKey("podetails")) {
                if (dataMap.get("podetails") != null) {
                    po.setRows((Set<PurchaseOrderDetail>) dataMap.get("podetails"));
                }
            }
            if (dataMap.containsKey("expensedetail")) {
                if (dataMap.get("expensedetail") != null) {
                    po.setExpenserows((Set<ExpensePODetail>) dataMap.get("expensedetail"));
                }
            }
            if (dataMap.containsKey("isexpensetype") && dataMap.get("isexpensetype") != null) {
                     po.setIsExpenseType((Boolean) dataMap.get("isexpensetype"));
            }
            if (dataMap.containsKey("currencyid")) {
                po.setCurrency((KWLCurrency) get(KWLCurrency.class, (String) dataMap.get("currencyid")));
            }
            if (dataMap.containsKey("isOpeningBalanceOrder") && dataMap.get("isOpeningBalanceOrder") != null) {
                po.setIsOpeningBalancePO((Boolean) dataMap.get("isOpeningBalanceOrder"));
            }

            if (dataMap.containsKey("isfavourite")) {
                if (dataMap.get("isfavourite") != null) {
                    po.setFavourite(Boolean.parseBoolean(dataMap.get("isfavourite").toString()));
                }
            }

            if (dataMap.containsKey(Constants.MARKED_PRINTED)) {
                if (dataMap.get(Constants.MARKED_PRINTED) != null) {
                    po.setPrinted(Boolean.parseBoolean(dataMap.get(Constants.MARKED_PRINTED).toString()));
                }
            }
            if (dataMap.containsKey("agent")) {
                MasterItem mi = (dataMap.get("agent") == null ? null : (MasterItem) get(MasterItem.class, (String) dataMap.get("agent")));
                po.setMasteragent(mi);
            }
            if (dataMap.get("companyid") != null) {
                if (storageHandlerImpl.GetBCHLCompanyId().contains((String) dataMap.get("companyid"))) {
                    po.setTemplateid((Projreport_Template) get(Projreport_Template.class, "ff80808140538c54014053c5f6380006"));
                } else {
                    po.setTemplateid((Projreport_Template) get(Projreport_Template.class, Constants.HEADER_IMAGE_TEMPLATE_ID));
                }
            }
            if (dataMap.containsKey("shipLength")) {
                po.setShiplength(Double.parseDouble((String) dataMap.get("shipLength")));
            }
            if (dataMap.containsKey("invoicetype")) {
                po.setInvoicetype((String) dataMap.get("invoicetype"));
            }
              if (dataMap.containsKey("isConsignment") && dataMap.get("isConsignment") != null) {
                po.setIsconsignment((Boolean) dataMap.get("isConsignment"));

            }             
            if (dataMap.containsKey("termid")) {
                Term term = (dataMap.get("termid") == null ? null : (Term) get(Term.class, (String) dataMap.get("termid")));
                po.setTerm(term);
            }
            if (dataMap.containsKey("billshipAddressid")) {
                BillingShippingAddresses bsa = dataMap.get("billshipAddressid") == null ? null : (BillingShippingAddresses) get(BillingShippingAddresses.class, (String) dataMap.get("billshipAddressid"));
                po.setBillingShippingAddresses(bsa);
            }
            if (dataMap.containsKey("gstIncluded") && dataMap.get("gstIncluded") != null) {
                po.setGstIncluded((Boolean) dataMap.get("gstIncluded"));
            }
            if (dataMap.containsKey("externalCurrencyRate")) {
                po.setExternalCurrencyRate((Double) dataMap.get("externalCurrencyRate"));
            }
            
            if (dataMap.containsKey("totalamountinbase") && dataMap.get("totalamountinbase") != null) {
                po.setTotalamountinbase(authHandler.round(Double.valueOf(dataMap.get("totalamountinbase").toString()), companyid));
            }

            if (dataMap.containsKey("totalamount")  && dataMap.get("totalamount") != null) { // SO amount
                po.setTotalamount(authHandler.round(Double.valueOf(dataMap.get("totalamount").toString()), companyid));
            }
            
            if (dataMap.containsKey(Constants.roundingadjustmentamountinbase) && dataMap.get(Constants.roundingadjustmentamountinbase) != null) {
                po.setRoundingadjustmentamountinbase(Double.valueOf(dataMap.get(Constants.roundingadjustmentamountinbase).toString()));
            }

            if (dataMap.containsKey(Constants.roundingadjustmentamount) && dataMap.get(Constants.roundingadjustmentamount) != null) { // quotation amount
                po.setRoundingadjustmentamount(Double.valueOf(dataMap.get(Constants.roundingadjustmentamount).toString()));
            }
            if (dataMap.containsKey(Constants.IsRoundingAdjustmentApplied) && dataMap.get(Constants.IsRoundingAdjustmentApplied) != null) {  // If New GST Appliled
                po.setIsRoundingAdjustmentApplied((Boolean) dataMap.get(Constants.IsRoundingAdjustmentApplied));
            }
            
            if (dataMap.containsKey("discountinbase")  && dataMap.get("discountinbase") != null) { // Discount in Base
                po.setDiscountinbase(authHandler.round(Double.valueOf(dataMap.get("discountinbase").toString()), companyid));
            }
            
            if (dataMap.containsKey("totallineleveldiscount")  && dataMap.get("totallineleveldiscount") != null) { // Discount
                po.setTotallineleveldiscount(authHandler.round(Double.valueOf(dataMap.get("totallineleveldiscount").toString()), companyid));
            }
            if (dataMap.containsKey(Constants.termsincludegst)) {
                po.setTermsincludegst((Boolean) dataMap.get(Constants.termsincludegst));
            }
            if (dataMap.containsKey("isFixedAsset") && dataMap.get("isFixedAsset") != null) {
                po.setFixedAssetPO(Boolean.parseBoolean(dataMap.get("isFixedAsset").toString()));
            }
            
            /*
             * Job Work Out related Feilds
             */
            if (dataMap.containsKey("isMRPJOBWORKOUT") && dataMap.get("isMRPJOBWORKOUT") != null) {
                po.setIsMRPJobWorkOut((Boolean) dataMap.get("isMRPJOBWORKOUT"));

            }
            
            if (dataMap.containsKey("isdropshipchecked")) {
                po.setIsDropshipDocument((Boolean) dataMap.get("isdropshipchecked"));
                po.setLinkflag(1);//Restricting dropship PO from linking in GR
            }
            if (dataMap.containsKey(PurchaseOrder.DATEOFSHIPMENT) && !StringUtil.isNullObject(dataMap.get(PurchaseOrder.DATEOFSHIPMENT))) {
                po.setDateofshipment((Date) dataMap.get(PurchaseOrder.DATEOFSHIPMENT));
            }
            if (dataMap.containsKey(PurchaseOrder.EXCISEDUTYCHARGES) && !StringUtil.isNullOrEmpty((dataMap.get(PurchaseOrder.EXCISEDUTYCHARGES).toString()))) {
                po.setExcisedutychargees((Double) dataMap.get(PurchaseOrder.EXCISEDUTYCHARGES));
            }
            if (dataMap.containsKey(PurchaseOrder.JOBWORKLOCATIONID) && !StringUtil.isNullOrEmpty((String) dataMap.get(PurchaseOrder.JOBWORKLOCATIONID))) {
                InventoryLocation loc = (InventoryLocation) get(InventoryLocation.class, (String) dataMap.get(PurchaseOrder.JOBWORKLOCATIONID));
                if (loc != null) {
                    po.setJobworklocation(loc);
                }
            }
            if (dataMap.containsKey(PurchaseOrder.SHIPMENTROUTE) && !StringUtil.isNullOrEmpty((String) dataMap.get(PurchaseOrder.SHIPMENTROUTE))) {
                po.setShipmentroute((String) dataMap.get(PurchaseOrder.SHIPMENTROUTE));
            }
            if (dataMap.containsKey(PurchaseOrder.GATEPASS) && !StringUtil.isNullOrEmpty((String) dataMap.get(PurchaseOrder.GATEPASS))) {
                po.setGatepass((String) dataMap.get(PurchaseOrder.GATEPASS));
            }

            if (dataMap.containsKey(PurchaseOrder.OTHERREMARKS) && !StringUtil.isNullOrEmpty((String) dataMap.get(PurchaseOrder.OTHERREMARKS))) {
                po.setOtherremarks((String) dataMap.get(PurchaseOrder.OTHERREMARKS));
            }

            if (dataMap.containsKey(PurchaseOrder.PRODUCTID) && !StringUtil.isNullOrEmpty((String) dataMap.get(PurchaseOrder.PRODUCTID))) {
                Product prod = (Product) get(Product.class, (String) dataMap.get(PurchaseOrder.PRODUCTID));
                if (prod != null) {
                    po.setProduct(prod);
                }
            }

            if (dataMap.containsKey(PurchaseOrder.WORKORDERID) && !StringUtil.isNullOrEmpty((String) dataMap.get(PurchaseOrder.WORKORDERID))) {
                po.setWorkorderid(PurchaseOrder.WORKORDERID);
            }
            if (dataMap.containsKey(PurchaseOrder.PRODUCTQUANTITY) && !StringUtil.isNullOrEmpty(dataMap.get(PurchaseOrder.PRODUCTQUANTITY).toString())) {
                po.setProductquantity((Double) dataMap.get(PurchaseOrder.PRODUCTQUANTITY));
            }
            if (dataMap.containsKey(Constants.SUPPLIERINVOICENO) && dataMap.get(Constants.SUPPLIERINVOICENO)!=null) {   //SDP-10402
                po.setSupplierInvoiceNo((String) dataMap.get(Constants.SUPPLIERINVOICENO));
            }
            if (dataMap.containsKey("isJobWorkOutOrder") && dataMap.get("isJobWorkOutOrder") != null) {
                po.setIsJobWorkOutOrder((Boolean) dataMap.get("isJobWorkOutOrder"));

            }
            if (dataMap.containsKey("gstapplicable") && dataMap.get("gstapplicable") != null) {  // If New GST Appliled
                po.setIsIndGSTApplied((Boolean) dataMap.get("gstapplicable"));
            }
            if (dataMap.containsKey(Constants.isMerchantExporter) && dataMap.get(Constants.isMerchantExporter) != null) {  // If is Merchant Export
                po.setIsMerchantExporter((Boolean) dataMap.get(Constants.isMerchantExporter));
            }
            
            if (dataMap.containsKey("isLinkedSOBlocked") && dataMap.get("isLinkedSOBlocked") != null) {  // If New GST Appliled
                po.setLinkedSOBlocked((Boolean) dataMap.get("isLinkedSOBlocked"));
            }
            // Set isDraft flag in purchase order
            if (dataMap.containsKey("isDraft") && dataMap.get("isDraft") != null) {  // If Save As Draft
                po.setIsDraft((Boolean) dataMap.get("isDraft"));
            }
            
            saveOrUpdate(po);
            list.add(po);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.updatePurchaseOrder : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Purchase Order has been updated successfully", null, list, list.size());
    }
    
    /**
     * To save security gate entry from
     * @param dataMap
     * @return
     * @throws ServiceException 
     */
    @Override
    public KwlReturnObject saveSecurityGateEntry(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        String companyid = "";
        try {
            String poid = (String) dataMap.get("id");
            SecurityGateEntry securityGateEntry = new SecurityGateEntry();
            if (dataMap.containsKey("companyid")) {
                companyid = (String) dataMap.get("companyid");
            }
            if (StringUtil.isNullOrEmpty(poid)) {
                securityGateEntry.setDeleted(false);
                if (dataMap.containsKey("createdby")) {
                    User createdby = dataMap.get("createdby") == null ? null : (User) get(User.class, (String) dataMap.get("createdby"));
                    securityGateEntry.setCreatedby(createdby);
                }
                if (dataMap.containsKey("modifiedby")) {
                    User modifiedby = dataMap.get("modifiedby") == null ? null : (User) get(User.class, (String) dataMap.get("modifiedby"));
                    securityGateEntry.setModifiedby(modifiedby);
                }
                if (dataMap.containsKey("createdon")) {
                    securityGateEntry.setCreatedon((Long) dataMap.get("createdon"));
                }
                if (dataMap.containsKey("updatedon")) {
                    securityGateEntry.setUpdatedon((Long) dataMap.get("updatedon"));
                }
            } else {
                securityGateEntry = (SecurityGateEntry) get(SecurityGateEntry.class, poid);
                if (dataMap.containsKey("modifiedby")) {
                    User modifiedby = dataMap.get("modifiedby") == null ? null : (User) get(User.class, (String) dataMap.get("modifiedby"));
                    securityGateEntry.setModifiedby(modifiedby);
                }
                if (dataMap.containsKey("updatedon")) {
                    securityGateEntry.setUpdatedon((Long) dataMap.get("updatedon"));
                }
            }
            if (dataMap.containsKey(Constants.SEQFORMAT)) {
                securityGateEntry.setSeqformat((SequenceFormat) get(SequenceFormat.class, (String) dataMap.get(Constants.SEQFORMAT)));
            }
            if (dataMap.containsKey(Constants.SEQNUMBER) && dataMap.get(Constants.SEQNUMBER)!=null && !StringUtil.isNullOrEmpty(dataMap.get(Constants.SEQNUMBER).toString())) {
                securityGateEntry.setSeqnumber(Integer.parseInt(dataMap.get(Constants.SEQNUMBER).toString()));
            }
            if (dataMap.containsKey(Constants.DATEPREFIX) && dataMap.get(Constants.DATEPREFIX) != null) {
                securityGateEntry.setDatePreffixValue((String) dataMap.get(Constants.DATEPREFIX));
            }
            if (dataMap.containsKey(Constants.DATEAFTERPREFIX) && dataMap.get(Constants.DATEAFTERPREFIX) != null) {
                securityGateEntry.setDateAfterPreffixValue((String) dataMap.get(Constants.DATEAFTERPREFIX));
            }
            if (dataMap.containsKey(Constants.DATESUFFIX) && dataMap.get(Constants.DATESUFFIX) != null) {
                securityGateEntry.setDateSuffixValue((String) dataMap.get(Constants.DATESUFFIX));
            }
            if (dataMap.containsKey("entrynumber")) {
                securityGateEntry.setSecurityNumber((String) dataMap.get("entrynumber"));
            }
             if (dataMap.containsKey("securitygateentrycustomdataref")) {
                SecurityGateEntryCustomData cmp = (dataMap.get("securitygateentrycustomdataref") == null ? null : (SecurityGateEntryCustomData) get(SecurityGateEntryCustomData.class, (String) dataMap.get("securitygateentrycustomdataref")));
                securityGateEntry.setSgeCustomData(cmp);
            }
            if (dataMap.containsKey("autogenerated")) {
                securityGateEntry.setAutoGenerated((Boolean) dataMap.get("autogenerated"));
            }
            if (dataMap.containsKey("memo")) {
                securityGateEntry.setMemo((String) dataMap.get("memo"));
            }
            if (dataMap.containsKey("perDiscount")) {
                securityGateEntry.setPerDiscount((Boolean) dataMap.get("perDiscount"));
            }
            if (dataMap.containsKey("discount")) {
                securityGateEntry.setDiscount((Double) dataMap.get("discount"));
            }          
            if (dataMap.containsKey("posttext")) {
                securityGateEntry.setPostText((String) dataMap.get("posttext"));
            }
            if (dataMap.containsKey("vendorid")) {
                Vendor vendor = (dataMap.get("vendorid") == null ? null : (Vendor) get(Vendor.class, (String) dataMap.get("vendorid")));
                securityGateEntry.setVendor(vendor);
            }
            if (dataMap.containsKey("orderdate")) {
                securityGateEntry.setSecurityDate((Date) dataMap.get("orderdate"));
            }
            if (dataMap.containsKey("duedate")) {
                securityGateEntry.setDueDate((Date) dataMap.get("duedate"));
            }
            if (dataMap.containsKey("shipdate")) {
                securityGateEntry.setShipdate((Date) dataMap.get("shipdate"));
            }
            if (dataMap.containsKey("shipvia")) {
                securityGateEntry.setShipvia((String) dataMap.get("shipvia"));
            }
            if (dataMap.containsKey("venbilladdress")) {
                securityGateEntry.setBillTo((String) dataMap.get("venbilladdress"));
            }
            if (dataMap.containsKey("venshipaddress")) {
                securityGateEntry.setShipTo((String) dataMap.get("venshipaddress"));
            }
            if (dataMap.containsKey("fob")) {
                securityGateEntry.setFob((String) dataMap.get("fob"));
            }
            if (dataMap.containsKey("companyid")) {
                Company cmp = (dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid")));
                securityGateEntry.setCompany(cmp);
            }
            
            

            if (dataMap.containsKey("taxid")) {
                Tax tax = (dataMap.get("taxid") == null ? null : (Tax) get(Tax.class, (String) dataMap.get("taxid")));
                securityGateEntry.setTax(tax);
            }
            if (dataMap.containsKey("costCenterId")) {
                CostCenter costCenter = dataMap.get("costCenterId") == null ? null : (CostCenter) get(CostCenter.class, (String) dataMap.get("costCenterId"));
                securityGateEntry.setCostcenter(costCenter);
            } else {
                securityGateEntry.setCostcenter(null);
            }
            if (dataMap.containsKey("securitydetails")) {
                if (dataMap.get("securitydetails") != null) {
                    securityGateEntry.setRows((Set<SecurityGateDetails>) dataMap.get("securitydetails"));
                }
            }
            if (dataMap.containsKey("currencyid")) {
                securityGateEntry.setCurrency((KWLCurrency) get(KWLCurrency.class, (String) dataMap.get("currencyid")));
            }

            if (dataMap.containsKey("isfavourite")) {
                if (dataMap.get("isfavourite") != null) {
                    securityGateEntry.setFavourite(Boolean.parseBoolean(dataMap.get("isfavourite").toString()));
                }
            }

            if (dataMap.containsKey("agent")) {
                MasterItem mi = (dataMap.get("agent") == null ? null : (MasterItem) get(MasterItem.class, (String) dataMap.get("agent")));
                securityGateEntry.setMasteragent(mi);
            }
            if (dataMap.get("companyid") != null) {
                if (storageHandlerImpl.GetBCHLCompanyId().contains((String) dataMap.get("companyid"))) {
                    securityGateEntry.setTemplateid((Projreport_Template) get(Projreport_Template.class, "ff80808140538c54014053c5f6380006"));
                } else {
                    securityGateEntry.setTemplateid((Projreport_Template) get(Projreport_Template.class, Constants.HEADER_IMAGE_TEMPLATE_ID));
                }
            }
            if (dataMap.containsKey("shipLength")) {
                securityGateEntry.setShiplength(Double.parseDouble((String) dataMap.get("shipLength")));
            }
            if (dataMap.containsKey("termid")) {
                Term term = (dataMap.get("termid") == null ? null : (Term) get(Term.class, (String) dataMap.get("termid")));
                securityGateEntry.setTerm(term);
            }
            if (dataMap.containsKey("billshipAddressid")) {
                BillingShippingAddresses bsa = dataMap.get("billshipAddressid") == null ? null : (BillingShippingAddresses) get(BillingShippingAddresses.class, (String) dataMap.get("billshipAddressid"));
                securityGateEntry.setBillingShippingAddresses(bsa);
            }
            if (dataMap.containsKey("gstIncluded") && dataMap.get("gstIncluded") != null) {
                securityGateEntry.setGstIncluded((Boolean) dataMap.get("gstIncluded"));
            }
            if (dataMap.containsKey("externalCurrencyRate")) {
                securityGateEntry.setExternalCurrencyRate((Double) dataMap.get("externalCurrencyRate"));
            }
            
            if (dataMap.containsKey("totalamountinbase") && dataMap.get("totalamountinbase") != null) {
                securityGateEntry.setTotalamountinbase(authHandler.round(Double.valueOf(dataMap.get("totalamountinbase").toString()), companyid));
            }

            if (dataMap.containsKey("totalamount")  && dataMap.get("totalamount") != null) { // SO amount
                securityGateEntry.setTotalamount(authHandler.round(Double.valueOf(dataMap.get("totalamount").toString()), companyid));
            }
            
            if (dataMap.containsKey("discountinbase")  && dataMap.get("discountinbase") != null) { // Discount in Base
                securityGateEntry.setDiscountinbase(authHandler.round(Double.valueOf(dataMap.get("discountinbase").toString()), companyid));
            }
            
            if (dataMap.containsKey("totallineleveldiscount")  && dataMap.get("totallineleveldiscount") != null) { // Discount
                securityGateEntry.setTotallineleveldiscount(authHandler.round(Double.valueOf(dataMap.get("totallineleveldiscount").toString()), companyid));
            }
            if (dataMap.containsKey(Constants.termsincludegst)) {
                securityGateEntry.setTermsincludegst((Boolean) dataMap.get(Constants.termsincludegst));
            }
            if (dataMap.containsKey(PurchaseOrder.DATEOFSHIPMENT) && !StringUtil.isNullObject(dataMap.get(PurchaseOrder.DATEOFSHIPMENT))) {
                securityGateEntry.setDateofshipment((Date) dataMap.get(PurchaseOrder.DATEOFSHIPMENT));
            }


            if (dataMap.containsKey(PurchaseOrder.PRODUCTID) && !StringUtil.isNullOrEmpty((String) dataMap.get(PurchaseOrder.PRODUCTID))) {
                Product prod = (Product) get(Product.class, (String) dataMap.get(PurchaseOrder.PRODUCTID));
                if (prod != null) {
                    securityGateEntry.setProduct(prod);
                }
            }

            if (dataMap.containsKey(PurchaseOrder.PRODUCTQUANTITY) && !StringUtil.isNullOrEmpty(dataMap.get(PurchaseOrder.PRODUCTQUANTITY).toString())) {
                securityGateEntry.setProductquantity((Double) dataMap.get(PurchaseOrder.PRODUCTQUANTITY));
            }
            if (dataMap.containsKey(Constants.SUPPLIERINVOICENO) && !StringUtil.isNullOrEmpty((String) dataMap.get(Constants.SUPPLIERINVOICENO))) {
                securityGateEntry.setSupplierInvoiceNo((String) dataMap.get(Constants.SUPPLIERINVOICENO));
            }

            saveOrUpdate(securityGateEntry);
            list.add(securityGateEntry);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.updatePurchaseOrder : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Purchase Order has been updated successfully", null, list, list.size());
    }

    @Override
    public KwlReturnObject saveVQLinking(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String vqid = (String) dataMap.get("docid");
            VendorQuotationLinking vqlinking = new VendorQuotationLinking();
            if (dataMap.containsKey("docid")) {
                VendorQuotation vq = (VendorQuotation) get(VendorQuotation.class, vqid);
                vqlinking.setDocID(vq);
            }
            if (dataMap.containsKey("moduleid")) {
                vqlinking.setModuleID((Integer) dataMap.get("moduleid"));
            }
            if (dataMap.containsKey("linkeddocid")) {
                vqlinking.setLinkedDocID((String) dataMap.get("linkeddocid"));
            }
            if (dataMap.containsKey("linkeddocno")) {
                vqlinking.setLinkedDocNo((String) dataMap.get("linkeddocno"));
            }
            if (dataMap.containsKey("sourceflag")) {
                vqlinking.setSourceFlag((Integer) dataMap.get("sourceflag"));
            }
            saveOrUpdate(vqlinking);
            list.add(vqlinking);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.saveVQLinking : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public KwlReturnObject savePOLinking(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String poid = (String) dataMap.get("docid");
            PurchaseOrderLinking polinking = new PurchaseOrderLinking();
            if (dataMap.containsKey("docid")) {
                PurchaseOrder po = (PurchaseOrder) get(PurchaseOrder.class, poid);
                polinking.setDocID(po);
            }
            if (dataMap.containsKey("moduleid")) {
                polinking.setModuleID((Integer) dataMap.get("moduleid"));
            }
            if (dataMap.containsKey("linkeddocid")) {
                polinking.setLinkedDocID((String) dataMap.get("linkeddocid"));
            }
            if (dataMap.containsKey("linkeddocno")) {
                polinking.setLinkedDocNo((String) dataMap.get("linkeddocno"));
            }
            if (dataMap.containsKey("sourceflag")) {
                polinking.setSourceFlag((Integer) dataMap.get("sourceflag"));
            }
            saveOrUpdate(polinking);
            list.add(polinking);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.savePOLinking : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject savePurchaseOrderDetails(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String podid = (String) dataMap.get("id");
            PurchaseOrderDetail pod = new PurchaseOrderDetail();
            if (!StringUtil.isNullOrEmpty(podid)) {
                pod = (PurchaseOrderDetail) get(PurchaseOrderDetail.class, podid);
            }

            if (dataMap.containsKey("poid")) {
                PurchaseOrder po = dataMap.get("poid") == null ? null : (PurchaseOrder) get(PurchaseOrder.class, (String) dataMap.get("poid"));
                pod.setPurchaseOrder(po);
            }
            if (dataMap.containsKey("srno")) {
                pod.setSrno((Integer) dataMap.get("srno"));
            }
            if (dataMap.containsKey("qastatus")) {
                pod.setQastatus((Integer) dataMap.get("qastatus"));
            }
            if (dataMap.containsKey("productid")) {
                Product product = dataMap.get("productid") == null ? null : (Product) get(Product.class, (String) dataMap.get("productid"));
                pod.setProduct(product);
            }
            if (dataMap.containsKey("rate")) {
                pod.setRate((Double) dataMap.get("rate"));
            }
            if (dataMap.containsKey("rateIncludingGst")) {
                pod.setRateincludegst((Double) dataMap.get("rateIncludingGst"));
            }
            if (dataMap.containsKey("quantity")) {
                pod.setQuantity((Double) dataMap.get("quantity"));
            }
            if (dataMap.containsKey("balanceqty") && dataMap.get("balanceqty") != null && dataMap.get("balanceqty") != "") {
                pod.setBalanceqty((Double) dataMap.get("balanceqty"));
            }
            if (dataMap.containsKey("uomid")) {
                pod.setUom((UnitOfMeasure) get(UnitOfMeasure.class, dataMap.get("uomid").toString()));
            }
            if (dataMap.containsKey("baseuomquantity") && dataMap.get("baseuomquantity") != null && dataMap.get("baseuomquantity") != "") {
                pod.setBaseuomquantity((Double) dataMap.get("baseuomquantity"));
//            } else {
//                if (dataMap.containsKey("quantity")) {
//                    pod.setBaseuomquantity((Double) dataMap.get("quantity"));
//                }
            }
            if (dataMap.containsKey("baseuomrate") && dataMap.get("baseuomrate") != null && dataMap.get("baseuomrate") != "") {
                pod.setBaseuomrate((Double) dataMap.get("baseuomrate"));
//            } else {
//                pod.setBaseuomrate(1);
            }
            if (dataMap.containsKey("discount") && dataMap.get("discount") != null) {
                pod.setDiscount((Double) dataMap.get("discount"));
            }
            if (dataMap.containsKey("discountispercent") && dataMap.get("discountispercent") != null) {
                pod.setDiscountispercent((Integer) dataMap.get("discountispercent"));
            } 
//          else {
//                pod.setDiscountispercent(1);
//          }
            if (dataMap.containsKey("remark")) {
                pod.setRemark(StringUtil.DecodeText(StringUtil.isNullOrEmpty((String) dataMap.get("remark")) ? "" : (String) dataMap.get("remark")));
            }
            if (dataMap.containsKey("shelfLocation")) {
                pod.setShelfLocation((String) dataMap.get("shelfLocation"));
            }
            if (dataMap.containsKey("desc")) {
                pod.setDescription((String) dataMap.get("desc"));
            }
            if (dataMap.containsKey("supplierpartnumber")) {
                pod.setSupplierpartnumber((String) dataMap.get("supplierpartnumber"));
            }
            if (dataMap.containsKey("SalesOrderDetailID")) {
                pod.setSalesorderdetailid((String) dataMap.get("SalesOrderDetailID"));
            }
            if (dataMap.containsKey("workorderdetailid")) {
                pod.setWorkorderdetailid((String) dataMap.get("workorderdetailid"));
            }
            if (dataMap.containsKey("VQDetail")) {
                VendorQuotationDetail quotationdetail = dataMap.get("VQDetail") == null ? null : (VendorQuotationDetail) get(VendorQuotationDetail.class, (String) dataMap.get("VQDetail"));
                pod.setVqdetail(quotationdetail);
            }
            if (dataMap.containsKey("PurchaseRequisitionDetailID")) {
                pod.setPurchaseRequisitionDetailId((String) dataMap.get("PurchaseRequisitionDetailID"));
            }
            if (dataMap.containsKey("dependentType")) {
                pod.setDependentType((String) dataMap.get("dependentType"));
            }
            if (dataMap.containsKey("inouttime")) {
                pod.setInouttime((String) dataMap.get("inouttime"));
            }
            if (dataMap.containsKey("showquantity")) {
                pod.setShowquantity((String) dataMap.get("showquantity"));
            }
            if (dataMap.containsKey("purchaseordercustomdataref")) {
                PurchaseOrderDetailsCustomData cmp = (dataMap.get("purchaseordercustomdataref") == null ? null : (PurchaseOrderDetailsCustomData) get(PurchaseOrderDetailsCustomData.class, (String) dataMap.get("purchaseordercustomdataref")));
                pod.setPoDetailCustomData(cmp);
            }
            if (dataMap.containsKey("companyid")) {
                Company cmp = (dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid")));
                pod.setCompany(cmp);
            }
            if (dataMap.containsKey("rowtaxid")) {
                Tax rowtax = (dataMap.get("rowtaxid") == null ? null : (Tax) get(Tax.class, (String) dataMap.get("rowtaxid")));
                pod.setTax(rowtax);
            }
            if (dataMap.containsKey("rowTaxAmount")) {
                double rowTaxAmount = (Double) dataMap.get("rowTaxAmount");
                pod.setRowTaxAmount(rowTaxAmount);
            }
            if (dataMap.containsKey("recTermAmount") && !StringUtil.isNullOrEmpty(dataMap.get("recTermAmount").toString())) {
                double recTermAmount = Double.parseDouble(dataMap.get("recTermAmount").toString());
                pod.setRowTermAmount(recTermAmount);
            }
            if (dataMap.containsKey("OtherTermNonTaxableAmount") && !StringUtil.isNullOrEmpty(dataMap.get("OtherTermNonTaxableAmount").toString())) {
                double OtherTermNonTaxableAmount = Double.parseDouble(dataMap.get("OtherTermNonTaxableAmount").toString());
                pod.setOtherTermNonTaxableAmount(OtherTermNonTaxableAmount);
            }
            if (dataMap.containsKey("invstoreid")) {
                pod.setInvstoreid((String) dataMap.get("invstoreid"));
            } else {
                pod.setInvstoreid("");
            }
            if (dataMap.containsKey("invlocationid")) {
                pod.setInvlocid((String) dataMap.get("invlocationid"));
            } else {
                pod.setInvlocid("");
            }
            if (dataMap.containsKey("priceSource") && dataMap.get("priceSource") != null) {
                pod.setPriceSource((String) dataMap.get("priceSource"));
            }
            if (dataMap.containsKey("pricingbandmasterid") && dataMap.get("pricingbandmasterid") != null) {
                pod.setPricingBandMasterid((String) dataMap.get("pricingbandmasterid"));
            }
            if (dataMap.containsKey("permit") && dataMap.get("permit") != null) {
                pod.setPermit((String) dataMap.get("permit"));
            }
            if (dataMap.containsKey("lineleveltermamount") && !StringUtil.isNullOrEmpty(dataMap.get("lineleveltermamount").toString())) {
                 double lineleveltermamount = Double.parseDouble(dataMap.get("lineleveltermamount").toString());
                pod.setLineLevelTermAmount(lineleveltermamount);
            }
            if (dataMap.containsKey("bomid")) {
                BOMDetail bomObj = (dataMap.get("bomid") == null ? null : (BOMDetail) get(BOMDetail.class, (String) dataMap.get("bomid")));
                pod.setBomcode(bomObj);
            }
            if (dataMap.containsKey(Constants.isUserModifiedTaxAmount) && dataMap.get(Constants.isUserModifiedTaxAmount) != null) {
                pod.setIsUserModifiedTaxAmount((boolean) dataMap.get(Constants.isUserModifiedTaxAmount));
            }
            saveOrUpdate(pod);
            list.add(pod);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.savePurchaseOrderDetails : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Purchase Order has been updated successfully", null, list, list.size());
    }
    /**
     * To save security gate entry details
     * @param dataMap
     * @return
     * @throws ServiceException 
     */
    public KwlReturnObject saveSecurityGateEntryDetails(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String podid = (String) dataMap.get("id");
            SecurityGateDetails segDetails = new SecurityGateDetails();
            if (!StringUtil.isNullOrEmpty(podid)) {
                segDetails = (SecurityGateDetails) get(SecurityGateDetails.class, podid);
            }

            if (dataMap.containsKey("poid")) {
                SecurityGateEntry securityGateEntry = dataMap.get("poid") == null ? null : (SecurityGateEntry) get(SecurityGateEntry.class, (String) dataMap.get("poid"));
                segDetails.setSecurityGateEntry(securityGateEntry);
            }
            if (dataMap.containsKey("securitygateentrycustomdataref")) {
                SecurityGateDetailsCustomData cmp = (dataMap.get("securitygateentrycustomdataref") == null ? null : (SecurityGateDetailsCustomData) get(SecurityGateDetailsCustomData.class, (String) dataMap.get("securitygateentrycustomdataref")));
                segDetails.setSgeDetailCustomData(cmp);
            }
            if (dataMap.containsKey("srno")) {
                segDetails.setSrno((Integer) dataMap.get("srno"));
            }
            if (dataMap.containsKey("productid")) {
                Product product = dataMap.get("productid") == null ? null : (Product) get(Product.class, (String) dataMap.get("productid"));
                segDetails.setProduct(product);
            }
            if (dataMap.containsKey("rate")) {
                segDetails.setRate((Double) dataMap.get("rate"));
            }
            if (dataMap.containsKey("rateIncludingGst")) {
                segDetails.setRateincludegst((Double) dataMap.get("rateIncludingGst"));
            }
            if (dataMap.containsKey("quantity")) {
                segDetails.setQuantity((Double) dataMap.get("quantity"));
            }
            if (dataMap.containsKey("balanceqty") && dataMap.get("balanceqty") != null && dataMap.get("balanceqty") != "") {
                segDetails.setBalanceqty((Double) dataMap.get("balanceqty"));
            }
            if (dataMap.containsKey("uomid")) {
                segDetails.setUom((UnitOfMeasure) get(UnitOfMeasure.class, dataMap.get("uomid").toString()));
            }
            if (dataMap.containsKey("baseuomquantity") && dataMap.get("baseuomquantity") != null && dataMap.get("baseuomquantity") != "") {
                segDetails.setBaseuomquantity((Double) dataMap.get("baseuomquantity"));
            }
            if (dataMap.containsKey("baseuomrate") && dataMap.get("baseuomrate") != null && dataMap.get("baseuomrate") != "") {
                segDetails.setBaseuomrate((Double) dataMap.get("baseuomrate"));
            }
            if (dataMap.containsKey("discount") && dataMap.get("discount") != null) {
                segDetails.setDiscount((Double) dataMap.get("discount"));
            }
            if (dataMap.containsKey("discountispercent") && dataMap.get("discountispercent") != null) {
                segDetails.setDiscountispercent((Integer) dataMap.get("discountispercent"));
            } 
            if (dataMap.containsKey("remark")) {
                segDetails.setRemark(URLDecoder.decode(StringUtil.isNullOrEmpty((String) dataMap.get("remark")) ? "" : (String) dataMap.get("remark"), "UTF-8"));
            }
            if (dataMap.containsKey("shelfLocation")) {
                segDetails.setShelfLocation((String) dataMap.get("shelfLocation"));
            }
            if (dataMap.containsKey("desc")) {
                segDetails.setDescription((String) dataMap.get("desc"));
            }
            if (dataMap.containsKey("supplierpartnumber")) {
                segDetails.setSupplierpartnumber((String) dataMap.get("supplierpartnumber"));
            }
            if (dataMap.containsKey("showquantity")) {
                segDetails.setShowquantity((String) dataMap.get("showquantity"));
            }
            if (dataMap.containsKey("companyid")) {
                Company cmp = (dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid")));
                segDetails.setCompany(cmp);
            }
            if (dataMap.containsKey("PurchaseOrderDetailID")) {
                PurchaseOrderDetail podetail = dataMap.get("PurchaseOrderDetailID") == null ? null : (PurchaseOrderDetail) get(PurchaseOrderDetail.class, (String) dataMap.get("PurchaseOrderDetailID"));
                segDetails.setPodetail(podetail);
            }
            if (dataMap.containsKey("rowtaxid")) {
                Tax rowtax = (dataMap.get("rowtaxid") == null ? null : (Tax) get(Tax.class, (String) dataMap.get("rowtaxid")));
                segDetails.setTax(rowtax);
            }
            if (dataMap.containsKey("rowTaxAmount")) {
                double rowTaxAmount = (Double) dataMap.get("rowTaxAmount");
                segDetails.setRowTaxAmount(rowTaxAmount);
            }
            if (dataMap.containsKey("recTermAmount") && !StringUtil.isNullOrEmpty(dataMap.get("recTermAmount").toString())) {
                double recTermAmount = Double.parseDouble(dataMap.get("recTermAmount").toString());
                segDetails.setRowTermAmount(recTermAmount);
            }
            if (dataMap.containsKey("OtherTermNonTaxableAmount") && !StringUtil.isNullOrEmpty(dataMap.get("OtherTermNonTaxableAmount").toString())) {
                double OtherTermNonTaxableAmount = Double.parseDouble(dataMap.get("OtherTermNonTaxableAmount").toString());
                segDetails.setOtherTermNonTaxableAmount(OtherTermNonTaxableAmount);
            }
            if (dataMap.containsKey("invstoreid")) {
                segDetails.setInvstoreid((String) dataMap.get("invstoreid"));
            } else {
                segDetails.setInvstoreid("");
            }
            if (dataMap.containsKey("invlocationid")) {
                segDetails.setInvlocid((String) dataMap.get("invlocationid"));
            } else {
                segDetails.setInvlocid("");
            }
            if (dataMap.containsKey("priceSource") && dataMap.get("priceSource") != null) {
                segDetails.setPriceSource((String) dataMap.get("priceSource"));
            }
            if (dataMap.containsKey("permit") && dataMap.get("permit") != null) {
                segDetails.setPermit((String) dataMap.get("permit"));
            }
            if (dataMap.containsKey("lineleveltermamount") && !StringUtil.isNullOrEmpty(dataMap.get("lineleveltermamount").toString())) {
                 double lineleveltermamount = Double.parseDouble(dataMap.get("lineleveltermamount").toString());
                segDetails.setLineLevelTermAmount(lineleveltermamount);
            }
            saveOrUpdate(segDetails);
            list.add(segDetails);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.savePurchaseOrderDetails : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Purchase Order has been updated successfully", null, list, list.size());
    }

    
    
    public KwlReturnObject savePurchaseOrderOtherDetails(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String podid = (String) dataMap.get("poid");
            POOtherDetails pod = new POOtherDetails();

            boolean isSave = false;

            if (dataMap.containsKey("poid")) {
                pod.setPurchaseOrderId(podid);
            }
            if (dataMap.containsKey("poyourref") && dataMap.get("poyourref") != null) {
                pod.setPoyourref((String) dataMap.get("poyourref"));
                isSave = true;
            }
            if (dataMap.containsKey("podelyterm") && dataMap.get("podelyterm") != null) {
                pod.setPodelyterm((String) dataMap.get("podelyterm"));
                isSave = true;
            }
            if (dataMap.containsKey("poinvoiceto") && dataMap.get("poinvoiceto") != null) {
                pod.setPoinvoiceto((String) dataMap.get("poinvoiceto"));
                isSave = true;
            }
            if (dataMap.containsKey("podelydate") && dataMap.get("podelydate") != null) {
                pod.setPodelydate((String) dataMap.get("podelydate"));
                isSave = true;
            }
            if (dataMap.containsKey("podept") && dataMap.get("podept") != null) {
                pod.setPodept((String) dataMap.get("podept"));
                isSave = true;
            }
            if (dataMap.containsKey("porequestor") && dataMap.get("porequestor") != null) {
                pod.setPorequestor((String) dataMap.get("porequestor"));
                isSave = true;
            }
            if (dataMap.containsKey("poproject") && dataMap.get("poproject") != null) {
                pod.setPoproject((String) dataMap.get("poproject"));
                isSave = true;
            }
            if (dataMap.containsKey("pomerno") && dataMap.get("pomerno") != null) {
                pod.setPomerno((String) dataMap.get("pomerno"));
                isSave = true;
            }
            if (dataMap.containsKey("companyid")) {
                Company cmp = (dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid")));
                pod.setCompany(cmp);
            }
            if (isSave) {
                saveOrUpdate(pod);
            }
            list.add(pod);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.savePurchaseOrderDetails : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Purchase Order has been updated successfully", null, list, list.size());
    }
    
    /**
     * Description : Method is used to save Expense PO Details     
     * @param Map<String, Object> dataMap:it contains details info to save data
     * @throws ServiceException
     */
    
    public KwlReturnObject saveExpensePurchaseOrderDetails(Map<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            ExpensePODetail epod = new ExpensePODetail();

            if (dataMap.containsKey("srno") && dataMap.get("srno") != null) {
                epod.setSrno((Integer) dataMap.get("srno"));
            }
            if (dataMap.containsKey("rate") && dataMap.get("rate") != null) {
                epod.setRate((Double) dataMap.get("rate"));
            }
            if (dataMap.containsKey("isdebit") && dataMap.get("isdebit") != null) {
                epod.setIsdebit((Boolean) dataMap.get("isdebit"));
            }
            if (dataMap.containsKey("rateincludinggstex") && dataMap.get("rateincludinggstex") != null) {
                epod.setRateIncludingGst((Double) dataMap.get("rateincludinggstex"));
            }
            if (dataMap.containsKey("calamount") && dataMap.get("calamount") != null) {
                epod.setAmount((Double) dataMap.get("calamount"));
            }
            if (dataMap.containsKey("desc") && dataMap.get("desc") != null) {
                epod.setDescription((String) dataMap.get("desc"));
            }
            if (dataMap.containsKey("rowtaxamount") && dataMap.get("rowtaxamount") != null) {
                epod.setRowTaxAmount((Double) dataMap.get("rowtaxamount"));
            }
            if (dataMap.containsKey("poid") && dataMap.get("poid") != null) {
                PurchaseOrder po = StringUtil.isNullOrEmpty(dataMap.get("poid").toString()) ? null : (PurchaseOrder) get(PurchaseOrder.class, (String) dataMap.get("poid"));
                epod.setPurchaseOrder(po);
            }
            if (dataMap.containsKey("taxid") && dataMap.get("taxid") != null) {
                Tax tax = StringUtil.isNullOrEmpty(dataMap.get("taxid").toString()) ? null : (Tax) get(Tax.class, (String) dataMap.get("taxid"));
                epod.setTax(tax);
            }
            if (dataMap.containsKey("discountid") && dataMap.get("discountid") != null) {
                Discount discount = StringUtil.isNullOrEmpty(dataMap.get("discountid").toString()) ? null : (Discount) get(Discount.class, (String) dataMap.get("discountid"));
                epod.setDiscount(discount);
            }
            if (dataMap.containsKey("accountid") && dataMap.get("accountid") != null) {
                Account account = StringUtil.isNullOrEmpty(dataMap.get("accountid").toString()) ? null : (Account) get(Account.class, (String) dataMap.get("accountid"));
                epod.setAccount(account);
            }
            if (dataMap.containsKey("companyid") && dataMap.get("companyid") != null) {
                Company cmp = StringUtil.isNullOrEmpty(dataMap.get("companyid").toString()) ? null : (Company) get(Company.class, (String) dataMap.get("companyid"));
                epod.setCompany(cmp);
            }
            if (dataMap.containsKey(Constants.BALANCE_Amount) && dataMap.get(Constants.BALANCE_Amount) != null) {
                epod.setBalAmount((Double) dataMap.get(Constants.BALANCE_Amount));
            }
            if (dataMap.containsKey(Constants.isUserModifiedTaxAmount) && dataMap.get(Constants.isUserModifiedTaxAmount) != null) {
                epod.setIsUserModifiedTaxAmount((boolean) dataMap.get(Constants.isUserModifiedTaxAmount));
            }
            save(epod);
            list.add(epod);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.saveExpensePurchaseOrderDetails : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

//    public KwlReturnObject savePODetails(JSONArray podjarr, String poid, String companyid, boolean issave) throws ServiceException {
//        List list = new ArrayList();
//        try {
//            HashSet podetails = new HashSet();
//            for (int i = 0; i < podjarr.length(); i++) {
//                JSONObject jobj = podjarr.getJSONObject(i);
//                PurchaseOrderDetail pod = new PurchaseOrderDetail();
//                if (jobj.has("productid")) {
//                    pod.setProduct((Product) get(Product.class, jobj.getString("productid")));
//                }
//                if (jobj.has("rate")) {
//                    pod.setRate(jobj.getDouble("rate"));
//                }
//                if (jobj.has("quantity")) {
//                    pod.setQuantity(jobj.getDouble("quantity"));
//                }
//                if (jobj.has("remark")) {
//                    pod.setRemark(jobj.optString("remark"));
//                }
//                if (poid != null) {
//                    pod.setPurchaseOrder((PurchaseOrder) get(PurchaseOrder.class, poid));
//                }
//                if (companyid != null) {
//                    pod.setCompany((Company) get(Company.class, companyid));
//                }
//                if (issave) {
//                    saveOrUpdate(pod);
//                }
//                podetails.add(pod);
//            }
//            list.add(podetails);
//        } catch (Exception ex) {
//            throw ServiceException.FAILURE("accPurchaseOrderImpl.savePODetails : " + ex.getMessage(), ex);
//        }
//        return new KwlReturnObject(true, null, null, list, list.size());
//    }

    public KwlReturnObject getPurchaseOrders(HashMap<String, Object> request) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        try {
//            KWLCurrency kwlcurrency = (KWLCurrency) get(KWLCurrency.class, (String) request.get("currencyid"));
            DateFormat df = (DateFormat) request.get(Constants.df);
            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            String ss = (String) request.get(Constants.ss);
            boolean exceptFlagINV = false;
            boolean exceptFlagORD = false;
            boolean isConsignment = false;
            boolean isMRPJOBWORKIN = false;
            boolean isMRPJOBWORKOUT = false;
            boolean isJobWorkOrderReciever = false;
            boolean isjobworkwitoutgrn = false;
            boolean isDraft = false;
            
            boolean isFixedAsset = false;
            ArrayList params = new ArrayList();

            if (request.containsKey("exceptFlagINV") && request.get("exceptFlagINV") != null) {
                exceptFlagINV = Boolean.parseBoolean((String) request.get("exceptFlagINV"));
            }
            if (request.containsKey("isjobworkwitoutgrn") && request.get("isjobworkwitoutgrn") != null) {
                isjobworkwitoutgrn =(Boolean) request.get("isjobworkwitoutgrn");
            }

            if (request.containsKey("exceptFlagORD") && request.get("exceptFlagORD") != null) {
                exceptFlagORD = Boolean.parseBoolean((String) request.get("exceptFlagORD"));
            }
            if (request.containsKey("isConsignment") && request.get("isConsignment") != null) {
                isConsignment = (Boolean) request.get("isConsignment");
            }
            if (request.containsKey("isMRPJOBWORKIN") && request.get("isMRPJOBWORKIN") != null) {
                isMRPJOBWORKIN = (Boolean) request.get("isMRPJOBWORKIN");
            }
            if (request.containsKey("isMRPJOBWORKOUT") && request.get("isMRPJOBWORKOUT") != null) {
                isMRPJOBWORKOUT = (Boolean) request.get("isMRPJOBWORKOUT");
            }
            if (request.containsKey("isJobWorkOrderReciever") && request.get("isJobWorkOrderReciever") != null) {
                isJobWorkOrderReciever = (Boolean) request.get("isJobWorkOrderReciever");
            }
            if (request.containsKey("isFixedAsset") && request.get("isFixedAsset") != null) {
                isFixedAsset = (Boolean) request.get("isFixedAsset");
            }
            if (request.containsKey(Constants.isDraft) && request.get(Constants.isDraft) != null) {
                isDraft = (Boolean) request.get(Constants.isDraft);
            }
            String linkTransactionId = "";
            /*----When Generating SO from PO & add more option is true in Account preferences then  linkTransactionId is Purchase Order id through which SO is being created-----*/
            if (request.containsKey("linkTransactionId") && request.get("linkTransactionId") != null) {
                linkTransactionId = (String) request.get("linkTransactionId");
            }
            params.add((String) request.get(Constants.companyKey));
            String condition = " where deleted=false and company.companyID=?";
            if (!StringUtil.isNullOrEmpty(ss)) {
                for (int i = 0; i < 3; i++) {
                    params.add("%" + ss + "%");
                }
                condition += " and (purchaseOrderNumber like ? or po.memo like ? or po.vendor.name like ? )";
            }
            String costCenterId = (String) request.get(CCConstants.REQ_costCenterId);
            if (!StringUtil.isNullOrEmpty(costCenterId)) {
                params.add(costCenterId);
                condition += " and po.costcenter.ID=?";
            }
            String vendorId = (String) request.get(CCConstants.REQ_vendorId);
            if (!StringUtil.isNullOrEmpty(vendorId)) {
                params.add(vendorId);
                condition += " and po.vendor.ID=?";
            }
            
            if (exceptFlagINV && !isjobworkwitoutgrn) {
                if (request.containsKey("requestModuleid") && request.get("requestModuleid").equals(Constants.Acc_SecurityGateEntry_ModuleId)) {
                    condition += " and ( po.linkflag = 0 or po.linkflag = 1 or po.linkflag = 3 ) and isopen='T' and po.isPOClosed='F'";
                } else {
                    condition += " and ( po.linkflag = 0 or po.linkflag = 1 ) and isopen='T' and po.isPOClosed='F'";
                }
            }
            if (isFixedAsset) {
                condition += "  and po.fixedAssetPO=1 ";
            } else {
                condition += " and po.fixedAssetPO= 0 ";
            }
            if (isConsignment) {
                condition += "  and po.isconsignment='T' ";
            } else {
                condition += " and po.isconsignment='F' ";
            }
            if (isMRPJOBWORKIN || isMRPJOBWORKOUT) {
                condition += "  and po.isMRPJobWorkOut='T' ";
            } else {
                condition += " and po.isMRPJobWorkOut='F' ";
            }
            if (isJobWorkOrderReciever) {
                condition += "  and po.isJobWorkOutOrder='T' ";
            } else {
                condition += " and po.isJobWorkOutOrder='F' ";
            }
            if (isDraft) {
                condition += "  and po.isDraft='T' ";
            } else {
                condition += " and po.isDraft='F' ";
            }
            if (exceptFlagORD && !isjobworkwitoutgrn) {
                condition += " and ( po.linkflag = 0 or po.linkflag = 2 ) and isopen='T' and po.isPOClosed='F'";
            }
            if (request.containsKey("includingGSTFilter") && request.get("includingGSTFilter") != null) {
                condition += " and po.gstIncluded = ?";
                params.add((Boolean) request.get("includingGSTFilter"));
            }
            if (request.containsKey("currencyfilterfortrans") && request.get("currencyfilterfortrans") != null) {
                String currencyfilterfortrans = (String) request.get("currencyfilterfortrans");
                if (!StringUtil.isNullOrEmpty(currencyfilterfortrans)) {
                    condition += " and po.currency.currencyID = ?";
                    params.add(currencyfilterfortrans);
                }
            }
            
            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                condition += " and (po.orderDate >=? and po.orderDate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            if (request.containsKey("billId") && request.get("billId") != null) {
                String billid = (String) request.get("billId");
                if (!StringUtil.isNullOrEmpty(billid)) {
                    if (billid.contains(",")) {
                        String poids = AccountingManager.getFilterInString(billid);
                        condition += " and po.ID in " + poids;
                    } else {
                        condition += " and po.ID=?";
                        params.add(billid);
                    }
                }
            }
            
            String orderBy = "";
            if (request.containsKey("dir") && request.containsKey("sort")) {
                String Col_Name = request.get("sort").toString();
                String Col_Dir = request.get("dir").toString();
                orderBy += "order by po.purchaseOrderNumber "+Col_Dir;

            } 
            /*
             * Fetching PO in SO if PO is not disabled and not expensetype for SO
             */
            if (request.containsKey("requestModuleid") && request.get("requestModuleid") != null) {
                if (request.get("requestModuleid").equals(Constants.Acc_Sales_Order_ModuleId)) {//when call came from sales order
                    condition += " and po.disabledPOforSO= 'F' ";
                    condition += " and po.isExpenseType= 'F' ";
               }else if(request.containsKey("requestModuleid")&&(request.get("requestModuleid").equals(Constants.Acc_Goods_Receipt_ModuleId)||request.get("requestModuleid").equals(Constants.Acc_SecurityGateEntry_ModuleId))){//when call came from GR
                    condition += " and po.isExpenseType= 'F' ";
                }
                
            }
            if(request.containsKey("requestModuleid")&&request.get("requestModuleid").equals(Constants.Acc_SecurityGateEntry_ModuleId)){
                condition += " and po.pendingapproval= 0 and po.approvestatuslevel =11 and po.istemplate != 2";
            }else{
                condition += " and po.pendingapproval= 0 and po.approvestatuslevel =11 and po.istemplate != 2 and po.isPoUsed='F'";
            }
             
            String query = "from PurchaseOrder po" + condition+orderBy;
            list = executeQuery( query, params.toArray());
            count = list.size();
            if (!StringUtil.isNullOrEmpty(start) && StringUtil.isNullOrEmpty(limit) == false) {
                list = executeQueryPaging( query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
            /*When addmore option is enable from Account preferences & Generating SO from PO then 
             linking PO record(PO->SO) will be available in those 10 records
             */
            if (!StringUtil.isNullOrEmpty(linkTransactionId)) {
                List transactionList = new ArrayList();
                params.clear();
                params.add(linkTransactionId);

                query = "from PurchaseOrder po where po.ID=?";
                transactionList = executeQuery(query, params.toArray());
                if (transactionList.size() > 0 && !list.contains(transactionList.get(0))) {
                    list.set(list.size() - 1, transactionList.get(0));
                }             
            }
            
            
            
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getPurchaseOrders : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
    public KwlReturnObject getSecurityGateEntry(HashMap<String, Object> request) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        try {
            DateFormat df = (DateFormat) request.get(Constants.df);
            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            String ss = (String) request.get(Constants.ss);
            boolean exceptFlagORD = false;
            ArrayList params = new ArrayList();
            params.add((String) request.get(Constants.companyKey));
            String condition = " where sge.deleted=false and sge.company.companyID=?";
            if (!StringUtil.isNullOrEmpty(ss)) {
                for (int i = 0; i < 3; i++) {
                    params.add("%" + ss + "%");
                }
                condition += " and (securityNumber like ? or sge.memo like ? or sge.vendor.name like ? )";
            }
            String costCenterId = (String) request.get(CCConstants.REQ_costCenterId);
            if (!StringUtil.isNullOrEmpty(costCenterId)) {
                params.add(costCenterId);
                condition += " and sge.costcenter.ID=?";
            }
            if (request.containsKey("exceptFlagORD") && request.get("exceptFlagORD") != null) {
                exceptFlagORD = Boolean.parseBoolean((String) request.get("exceptFlagORD"));
            }
            if (exceptFlagORD) {
                condition += " and ( sge.linkflag = 0 or sge.linkflag = 2 ) and isopen='T' and sge.isPOClosed='F'";
            }
            String vendorId = (String) request.get(CCConstants.REQ_vendorId);
            if (!StringUtil.isNullOrEmpty(vendorId)) {
                params.add(vendorId);
                condition += " and sge.vendor.ID=?";
            }
            if (request.containsKey("includingGSTFilter") && request.get("includingGSTFilter") != null) {
                condition += " and sge.gstIncluded = ?";
                params.add((Boolean) request.get("includingGSTFilter"));
            }
            if (request.containsKey("currencyfilterfortrans") && request.get("currencyfilterfortrans") != null) {
                String currencyfilterfortrans = (String) request.get("currencyfilterfortrans");
                if (!StringUtil.isNullOrEmpty(currencyfilterfortrans)) {
                    condition += " and sge.currency.currencyID = ?";
                    params.add(currencyfilterfortrans);
                }
            }

            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                condition += " and (sge.securityDate >=? and sge.securityDate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            if (request.containsKey("billId") && request.get("billId") != null) {
                String billid = (String) request.get("billId");
                if (!StringUtil.isNullOrEmpty(billid)) {
                    if (billid.contains(",")) {
                        String poids = AccountingManager.getFilterInString(billid);
                        condition += " and sge.ID in " + poids;
                    } else {
                        condition += " and sge.ID=?";
                        params.add(billid);
                    }
                }
            }
            
            String orderBy = "";
            if (request.containsKey("dir") && request.containsKey("sort")) {
                String Col_Name = request.get("sort").toString();
                String Col_Dir = request.get("dir").toString();
                orderBy += "order by sge.securityNumber "+Col_Dir;

            } 
            String query = "from SecurityGateEntry sge" + condition+orderBy;
            list = executeQuery( query, params.toArray());
            count = list.size();
            if (!StringUtil.isNullOrEmpty(start) && StringUtil.isNullOrEmpty(limit) == false) {
                list = executeQueryPaging( query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getSecurityGateEntry : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
    public KwlReturnObject getPurchaseOrdersIDForDiamondAviation(String VquotationID,String company) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        try {

            ArrayList params = new ArrayList();
            if (!StringUtil.isNullOrEmpty(VquotationID)){
                params.add(VquotationID);
                params.add(company);
                String query = "select purchaseorder from podetails where vqdetail = ? and company = ?";
                list = executeSQLQuery( query, params.toArray());
                count = list.size();
            }

        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getPurchaseOrders : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
    
    public KwlReturnObject getPurchaseOrdersDetailsIDForDiamondAviation(String VquotationID,String company) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        try {

            ArrayList params = new ArrayList();
            if (!StringUtil.isNullOrEmpty(VquotationID)){
                params.add(VquotationID);
                params.add(company);
                String query = "select id from podetails where vqdetail = ? and company = ?";
                list = executeSQLQuery( query, params.toArray());
                count = list.size();
            }

        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getPurchaseOrders : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
    
    public KwlReturnObject getPurchaseOrdersDetailsIDFromPO(String poID,String company) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        try {

            ArrayList params = new ArrayList();
            if (!StringUtil.isNullOrEmpty(poID)){
                params.add(poID);
                params.add(company);
                String query = "select id from podetails where purchaseorder = ? and company = ?";
                list = executeSQLQuery( query, params.toArray());
                count = list.size();
            }

        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getPurchaseOrders : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
    
    public String[] columSort(String Col_Name, String Col_Dir) throws ServiceException {
        String[] String_Sort = new String[3];
        if (Col_Name.equals("personname")) {
            String_Sort[0] = " order by name " + Col_Dir;
            String_Sort[1] = ", vendor.name ";
            String_Sort[2] = ", vendor.name ";
        } else if (Col_Name.equals("billno")) {
            String_Sort[0] = " order by ponumber " + Col_Dir;
            String_Sort[1] = ",purchaseorder.ponumber ";
            String_Sort[2] = ", billingpurchaseorder.ponumber ";

        } else if (Col_Name.equals("date")) {
            String_Sort[0] = " order by orderdate " + Col_Dir;
            String_Sort[1] = ", purchaseorder.orderdate";
            String_Sort[2] = ", billingpurchaseorder.orderdate";

        } else if (Col_Name.equals("duedate")) {
            String_Sort[0] = " order by duedate " + Col_Dir;
            String_Sort[1] = ", purchaseorder.duedate  ";
            String_Sort[2] = ", billingpurchaseorder.duedate ";

        }  else if (Col_Name.equals("agentname")){
            String_Sort[0] = " order by value " + Col_Dir;
            String_Sort[1] = ", masteritem.value ";
            String_Sort[2] = ", ''  as value ";
        } else if (Col_Name.equals("createdon")){
             //Sorting on order date as well as on creation time to pick latest created PO.
            String_Sort[0] = " order by orderdate "+Col_Dir+",createdon " + Col_Dir;
            String_Sort[1] = ", purchaseorder.orderdate,purchaseorder.createdon";
            String_Sort[2] = ", billingpurchaseorder.orderdate";
        }else if (Col_Name.equals("aliasname")){
            String_Sort[0] = " order by aliasname " + Col_Dir;
            String_Sort[1] = ", vendor.aliasname ";
            String_Sort[2] = ", vendor.aliasname ";
        }else {
            String_Sort[0] = " order by orderdate " + Col_Dir;
            String_Sort[1] = ", purchaseorder.orderdate";
            String_Sort[2] = ", billingpurchaseorder.orderdate";
        }
        return String_Sort;

    }
    public String[] columSortOnPR(String Col_Name, String Col_Dir) throws ServiceException {
        String[] String_Sort = new String[1];
        if (Col_Name.equals("prno")) {
            String_Sort[0] = " order by purchaserequisition.prnumber " + Col_Dir;
        } else if (Col_Name.equals("duedate")){
            String_Sort[0] = " order by purchaserequisition.duedate " + Col_Dir;
        } else {
            String_Sort[0] = " order by purchaserequisition.requisitiondate " + Col_Dir;
        }
        return String_Sort;
    }

    public KwlReturnObject getPurchaseOrdersMerged(HashMap<String, Object> request) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        try {
//            KWLCurrency kwlcurrency = (KWLCurrency) get(KWLCurrency.class, (String) request.get("currencyid"));
            DateFormat df = (DateFormat) request.get(Constants.df);
            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            String ss = (String) request.get(Constants.ss);
            String moduleid = "";
            if (request.containsKey(Constants.moduleid) && request.get(Constants.moduleid) != null) {
                moduleid = request.get(Constants.moduleid).toString();
            }
            String productid = "";
            if (request.containsKey(Constants.productid) && request.get(Constants.productid) != null) {
                productid = (String) request.get(Constants.productid);
            }

            String productCategoryid = "";
            if (request.containsKey(Constants.productCategoryid) && request.get(Constants.productCategoryid) != null) {
                productCategoryid = (String) request.get(Constants.productCategoryid);
            }
            
            String userID = "";
            if (request.containsKey("userid") && request.get("userid") != null && !StringUtil.isNullOrEmpty(request.get("userid").toString())) {
                userID = (String) request.get("userid");
            }
            
            String projectid = "";
            if (request.containsKey("projectid") && request.get("projectid") != null) {
                projectid = (String) request.get("projectid");
            }
            String searchString = "";
            if (request.containsKey("searchString") && request.get("searchString") != null) {
                searchString = (String) request.get("searchString");
            }
            
            boolean isenableSalesPersonAgentFlow = false;
            if (request.containsKey("enablesalespersonagentflow") && request.get("enablesalespersonagentflow") != null && !StringUtil.isNullOrEmpty(request.get("enablesalespersonagentflow").toString())) {
                isenableSalesPersonAgentFlow = Boolean.parseBoolean(request.get("enablesalespersonagentflow").toString());

            }
            
            String newvendorid = "";
            if (request.containsKey(Constants.newvendorid) && request.get(Constants.newvendorid) != null) {
                newvendorid = (String) request.get(Constants.newvendorid);
            }
            boolean isForTemplate = false;
            boolean isfavourite = false;
            boolean isOpeningBalanceOrder = false;
            boolean isCustomFieldAdvSearch = false;
            boolean isConsignment = false;
            boolean issopoclosed = false;
            boolean isMRPJOBWORKOUT = false;
            /*
             * isJobWorkOutRemain is true if sales invoice is creating from Aged order work report.
             */
            boolean isJobWorkWithoutGRN = false;
            boolean isJobWorkOrderReciever = false;
            boolean includeAllRec = true;
            boolean bulkInv = false;
            if (request.containsKey("bulkInv") && request.get("bulkInv") != null) {
                bulkInv = Boolean.parseBoolean(request.get("bulkInv").toString());
            }
            if (request.containsKey("isConsignment") && request.get("isConsignment") != null) {
                isConsignment = (Boolean) request.get("isConsignment");
            }
            if (request.containsKey("isMRPJOBWORKOUT") && request.get("isMRPJOBWORKOUT") != null) {
                isMRPJOBWORKOUT = (Boolean) request.get("isMRPJOBWORKOUT");
            }
            /*
             * isJobWorkOutRemain is true if sales invoice is creating from Aged order work report.
             */
            if (request.containsKey("isJobWorkWithoutGRN") && request.get("isJobWorkWithoutGRN") != null) {
                isJobWorkWithoutGRN = (Boolean) request.get("isJobWorkWithoutGRN");
            }
            if (request.containsKey("isJobWorkOrderReciever") && request.get("isJobWorkOrderReciever") != null) {
                isJobWorkOrderReciever = (Boolean) request.get("isJobWorkOrderReciever");
            }
            boolean isFixedAsset = false;
            if (request.containsKey("isFixedAsset") && request.get("isFixedAsset") != null) {
                isFixedAsset = (Boolean) request.get("isFixedAsset");
            }
            
            String billId = "";
            ArrayList params = new ArrayList();
            ArrayList paramsSQLWithoutInv = new ArrayList();
            params.add((String) request.get(Constants.companyKey));
            paramsSQLWithoutInv.add((String) request.get(Constants.companyKey));
            
            boolean pendingapproval = false;
            if(request.get("pendingapproval")!=null){
                pendingapproval =(Boolean) request.get("pendingapproval");
            }
            
            boolean deleted = Boolean.parseBoolean((String) request.get("deleted"));
            boolean nondeleted = Boolean.parseBoolean((String) request.get("nondeleted"));
            if (request.get("isOpeningBalanceOrder") != null) {
                isOpeningBalanceOrder = (Boolean) request.get("isOpeningBalanceOrder");
            }
            boolean isProductView = false;
            if (request.containsKey("isProductView") && request.get("isProductView") != null) {
                isProductView = (boolean) request.get("isProductView");
            }
            if (request.get(Constants.MARKED_FAVOURITE) != null) {
                isfavourite = Boolean.parseBoolean((String) request.get(Constants.MARKED_FAVOURITE));
            }
            boolean isprinted = false;
            if (request.get(Constants.MARKED_PRINTED) != null) {
                isprinted = Boolean.parseBoolean((String) request.get(Constants.MARKED_PRINTED));
            }
            if (request.containsKey("isForTemplate") && request.get("isForTemplate") != null) {
                isForTemplate = Boolean.parseBoolean(request.get("isForTemplate").toString());
            }
            if (request.containsKey("includeAllRec") && request.get("includeAllRec") != null) {
                includeAllRec = Boolean.parseBoolean(request.get("includeAllRec").toString());
            }
            boolean unblockedDocuments=false;
            if (request.containsKey("unblockedDocuments") && request.get("unblockedDocuments") != null) {
                unblockedDocuments = Boolean.parseBoolean(request.get("unblockedDocuments").toString());
            } 
            boolean blockedDocuments=false;
            if (request.containsKey("blockedDocuments") && request.get("blockedDocuments") != null) {
                blockedDocuments = Boolean.parseBoolean(request.get("blockedDocuments").toString());
            } 
           
            String vendorCategoryid = "";
            if (request.containsKey(Constants.customerCategoryid) && request.get(Constants.customerCategoryid) != null) {
                vendorCategoryid = (String) request.get(Constants.customerCategoryid);
            }
            String userDepartment = "";
            if (request.containsKey("userDepartment") && request.get("userDepartment") != null) {
                userDepartment = (String) request.get("userDepartment");
            }
            
            if (request.containsKey("issopoclosed") && request.get("issopoclosed") != null) {
                issopoclosed = Boolean.FALSE.parseBoolean(String.valueOf(request.get("issopoclosed")));
            }
            String conditionSQL = "";
            String conditionSQLWithoutInv = "";
            if (nondeleted) {
                conditionSQL = "  where purchaseorder.deleteflag='F' and purchaseorder.company=? ";
                conditionSQLWithoutInv = "where billingpurchaseorder.deleteflag='F' and billingpurchaseorder.company=?";
            } else if (deleted) {

                conditionSQL += " where purchaseorder.deleteflag='T' and purchaseorder.company=? ";
                conditionSQLWithoutInv += " billingpurchaseorder.deleteflag='T' and billingpurchaseorder.company=? ";
            } else {
                // String condition = " where deleted=false and company.companyID=?";
                conditionSQL += " where purchaseorder.company=?";
                conditionSQLWithoutInv += "where billingpurchaseorder.company=?";
            }
            if (request.containsKey("linknumber") && request.get("linknumber") != null && !request.get("linknumber").toString().equals("")) {
                conditionSQL += " and purchaseorder.ponumber = ? ";
                params.add(request.get("linknumber"));
            }
            //fetch isDraft flag from request
            boolean isDraft = false;
            if (request.containsKey(Constants.isDraft) && request.get(Constants.isDraft) != null) {
                isDraft = (Boolean) request.get(Constants.isDraft);
            }
            //Append isDraft condition in query for fetching particular draft transactions
            if (isDraft) {
                params.add(true);
                conditionSQL += " and purchaseorder.isdraft = ? ";
            } else {
                params.add(false);
                conditionSQL += " and purchaseorder.isdraft = ? ";
            }
            /*
             * isJobWorkOutRemain is true if sales invoice is creating from Aged order work report.
             */
            if(isJobWorkWithoutGRN){
                conditionSQL += " and purchaseorder.linkflag!=2 and  purchaseorder.isopen='T'  and  purchaseorder.ispoclosed='F' and  purchaseorder.deleteflag='F' ";
            }
            if(issopoclosed){
             conditionSQL+=" and purchaseorder.ispoclosed='F' ";
             }
            
            if (request.containsKey("isfromsearchwin") && request.get("isfromsearchwin")!=null && (boolean) request.get("isfromsearchwin")) {
                if ((boolean) request.get("closeflagForLink")) { 
                  conditionSQL+=" and purchaseorder.isopen='T' ";
                }
            }
            
//            String condition = " where deleted=false and company.companyID=?";
//            String conditionSQL = " where purchaseorder.deleteflag='F' and purchaseorder.company = ?";
//            String conditionSQLWithoutInv = " where deleteflag='F' and billingpurchaseorder.company=?";
            String searchJoin = "";
            if (!StringUtil.isNullOrEmpty(ss)) {
                String[] searchcol = new String[]{"purchaseorder.ponumber", "purchaseorder.memo", "purchaseorder.supplierinvoiceno", "vendor.name","vendor.aliasname",
                    "bsaddr.billingaddress", "bsaddr.billingcountry", "bsaddr.billingstate", "bsaddr.billingcity", "bsaddr.billingemail", "bsaddr.billingpostal",
                    "bsaddr.shippingaddress", "bsaddr.shippingCountry", "bsaddr.shippingstate", "bsaddr.shippingcity", "bsaddr.shippingemail", "bsaddr.shippingpostal","product.name","product.productid"};
                Map SearchStringMap = StringUtil.insertParamSearchStringMap(params, ss, 19);
                StringUtil.insertParamSearchString(SearchStringMap);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                conditionSQL += searchQuery;
                searchJoin = " left join podetails on podetails.purchaseorder = purchaseorder.id "
                           + " left join product on product.id = podetails.product"
                           + " inner join billingshippingaddresses bsaddr on bsaddr.id=purchaseorder.billingshippingaddresses ";

                searchcol = new String[]{"billingpurchaseorder.ponumber", "billingpurchaseorder.memo", "vendor.name", "vendor.aliasname"};
                SearchStringMap = StringUtil.insertParamSearchStringMap(paramsSQLWithoutInv, ss, 4);
                StringUtil.insertParamSearchString(SearchStringMap);
                searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                conditionSQLWithoutInv += searchQuery;

//                for (int i = 0; i < 3; i++) {
//                    params.add(ss + "%");
//                    paramsSQLWithoutInv.add(ss + "%");
//                }
//                condition += " and (purchaseOrderNumber like ? or po.memo like ? or po.vendor.name like ? )";
//                conditionSQL += " and (purchaseorder.ponumber like ? or purchaseorder.memo like ? or vendor.name like ? )";
//                conditionSQLWithoutInv += " and (billingpurchaseorder.ponumber like ? or billingpurchaseorder.memo like ? or vendor.name like ? )";
            }

            if (request.containsKey("billId")) {
                billId = (String) request.get("billId");
                if (!StringUtil.isNullOrEmpty(billId)) {
                    params.add(billId);
                    paramsSQLWithoutInv.add(billId);
                    conditionSQL += " and purchaseorder.id=? ";
                    conditionSQLWithoutInv += " and billingpurchaseorder.id=? ";
                }
            }

            String costCenterId = (String) request.get(CCConstants.REQ_costCenterId);
            if (!StringUtil.isNullOrEmpty(costCenterId)) {
                params.add(costCenterId);
                paramsSQLWithoutInv.add(costCenterId);
                //  condition += " and po.costcenter.ID=?";
                conditionSQL += " and costcenter.id=?";
                conditionSQLWithoutInv += " and costcenter.id=?";
            }
            
            String startDate = request.get(Constants.REQ_startdate)!=null? StringUtil.DecodeText((String) request.get(Constants.REQ_startdate)):(String) request.get(Constants.REQ_startdate);
            String endDate = request.get(Constants.REQ_enddate)!=null? StringUtil.DecodeText((String) request.get(Constants.REQ_enddate)):(String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                //   condition += " and (po.orderDate >=? and po.orderDate <=?)";
                conditionSQL += " and (purchaseorder.orderdate >=? and purchaseorder.orderdate <=?)";
                conditionSQLWithoutInv += " and (billingpurchaseorder.orderdate >=? and billingpurchaseorder.orderdate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
                paramsSQLWithoutInv.add(df.parse(startDate));
                paramsSQLWithoutInv.add(df.parse(endDate));
            }
            if (isfavourite) {
                conditionSQL += " and purchaseorder.favouriteflag=true ";
                conditionSQLWithoutInv += " and billingpurchaseorder.favouriteflag=true ";
            }
            if (isprinted) {
                conditionSQL += " and purchaseorder.printedflag=true ";
            }
            if (isOpeningBalanceOrder) {
                conditionSQL += " and purchaseorder.isopeningbalencepo=true ";
            } else if(!includeAllRec && !unblockedDocuments && !blockedDocuments){
                conditionSQL += " and purchaseorder.isopeningbalencepo=false ";
            }
            
            if(isConsignment) {
                conditionSQL += " and (purchaseorder.isconsignment='T') ";
            }else{
                conditionSQL += " and (purchaseorder.isconsignment='F') ";
            }
            
            if(isMRPJOBWORKOUT) {
                conditionSQL += " and (purchaseorder.ismrpjobworkout='T') ";
            }else{
                conditionSQL += " and (purchaseorder.ismrpjobworkout='F') ";
            }
            if (isJobWorkOrderReciever) {
                conditionSQL += " and (purchaseorder.isjobworkoutorder='T') ";
            } else {
                conditionSQL += " and (purchaseorder.isjobworkoutorder='F') ";
            } 
            if (isFixedAsset) {
                conditionSQL += " and purchaseorder.isfixedassetpo = true ";
            } else {
                conditionSQL += " and purchaseorder.isfixedassetpo = false ";
            }
            if (bulkInv) {
                conditionSQL += " and purchaseorder.linkflag!=2 and  purchaseorder.isopen='T' and  purchaseorder.isexpensetype='F' and  purchaseorder.ispoclosed='F' and  purchaseorder.deleteflag='F' ";
            }
            String innerQuery = "";
            if (!StringUtil.isNullOrEmpty(productid)) {
                params.add(productid);
                innerQuery = " inner join podetails pd on pd.purchaseorder = purchaseorder.id ";
                conditionSQL += " and pd.product = ? ";
                conditionSQLWithoutInv += " and  billingpurchaseorder.vendor = '' ";

            }

            if (!StringUtil.isNullOrEmpty(productCategoryid)) {
                params.add(productCategoryid);
                innerQuery = " inner join podetails on podetails.purchaseorder = purchaseorder.id ";
                conditionSQL += " and podetails.product in (select productid from productcategorymapping where productcategory = ?) ";
                conditionSQLWithoutInv += " and  billingpurchaseorder.vendor = '' ";

            }
            
            if (!StringUtil.isNullOrEmpty(projectid) && !StringUtil.isNullOrEmpty(searchString)) {
                innerQuery = " inner join purchaseordercustomdata on purchaseordercustomdata.poID=purchaseorder.purchaseordercustomdataref  ";
                conditionSQL += searchString;

            }

            if (!StringUtil.isNullOrEmpty(newvendorid)) {
                if (newvendorid.contains(",")) {
                    newvendorid = AccountingManager.getFilterInString(newvendorid);
                    conditionSQL += " and purchaseorder.vendor IN(" + newvendorid + ")";
                    conditionSQLWithoutInv += " and billingpurchaseorder.vendor IN" + newvendorid;
                } else {
                    params.add(newvendorid);
                    paramsSQLWithoutInv.add(newvendorid);
                    conditionSQL += " and purchaseorder.vendor = ? ";
                    conditionSQLWithoutInv += " and  billingpurchaseorder.vendor = ? ";
                }
            }
            
            if (!StringUtil.isNullOrEmpty(vendorCategoryid) && !StringUtil.equal(vendorCategoryid, "-1") && !StringUtil.equal(vendorCategoryid, "All")) {
                params.add(vendorCategoryid);
                paramsSQLWithoutInv.add(vendorCategoryid);
                conditionSQL += " and purchaseorder.vendor in (select vendorid from vendorcategorymapping where vendorcategory = ?)  ";
                conditionSQLWithoutInv += " and billingpurchaseorder.vendor in (select vendorid from vendorcategorymapping where vendorcategory = ?)  ";
            }
            
            if (!StringUtil.isNullOrEmpty(userDepartment)) {
                innerQuery += " inner join users on users.userid = purchaseorder.createdby ";
                conditionSQL += " and users.department = ? ";
                params.add(userDepartment);
            }
            
            /*
             * Getting Blocked/Unblocked Documnets of PO for SO
             */
            if (blockedDocuments) {
                conditionSQL += " and purchaseorder.disabledpoforso = 'T' ";
            }
            if (unblockedDocuments) {
                conditionSQL += " and purchaseorder.disabledpoforso = 'F' ";
            }
            
            if (!isForTemplate) {
                //Ignore POs created as only templates.
                conditionSQL += " and purchaseorder.istemplate != 2 ";
                conditionSQLWithoutInv += " and billingpurchaseorder.istemplate != 2 ";

                if (pendingapproval) {
                    params.add(11);
                    conditionSQL += " and purchaseorder.approvestatuslevel != ? ";
                } else {
                    params.add(11);
                    conditionSQL += " and purchaseorder.approvestatuslevel = ? ";
                }
            }

            if (request.containsKey("currencyfilterfortrans") && request.get("currencyfilterfortrans") != null) {
                String currencyfilterfortrans = (String) request.get("currencyfilterfortrans");
                if (!StringUtil.isNullOrEmpty(currencyfilterfortrans)) {
                    params.add(currencyfilterfortrans);
                    paramsSQLWithoutInv.add(currencyfilterfortrans);
                    conditionSQL += " and purchaseorder.currency = ? ";
                    conditionSQLWithoutInv += " and  billingpurchaseorder.currency = ? ";
                }
            }
            
            String appendCase = "and";
            String Searchjson = "";
            String mySearchFilterString = "";
            String searchDefaultFieldSQL = "";
            String joinString = "";
            String joinString1 = "";
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (request.containsKey("filterConjuctionCriteria") && request.get("filterConjuctionCriteria") != null) {
                if (request.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            if (request.containsKey("searchJson") && request.get("searchJson") != null) {
                Searchjson = StringUtil.DecodeText(request.get("searchJson").toString());

                if (!StringUtil.isNullOrEmpty(Searchjson)) {
                    JSONObject serachJobj = new JSONObject(Searchjson);
                    JSONArray customSearchFieldArray = new JSONArray();
                    JSONArray defaultSearchFieldArray = new JSONArray();
                    StringUtil.seperateCostomAndDefaultSerachJson(serachJobj, customSearchFieldArray, defaultSearchFieldArray);
                    if (defaultSearchFieldArray.length() > 0) {
                        /*
                         Advance Search For Default Form fields
                         */
                        ArrayList tableArray = new ArrayList();
                        tableArray.add("customer"); //this table array used to identified wheather join exists on table or not                         
                        Map<String, Object> map = buildSqlDefaultFieldAdvSearch(defaultSearchFieldArray, params, moduleid, tableArray, filterConjuctionCriteria);
                        searchJoin += map.containsKey("searchjoin") ? map.get("searchjoin") : "";
                        searchDefaultFieldSQL = (String) (map.containsKey("condition") ? map.get("condition") : "");
                        searchJoin += " left join polinking on polinking.docid=purchaseorder.id and polinking.sourceflag = 1 ";
                    }

                    if (customSearchFieldArray.length() > 0) {   //Advance search case for Custome field
                        isCustomFieldAdvSearch = true;
                        request.put(Constants.Searchjson, Searchjson);
                        request.put(Constants.appendCase, appendCase);
                        request.put("filterConjuctionCriteria", filterConjuctionCriteria);
                        mySearchFilterString = String.valueOf(StringUtil.getAdvanceSearchString(request, true).get(Constants.myResult));
//                    joinString = " inner join purchaseordercustomdata on purchaseordercustomdata.poID=purchaseorder.purchaseordercustomdataref ";
                        String innerJoinOnDetailTable = "";
                        if (!searchJoin.contains("podetails.purchaseorder")) {
                            innerJoinOnDetailTable = " inner join podetails on podetails.purchaseorder=purchaseorder.id ";
                        }
                        boolean isInnerJoinAppend = false;
                        if (mySearchFilterString.contains("purchaseordercustomdata")) {
                            joinString1 = " inner join purchaseordercustomdata on purchaseordercustomdata.poID=purchaseorder.purchaseordercustomdataref ";
                        }
                        if (mySearchFilterString.contains("AccJEDetailCustomData")) {
                            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "purchaseorderdetailcustomdata");
                            joinString1 += innerJoinOnDetailTable + " left join purchaseorderdetailcustomdata on podetails.id=purchaseorderdetailcustomdata.poDetailID ";
                            isInnerJoinAppend = true;
                        }
                        if (mySearchFilterString.contains("AccJEDetailsProductCustomData")) {
                            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailsProductCustomData", "podetailproductcustomdata");
                            joinString1 += (isInnerJoinAppend ? "" : innerJoinOnDetailTable) + " left join podetailproductcustomdata on podetails.id=podetailproductcustomdata.poDetailID ";
                            isInnerJoinAppend = true;
                        }
                        if (mySearchFilterString.contains("VendorCustomData")) {
                            joinString1 += " left join vendorcustomdata  on vendorcustomdata.vendorId=vendor.id ";
                            mySearchFilterString = mySearchFilterString.replaceAll("VendorCustomData", "vendorcustomdata");
                        }
                        //product custom data
                        if (mySearchFilterString.contains("accproductcustomdata")) {
                            joinString1 += (isInnerJoinAppend ? "" : innerJoinOnDetailTable) + " left join product on product.id=podetails.product left join accproductcustomdata on accproductcustomdata.productId=product.id ";
                        }
                        StringUtil.insertParamAdvanceSearchString1(params, Searchjson);
//                    StringUtil.insertParamAdvanceSearchString1(paramsSQLWithoutInv, Searchjson);
                    }
                    mySearchFilterString = StringUtil.combineCustomAndDefaultSearch(searchDefaultFieldSQL, mySearchFilterString, filterConjuctionCriteria);
                }
            }
//            String query = "from PurchaseOrder po" + condition;

//            if(pendingapproval) {
//                conditionSQL += " and purchaseorder.pendingapproval != 0 ";
//                conditionSQLWithoutInv += " and billingpurchaseorder.pendingapproval != 0 ";
//            } else {
//                conditionSQL += " and purchaseorder.pendingapproval= 0 ";
//                conditionSQLWithoutInv += " and billingpurchaseorder.pendingapproval= 0 ";
//            }

            String orderBy = "";
            String sort_Col = "";
            String sort_Col1 = "";
            String joinString2 = " ";
            String[] stringSort = null;
            if (request.containsKey("dir") && request.containsKey("sort")) {
                String Col_Name = request.get("sort").toString();
                String Col_Dir = request.get("dir").toString();
                stringSort = columSort(Col_Name, Col_Dir);
                orderBy += stringSort[0];
                sort_Col += stringSort[1];
                sort_Col1 += stringSort[2];
                if(request.get("sort").toString().equals("agentname")){
                    joinString2 += "  left join masteritem on masteritem.id = purchaseorder.masteragent  ";
                }

            } else {
                orderBy = " order by orderdate desc";
                sort_Col += ", purchaseorder.orderdate";
                sort_Col1 += ", billingpurchaseorder.orderdate";
            }
            String salesPersonMappingQuery = "";
//            if (isenableSalesPersonAgentFlow && !StringUtil.isNullOrEmpty(userID)) {
//                salesPersonMappingQuery = " left join vendoragentmapping spm on spm.vendorid=purchaseorder.vendor  left join masteritem  mst on mst.id=spm.agent ";
//                joinString1+=salesPersonMappingQuery;
//                conditionSQL += " and ((mst.user= '" + userID + "' or mst.user is null  and vendor.vendavailtoagent='T' ) or  (vendor.vendavailtoagent='F')) ";
//            }
            
            if (isenableSalesPersonAgentFlow && !StringUtil.isNullOrEmpty(userID)) {//this block is executed only when owners restriction feature is on 
                String salesPersonID = (String) request.get("salesPersonid");
                String salespersonQuery = "";
                if (!StringUtil.isNullOrEmpty(salesPersonID)) {
                   salesPersonID= AccountingManager.getFilterInString(salesPersonID);
                    salespersonQuery = "  purchaseorder.masteragent in " + salesPersonID + " or ";
                }

                conditionSQL += " and ( " + salespersonQuery + "  purchaseorder.createdby='" + userID + "' or purchaseorder.masteragent is null  ) ";
            }
            
            boolean myPO = false;
            if (request.containsKey("myPO") && request.get("myPO") != null && !StringUtil.isNullOrEmpty(request.get("myPO").toString())) {
                myPO = (Boolean) request.get("myPO");
            }
            if (myPO) {

                conditionSQL += " and  purchaseorder.createdby='" + userID + "' ";
            }
            
            if (isProductView) {
                sort_Col = " ,pd.quantity " + sort_Col;
            }

            String mysqlQuery = " select DISTINCT purchaseorder.id, 'false' as withoutinventory" + sort_Col + " from purchaseorder "
                    + "inner join vendor on vendor.id = purchaseorder.vendor "
                    + searchJoin + innerQuery + joinString1 + joinString2
                    + "left join costcenter on costcenter.id = purchaseorder.costcenter " + conditionSQL + mySearchFilterString;

            /*
             * custom field is implemented for Non Inventory part only and
             * opening balance orders are not for Without inventory part.
             */
            if (!(isCustomFieldAdvSearch || isOpeningBalanceOrder || isProductView)) {
                mysqlQuery += "union "
                        + " select billingpurchaseorder.id, 'true' as withoutinventory" + sort_Col1 + "  from billingpurchaseorder "
                        + "inner join vendor on vendor.id = billingpurchaseorder.vendor "
                        + "left join costcenter on costcenter.id = billingpurchaseorder.costcenter " + conditionSQLWithoutInv;

                params.addAll(paramsSQLWithoutInv);
            }
            mysqlQuery += orderBy;
            //list = executeQuery( query, params.toArray());
            list = executeSQLQuery( mysqlQuery, params.toArray());
            count = list.size();
                if (!StringUtil.isNullOrEmpty(start) && StringUtil.isNullOrEmpty(limit) == false) {
//                list = executeQueryPaging( query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
                    list = executeSQLQueryPaging( mysqlQuery, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
                }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getPurchaseOrders : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
    
    /**
     * To save security gate entry record
     * @param request
     * @return
     * @throws ServiceException 
     */
     public KwlReturnObject getSecurityGateEntryMerged(HashMap<String, Object> request) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        try {
//            KWLCurrency kwlcurrency = (KWLCurrency) get(KWLCurrency.class, (String) request.get("currencyid"));
            DateFormat df = (DateFormat) request.get(Constants.df);
            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            String ss = (String) request.get(Constants.ss);
            String moduleid = "";
            if (request.containsKey(Constants.moduleid) && request.get(Constants.moduleid) != null) {
                moduleid = request.get(Constants.moduleid).toString();
            }
            String productid = "";
            if (request.containsKey(Constants.productid) && request.get(Constants.productid) != null) {
                productid = (String) request.get(Constants.productid);
            }
            
            String vendorCategoryid = "";
            if (request.containsKey(Constants.customerCategoryid) && request.get(Constants.customerCategoryid) != null) {
                vendorCategoryid = (String) request.get(Constants.customerCategoryid);
            }

            String productCategoryid = "";
            if (request.containsKey(Constants.productCategoryid) && request.get(Constants.productCategoryid) != null) {
                productCategoryid = (String) request.get(Constants.productCategoryid);
            }
            
            String userID = "";
            if (request.containsKey("userid") && request.get("userid") != null && !StringUtil.isNullOrEmpty(request.get("userid").toString())) {
                userID = (String) request.get("userid");
            }
            
             String newvendorid = "";
            if (request.containsKey(Constants.newvendorid) && request.get(Constants.newvendorid) != null) {
                newvendorid = (String) request.get(Constants.newvendorid);
            }
            String billId = "";
            ArrayList params = new ArrayList();
            ArrayList paramsSQLWithoutInv = new ArrayList();
            params.add((String) request.get(Constants.companyKey));
            paramsSQLWithoutInv.add((String) request.get(Constants.companyKey));
            
            boolean pendingapproval = false;
            if(request.get("pendingapproval")!=null){
                pendingapproval =(Boolean) request.get("pendingapproval");
            }
            
            boolean deleted = Boolean.parseBoolean((String) request.get("deleted"));
            boolean nondeleted = Boolean.parseBoolean((String) request.get("nondeleted"));
            
            String conditionSQL = "";
            String conditionSQLWithoutInv = "";
            if (nondeleted) {
                conditionSQL = "  where securitygateentry.deleteflag='F' and securitygateentry.company=? ";
            } else if (deleted) {

                conditionSQL += " where securitygateentry.deleteflag='T' and securitygateentry.company=? ";
            } else {
                // String condition = " where deleted=false and company.companyID=?";
                conditionSQL += " where securitygateentry.company=?";
            }
            if (request.containsKey("linknumber") && request.get("linknumber") != null && !request.get("linknumber").toString().equals("")) {
                conditionSQL += " and securitygateentry.ponumber = ? ";
                params.add(request.get("linknumber"));
            }
            if (!StringUtil.isNullOrEmpty(vendorCategoryid) && !StringUtil.equal(vendorCategoryid, "-1") && !StringUtil.equal(vendorCategoryid, "All")) {
                params.add(vendorCategoryid);
                paramsSQLWithoutInv.add(vendorCategoryid);
                conditionSQL += " and securitygateentry.vendor in (select vendorid from vendorcategorymapping where vendorcategory = ?)  ";
            }
            String searchJoin = "";
            if (request.containsKey("billId")) {
                billId = (String) request.get("billId");
                if (!StringUtil.isNullOrEmpty(billId)) {
                    params.add(billId);
                    paramsSQLWithoutInv.add(billId);
                    conditionSQL += " and securitygateentry.id=? ";
                }
            }

            String costCenterId = (String) request.get(CCConstants.REQ_costCenterId);
            if (!StringUtil.isNullOrEmpty(costCenterId)) {
                params.add(costCenterId);
                paramsSQLWithoutInv.add(costCenterId);
                //  condition += " and po.costcenter.ID=?";
                conditionSQL += " and costcenter.id=?";
                conditionSQLWithoutInv += " and costcenter.id=?";
            }
            
            
            
            String startDate = request.get(Constants.REQ_startdate)!=null? StringUtil.DecodeText((String) request.get(Constants.REQ_startdate)):(String) request.get(Constants.REQ_startdate);
            String endDate = request.get(Constants.REQ_enddate)!=null? StringUtil.DecodeText((String) request.get(Constants.REQ_enddate)):(String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                //   condition += " and (po.orderDate >=? and po.orderDate <=?)";
                conditionSQL += " and (securitygateentry.securitydate >=? and securitygateentry.securitydate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            String innerQuery = "";
            if (!StringUtil.isNullOrEmpty(productid)) {
                params.add(productid);
                innerQuery = " inner join securitygatedetails on securitygatedetails.securitygateentry = securitygateentry.id ";
                conditionSQL += " and securitygatedetails.product = ? ";

            }

            if (!StringUtil.isNullOrEmpty(productCategoryid)) {
                params.add(productCategoryid);
                innerQuery = " inner join securitygatedetails on securitygatedetails.securitygateentry = securitygateentry.id ";
                conditionSQL += " and securitygatedetails.product in (select productid from productcategorymapping where productcategory = ?) ";

            }
            
            /*
             * Getting Blocked/Unblocked Documnets of PO for SO
             */
            boolean blockedDocuments = Boolean.parseBoolean((String) request.get("blockedDocuments"));
            boolean unblockedDocuments = Boolean.parseBoolean((String) request.get("unblockedDocuments"));
            if (blockedDocuments) {
                conditionSQL += " and securitygateentry.disabledpoforso = 'T' ";
            }
            if (unblockedDocuments) {
                conditionSQL += " and securitygateentry.disabledpoforso = 'F' ";
            }
            if (!StringUtil.isNullOrEmpty(newvendorid)) {
                if (newvendorid.contains(",")) {
                    newvendorid = AccountingManager.getFilterInString(newvendorid);
                    conditionSQL += " and securitygateentry.vendor IN(" + newvendorid + ")";
                } else {
                    params.add(newvendorid);
                    paramsSQLWithoutInv.add(newvendorid);
                    conditionSQL += " and securitygateentry.vendor = ? ";
                }
            }
            if(!StringUtil.isNullOrEmpty(ss)){            
                String[] searchString= new String[]{"securitygateentry.securitynumber","securitygateentry.memo","vendor.aliasname","vendor.name","product.name","product.productid",
                    "bsaddr.billingaddress","bsaddr.billingcountry", "bsaddr.billingstate", "bsaddr.billingcity", "bsaddr.billingemail", "bsaddr.billingpostal",
                    "bsaddr.shippingaddress", "bsaddr.shippingCountry", "bsaddr.shippingstate", "bsaddr.shippingcity", "bsaddr.shippingemail", "bsaddr.shippingpostal"};
                Map SearchStringMap = StringUtil.insertParamSearchStringMap(params, ss, searchString.length);
                StringUtil.insertParamSearchString(SearchStringMap);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchString);
                conditionSQL += searchQuery;
                searchJoin +=" left join securitygatedetails on securitygatedetails.securitygateentry = securitygateentry.id "
                           + " left join product on product.id = securitygatedetails.product"
                           + " inner join billingshippingaddresses bsaddr on bsaddr.id=securitygateentry.billingshippingaddresses ";                                                                        
//                        " left join product on product.id = securitygateentry.product";
            }
            
            String mySearchFilterString = "";
            String joinString1 = "";

            String orderBy = "";
            String sort_Col = "";
            String sort_Col1 = "";
            String joinString2 = " ";
            String[] stringSort = null;
            String salesPersonMappingQuery = "";
            String mysqlQuery = " select DISTINCT securitygateentry.id" + sort_Col + " from securitygateentry "
                    + "inner join vendor on vendor.id = securitygateentry.vendor "
                    + searchJoin + innerQuery + joinString1 + joinString2
                    + "left join costcenter on costcenter.id = securitygateentry.costcenter " + conditionSQL + mySearchFilterString;

            mysqlQuery += orderBy;
            list = executeSQLQuery( mysqlQuery, params.toArray());
            count = list.size();
                if (!StringUtil.isNullOrEmpty(start) && StringUtil.isNullOrEmpty(limit) == false) {
                    list = executeSQLQueryPaging( mysqlQuery, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
                }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getPurchaseOrders : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
    

    @Override
    public KwlReturnObject getOpeningBalancePurchaseOrders(HashMap<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        int count = 0;

        String start = (String) requestParams.get(Constants.start);
        String limit = (String) requestParams.get(Constants.limit);

        String companyId = (String) requestParams.get("companyid");
        String condition = "";
        List params = new ArrayList();
        params.add(companyId);

        if (requestParams.containsKey("vendorid")) {
            String vendorId = (String) requestParams.get("vendorid");
            condition += " and po.vendor.ID=? ";
            params.add(vendorId);
        }

        String query = "from PurchaseOrder po where po.isOpeningBalancePO=true AND po.deleted=false AND po.company.companyID=?" + condition;
        list = executeQuery( query, params.toArray());
        count = list.size();

        if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
            list = executeQueryPaging( query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
        }

        return new KwlReturnObject(true, null, null, list, count);
    }

    public KwlReturnObject getPOCount(String pono, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from PurchaseOrder where purchaseOrderNumber=? and company.companyID=? AND isDraft='F'";  //ERM-1238 (Reference - SDP-13487) - Do not check duplicate in Draft Report. Because Multiple draft records having empty entry no.
        list = executeQuery( q, new Object[]{pono, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    /*
     * To check duplicate for Security Gate Entry
     */
    public KwlReturnObject getSecurityEntryCount(String securityNo, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from SecurityGateEntry where securityNumber=? and company.companyID=?";
        list = executeQuery( q, new Object[]{securityNo, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject deletePurchaseOrder(String poid, String companyid) throws ServiceException {
        String query = "update PurchaseOrder set deleted=true where ID=? and company.companyID=?";
        int numRows = executeUpdate( query, new Object[]{poid, companyid});
        //This code used for update the link flag of vendor quotation
                ArrayList updateLinkFlagList = new ArrayList();
                updateLinkFlagList.add(poid);
                String vendorIdQuery ="update vendorquotation as v inner join  vendorquotationdetails as vqd inner join podetails pod on  v.id=vqd.vendorquotation and pod.vqdetail=vqd.id set linkflag=0  where pod.purchaseorder=?";
                int result = executeSQLUpdate( vendorIdQuery, updateLinkFlagList.toArray());
        return new KwlReturnObject(true, "Purchase Order has been deleted successfully.", null, null, numRows);
    }
    /**
     * To delete Security gate Entry record
     * @param securityId
     * @param companyid
     * @return
     * @throws ServiceException 
     */
    public KwlReturnObject deleteSecurityGate(String securityId, String companyid) throws ServiceException {
        String query = "update SecurityGateEntry set deleted=true where ID=? and company.companyID=?";
        int numRows = executeUpdate( query, new Object[]{securityId, companyid});
        return new KwlReturnObject(true, "Security Gate Entry has been deleted successfully.", null, null, numRows);
    }
    //function for deleting spurchase order permananetly

    public KwlReturnObject deletePurchaseOrdersPermanent(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            String delQuery1 = "", delQuery2 = "", delQuery3 = "", delQuery4 = "", delQuery5 = "", delQuery6;
            int numtotal = 0;
            if (requestParams.containsKey("poid") && requestParams.containsKey("companyid")) {
                
                boolean isFixedAsset = false;
                if (requestParams.containsKey("isFixedAsset") && requestParams.get("isFixedAsset") != null) {
                    isFixedAsset = (Boolean) requestParams.get("isFixedAsset");
                }
                boolean isExpensePO = false;
                if (requestParams.containsKey("isExpensePO") && requestParams.get("isExpensePO") != null) {
                    isExpensePO = (Boolean) requestParams.get("isExpensePO");
                }

                ArrayList params8 = new ArrayList();
                params8.add(requestParams.get("poid"));
                params8.add(requestParams.get("companyid"));
//                String myquery = "select id from podetails where purchaseorder in (select id from purchaseorder where id=? and company = ?)";
                String myquery ="";
                if(isExpensePO){
                   myquery = "select pod.id from expensepodetails pod inner join purchaseorder po on pod.purchaseorder=po.id where po.id=? and po.company = ?";
                } else{
                   myquery = "select pod.id from podetails pod inner join purchaseorder po on pod.purchaseorder=po.id where po.id=? and po.company = ?";
                }
                List list = executeSQLQuery( myquery, params8.toArray());
                Iterator itr = list.iterator();
                String idStrings = "";
                while (itr.hasNext()) {


                    String invdid = itr.next().toString();
                    idStrings += "'" + invdid + "',";
                }
                if (!StringUtil.isNullOrEmpty(idStrings)) {
                    idStrings = idStrings.substring(0, idStrings.length() - 1);
                }
                
                if (isFixedAsset) {
                    HashMap<String, Object> requestMap = new HashMap<String, Object>();
                    requestMap.put("companyid", requestParams.get("companyid"));
                    requestMap.put("poid", requestParams.get("poid"));

                    deletePurchaseOrderAssetDetails(requestMap);
                }
                
                //This code used for update the link flag of vendor quotation
                ArrayList updateLinkFlagList = new ArrayList();
                updateLinkFlagList.add(requestParams.get("poid"));
                String vendorIdQuery ="update vendorquotation as v inner join  vendorquotationdetails as vqd inner join podetails pod on  v.id=vqd.vendorquotation and pod.vqdetail=vqd.id set linkflag=0 , isopen='T'  where pod.purchaseorder=?";
                int result = executeSQLUpdate( vendorIdQuery, updateLinkFlagList.toArray());

                ArrayList params5 = new ArrayList();
                params5.add(requestParams.get("poid"));
                params5.add(requestParams.get("companyid"));
//                delQuery5 = "delete from podetails where purchaseorder in (select id from purchaseorder where id=? and company = ?)";
                if(isExpensePO){
                    delQuery5 = "delete pod from expensepodetails pod inner join purchaseorder po on pod.purchaseorder=po.id where po.id=? and po.company = ?";
                } else{
                    delQuery5 = "delete pod from podetails pod inner join purchaseorder po on pod.purchaseorder=po.id where po.id=? and po.company = ?";
                }
                int numRows5 = executeSQLUpdate( delQuery5, params5.toArray());



                ArrayList params9 = new ArrayList();
                params9.add(requestParams.get("poid"));
                params9.add(requestParams.get("companyid"));
                String myquery1 = "select id from purchaseorder where id=? and company = ?";
                List list1 = executeSQLQuery( myquery1, params9.toArray());
                Iterator itr1 = list1.iterator();
                String journalent = "";
                while (itr1.hasNext()) {

                    String jeidi = itr1.next().toString();
                    journalent += "'" + jeidi + "',";
                }
                if (!StringUtil.isNullOrEmpty(journalent)) {
                    journalent = journalent.substring(0, journalent.length() - 1);
                }


                ArrayList params1 = new ArrayList();
                int numRows1=0;
                if (!StringUtil.isNullOrEmpty(idStrings)) {
                    if(isExpensePO){
                        delQuery1 = "delete  from expensepodetailcustomdata where expensepodetailid in (" + idStrings + ")";
                    } else{
                        delQuery1 = "delete  from purchaseorderdetailcustomdata where poDetailID in (" + idStrings + ")";
                    }
                    numRows1 = executeSQLUpdate(delQuery1, params1.toArray());
                }
                /**
                 * delete GST history data.
                 */
                deleteGstTaxClassDetails(idStrings);
                ArrayList params6 = new ArrayList();
                params6.add(requestParams.get("companyid"));
                params6.add(requestParams.get("poid"));
                String purchaseorderID = (String) requestParams.get("poid");
                int numRows8 = 0;
                /**
                 * delete GST history data.
                 */
                deleteGstDocHistoryDetails(purchaseorderID);
                String delQuery8 = "delete from purchaseordertermmap where purchaseorder=?";
                numRows8 = executeSQLUpdate( delQuery8, new Object[]{purchaseorderID});

                delQuery6 = "delete from purchaseorder where company = ? and id=?";
                int numRows6 = executeSQLUpdate( delQuery6, params6.toArray());

                int numRows2=0;
                if (!StringUtil.isNullOrEmpty(journalent)) {
                    ArrayList params2 = new ArrayList();
                    delQuery2 = "delete  from purchaseordercustomdata where poID in (" + journalent + ")";
                    numRows2 = executeSQLUpdate(delQuery2, params2.toArray());
                }
                
                
                numtotal = numRows1 + numRows2 + numRows5 + numRows6 + numRows8;
            }

            return new KwlReturnObject(true, "purchase Order has been deleted successfully.", null, null, numtotal);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("Cannot delete purchase Order as its referance child field is not deleted.", ex);//+ex.getMessage(), ex);
        }

    }
    
    /**
     * Security gate Entry record
     * @param requestParams
     * @return
     * @throws ServiceException
     */
    public KwlReturnObject deleteSecurityGateEntryPermanent(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            String delQuery = "",delQuery1 = "",delQuery2;
            String selQuery = "",secGateEntryID="";
            int numtotal = 0;
            if (requestParams.containsKey("securityId") && requestParams.containsKey("companyid")) {
                ArrayList paramsDetails = new ArrayList();
                paramsDetails.add(requestParams.get("securityId"));
                paramsDetails.add(requestParams.get("companyid"));
                
                /*
                Deleting corresponding Custom column records while deleting Security Gate Entry Transactions
                */
                selQuery="select sged.id from securitygatedetails sged  inner join securitygateentry sge on sged.securitygateentry=sge.id where sge.id=? and sge.company = ?";
                List list = executeSQLQuery( selQuery, paramsDetails.toArray());
                Iterator itr = list.iterator();
                String idStrings = "";
                while (itr.hasNext()) {
                    String invdid = itr.next().toString();
                    idStrings += "'" + invdid + "',";
                }
                if (!StringUtil.isNullOrEmpty(idStrings)) {
                    idStrings = idStrings.substring(0, idStrings.length() - 1);
                }
                   
                if (!StringUtil.isNullOrEmpty(idStrings)) {
                    ArrayList termsMapping = new ArrayList();
                    String delQuery8 = "delete from securitygatedetailstermmap where sgedetails in (" + idStrings + ")";
                    int numRows8 = executeSQLUpdate(delQuery8, termsMapping.toArray());
                    numtotal += numRows8;

                    /**
                     * delete GST(TaxClass) history data.
                     */
                    deleteGstTaxClassDetails(idStrings);

                    /**
                     * delete GST(Document) history data.
                     */
                    secGateEntryID = String.valueOf(requestParams.get("securityId"));
                    deleteGstDocHistoryDetails(secGateEntryID);
                }
                
                delQuery = "delete sged from securitygatedetails sged  inner join securitygateentry sge on sged.securitygateentry=sge.id where sge.id=? and sge.company = ?";
                int numRows5 = executeSQLUpdate(delQuery, paramsDetails.toArray());

                if (!StringUtil.isNullOrEmpty(idStrings)) {
                    ArrayList params1 = new ArrayList();
                    delQuery1 = "delete  from  securitygateentrydetailcustomdata  where sgeDetailID in (" + idStrings + ")";
                    int numRows1 = executeSQLUpdate(delQuery1, params1.toArray());
                }
                ArrayList params6 = new ArrayList();
                params6.add(requestParams.get("companyid"));
                params6.add(requestParams.get("securityId"));

                delQuery = "delete from securitygateentry where company = ? and id=?";
                int numRows6 = executeSQLUpdate(delQuery, params6.toArray());
                numtotal = numRows5 + numRows6;
                
                ArrayList params2 = new ArrayList();
                params2.add(requestParams.get("securityId"));
                delQuery2 = "delete  from securitygateentrycustomdata  where sgeid=?";
                int numRows2 = executeSQLUpdate( delQuery2, params2.toArray());
                
            }

            return new KwlReturnObject(true, "Security Gate Entry has been deleted successfully.", null, null, numtotal);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("Cannot delete Security Gate Entry as its referance child field is not deleted.", ex);//+ex.getMessage(), ex);
        }
    }
    
    public KwlReturnObject updatePoIsUsedDeleteSGE(String sgeID, String companyId,boolean isPoUsed) {
        List list = new ArrayList();
        int numRows=0,i=0;
       
        try {
                String query = "update purchaseorder po, podetails pod,securitygatedetails sgd,securitygateentry sg set ispoused='F'"
                        + "where po.id=pod.purchaseorder and sgd.podetail=pod.id and sgd.securitygateentry=sg.id and po.company=? and sg.id=?";
                numRows = executeSQLUpdate(query, new Object[]{companyId,sgeID});
        } catch (ServiceException ex) {
            Logger.getLogger(accPurchaseOrderImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    public KwlReturnObject getPodForProduct(HashMap<String, Object> request) throws ServiceException {
        List list = new ArrayList();
        try {

            DateFormat df = (DateFormat) request.get(Constants.df);
            ArrayList params = new ArrayList();

            String productId = (String) request.get("productId");
            String companyid = (String) request.get("companyid");
            params.add(productId);
            params.add(companyid);
            params.add(false);
            params.add(false);
            params.add(false);
            params.add(false);
            params.add(11);
            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            String condition = "";
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                condition += " and (pod.purchaseOrder.orderDate >=? and pod.purchaseOrder.orderDate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            String query = " select pod from PurchaseOrderDetail pod where pod.product.ID=? and pod.company.companyID=? and "
                    + " pod.purchaseOrder.deleted= ? and pod.purchaseOrder.isOpeningBalancePO= ?  and pod.purchaseOrder.isconsignment= ? "
                    + " and pod.purchaseOrder.fixedAssetPO = ?  and pod.purchaseOrder.istemplate != 2  and "
                    + "  pod.purchaseOrder.approvestatuslevel = ? "+condition;// and pod.purchaseOrder.deleted=false";
            list = executeQuery( query, params.toArray());
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getPurchaseOrders : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getPO_Product(Map<String, Object> requestMap) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        String condition = "";
        String productId = "";
        String companyId = "";
        DateFormat df = null;
        String startdate = "";
        boolean isApproved=false;
        String enddate = "";
        if (requestMap.containsKey("productId")) {
            productId = requestMap.get("productId").toString();
            params.add(productId);
        }
        if (requestMap.containsKey("companyId")) {
            companyId = requestMap.get("companyId").toString();
            params.add(companyId);
        }
        if (requestMap.containsKey("df")) {
            try {
                df = (DateFormat) requestMap.get("df");
                if (requestMap.containsKey("startdate")) {
                    startdate = requestMap.get("startdate").toString();
                }
                if (requestMap.containsKey("enddate")) {
                    enddate = requestMap.get("enddate").toString();
                }
                condition += " and (pod.purchaseOrder.orderDate >=? and pod.purchaseOrder.orderDate <=?)";
                params.add(df.parse(startdate));
                params.add(df.parse(enddate));
            } catch (ParseException ex) {
                Logger.getLogger(accPurchaseOrderImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (requestMap.containsKey("isApproved")) {
            isApproved = Boolean.parseBoolean(requestMap.get("isApproved").toString());
            if (isApproved) {
                condition += " and pod.purchaseOrder.approvestatuslevel=?";
                params.add(11);
            }
        }
        String q = "from PurchaseOrderDetail pod where product.ID=? and pod.company.companyID=?"+condition;// and pod.purchaseOrder.deleted=false";
        list = executeQuery( q, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    public KwlReturnObject getCQ_Product(Map<String, Object> requestMap) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        String condition = "";
        String productId = "";
        String companyId = "";
        DateFormat df = null;
        String startdate = "";
        boolean isApproved=false;
        String enddate = "";
        if (requestMap.containsKey("productId")) {
            productId = requestMap.get("productId").toString();
            params.add(productId);
        }
        if (requestMap.containsKey("companyId")) {
            companyId = requestMap.get("companyId").toString();
            params.add(companyId);
        }
        if (requestMap.containsKey("df")) {
            try {
                df = (DateFormat) requestMap.get("df");
                if (requestMap.containsKey("startdate")) {
                    startdate = requestMap.get("startdate").toString();
                }
                if (requestMap.containsKey("enddate")) {
                    enddate = requestMap.get("enddate").toString();
                }
                condition += " and (cqd.quotation.quotationDate >=? and cqd.quotation.quotationDate <=?)";
                params.add(df.parse(startdate));
                params.add(df.parse(enddate));
            } catch (ParseException ex) {
                Logger.getLogger(accPurchaseOrderImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (requestMap.containsKey("isApproved")) {
            isApproved = Boolean.parseBoolean(requestMap.get("isApproved").toString());
            if (isApproved) {
                condition += " and cqd.quotation.approvestatuslevel=?";
                params.add(11);
            }
        }
        String q = "from QuotationDetail cqd where cqd.product.ID=? and cqd.company.companyID=?"+condition;// and pod.purchaseOrder.deleted=false";
        list = executeQuery( q, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
  public KwlReturnObject getVQ_Product(Map<String, Object> requestMap) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        String condition = "";
        String productId = "";
        String companyId = "";
        DateFormat df = null;
        String startdate = "";
        boolean isApproved=false;
        String enddate = "";
        if (requestMap.containsKey("productId")) {
            productId = requestMap.get("productId").toString();
            params.add(productId);
        }
        if (requestMap.containsKey("companyId")) {
            companyId = requestMap.get("companyId").toString();
            params.add(companyId);
        }
        if (requestMap.containsKey("df")) {
            try {
                df = (DateFormat) requestMap.get("df");
                if (requestMap.containsKey("startdate")) {
                    startdate = requestMap.get("startdate").toString();
                }
                if (requestMap.containsKey("enddate")) {
                    enddate = requestMap.get("enddate").toString();
                }
                condition += " and (vqd.vendorquotation.quotationDate >=? and vqd.vendorquotation.quotationDate <=?)";
                params.add(df.parse(startdate));
                params.add(df.parse(enddate));
            } catch (ParseException ex) {
                Logger.getLogger(accPurchaseOrderImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (requestMap.containsKey("isApproved")) {
            isApproved = Boolean.parseBoolean(requestMap.get("isApproved").toString());
            if (isApproved) {
                condition += " and vqd.vendorquotation.approvestatuslevel=?";
                params.add(11);
            }
        }
        String q = "from VendorQuotationDetail vqd where vqd.product.ID=? and vqd.company.companyID=?"+condition;// and pod.purchaseOrder.deleted=false";
        list = executeQuery( q, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
  public KwlReturnObject getPReq_Product(Map<String, Object> requestMap) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        String condition = "";
        String productId = "";
        String companyId = "";
        DateFormat df = null;
        String startdate = "";
        boolean isApproved=false;
        String enddate = "";
        if (requestMap.containsKey("productId")) {
            productId = requestMap.get("productId").toString();
            params.add(productId);
        }
        if (requestMap.containsKey("companyId")) {
            companyId = requestMap.get("companyId").toString();
            params.add(companyId);
        }
        if (requestMap.containsKey("df")) {
            try {
                df = (DateFormat) requestMap.get("df");
                if (requestMap.containsKey("startdate")) {
                    startdate = requestMap.get("startdate").toString();
                }
                if (requestMap.containsKey("enddate")) {
                    enddate = requestMap.get("enddate").toString();
                }
                condition += " and (preqd.purchaserequisition.requisitionDate >=? and preqd.purchaserequisition.requisitionDate <=?)";
                params.add(df.parse(startdate));
                params.add(df.parse(enddate));
            } catch (ParseException ex) {
                Logger.getLogger(accPurchaseOrderImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (requestMap.containsKey("isApproved")) {
            isApproved = Boolean.parseBoolean(requestMap.get("isApproved").toString());
            if (isApproved) {
                condition += " and preqd.purchaserequisition.approvestatuslevel=?";
                params.add(11);
            }
        }
        String q = "from PurchaseRequisitionDetail preqd where preqd.product.ID=? and preqd.company.companyID=?"+condition;// and pod.purchaseOrder.deleted=false";
        list = executeQuery( q, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    public KwlReturnObject getRFQ_Product(Map<String, Object> requestMap) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        String condition = "";
        String productId = "";
        String companyId = "";
        DateFormat df = null;
        String startdate = "";
        boolean isApproved=false;
        String enddate = "";
        if (requestMap.containsKey("productId")) {
            productId = requestMap.get("productId").toString();
            params.add(productId);
        }
        if (requestMap.containsKey("companyId")) {
            companyId = requestMap.get("companyId").toString();
            params.add(companyId);
        }
        if (requestMap.containsKey("df")) {
            try {
                df = (DateFormat) requestMap.get("df");
                if (requestMap.containsKey("startdate")) {
                    startdate = requestMap.get("startdate").toString();
                }
                if (requestMap.containsKey("enddate")) {
                    enddate = requestMap.get("enddate").toString();
                }
                condition += " and (rfqd.requestforquotation.rfqDate >=? and rfqd.requestforquotation.rfqDate <=?)";
                params.add(df.parse(startdate));
                params.add(df.parse(enddate));
           } catch (ParseException ex) {
                Logger.getLogger(accPurchaseOrderImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        String q = "from RequestForQuotationDetail rfqd where rfqd.product.ID=? and rfqd.company.companyID=?"+condition;// and pod.purchaseOrder.deleted=false";
        list = executeQuery( q, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    } 
        public KwlReturnObject getPR_Product(Map<String, Object> requestMap) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        String condition = "";
        String productId = "";
        String companyId = "";
        DateFormat df = null;
        String startdate = "";
        boolean isApproved=false;
        String enddate = "";
        if (requestMap.containsKey("productId")) {
            productId = requestMap.get("productId").toString();
            params.add(productId);
        }
        if (requestMap.containsKey("companyId")) {
            companyId = requestMap.get("companyId").toString();
            params.add(companyId);
        }
        if (requestMap.containsKey("df")) {
            try {
                df = (DateFormat) requestMap.get("df");
                if (requestMap.containsKey("startdate")) {
                    startdate = requestMap.get("startdate").toString();
                }
                if (requestMap.containsKey("enddate")) {
                    enddate = requestMap.get("enddate").toString();
                }
                condition += " and (prd.purchaseReturn.orderDate >=? and prd.purchaseReturn.orderDate <=?)";
                params.add(df.parse(startdate));
                params.add(df.parse(enddate));
            } catch (ParseException ex) {
                Logger.getLogger(accPurchaseOrderImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
     
        String q = "from PurchaseReturnDetail prd where prd.product.ID=? and prd.company.companyID=?"+condition;// and pod.purchaseOrder.deleted=false";
        list = executeQuery( q, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
      public KwlReturnObject getSR_Product(Map<String, Object> requestMap) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        String condition = "";
        String productId = "";
        String companyId = "";
        DateFormat df = null;
        String startdate = "";
        boolean isApproved=false;
        String enddate = "";
        if (requestMap.containsKey("productId")) {
            productId = requestMap.get("productId").toString();
            params.add(productId);
        }
        if (requestMap.containsKey("companyId")) {
            companyId = requestMap.get("companyId").toString();
            params.add(companyId);
        }
        if (requestMap.containsKey("df")) {
            try {
                df = (DateFormat) requestMap.get("df");
                if (requestMap.containsKey("startdate")) {
                    startdate = requestMap.get("startdate").toString();
                }
                if (requestMap.containsKey("enddate")) {
                    enddate = requestMap.get("enddate").toString();
                }
                condition += " and (srd.salesReturn.orderDate >=? and srd.salesReturn.orderDate <=?)";
                params.add(df.parse(startdate));
                params.add(df.parse(enddate));
            } catch (ParseException ex) {
                Logger.getLogger(accPurchaseOrderImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        String q = "from SalesReturnDetail srd where srd.product.ID=? and srd.company.companyID=?"+condition;// and pod.purchaseOrder.deleted=false";
        list = executeQuery( q, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
 public KwlReturnObject getPurchaseOrderDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from PurchaseOrderDetail";
        return buildNExecuteQuery( query, requestParams);
    }
 /*
  * Get Details of selected jow work order from aged job work report
  */
  public KwlReturnObject getSelectedPurchaseOrderDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from InterStoreTransferRequest";
        return buildNExecuteQuery( query, requestParams);
    }
 /**
  * To Get Security gate Entry record
  * @param requestParams
  * @return
  * @throws ServiceException 
  */
 public KwlReturnObject getSecurityGateDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from SecurityGateDetails";
        return buildNExecuteQuery( query, requestParams);
    }
    
    public KwlReturnObject getExpensePurchaseOrderDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from ExpensePODetail";
        return buildNExecuteQuery( query, requestParams);
    }

    public KwlReturnObject getPODetailsCustomDataForProduct(HashMap<String, Object> requestParams) throws ServiceException {
        String podetailId = "";
        String companyId = "";
        List list = new ArrayList();
        if (requestParams.containsKey("podetailId") && requestParams.get("podetailId") != null) {
            podetailId = (String) requestParams.get("podetailId");
        }
        if (requestParams.containsKey("companyId") && requestParams.get("companyId") != null) {
            companyId = (String) requestParams.get("companyId");
        }
        String query = "from PurchaseOrderDetailProductCustomData podp where podp.poDetailID=? and podp.company.companyID=?";
        list = executeQuery( query, new Object[]{podetailId, companyId});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getPurchaseOrderOtherDetails(HashMap<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        String query = "from POOtherDetails p where p.purchaseOrderId=? and p.company.companyID=?";
        list = executeQuery( query, new Object[]{requestParams.get("poid"), requestParams.get("companyid")});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getBillingPurchaseOrderDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from BillingPurchaseOrderDetail";
        return buildNExecuteQuery( query, requestParams);
    }

// Billing Purchase Order
    public KwlReturnObject getBPOCount(String pono, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from BillingPurchaseOrder where purchaseOrderNumber=? and company.companyID=?";
        list = executeQuery( q, new Object[]{pono, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject saveBillingPurchaseOrder(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String poid = (String) dataMap.get("id");
            BillingPurchaseOrder po = new BillingPurchaseOrder();
            if (StringUtil.isNullOrEmpty(poid)) {
                po.setDeleted(false);
            } else {
                po = (BillingPurchaseOrder) get(BillingPurchaseOrder.class, poid);
            }

            if (dataMap.containsKey(Constants.SEQFORMAT)) {
                po.setSeqformat((SequenceFormat) get(SequenceFormat.class, (String) dataMap.get(Constants.SEQFORMAT)));
            }
            if (dataMap.containsKey(Constants.SEQNUMBER)) {
                po.setSeqnumber(Integer.parseInt(dataMap.get(Constants.SEQNUMBER).toString()));
            }
            if (dataMap.containsKey("entrynumber")) {
                po.setPurchaseOrderNumber((String) dataMap.get("entrynumber"));
            }
            if (dataMap.containsKey("autogenerated")) {
                po.setAutoGenerated((Boolean) dataMap.get("autogenerated"));
            }
            if (dataMap.containsKey("perDiscount")) {
                po.setPerDiscount((Boolean) dataMap.get("perDiscount"));
            }
            if (dataMap.containsKey("discount")) {
                po.setDiscount((Double) dataMap.get("discount"));
            }
            if (dataMap.containsKey("memo")) {
                po.setMemo((String) dataMap.get("memo"));
            }
            if (dataMap.containsKey("posttext")) {
                po.setPostText((String) dataMap.get("posttext"));
            }
            if (dataMap.containsKey("vendorid")) {
                Vendor vendor = (dataMap.get("vendorid") == null ? null : (Vendor) get(Vendor.class, (String) dataMap.get("vendorid")));
                po.setVendor(vendor);
            }
            if (dataMap.containsKey("orderdate")) {
                po.setOrderDate((Date) dataMap.get("orderdate"));
            }
            if (dataMap.containsKey("duedate")) {
                po.setDueDate((Date) dataMap.get("duedate"));
            }
            if (dataMap.containsKey("shipdate")) {
                po.setShipdate((Date) dataMap.get("shipdate"));
            }
            if (dataMap.containsKey("shipvia")) {
                po.setShipvia((String) dataMap.get("shipvia"));
            }
            if (dataMap.containsKey("venbilladdress")) {
                po.setBillTo((String) dataMap.get("venbilladdress"));
            }
            if (dataMap.containsKey("venshipaddress")) {
                po.setShipTo((String) dataMap.get("venshipaddress"));
            }
            if (dataMap.containsKey("fob")) {
                po.setFob((String) dataMap.get("fob"));
            }
//            if (dataMap.containsKey("debitfrom")) {
//                Account account = dataMap.get("debitfrom")==null?null:(Account) get(Account.class, (String) dataMap.get("debitfrom"));
//                po.setDebitFrom(account);
//            }
            if (dataMap.containsKey("taxid")) {
                Tax tax = dataMap.get("taxid") == null ? null : (Tax) get(Tax.class, (String) dataMap.get("taxid"));
                po.setTax(tax);
            }
            if (dataMap.containsKey("costCenterId")) {
                CostCenter costCenter = dataMap.get("costCenterId") == null ? null : (CostCenter) get(CostCenter.class, (String) dataMap.get("costCenterId"));
                po.setCostcenter(costCenter);
            } else {
                po.setCostcenter(null);
            }
            if (dataMap.containsKey("companyid")) {
                Company cmp = (dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid")));
                po.setCompany(cmp);
            }
            if (dataMap.containsKey("podetails")) {
                if (dataMap.get("podetails") != null) {
                    po.setRows((Set<BillingPurchaseOrderDetail>) dataMap.get("podetails"));
                }
            }
            if (dataMap.containsKey("currencyid")) {
                po.setCurrency((KWLCurrency) get(KWLCurrency.class, (String) dataMap.get("currencyid")));
            }
            if (dataMap.containsKey("isfavourite")) {
                if (dataMap.get("isfavourite") != null) {
                    po.setFavourite(Boolean.parseBoolean(dataMap.get("isfavourite").toString()));
                }
            }
            if (dataMap.containsKey("termid")) {
                Term term = (dataMap.get("termid") == null ? null : (Term) get(Term.class, (String) dataMap.get("termid")));
                po.setTerm(term);
            }
            po.setTemplateid((Projreport_Template) get(Projreport_Template.class, Constants.HEADER_IMAGE_TEMPLATE_ID));


            saveOrUpdate(po);
            list.add(po);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.updateBillingPurchaseOrder : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Billing Purchase Order has been updated successfully", null, list, list.size());
    }

    public KwlReturnObject saveBillingPurchaseOrderDetails(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String podid = (String) dataMap.get("id");
            BillingPurchaseOrderDetail pod = new BillingPurchaseOrderDetail();
            if (!StringUtil.isNullOrEmpty(podid)) {
                pod = (BillingPurchaseOrderDetail) get(BillingPurchaseOrderDetail.class, podid);
            }

            if (dataMap.containsKey("poid")) {
                BillingPurchaseOrder po = dataMap.get("poid") == null ? null : (BillingPurchaseOrder) get(BillingPurchaseOrder.class, (String) dataMap.get("poid"));
                pod.setPurchaseOrder(po);
            }
            if (dataMap.containsKey("srno")) {
                pod.setSrno((Integer) dataMap.get("srno"));
            }
            if (dataMap.containsKey("productdetail")) {
                pod.setProductDetail((String) dataMap.get("productdetail"));
            }
            if (dataMap.containsKey("discount") && dataMap.get("discount") != null) {
                pod.setDiscount((Double) dataMap.get("discount"));
            }
            if (dataMap.containsKey("discountispercent") && dataMap.get("discountispercent") != null) {
                pod.setDiscountispercent((Integer) dataMap.get("discountispercent"));
            } else {
                pod.setDiscountispercent(1);
            }
            if (dataMap.containsKey("rate")) {
                pod.setRate((Double) dataMap.get("rate"));
            }
            if (dataMap.containsKey("quantity")) {
                pod.setQuantity((Double) dataMap.get("quantity"));
            }
            if (dataMap.containsKey("remark")) {
                pod.setRemark(StringUtil.DecodeText(StringUtil.isNullOrEmpty((String) dataMap.get("remark")) ? "" : (String) dataMap.get("remark")));
            }
            if (dataMap.containsKey("debitfrom")) {
                Account account = dataMap.get("debitfrom") == null ? null : (Account) get(Account.class, (String) dataMap.get("debitfrom"));
                pod.setDebitFrom(account);
            }
            if (dataMap.containsKey("rowTaxAmount")) {
                double rowTaxAmount = (Double) dataMap.get("rowTaxAmount");
                pod.setRowTaxAmount(rowTaxAmount);
            }
            if (dataMap.containsKey("companyid")) {
                Company company = (dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid")));
                pod.setCompany(company);
            }
            if (dataMap.containsKey("rowtaxid")) {
                Tax rowtax = (dataMap.get("rowtaxid") == null ? null : (Tax) get(Tax.class, (String) dataMap.get("rowtaxid")));
                pod.setTax(rowtax);
            }
            saveOrUpdate(pod);
            list.add(pod);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.saveBillingPurchaseOrderDetails : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Billing Purchase Order has been updated successfully", null, list, list.size());
    }

    public KwlReturnObject getBillingPurchaseOrders(HashMap<String, Object> request) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        try {
            DateFormat df = (DateFormat) request.get(Constants.df);
            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            String ss = (String) request.get(Constants.ss);
            ArrayList params = new ArrayList();
            params.add((String) request.get(Constants.companyKey));
            String condition = " where deleted=false and company.companyID=?";
            if (!StringUtil.isNullOrEmpty(ss)) {
                for (int i = 0; i < 3; i++) {
                    params.add(ss + "%");
                }
                condition += " and (purchaseOrderNumber like ? or po.memo like ? or po.vendor.name like ? )";
            }
            String costCenterId = (String) request.get(CCConstants.REQ_costCenterId);
            if (!StringUtil.isNullOrEmpty(costCenterId)) {
                params.add(costCenterId);
                condition += " and po.costcenter.ID=?";
            }
            String vendorId = (String) request.get(CCConstants.REQ_vendorId);
            if (!StringUtil.isNullOrEmpty(vendorId)) {
                params.add(vendorId);
                condition += " and po.vendor.ID=?";
            }
            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                condition += " and (po.orderDate >=? and po.orderDate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            condition += " and po.pendingapproval= 0 and po.istemplate != 2 ";
            String query = "from BillingPurchaseOrder po" + condition;
            list = executeQuery( query, params.toArray());
            count = list.size();
            if (!StringUtil.isNullOrEmpty(start) && StringUtil.isNullOrEmpty(limit) == false) {
                list = executeQueryPaging( query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getBillingPurchaseOrders : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    public KwlReturnObject deleteBillingPurchaseOrder(String poid, String companyid) throws ServiceException {
        try {
            String query = "update BillingPurchaseOrder set deleted=true where ID=? and company.companyID=?";
            int numRows = executeUpdate( query, new Object[]{poid, companyid});
            return new KwlReturnObject(true, "Billing Purchase Order has been deleted successfully.", null, null, numRows);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.deleteBillingPurchaseOrder : " + ex.getMessage(), ex);
        }
    }

    @Override
    public KwlReturnObject deletePurchaseOrderDetails(HashMap<String, Object> requestParams) throws AccountingException {
        //Delete Goods Receipt Details
        boolean isConsignment = (boolean) requestParams.get("isConsignment");
        Locale locale = null;
        if(requestParams.containsKey("locale")){
            locale = (Locale) requestParams.get("locale");
        }
        try {
            ArrayList params8 = new ArrayList();
            String poid = (String) requestParams.get("poid");
            String companyid = (String) requestParams.get("companyid");
            params8.add(poid);
            params8.add(companyid);
//            String myquery = " select id from podetails where purchaseorder in (select id from purchaseorder where id=? and company = ?) ";
            String myquery = " select pod.id from podetails pod inner join purchaseorder po on pod.purchaseorder=po.id where po.id=? and po.company = ?";
            List list = executeSQLQuery( myquery, params8.toArray());
            Iterator itr = list.iterator();
            String idStrings = "";
            while (itr.hasNext()) {
                String invdid = itr.next().toString();
                idStrings += "'" + invdid + "',";
            }
            if (!StringUtil.isNullOrEmpty(idStrings)) {
                idStrings = idStrings.substring(0, idStrings.length() - 1);
            }
            /**
             * delete GST history data.
             */
            deleteGstTaxClassDetails(idStrings);
            ArrayList params1 = new ArrayList();
            String deletecustomdetails = "delete  from purchaseorderdetailcustomdata where poDetailID in (" + idStrings + ")";
            int numRows1 = executeSQLUpdate( deletecustomdetails, params1.toArray());
            String delQuery = "delete from PurchaseOrderDetail pod where pod.purchaseOrder.ID=? and pod.company.companyID=?";
            int numRows = executeUpdate( delQuery, new Object[]{poid, companyid});
            return new KwlReturnObject(true, "Goods Receipt Details has been deleted successfully.", null, null, numRows);
        } catch (Exception ex) {
            //throw ServiceException.FAILURE("Cannot Edit Purchase Order as it is already used in other Transaction.", ex);
            if(isConsignment){
                throw new AccountingException(messageSource.getMessage("acc.consignmentrequest.cannotedit", null, locale), ex);
            }else {
                throw new AccountingException(messageSource.getMessage("acc.SI.cannoteditpo", null, locale), ex);
            }
        }
    }
    
    /**
     * To delete Security gate Entry details
     * @param requestParams
     * @return
     * @throws AccountingException 
     */
    @Override
    public KwlReturnObject deleteSecurityGateEntryDetails(HashMap<String, Object> requestParams) throws AccountingException {
        //Delete Goods Receipt Details
        Locale locale = null;
        if (requestParams.containsKey("locale")) {
            locale = (Locale) requestParams.get("locale");
        }
        try {
            ArrayList params8 = new ArrayList();
            String securityId = (String) requestParams.get("securityId");
            String companyid = (String) requestParams.get("companyid");
            params8.add(securityId);
            params8.add(companyid);
            String myquery = " select sec.id from securitygatedetails sec inner join securitygateentry seg on sec.securitygateentry=seg.id where seg.id=? and seg.company = ?";
            List list = executeSQLQuery(myquery, params8.toArray());
            Iterator itr = list.iterator();
            String idStrings = "";
            while (itr.hasNext()) {
                String invdid = itr.next().toString();
                idStrings += "'" + invdid + "',";
            }
            if (!StringUtil.isNullOrEmpty(idStrings)) {
                idStrings = idStrings.substring(0, idStrings.length() - 1);
            }
            ArrayList params1 = new ArrayList();
            String delQuery = "delete from SecurityGateDetails sec where sec.securityGateEntry.ID=? and sec.company.companyID=?";
            int numRows = executeUpdate(delQuery, new Object[]{securityId, companyid});
            return new KwlReturnObject(true, "Security Gate Entry Details has been deleted successfully.", null, null, numRows);
        } catch (Exception ex) {
            throw new AccountingException(messageSource.getMessage("acc.security.cannoteditsecurity", null, locale), ex);
        }
    }
    @Override
    public KwlReturnObject deleteSecurityGateEntryDetailsTermMap(String securityDetailId, String companyId, Map<String, Object> requestParams) throws AccountingException {
        Locale locale = null;
        if (requestParams.containsKey("locale")) {
            locale = (Locale) requestParams.get("locale");
        }
        try {
            ArrayList params8 = new ArrayList();
            String delQuery = "delete from SGEDetailsTermMap  where sgedetails.ID=? ";
            int numRows = executeUpdate(delQuery, new Object[]{securityDetailId});
            return new KwlReturnObject(true, "Security Gate Entry Details has been deleted successfully.", null, null, numRows);
        } catch (Exception ex) {
            throw new AccountingException(messageSource.getMessage("acc.security.cannoteditsecurity", null, locale), ex);
        }
    }
 
    @Override
    public KwlReturnObject deletePurchaseOrderExpenseDetails(HashMap<String, Object> requestParams) throws AccountingException {
        //Delete Expense Goods Receipt Details
        try {
            ArrayList params = new ArrayList();
            String poid = (String) requestParams.get("poid");
            String companyid = (String) requestParams.get("companyid");
            params.add(poid);
            params.add(companyid);
            String delQuery = "delete from ExpensePODetail pod where pod.purchaseOrder.ID=? and pod.company.companyID=?";
            int numRows = executeUpdate( delQuery, new Object[]{poid, companyid});
            return new KwlReturnObject(true, "Goods Receipt Details has been deleted successfully.", null, null, numRows);
        } catch (Exception ex) {
            throw new AccountingException("Cannot Edit Purchase Order as it is already used in other Transaction.", ex);
        }
    }

    @Override
    public KwlReturnObject deletePurchaseOrderOtherDetails(String poid, String companyid) throws AccountingException {
        //Delete Goods Receipt Details
        try {
            String delQuery = "delete from POOtherDetails pod where pod.purchaseOrderId=? and pod.company.companyID=?";
            int numRows = executeUpdate( delQuery, new Object[]{poid, companyid});
            return new KwlReturnObject(true, "Details has been deleted successfully.", null, null, numRows);
        } catch (Exception ex) {
            // throw ServiceException.FAILURE("Cannot Edit Purchase Order as it is already used in other Transaction.", ex);
            throw new AccountingException("Cannot Edit Purchase Order as it is already used in other Transaction.", ex);
        }
    }

    @Override
    public KwlReturnObject deleteBillingPurchaseOrderDetails(String poid, String companyid) throws AccountingException {
        try {
            String delQuery = "delete from BillingPurchaseOrderDetail pod where pod.purchaseOrder.ID=? and pod.company.companyID=?";
            int numRows = executeUpdate( delQuery, new Object[]{poid, companyid});
            return new KwlReturnObject(true, "Goods Receipt Details has been deleted successfully.", null, null, numRows);
        } catch (Exception ex) {
            //throw ServiceException.FAILURE("Cannot Edit Purchase Order as it is already used in other Transaction.",ex);//+ex.getMessage(), ex);
            throw new AccountingException("Cannot Edit Purchase Order as it is already used in other Transaction.", ex);
        }
    }

    public int approvePendingOrder(String qid, boolean isbilling, String companyid, String userid) throws ServiceException {
        int approvedLevel = 0;
        User user = (User) get(User.class, userid);
        if (isbilling) {
            BillingPurchaseOrder po = (BillingPurchaseOrder) get(BillingPurchaseOrder.class, qid);
            approvedLevel = po.getPendingapproval();
            if (po.getPendingapproval() < po.getApprovallevel()) {
                po.setPendingapproval((po.getPendingapproval() + 1));
            } else {
                po.setPendingapproval(Constants.APPROVED);
            }

            po.setApprover(user);
        } else {
            PurchaseOrder po = (PurchaseOrder) get(PurchaseOrder.class, qid);
            approvedLevel = po.getPendingapproval();
            if (po.getPendingapproval() < po.getApprovallevel()) {
                po.setPendingapproval((po.getPendingapproval() + 1));
            } else {
                po.setPendingapproval(Constants.APPROVED);
            }

            po.setApprover(user);
        }




//        String query = "update PurchaseOrder set pendingapproval = 0 where ID=? and company.companyID=?";
//        if(isbilling) {
//            query = "update BillingPurchaseOrder set pendingapproval = 0 where ID=? and company.companyID=?";
//        }
//        int numRows = executeUpdate( query, new Object[]{qid, companyid});
        return approvedLevel;
    }

    public int pendingApprovalOrdersCount(String companyid) throws ServiceException {
        String query = "select * from ("
                + " select id from purchaseorder where deleteflag = 'F' and pendingapproval != 0 and company = ? "
                + " union "
                + " select id from billingpurchaseorder where deleteflag = 'F' and pendingapproval != 0 and company = ? "
                + ") as test";

        List list = executeSQLQuery( query, new Object[]{companyid, companyid});

        int count = list.size();

        return count;
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public KwlReturnObject approvePendingPurchaseOrder(String poID, String companyid, int status) throws ServiceException{
        String query = "update PurchaseOrder set approvestatuslevel = ? where ID=? and company.companyID=?";
        int numRows = executeUpdate( query, new Object[]{status, poID, companyid});
        return new KwlReturnObject(true, "Purchase Order has been updated successfully.", null, null, numRows);
    }
    @Override
    public KwlReturnObject setApproverForPurchaseOrder(String poID, String companyid,String approverID) throws ServiceException{
        String query = "update PurchaseOrder set approver.userID =? where ID=? and company.companyID=?";
        int numRows = executeUpdate( query, new Object[]{approverID,poID, companyid});
        return new KwlReturnObject(true, "Purchase Order has been updated successfully.", null, null, numRows);
    }
    
    @Override
    public KwlReturnObject rejectPendingPurchaseOrder(String poID, String companyid) throws ServiceException {
        try {
            String query = "update PurchaseOrder set deleted=true,approvestatuslevel = (-approvestatuslevel) where ID=? and company.companyID=?";
            int numRows = executeUpdate( query, new Object[]{poID, companyid});
            return new KwlReturnObject(true, "Purchase Order has been rejected successfully.", null, null, numRows);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.rejectPendingPurchaseOrder : " + ex.getMessage(), ex);
        }
    }

    
    public KwlReturnObject saveVendorQuotation(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        String companyid = "";
        try {
            String soid = (String) dataMap.get("id");
            if (dataMap.containsKey("companyid")) {
                companyid = (String) dataMap.get("companyid");
            }
            VendorQuotation quotation = new VendorQuotation();
            if (StringUtil.isNullOrEmpty(soid)) {
                quotation.setDeleted(false);
                if (dataMap.containsKey("createdby")) {
                    User createdby = dataMap.get("createdby") == null ? null : (User) get(User.class, (String) dataMap.get("createdby"));
                    quotation.setCreatedby(createdby);
                }
                if (dataMap.containsKey("modifiedby")) {
                    User modifiedby = dataMap.get("modifiedby") == null ? null : (User) get(User.class, (String) dataMap.get("modifiedby"));
                    quotation.setModifiedby(modifiedby);
                }
                if (dataMap.containsKey("createdon")) {
                    quotation.setCreatedon((Long) dataMap.get("createdon"));
                }
                if (dataMap.containsKey("updatedon")) {
                    quotation.setUpdatedon((Long) dataMap.get("updatedon"));
                }
            } else {
                quotation = (VendorQuotation) get(VendorQuotation.class, soid);
                if (dataMap.containsKey("modifiedby")) {
                    User modifiedby = dataMap.get("modifiedby") == null ? null : (User) get(User.class, (String) dataMap.get("modifiedby"));
                    quotation.setModifiedby(modifiedby);
                }
                if (dataMap.containsKey("updatedon")) {
                    quotation.setUpdatedon((Long) dataMap.get("updatedon"));
                }
            }
            if (dataMap.containsKey(Constants.SEQFORMAT)) {
                quotation.setSeqformat((SequenceFormat) get(SequenceFormat.class, (String) dataMap.get(Constants.SEQFORMAT)));
            }
            if (dataMap.containsKey(Constants.SEQNUMBER)) {
                quotation.setSeqnumber(Integer.parseInt(dataMap.get(Constants.SEQNUMBER).toString()));
            }
            if (dataMap.containsKey(Constants.DATEPREFIX) && dataMap.get(Constants.DATEPREFIX) != null) {
                quotation.setDatePreffixValue((String) dataMap.get(Constants.DATEPREFIX));
            }
            if (dataMap.containsKey(Constants.isApplyTaxToTerms) && dataMap.get(Constants.isApplyTaxToTerms) != null) {  // If Save As Draft
                quotation.setApplyTaxToTerms((Boolean) dataMap.get(Constants.isApplyTaxToTerms));
            }
            if (dataMap.containsKey(Constants.DATEAFTERPREFIX) && dataMap.get(Constants.DATEAFTERPREFIX) != null) {
                quotation.setDateAfterPreffixValue((String) dataMap.get(Constants.DATEAFTERPREFIX));
            }
            if (dataMap.containsKey(Constants.DATESUFFIX) && dataMap.get(Constants.DATESUFFIX) != null) {
                quotation.setDateSuffixValue((String) dataMap.get(Constants.DATESUFFIX));
            }
            if (dataMap.containsKey("entrynumber")) {
                quotation.setQuotationNumber((String) dataMap.get("entrynumber"));
            }
            if (dataMap.containsKey("shipLength")) {
                quotation.setShiplength(Double.parseDouble((String) dataMap.get("shipLength")));
            }
            if (dataMap.containsKey("invoicetype")) {
                quotation.setInvoicetype((String) dataMap.get("invoicetype"));
            }
            if (dataMap.containsKey("autogenerated")) {
                quotation.setAutoGenerated((Boolean) dataMap.get("autogenerated"));
            }
            if (dataMap.containsKey("perDiscount")) {
                quotation.setPerDiscount((Boolean) dataMap.get("perDiscount"));
            }
            if (dataMap.containsKey("discount")) {
                quotation.setDiscount((Double) dataMap.get("discount"));
            }
            if (dataMap.containsKey("memo")) {
                quotation.setMemo((String) dataMap.get("memo"));
            }
            if (dataMap.containsKey("posttext")) {
                quotation.setPostText((String) dataMap.get("posttext"));
            }
            if (dataMap.containsKey("vendorid")) {
                Vendor vendor = dataMap.get("vendorid") == null ? null : (Vendor) get(Vendor.class, (String) dataMap.get("vendorid"));
                quotation.setVendor(vendor);
            }
            if (dataMap.containsKey("agent")) {
                MasterItem agent = dataMap.get("agent") == null ? null : (MasterItem) get(MasterItem.class, (String) dataMap.get("agent"));
                quotation.setMasteragent(agent);
            }
            if (dataMap.containsKey("orderdate")) {
                quotation.setQuotationDate((Date) dataMap.get("orderdate"));
            }
            if (dataMap.containsKey("duedate")) {
                quotation.setDueDate((Date) dataMap.get("duedate"));
            }
            if (dataMap.containsKey("shipdate")) {
                quotation.setShipdate((Date) dataMap.get("shipdate"));
            }
            if (dataMap.containsKey("validdate")) {
                quotation.setValiddate((Date) dataMap.get("validdate"));
            }
            if (dataMap.containsKey("termid")) {
                Term term = (dataMap.get("termid") == null ? null : (Term) get(Term.class, (String) dataMap.get("termid")));
                quotation.setTerm(term);
            } 
            if (dataMap.containsKey("shipvia")) {
                quotation.setShipvia((String) dataMap.get("shipvia"));
            }
            if (dataMap.containsKey("fob")) {
                quotation.setFob((String) dataMap.get("fob"));
            }
            if (dataMap.containsKey("taxid")) {
                Tax tax = dataMap.get("taxid") == null ? null : (Tax) get(Tax.class, (String) dataMap.get("taxid"));
                quotation.setTax(tax);
            }
            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid"));
                quotation.setCompany(company);
            }

            
            if (dataMap.containsKey("isfavourite")) {
                if (dataMap.get("isfavourite") != null) {
                    quotation.setFavourite(Boolean.parseBoolean(dataMap.get("isfavourite").toString()));
                }
            }

            if (dataMap.containsKey(Constants.MARKED_PRINTED)) {
                if (dataMap.get(Constants.MARKED_PRINTED) != null) {
                    quotation.setPrinted(Boolean.parseBoolean(dataMap.get(Constants.MARKED_PRINTED).toString()));
                }
            }

            if (dataMap.containsKey("istemplate")) {
                quotation.setIstemplate((Integer) dataMap.get("istemplate"));
            } else {
                quotation.setIstemplate(0);
            }

            if (dataMap.containsKey("sodetails")) {
                if (dataMap.get("sodetails") != null) {
                    quotation.setRows((Set<VendorQuotationDetail>) dataMap.get("sodetails"));
                }
            }
            if (dataMap.containsKey("formtypeid")) {
                if (dataMap.get("formtypeid") != null) {
                    quotation.setFormtype((String) dataMap.get("formtypeid"));
                }
            }
            if (dataMap.containsKey("gtaapplicable") && dataMap.get("gtaapplicable") != null) {  //Special Case - Service Tax ( India Compliance)
                quotation.setGtaapplicable((Boolean) dataMap.get("gtaapplicable"));
            }
            
            if (dataMap.containsKey("currencyid")) {
                quotation.setCurrency((KWLCurrency) get(KWLCurrency.class, (String) dataMap.get("currencyid")));
            }
            if (dataMap.containsKey("venbilladdress")) {
                quotation.setBillTo((String) dataMap.get("venbilladdress"));
            }
            if (dataMap.containsKey("venshipaddress")) {
                quotation.setShipTo((String) dataMap.get("venshipaddress"));
            }
            if (dataMap.containsKey("billshipAddressid")) {
                BillingShippingAddresses bsa = dataMap.get("billshipAddressid") == null ? null : (BillingShippingAddresses) get(BillingShippingAddresses.class, (String) dataMap.get("billshipAddressid"));
                quotation.setBillingShippingAddresses(bsa);
            }
            if (dataMap.containsKey("gstIncluded") && dataMap.get("gstIncluded") != null) {
                quotation.setGstIncluded((Boolean) dataMap.get("gstIncluded"));
            }
            if (dataMap.containsKey("externalCurrencyRate")) {
                quotation.setExternalCurrencyRate((Double) dataMap.get("externalCurrencyRate"));
            }
            if (dataMap.containsKey(Constants.termsincludegst) && dataMap.get(Constants.termsincludegst) != null) {
                quotation.setTermsincludegst((Boolean)dataMap.get(Constants.termsincludegst));
            }
            if (dataMap.containsKey("isFixedAsset") && dataMap.get("isFixedAsset") != null) {
                quotation.setFixedAssetVQ(Boolean.parseBoolean(dataMap.get("isFixedAsset").toString()));
            }
            if (dataMap.containsKey("quotationamountinbase") && dataMap.get("quotationamountinbase") != null) {
                quotation.setQuotationamountinbase(authHandler.round(Double.valueOf(dataMap.get("quotationamountinbase").toString()), companyid));
            }

            if (dataMap.containsKey("quotationamount")  && dataMap.get("quotationamount") != null) { // quotation amount
                quotation.setQuotationamount(authHandler.round(Double.valueOf(dataMap.get("quotationamount").toString()), companyid));
            }
            
            if (dataMap.containsKey(Constants.roundingadjustmentamountinbase) && dataMap.get(Constants.roundingadjustmentamountinbase) != null) {
                quotation.setRoundingadjustmentamountinbase(Double.valueOf(dataMap.get(Constants.roundingadjustmentamountinbase).toString()));
            }

            if (dataMap.containsKey(Constants.roundingadjustmentamount) && dataMap.get(Constants.roundingadjustmentamount) != null) { // quotation amount
                quotation.setRoundingadjustmentamount(Double.valueOf(dataMap.get(Constants.roundingadjustmentamount).toString()));
            }
            if (dataMap.containsKey(Constants.IsRoundingAdjustmentApplied) && dataMap.get(Constants.IsRoundingAdjustmentApplied) != null) {  // If New GST Appliled
                quotation.setIsRoundingAdjustmentApplied((Boolean) dataMap.get(Constants.IsRoundingAdjustmentApplied));
            }
            
            if (dataMap.containsKey("discountinbase")  && dataMap.get("discountinbase") != null) { // Discount
                quotation.setDiscountinbase(authHandler.round(Double.valueOf(dataMap.get("discountinbase").toString()), companyid));
            }
            if (dataMap.containsKey("totallineleveldiscount")  && dataMap.get("totallineleveldiscount") != null) { // Discount
                quotation.setTotallineleveldiscount(authHandler.round(Double.valueOf(dataMap.get("totallineleveldiscount").toString()), companyid));
            }
            if (dataMap.containsKey(Constants.SUPPLIERINVOICENO) && !StringUtil.isNullOrEmpty((String) dataMap.get(Constants.SUPPLIERINVOICENO))) {
                quotation.setSupplierInvoiceNo((String) dataMap.get(Constants.SUPPLIERINVOICENO));
            }
            if (dataMap.containsKey("gstapplicable") && dataMap.get("gstapplicable") != null) {  // If New GST Appliled
                quotation.setIsIndGSTApplied((Boolean) dataMap.get("gstapplicable"));
            }
            if (dataMap.containsKey(Constants.isMerchantExporter) && dataMap.get(Constants.isMerchantExporter) != null) {  // If New GST Appliled
                quotation.setIsMerchantExporter((Boolean) dataMap.get(Constants.isMerchantExporter));
            }
            quotation.setTemplateid((Projreport_Template) get(Projreport_Template.class, Constants.HEADER_IMAGE_TEMPLATE_ID));
            saveOrUpdate(quotation);
            list.add(quotation);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveQuotation : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject saveQuotationDetails(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String sodid = (String) dataMap.get("id");

            VendorQuotationDetail quotationDetail = new VendorQuotationDetail();
            if (!StringUtil.isNullOrEmpty(sodid)) {
                quotationDetail = (VendorQuotationDetail) get(VendorQuotationDetail.class, sodid);
            }

            if (dataMap.containsKey("vendorquotationid")) {
                VendorQuotation quotation = dataMap.get("vendorquotationid") == null ? null : (VendorQuotation) get(VendorQuotation.class, (String) dataMap.get("vendorquotationid"));
                quotationDetail.setVendorquotation(quotation);
            }
            if (dataMap.containsKey("srno")) {
                quotationDetail.setSrno((Integer) dataMap.get("srno"));
            }
            if (dataMap.containsKey("rate")) {
                quotationDetail.setRate((Double) dataMap.get("rate"));
            }
            if (dataMap.containsKey("rateIncludingGst")) {
                quotationDetail.setRateincludegst((Double) dataMap.get("rateIncludingGst"));
            }
            if (dataMap.containsKey("quantity")) {
                quotationDetail.setQuantity((Double) dataMap.get("quantity"));
            }
            if (dataMap.containsKey("uomid")) {
                quotationDetail.setUom((UnitOfMeasure) get(UnitOfMeasure.class, dataMap.get("uomid").toString()));
            }
            if (dataMap.containsKey("baseuomquantity") && dataMap.get("baseuomquantity") != null && dataMap.get("baseuomquantity") != "") {
                quotationDetail.setBaseuomquantity((Double) dataMap.get("baseuomquantity"));
//            } else {
//                if (dataMap.containsKey("quantity")) {
//                    quotationDetail.setBaseuomquantity((Double) dataMap.get("quantity"));
//                }
            }
            if (dataMap.containsKey("baseuomrate") && dataMap.get("baseuomrate") != null && dataMap.get("baseuomrate") != "") {
                quotationDetail.setBaseuomrate((Double) dataMap.get("baseuomrate"));
//            } else {
//                quotationDetail.setBaseuomrate(1);
            }
            if (dataMap.containsKey("remark")) {
                quotationDetail.setRemark(StringUtil.DecodeText(StringUtil.isNullOrEmpty((String) dataMap.get("remark")) ? "" : (String) dataMap.get("remark")));
            }
            if (dataMap.containsKey("dependentType")) {
                quotationDetail.setDependentType((String) dataMap.get("dependentType"));
            }
            if (dataMap.containsKey("inouttime")) {
                quotationDetail.setInouttime((String) dataMap.get("inouttime"));
            }
            if (dataMap.containsKey("showquantity")) {
                quotationDetail.setShowquantity((String) dataMap.get("showquantity"));
            }
            if (dataMap.containsKey("desc")) {
                quotationDetail.setDescription((String) dataMap.get("desc"));
            }
            if (dataMap.containsKey("discount")) {
                quotationDetail.setDiscount((Double) dataMap.get("discount"));
            }
            if (dataMap.containsKey("productid")) {
                Product product = dataMap.get("productid") == null ? null : (Product) get(Product.class, (String) dataMap.get("productid"));
                quotationDetail.setProduct(product);
            }
            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid"));
                quotationDetail.setCompany(company);
            }
            if (dataMap.containsKey("discountispercent")) {
                quotationDetail.setDiscountispercent((Integer) dataMap.get("discountispercent"));
            } else {
                quotationDetail.setDiscountispercent(1);
            }
            if (dataMap.containsKey("rowTaxAmount")) {
                double rowTaxAmount = (Double) dataMap.get("rowTaxAmount");
                quotationDetail.setRowTaxAmount(rowTaxAmount);
            }
            if (dataMap.containsKey("recTermAmount") && !StringUtil.isNullOrEmpty(dataMap.get("recTermAmount").toString())) {
                double recTermAmount = Double.parseDouble(dataMap.get("recTermAmount").toString());
                quotationDetail.setRowTermAmount(recTermAmount);
            }
            if (dataMap.containsKey("OtherTermNonTaxableAmount") && !StringUtil.isNullOrEmpty(dataMap.get("OtherTermNonTaxableAmount").toString())) {
                double OtherTermNonTaxableAmount = Double.parseDouble(dataMap.get("OtherTermNonTaxableAmount").toString());
                quotationDetail.setOtherTermNonTaxableAmount(OtherTermNonTaxableAmount);
            }
            if (dataMap.containsKey("rowtaxid")) {
                Tax rowtax = (dataMap.get("rowtaxid") == null ? null : (Tax) get(Tax.class, (String) dataMap.get("rowtaxid")));
                quotationDetail.setTax(rowtax);
            }
            if (dataMap.containsKey("invstoreid")) {
                quotationDetail.setInvstoreid((String) dataMap.get("invstoreid"));
            } else {
                quotationDetail.setInvstoreid("");
            }
              if (dataMap.containsKey("invlocationid")) {
                quotationDetail.setInvlocid((String) dataMap.get("invlocationid"));
            } else {
                quotationDetail.setInvlocid("");
            }
            if (dataMap.containsKey("PurchaseRequisitionDetailsID") && dataMap.get("PurchaseRequisitionDetailsID") != null) {
                quotationDetail.setPurchaseRequisitionDetailsId((String)dataMap.get("PurchaseRequisitionDetailsID"));
            }
            if (dataMap.containsKey("RFQDetailsID") && dataMap.get("RFQDetailsID") != null) {
                quotationDetail.setRfqDetailsId((String) dataMap.get("RFQDetailsID"));
            }
            if (dataMap.containsKey("priceSource") && dataMap.get("priceSource") != null) {
                quotationDetail.setPriceSource((String) dataMap.get("priceSource"));
            }
            if (dataMap.containsKey("pricingbandmasterid") && dataMap.get("pricingbandmasterid") != null) {
                quotationDetail.setPricingBandMasterid((String)dataMap.get("pricingbandmasterid"));
            }
            if (dataMap.containsKey(Constants.isUserModifiedTaxAmount) && dataMap.get(Constants.isUserModifiedTaxAmount) != null) {
                quotationDetail.setIsUserModifiedTaxAmount((boolean) dataMap.get(Constants.isUserModifiedTaxAmount));
            }
            
            saveOrUpdate(quotationDetail);
            list.add(quotationDetail);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveQuotationDetail : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject getQuotationCount(String qno, String companyid) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        String q = "from VendorQuotation where quotationNumber=? and company.companyID=?";
        list = executeQuery( q, new Object[]{qno, companyid});
        count = list.size();
        return new KwlReturnObject(true, "", null, list, count);
    }

    public String columSortVendorQutation(String Col_Name, String Col_Dir) throws ServiceException {
        String String_Sort = "";
        if (Col_Name.equals("personname")) {
            String_Sort = " order by vendor.name " + Col_Dir;
        } else if (Col_Name.equals("aliasname")) {
            String_Sort = " order by vendor.aliasname " + Col_Dir;
        } else if (Col_Name.equals("billno")) {
            String_Sort = " order by vendorquotation.quotationnumber " + Col_Dir;
        } else if (Col_Name.equals("date")) {
            String_Sort = " order by vendorquotation.quotationdate " + Col_Dir;
        } else if (Col_Name.equals("agentname")) {
             String_Sort = " order by masteritem.value " + Col_Dir;
        }
        return String_Sort;

    }

    public KwlReturnObject getQuotations(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            DateFormat df = (DateFormat) request.get(Constants.df);
            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            String ss = (String) request.get(Constants.ss);
            String moduleid = "";
            if (request.containsKey(Constants.moduleid) && request.get(Constants.moduleid) != null) {
                moduleid = request.get(Constants.moduleid).toString();
            }
            boolean isfavourite = false;
            boolean linkFlagInPO = false;
            boolean linkFlagInGR = false;
            if (request.containsKey("linkFlagInPO") && request.get("linkFlagInPO") != null) {
                linkFlagInPO = Boolean.parseBoolean((String) request.get("linkFlagInPO"));
            }
            if (request.containsKey("linkFlagInGR") && request.get("linkFlagInGR") != null) {
                linkFlagInGR = Boolean.parseBoolean((String) request.get("linkFlagInGR"));
            }
            if (request.get("isfavourite") != null) {
                isfavourite = Boolean.parseBoolean((String) request.get(Constants.MARKED_FAVOURITE));
            }
            boolean isprinted = false;
            if (request.get(Constants.MARKED_PRINTED) != null) {
                isprinted = Boolean.parseBoolean((String) request.get(Constants.MARKED_PRINTED));
            }
            String vendorCategoryid = "";
            if (request.containsKey(Constants.customerCategoryid) && request.get(Constants.customerCategoryid) != null) {
                vendorCategoryid = (String) request.get(Constants.customerCategoryid);
            }
            boolean deleted = Boolean.parseBoolean((String) request.get("deleted"));
            boolean nondeleted = Boolean.parseBoolean((String) request.get("nondeleted"));
            String userDepartment = "";
            if (request.containsKey("userDepartment") && request.get("userDepartment") != null) {
                userDepartment = (String) request.get("userDepartment");
            }
            boolean isFixedAsset = false;
            if (request.containsKey("isFixedAsset") && request.get("isFixedAsset") != null) {
                isFixedAsset = (Boolean) request.get("isFixedAsset");
            }
            
            String userID = "";
            boolean isenableSalesPersonAgentFlow = false;
            if (request.containsKey("enablesalespersonagentflow") && request.get("enablesalespersonagentflow") != null && !StringUtil.isNullOrEmpty(request.get("enablesalespersonagentflow").toString())) {
                isenableSalesPersonAgentFlow = Boolean.parseBoolean(request.get("enablesalespersonagentflow").toString());
                if (isenableSalesPersonAgentFlow) {
                    if (request.containsKey("userid") && request.get("userid") != null && !StringUtil.isNullOrEmpty(request.get("userid").toString())) {
                        userID = (String) request.get("userid");
                    }
                }
            }
            String condition = "";
            ArrayList params = new ArrayList();
            if (nondeleted) {
                params.add((String) request.get(Constants.companyKey));
                //condition = " where vendorquotation.deleted=false and vendorquotation.company.companyID=?";
                condition = " where vendorquotation.deleteflag='F' and vendorquotation.company=?";
            } else if (deleted) {
                params.add((String) request.get(Constants.companyKey));
                //condition += " where vendorquotation.deleted=true and vendorquotation.company.companyID=?";
                condition += " where vendorquotation.deleteflag='T' and vendorquotation.company=?";
            } else {
                params.add((String) request.get(Constants.companyKey));
                //condition += " where vendorquotation.company.companyID=?";
                condition += " where vendorquotation.company=?";
            }
            String billDate = "";
            if (request.containsKey(Constants.BillDate)) {
                billDate = (String) request.get(Constants.BillDate);
            }
            boolean validflag = false;
            if (request.get("validflag") != null) {
                validflag = Boolean.parseBoolean((String) request.get(Constants.ValidFlag));
            }
            //String condition = " where vendorquotation.deleted=false and vendorquotation.company.companyID=?";
            if (request.get("archieve") != null) {
                if ((Integer) request.get("archieve") == 0) {
                    //condition += " and vendorquotation.archieve = 0 ";
                    condition += " and vendorquotation.archieve = 0 ";
                } else if ((Integer) request.get("archieve") == 1) {
                    //condition += " and vendorquotation.archieve = 1 ";
                    condition += " and vendorquotation.archieve = 1 ";
                }
            }    

            if (isfavourite) {
                // condition += " and vendorquotation.favourite = true ";
                condition += " and vendorquotation.favouriteflag = 1 ";
            }

            if (isprinted) {
                //condition += " and vendorquotation.printedflag = true ";
                condition += " and vendorquotation.printedflag = 1 ";
            }

            if (validflag) {
                params.add(df.parse(billDate));
                // condition += " and (vendorquotation.validdate>=? or vendorquotation.validdate is NULL) ";
                condition += " and (vendorquotation.validdate>=? or vendorquotation.validdate is null) ";
            }

            if (request.get(Constants.productid) != null && !request.get(Constants.productid).toString().equals("")) {
                //condition += " and vendorquotation.ID in (select vqd.vendorquotation.ID from VendorQuotationDetail vqd where vqd.product.ID ='" + request.get(Constants.productid).toString() + "' )";
                condition += " and vendorquotation.id in (select vqd.vendorquotation from  vendorquotationdetails vqd where vqd.product ='" + request.get(Constants.productid).toString() + "' )";
            }
            
            if (request.containsKey("linknumber") && request.get("linknumber") != null && !request.get("linknumber").toString().equals("")) {
                condition += " and vendorquotation.quotationnumber = ? ";
                params.add(request.get("linknumber"));
            }

            if (request.get(Constants.productCategoryid) != null) {
                String productCategory = (String) request.get(Constants.productCategoryid);
                if (!StringUtil.isNullOrEmpty(productCategory)) {
                    //condition += " and vendorquotation.ID in (select vqd.vendorquotation.ID from VendorQuotationDetail vqd where vqd.product.ID in ( select pcm.productID from ProductCategoryMapping pcm where pcm.productCategory='" +productCategory+ "' ))";
                    condition += " and vendorquotation.id in (select vqd.vendorquotation from vendorquotationdetails vqd where vqd.product in ( select pcm.productid from productcategorymapping pcm where pcm.productcategory='" + productCategory + "' ))";
                }
            }
            String searchJoin = "";
            String joinstring = "";
            //Ignore QNs created as only templates.
            //condition += " and vendorquotation.istemplate != 2 ";
            condition += " and vendorquotation.istemplate != 2 ";
            if (request.containsKey("pendingapproval") && request.get("pendingapproval") !=null) {
                if(Boolean.parseBoolean(request.get("pendingapproval").toString())){
                    params.add(11);
                    condition += " and vendorquotation.approvestatuslevel != ? ";
                }else{
                    params.add(11);
                    condition += " and vendorquotation.approvestatuslevel = ? ";
                }
            }

            if (!StringUtil.isNullOrEmpty(ss)) {
                //String[] searchcol = new String[]{"QuotationNumber", "vendorquotation.memo", "vendorquotation.vendor.name"};
                String[] searchcol = new String[]{"vendorquotation.quotationnumber", "vendorquotation.memo", "vendorquotation.supplierinvoiceno", "vendor.name","vendor.aliasname", "product.name", "product.productid"};
                Map SearchStringMap = StringUtil.insertParamSearchStringMap(params, ss, 7);
                StringUtil.insertParamSearchString(SearchStringMap);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                condition += searchQuery;
                searchJoin = " inner join vendorquotationdetails on vendorquotationdetails.vendorquotation = vendorquotation.id "
                        + " inner join product on vendorquotationdetails.product= product.id "
                        + " inner join vendor on vendorquotation.vendor= vendor.id";
            }
//            if (!StringUtil.isNullOrEmpty(ss)) {
//                for (int i = 0; i < 3; i++) {
//                    params.add(ss + "%");
//                }
//                condition += " and ( QuotationNumber like ? or vendorquotation.memo like ? or vendorquotation.vendor.name like ? )";
//            }            
            if (request.containsKey("billId")) {
                String billId = (String) request.get("billId");
                if (!StringUtil.isNullOrEmpty(billId)) {
                    params.add(billId);
                    //condition += " and vendorquotation.ID=? ";
                    condition += " and vendorquotation.id=? ";
                }
            }
            if (linkFlagInGR) {
                //condition += " and ( vendorquotation.linkflag = 0 or vendorquotation.linkflag = 1 ) ";
                condition += " and ( vendorquotation.linkflag = 0 or vendorquotation.linkflag = 1 ) and isopen='T' ";
            }
            if (linkFlagInPO) {
                //condition += " and ( vendorquotation.linkflag = 0 or vendorquotation.linkflag = 2 ) ";
                condition += " and ( vendorquotation.linkflag = 0 or vendorquotation.linkflag = 2 ) and isopen='T'";
            }
            String vendorId = (String) request.get(Constants.REQ_vendorId);
            if (!StringUtil.isNullOrEmpty(vendorId)) {
                if (vendorId.contains(",")) {
                    vendorId = AccountingManager.getFilterInString(vendorId);
                    condition += " and vendorquotation.vendor IN" + vendorId;
                } else {
                    params.add(vendorId);
                    condition += " and vendorquotation.vendor = ? ";
                }
            }
            if (!StringUtil.isNullOrEmpty(vendorCategoryid) && !StringUtil.equal(vendorCategoryid, "-1") && !StringUtil.equal(vendorCategoryid, "All")) {
                //condition += " and vendorquotation.vendor.ID in (select vcm.vendorID from VendorCategoryMapping vcm where vcm.vendorCategory = '" +vendorCategoryid+ "' )  ";
                condition += " and vendorquotation.vendor in (select vcm.vendorid from vendorcategorymapping vcm where vcm.vendorcategory = '" + vendorCategoryid + "' )  ";
            }
            String currencyId = (String) request.get("currencyid");
            if (!StringUtil.isNullOrEmpty(currencyId)) {
                params.add(currencyId);
                //condition += " and vendorquotation.currency.currencyID=?";
                condition += " and vendorquotation.currency=?";
            }
            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                //condition += " and (vendorquotation.quotationDate >=? and vendorquotation.quotationDate <=?)";
                condition += " and (vendorquotation.quotationdate >=? and vendorquotation.quotationdate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }

            if (request.containsKey("includingGSTFilter") && request.get("includingGSTFilter") != null) {
                //condition += " and vendorquotation.gstIncluded = ?";
                condition += " and vendorquotation.gstincluded = ?";
                params.add((Boolean) request.get("includingGSTFilter"));
            }
            
            if (!StringUtil.isNullOrEmpty(userDepartment)) {
                joinstring += " inner join users on users.userid = vendorquotation.createdby ";
                condition += " and users.department = ? ";
                params.add(userDepartment);
            }
            
            if (isFixedAsset) {
                condition += " and vendorquotation.isfixedassetvq = true ";
            } else {
                condition += " and vendorquotation.isfixedassetvq = false ";
            }

            String appendCase = "and";
            String mySearchFilterString = "";
            String searchDefaultFieldSQL = "";
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (request.containsKey("filterConjuctionCriteria") && request.get("filterConjuctionCriteria") != null) {
                if (request.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            String Searchjson = "";
            if (request.containsKey("searchJson") && request.get("searchJson") != null) {
                Searchjson = request.get("searchJson").toString();

                if (!StringUtil.isNullOrEmpty(Searchjson)) {
                    JSONObject serachJobj = new JSONObject(Searchjson);
                    JSONArray customSearchFieldArray = new JSONArray();
                    JSONArray defaultSearchFieldArray = new JSONArray();
                    StringUtil.seperateCostomAndDefaultSerachJson(serachJobj, customSearchFieldArray, defaultSearchFieldArray);
                    if (defaultSearchFieldArray.length() > 0) {
                        /*
                         Advance Search For Default Form fields
                         */
                        ArrayList tableArray = new ArrayList();
                        tableArray.add("customer"); //this table array used to identified wheather join exists on table or not                         
                        Map<String, Object> map = buildSqlDefaultFieldAdvSearch(defaultSearchFieldArray, params, moduleid, tableArray, filterConjuctionCriteria);
                        searchJoin += map.containsKey("searchjoin") ? map.get("searchjoin") : "";
                        searchDefaultFieldSQL = (String) (map.containsKey("condition") ? map.get("condition") : "");
                        searchJoin += " left join vqlinking on vqlinking.docid=vendorquotation.id and vqlinking.sourceflag = 1 ";
                    }
                    if (customSearchFieldArray.length() > 0) {   //Advance search case for Custome field
                        request.put(Constants.Searchjson, Searchjson);
                        request.put(Constants.appendCase, appendCase);
                        request.put("filterConjuctionCriteria", filterConjuctionCriteria);
                        mySearchFilterString = String.valueOf(StringUtil.getAdvanceSearchString(request, true).get(Constants.myResult));
//                    joinString = " inner join salesreturncustomdata on salesreturncustomdata.salesreturnid=salesreturn.accsalesreturncustomdataref ";
                        mySearchFilterString = mySearchFilterString.replaceAll("VendorQuotationCustomData", "vendorquotationcustomdata");
                        String innerJoinOnDetailTable = "inner join vendorquotationdetails on vendorquotationdetails.vendorquotation=vendorquotation.id";
                        boolean isInnerJoinAppend = false;
                        if (mySearchFilterString.contains("vendorquotationcustomdata")) {
                            joinstring = " inner join vendorquotationcustomdata on vendorquotationcustomdata.vendorquotationid=vendorquotation.accvendorquotationcustomdataref  ";
                        }
                        if (mySearchFilterString.contains("AccJEDetailCustomData")) {
                            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "vendorquotationdetailscustomdata");
                            joinstring += innerJoinOnDetailTable + " left join vendorquotationdetailscustomdata on vendorquotationdetails.id=vendorquotationdetailscustomdata.vendorquotationdetailsid ";
                            isInnerJoinAppend = true;
                        }
                        if (mySearchFilterString.contains("AccJEDetailsProductCustomData")) {
                            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailsProductCustomData", "vqdetailproductcustomdata");
                            joinstring += (isInnerJoinAppend ? "" : innerJoinOnDetailTable) + " left join vqdetailproductcustomdata on vendorquotationdetails.id=vqdetailproductcustomdata.vqDetailID ";
                            isInnerJoinAppend = true;
                        }
                        if (mySearchFilterString.contains("VendorCustomData")) {
                            joinstring += " inner join vendor on vendor.id=vendorquotation.vendor ";
                            joinstring += " left join vendorcustomdata  on vendorcustomdata.vendorId=vendor.id ";
                            mySearchFilterString = mySearchFilterString.replaceAll("VendorCustomData", "vendorcustomdata");
                        }
                        //product custom data
                        if (mySearchFilterString.contains("accproductcustomdata")) {
                            joinstring += (isInnerJoinAppend ? "" : innerJoinOnDetailTable) + " left join product on product.id=vendorquotationdetails.product left join accproductcustomdata on accproductcustomdata.productId=product.id";
                        }
                        StringUtil.insertParamAdvanceSearchString1(params, Searchjson);
                    }
                    mySearchFilterString = StringUtil.combineCustomAndDefaultSearch(searchDefaultFieldSQL, mySearchFilterString, filterConjuctionCriteria);
                }
            }
            String orderBy = "";
            String stringSort = "";
            String joinstring4 = "";
            boolean isAlreadyVendorInnerJoinPresentInQuery=false;
            if (request.containsKey("dir") && request.containsKey("sort")) {
                String Col_Name = request.get("sort").toString();
                String Col_Dir = request.get("dir").toString();
                if(StringUtil.isNullOrEmpty(searchJoin) && (Col_Name.equals("personname") || Col_Name.equals("aliasname"))){
                    joinstring += " inner join vendor on vendor.id=vendorquotation.vendor ";
                    isAlreadyVendorInnerJoinPresentInQuery=true;
                }
                if(Col_Name.equals("agentname")){
                    joinstring4 += " left join masteritem on masteritem.id = vendorquotation.masteragent ";
                }
                stringSort = columSortVendorQutation(Col_Name, Col_Dir);
                orderBy += stringSort;

            } else {
                orderBy = " order by vendorquotation.quotationdate desc";
            }
            String salesPersonMappingQuery = "";
//            if (isenableSalesPersonAgentFlow && !StringUtil.isNullOrEmpty(userID)) {
//                if(!isAlreadyVendorInnerJoinPresentInQuery){
//                 joinstring += " inner join vendor on vendor.id=vendorquotation.vendor ";
//                }
//                salesPersonMappingQuery = " left join vendoragentmapping spm on spm.vendorid=vendorquotation.vendor  left join masteritem  mst on mst.id=spm.agent ";
//                joinstring+=salesPersonMappingQuery;
//                condition += " and ((mst.user= '" + userID + "' or mst.user is null  and vendor.vendavailtoagent='T' ) or  (vendor.vendavailtoagent='F')) ";
//            }
            if (isenableSalesPersonAgentFlow && !StringUtil.isNullOrEmpty(userID)) {//this block is executed only when owners restriction feature is on 
                String salesPersonID = (String) request.get("salesPersonid");
                String salespersonQuery = "";
                 if (!StringUtil.isNullOrEmpty(salesPersonID)) {
                   salesPersonID= AccountingManager.getFilterInString(salesPersonID);
                    salespersonQuery = "  vendorquotation.masteragent in " + salesPersonID + " or ";
                }
                
                condition += " and ( " + salespersonQuery + "  vendorquotation.createdby='" + userID + "' or vendorquotation.masteragent is null  ) ";
            }
            String query = "select DISTINCT vendorquotation.id from vendorquotation " + searchJoin + joinstring + joinstring4 + condition + mySearchFilterString;
            query += orderBy;
            list = executeSQLQuery( query, params.toArray());
            count = list.size();
            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                list = executeSQLQueryPaging( query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accSalesOrderImpl.getQuotations:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
    public KwlReturnObject getQuotationsForScript(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = request.get("companyid").toString();
            String linkFlag = request.get("linkFlag").toString();
            ArrayList params = new ArrayList();
            String query="select vendorquotation.id from vendorquotation where vendorquotation.company =? and vendorquotation.linkflag=? and vendorquotation.deleteflag='F'";
            params.add(companyid);
            params.add(linkFlag);
            list = executeSQLQuery( query, params.toArray());
            count = list.size();           
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accSalesOrderImpl.getQuotations:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
    public KwlReturnObject getGRForScript(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = request.get("companyid").toString();
            
            ArrayList params = new ArrayList();
            String query="select grorder.id from grorder where grorder.company =? and grorder.deleteflag='F'";
            params.add(companyid);
            list = executeSQLQuery( query, params.toArray());
            count = list.size();           
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accSalesOrderImpl.getQuotations:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
    
    @Override
    public KwlReturnObject getAllCompanyFromDb(String [] subdomain) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            ArrayList params = new ArrayList();
            String query="select companyid from company where deleteflag=?";
            params.add(0);
            if (subdomain != null) {
                String condtion="";
                for (int i = 0; i < subdomain.length; i++) {
                    condtion += "'" + subdomain[i] + "'";
                    if (subdomain.length - 1 != i) {
                        condtion += ",";
                    }
                }
                query += " and subdomain in ("+condtion+")";
            }
            list = executeSQLQuery( query, params.toArray());
            count = list.size();           
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accSalesOrderImpl.getQuotations:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
    @Override
    public KwlReturnObject updateVQLinkflag(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            VendorQuotation quotation = (VendorQuotation) requestParams.get("quotation");
            int num = Integer.parseInt((String) requestParams.get("value"));
            Boolean isopen =requestParams.get("isOpen")!=null?(Boolean)requestParams.get("isOpen"):false;
            quotation.setLinkflag(num);
            quotation.setIsOpen(isopen);
            saveOrUpdate(quotation);
        } catch (Exception ex) { 
            throw ServiceException.FAILURE("accPurchaseOrderImpl.updateVQLinkflag:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }

    @Override
    public KwlReturnObject updatePRisOpenInPOFlag(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            PurchaseRequisition purchaseRequisition = (PurchaseRequisition) requestParams.get("purchaseRequisition");
            Boolean isOpenInPO =requestParams.get("isOpenInPO")!=null?(Boolean)requestParams.get("isOpenInPO"):false;
            purchaseRequisition.setIsOpenInPO(isOpenInPO);
            saveOrUpdate(purchaseRequisition);
        } catch (Exception ex) { 
            throw ServiceException.FAILURE("accPurchaseOrderImpl.updatePRisOpenInPOFlag:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }

    public KwlReturnObject getQuotationDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from VendorQuotationDetail";
        return buildNExecuteQuery( query, requestParams);
    }

    public KwlReturnObject deleteQuotation(String qid, String companyid) throws ServiceException {
        String query = "update VendorQuotation set deleted=true where ID=? and company.companyID=?";
        int numRows = executeUpdate( query, new Object[]{qid, companyid});
        return new KwlReturnObject(true, "Quotation has been deleted successfully.", null, null, numRows);
    }

    public KwlReturnObject deleteQuotationsPermanent(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            String delQuery1 = "", delQuery2 = "", delQuery3 = "", delQuery4 = "", delQuery5 = "", delQuery6;
            int numtotal = 0;
            if (requestParams.containsKey("qid") && requestParams.containsKey("companyid")) {
                
                boolean isFixedAsset = false;
                if (requestParams.containsKey("isFixedAsset") && requestParams.get("isFixedAsset") != null) {
                    isFixedAsset = (Boolean) requestParams.get("isFixedAsset");
                }

                ArrayList params8 = new ArrayList();
                params8.add(requestParams.get("qid"));
                params8.add(requestParams.get("companyid"));
//                String myquery = " select id from vendorquotationdetails where vendorquotation in (select id from vendorquotation where id=? and company = ?) ";
                String myquery = "select vqd.id from vendorquotationdetails vqd inner join vendorquotation vq on vqd.vendorquotation=vq.id where vq.id=? and vq.company = ?";
                List list = executeSQLQuery( myquery, params8.toArray());
                Iterator itr = list.iterator();
                String idStrings = "";
                while (itr.hasNext()) {


                    String invdid = itr.next().toString();
                    idStrings += "'" + invdid + "',";
                }
                if (!StringUtil.isNullOrEmpty(idStrings)) {
                    idStrings = idStrings.substring(0, idStrings.length() - 1);
                }
                
                if (isFixedAsset) {
                    HashMap<String, Object> requestMap = new HashMap<String, Object>();
                    requestMap.put("companyid", requestParams.get("companyid"));
                    requestMap.put("qid", requestParams.get("qid"));
                    
                    deleteVendorQuotationAssetDetails(requestMap);
                }

                ArrayList params5 = new ArrayList();
                params5.add(requestParams.get("qid"));
                params5.add(requestParams.get("companyid"));
                delQuery5 = " delete from vendorquotationdetails where vendorquotation in (select id from vendorquotation where id=? and company = ?) ";
                int numRows5 = executeSQLUpdate( delQuery5, params5.toArray());



                ArrayList params9 = new ArrayList();
                params9.add(requestParams.get("qid"));
                params9.add(requestParams.get("companyid"));
                String myquery1 = " select id from vendorquotation where id=? and company = ?";
                List list1 = executeSQLQuery( myquery1, params9.toArray());
                Iterator itr1 = list1.iterator();
                String journalent = "";
                while (itr1.hasNext()) {

                    String jeidi = itr1.next().toString();
                    journalent += "'" + jeidi + "',";
                }
                if (!StringUtil.isNullOrEmpty(journalent)) {
                    journalent = journalent.substring(0, journalent.length() - 1);
                }
                /**
                 * delete GST history data.
                 */
                deleteGstTaxClassDetails(idStrings);
                ArrayList params1 = new ArrayList();
                delQuery1 = "delete  from vendorquotationdetailscustomdata where vendorquotationdetailsid in (" + idStrings + ")";
                int numRows1 = executeSQLUpdate( delQuery1, params1.toArray());

                ArrayList params6 = new ArrayList();
                params6.add(requestParams.get("companyid"));
                params6.add(requestParams.get("qid"));
                String vendorQuotationID = (String) requestParams.get("qid");
                int numRows8 = 0;

                String delQuery7 = "delete from vendorquotationtermmap where vendorquotation=?";
                numRows8 = executeSQLUpdate( delQuery7, new Object[]{vendorQuotationID});
                /**
                 * delete GST history data.
                 */
                deleteGstDocHistoryDetails(vendorQuotationID);
                delQuery6 = "delete from vendorquotation where company = ? and id=?";
                int numRows6 = executeSQLUpdate( delQuery6, params6.toArray());


                ArrayList params2 = new ArrayList();
                delQuery2 = "delete  from vendorquotationcustomdata where vendorQuotationId in (" + journalent + ")";
                int numRows2 = executeSQLUpdate( delQuery2, params2.toArray());


                numtotal = numRows1 + numRows2 + numRows5 + numRows6 + numRows8;
            }

            return new KwlReturnObject(true, "Quotation has been deleted successfully.", null, null, numtotal);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("Cannot delete Quotation as its referance child field is not deleted.", ex);//+ex.getMessage(), ex);
        }

    }

    public KwlReturnObject archieveQuotation(String qid, String companyid) throws ServiceException {
        String query = "update VendorQuotation set archieve=1 where ID=? and company.companyID=?";
        int numRows = executeUpdate( query, new Object[]{qid, companyid});
        return new KwlReturnObject(true, "Quotation has been archieved successfully.", null, null, numRows);
    }

    public KwlReturnObject unArchieveQuotation(String qid, String companyid) throws ServiceException {
        String query = "update VendorQuotation set archieve=0 where ID=? and company.companyID=?";
        int numRows = executeUpdate( query, new Object[]{qid, companyid});
        return new KwlReturnObject(true, "Quotation has been archieved successfully.", null, null, numRows);
    }

    public KwlReturnObject savePurchaseRequisition(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String soid = (String) dataMap.get("id");

            PurchaseRequisition requisition = new PurchaseRequisition();
            if (StringUtil.isNullOrEmpty(soid)) {
                requisition.setDeleted(false);
                if (dataMap.containsKey("createdby")) {
                    User createdby = dataMap.get("createdby") == null ? null : (User) get(User.class, (String) dataMap.get("createdby"));
                    requisition.setCreatedby(createdby);
                }
                if (dataMap.containsKey("modifiedby")) {
                    User modifiedby = dataMap.get("modifiedby") == null ? null : (User) get(User.class, (String) dataMap.get("modifiedby"));
                    requisition.setModifiedby(modifiedby);
                }
                if (dataMap.containsKey("createdon")) {
                    requisition.setCreatedon((Long) dataMap.get("createdon"));
                }
            } else {
                requisition = (PurchaseRequisition) get(PurchaseRequisition.class, soid);
                if (dataMap.containsKey("modifiedby")) {
                    User modifiedby = dataMap.get("modifiedby") == null ? null : (User) get(User.class, (String) dataMap.get("modifiedby"));
                    requisition.setModifiedby(modifiedby);
                }
            }
            if (dataMap.containsKey(Constants.SEQFORMAT)) {
                requisition.setSeqformat((SequenceFormat) get(SequenceFormat.class, (String) dataMap.get(Constants.SEQFORMAT)));
            }
            if (dataMap.containsKey(Constants.SEQNUMBER)) {
                requisition.setSeqnumber(Integer.parseInt(dataMap.get(Constants.SEQNUMBER).toString()));
            }
            if (dataMap.containsKey(Constants.DATEPREFIX) && dataMap.get(Constants.DATEPREFIX) != null) {
                requisition.setDatePreffixValue((String) dataMap.get(Constants.DATEPREFIX));
            }
            if (dataMap.containsKey(Constants.DATEAFTERPREFIX) && dataMap.get(Constants.DATEAFTERPREFIX) != null) {
                requisition.setDateAfterPreffixValue((String) dataMap.get(Constants.DATEAFTERPREFIX));
            }
            if (dataMap.containsKey(Constants.DATESUFFIX) && dataMap.get(Constants.DATESUFFIX) != null) {
                requisition.setDateSuffixValue((String) dataMap.get(Constants.DATESUFFIX));
            }
            if (dataMap.containsKey("entrynumber")) {
                requisition.setPrNumber((String) dataMap.get("entrynumber"));
            }
            if (dataMap.containsKey("autogenerated")) {
                requisition.setAutoGenerated((Boolean) dataMap.get("autogenerated"));
            }
            if (dataMap.containsKey("perDiscount")) {
                requisition.setPerDiscount((Boolean) dataMap.get("perDiscount"));
            }
            if (dataMap.containsKey("discount")) {
                requisition.setDiscount((Double) dataMap.get("discount"));
            }
            if (dataMap.containsKey("approvestatuslevel")) {
                requisition.setApprovestatuslevel((Integer) dataMap.get("approvestatuslevel"));
            }
            if (dataMap.containsKey("memo")) {
                requisition.setMemo((String) dataMap.get("memo"));
            }
            if (dataMap.containsKey("vendorid")) {
                Vendor vendor = dataMap.get("vendorid") == null ? null : (Vendor) get(Vendor.class, (String) dataMap.get("vendorid"));
                requisition.setVendor(vendor);
            }
            if (dataMap.containsKey("orderdate")) {
                requisition.setRequisitionDate((Date) dataMap.get("orderdate"));
            }
            if (dataMap.containsKey("duedate")) {
                requisition.setDueDate((Date) dataMap.get("duedate"));
            }
            if (dataMap.containsKey("taxid")) {
                Tax tax = dataMap.get("taxid") == null ? null : (Tax) get(Tax.class, (String) dataMap.get("taxid"));
                requisition.setTax(tax);
            }
            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid"));
                requisition.setCompany(company);
            }
            if (dataMap.containsKey("userid")) {
                User user = dataMap.get("userid") == null ? null : (User) get(User.class, (String) dataMap.get("userid"));
                requisition.setUsers(user);
            }
            if (dataMap.containsKey("sodetails")) {
                if (dataMap.get("sodetails") != null) {
                    requisition.setRows((Set<PurchaseRequisitionDetail>) dataMap.get("sodetails"));
                }
            }
            if (dataMap.containsKey(Constants.isSaveAsDraft) && dataMap.get(Constants.isSaveAsDraft) != null) {  // If Save As Draft
                requisition.setIsDraft((Boolean) dataMap.get(Constants.isSaveAsDraft));
            }
            if (dataMap.containsKey("currencyid")) {
                requisition.setCurrency((KWLCurrency) get(KWLCurrency.class, (String) dataMap.get("currencyid")));
            }
            if (dataMap.containsKey("isfavourite")) {
                if (dataMap.get("isfavourite") != null) {
                    requisition.setFavourite(Boolean.parseBoolean(dataMap.get("isfavourite").toString()));
                }
            }
           if (dataMap.containsKey(Constants.MARKED_PRINTED)) {
                if (dataMap.get(Constants.MARKED_PRINTED) != null) {
                    requisition.setPrinted(Boolean.parseBoolean(dataMap.get(Constants.MARKED_PRINTED).toString()));
                }
            }
            if (dataMap.containsKey("isFixedAsset") && dataMap.get("isFixedAsset") != null) {
                requisition.setFixedAssetPurchaseRequisition(Boolean.parseBoolean(dataMap.get("isFixedAsset").toString()));
            }
            requisition.setTemplateid((Projreport_Template) get(Projreport_Template.class, Constants.HEADER_IMAGE_TEMPLATE_ID));
            saveOrUpdate(requisition);
            list.add(requisition);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("savePurchaseRequisition : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject savePurchaseRequisitionDetails(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String sodid = (String) dataMap.get("id");

            PurchaseRequisitionDetail requisitionDetail = new PurchaseRequisitionDetail();
            if (!StringUtil.isNullOrEmpty(sodid)) {
                requisitionDetail = (PurchaseRequisitionDetail) get(PurchaseRequisitionDetail.class, sodid);
            }

            if (dataMap.containsKey("vendorquotationid")) {
                PurchaseRequisition quotation = dataMap.get("vendorquotationid") == null ? null : (PurchaseRequisition) get(PurchaseRequisition.class, (String) dataMap.get("vendorquotationid"));
                requisitionDetail.setPurchaserequisition(quotation);
            }
            if (dataMap.containsKey("srno")) {
                requisitionDetail.setSrno((Integer) dataMap.get("srno"));
            }
            if (dataMap.containsKey("rate")) {
                requisitionDetail.setRate((Double) dataMap.get("rate"));
            }
            if (dataMap.containsKey("quantity")) {
                requisitionDetail.setQuantity((Double) dataMap.get("quantity"));
            }
            if (dataMap.containsKey("balanceqty") && dataMap.get("balanceqty") != null && dataMap.get("balanceqty") != "") {
                requisitionDetail.setBalanceqty((Double) dataMap.get("balanceqty"));
            }
            if (dataMap.containsKey("uomid")) {
                requisitionDetail.setUom((UnitOfMeasure) get(UnitOfMeasure.class, dataMap.get("uomid").toString()));
            }
            if (dataMap.containsKey("baseuomquantity") && dataMap.get("baseuomquantity") != null && dataMap.get("baseuomquantity") != "") {
                requisitionDetail.setBaseuomquantity((Double) dataMap.get("baseuomquantity"));
//            } else {
//                if (dataMap.containsKey("quantity")) {
//                    requisitionDetail.setBaseuomquantity((Double) dataMap.get("quantity"));
//                }
            }
            if (dataMap.containsKey("baseuomrate") && dataMap.get("baseuomrate") != null && dataMap.get("baseuomrate") != "") {
                requisitionDetail.setBaseuomrate((Double) dataMap.get("baseuomrate"));
//            } else {
//                requisitionDetail.setBaseuomrate(1);
            }
            if (dataMap.containsKey("remark")) {
                requisitionDetail.setRemark(StringUtil.DecodeText(StringUtil.isNullOrEmpty((String) dataMap.get("remark")) ? "" : (String) dataMap.get("remark")));
            }
            if (dataMap.containsKey("desc")) {
                requisitionDetail.setProductdescription((String) dataMap.get("desc"));
            } else {
                requisitionDetail.setProductdescription("");
            }
            if (dataMap.containsKey("approverremark")) {
                requisitionDetail.setApproverremark((String) dataMap.get("approverremark"));
            }
            if (dataMap.containsKey("discount")) {
                requisitionDetail.setDiscount((Double) dataMap.get("discount"));
            }
            if (dataMap.containsKey("workorderdetailid")) {
                requisitionDetail.setWorkorderdetailid((String) dataMap.get("workorderdetailid"));
            }
            if (dataMap.containsKey("productid")) {
                Product product = dataMap.get("productid") == null ? null : (Product) get(Product.class, (String) dataMap.get("productid"));
                requisitionDetail.setProduct(product);
            }
            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid"));
                requisitionDetail.setCompany(company);
            }
            if (dataMap.containsKey("discountispercent")) {
                requisitionDetail.setDiscountispercent((Integer) dataMap.get("discountispercent"));
            } else {
                requisitionDetail.setDiscountispercent(1);
            }
            if (dataMap.containsKey("rowtaxid")) {
                Tax rowtax = (dataMap.get("rowtaxid") == null ? null : (Tax) get(Tax.class, (String) dataMap.get("rowtaxid")));
                requisitionDetail.setTax(rowtax);
            }
            if (dataMap.containsKey("priceSource") && dataMap.get("priceSource") != null) {
                requisitionDetail.setPriceSource((String) dataMap.get("priceSource"));
            }
            if (dataMap.containsKey("pricingbandmasterid") && dataMap.get("pricingbandmasterid") != null) {
                requisitionDetail.setPricingBandMasterid((String) dataMap.get("pricingbandmasterid"));
            }
            saveOrUpdate(requisitionDetail);
            list.add(requisitionDetail);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("savePurchaseRequisitionDetails : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject deletePurchaseRequisition(String poid, String companyid) throws ServiceException {
        try {
            String query = "update PurchaseRequisition set deleted=true where ID=? and company.companyID=?";
            int numRows = executeUpdate( query, new Object[]{poid, companyid});
            return new KwlReturnObject(true, "Purchase Requisition has been deleted successfully.", null, null, numRows);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.deletePurchaseRequisition : " + ex.getMessage(), ex);
        }
    }

    public KwlReturnObject deletePurchaseRequisitionPermanent(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            String delQuery1 = "", delQuery2 = "";
            int numtotal = 0;
            if (requestParams.containsKey("reqid") && requestParams.containsKey("companyid")) {
                boolean isFixedAsset = false;
                if (requestParams.containsKey("isFixedAsset") && requestParams.get("isFixedAsset") != null) {
                    isFixedAsset = (Boolean) requestParams.get("isFixedAsset");
                }
                
                if (isFixedAsset) {
                    HashMap<String, Object> requestMap = new HashMap<String, Object>();
                    requestMap.put("companyid", requestParams.get("companyid"));
                    requestMap.put("purchaserequisitionid", requestParams.get("reqid"));
                    deletePurchaseRequisitionAssetDetails(requestMap);
                }
                

                ArrayList params1 = new ArrayList();
                params1.add(requestParams.get("reqid"));
                params1.add(requestParams.get("companyid"));
//                    delQuery1 = " delete from purchaserequisitiondetail where purchaserequisition in (select id from purchaserequisition where id=? and company = ?) ";
                    delQuery1 = " delete prd from purchaserequisitiondetail prd inner join purchaserequisition pr on pr.id=prd.purchaserequisition where pr.id=? and pr.company =? ";
                int numRows1 = executeSQLUpdate( delQuery1, params1.toArray());

                ArrayList params3 = new ArrayList();
                params3.add(requestParams.get("companyid"));
                params3.add(requestParams.get("reqid"));
                delQuery2 = "delete from purchaserequisitioncustomdata where company = ? and purchaserequisitionid=?";
                int numRows3 = executeSQLUpdate( delQuery2, params3.toArray());

                ArrayList params2 = new ArrayList();
                params2.add(requestParams.get("companyid"));
                params2.add(requestParams.get("reqid"));
                delQuery2 = "delete from purchaserequisition where company = ? and id=?";
                int numRows2 = executeSQLUpdate( delQuery2, params2.toArray());

                numtotal = numRows1 + numRows2 + numRows3;
            }

            return new KwlReturnObject(true, "Purchase Requisition has been deleted successfully.", null, null, numtotal);

        } catch (Exception ex) {
            throw ServiceException.FAILURE("Cannot delete Purchase Requisitions its referance child field is not deleted.", ex);//+ex.getMessage(), ex);
        }

    }

    public KwlReturnObject rejectPurchaseRequisition(String poid, String companyid) throws ServiceException {
        try {
            String query = "update PurchaseRequisition set deleted=true,approvestatuslevel = (-approvestatuslevel) where ID=? and company.companyID=?";
            int numRows = executeUpdate( query, new Object[]{poid, companyid});
            return new KwlReturnObject(true, "Purchase Requisition has been deleted successfully.", null, null, numRows);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.deletePurchaseRequisition : " + ex.getMessage(), ex);
        }
    }

    @Override
    public KwlReturnObject deletePurchaseRequisitionDetails(String poid, String companyid) throws ServiceException {
        try {
            ArrayList params8 = new ArrayList();
            params8.add(poid);
            params8.add(companyid);
//            String myquery = " select id from purchaserequisitiondetail where purchaserequisition in (select id from purchaserequisition where id=? and company = ?) ";
            String myquery = " select prd.id from purchaserequisitiondetail prd inner join purchaserequisition  pr on pr.id=prd.purchaserequisition where pr.id=? and pr.company =?";
            List list = executeSQLQuery( myquery, params8.toArray());
            Iterator itr = list.iterator();
            String idStrings = "";
            while (itr.hasNext()) {
                String invdid = itr.next().toString();
                idStrings += "'" + invdid + "',";
            }
            if (!StringUtil.isNullOrEmpty(idStrings)) {
                idStrings = idStrings.substring(0, idStrings.length() - 1);
            }
            ArrayList params1 = new ArrayList();
            String deletecustomdetails = "delete  from purchaserequisitiondetailcustomdata where purchaserequisitiondetailid in (" + idStrings + ")";
            int numRows1 = executeSQLUpdate( deletecustomdetails, params1.toArray());
            String delQuery = "delete from PurchaseRequisitionDetail pr where pr.purchaserequisition.ID=? and pr.company.companyID=?";
            int numRows = executeUpdate( delQuery, new Object[]{poid, companyid});
            return new KwlReturnObject(true, "Purchase Receipt details has been deleted successfully.", null, null, numRows);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("Error while deleting Puchase Receipt details", ex);//+ex.getMessage(), ex);
        }
    }

    public KwlReturnObject getPurchaseRequisitionCount(String qno, String companyid) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        String q = "from PurchaseRequisition where prNumber=? and company.companyID=? AND isDraft='F'";    //SDP-13487 - Do not check duplicate in Draft Report. Because Multiple draft records having empty entry no.
        list = executeQuery( q, new Object[]{qno, companyid});
        count = list.size();
        return new KwlReturnObject(true, "", null, list, count);
    }

    public KwlReturnObject getPurchaseRequisition(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            DateFormat df = (DateFormat) request.get(Constants.df);
            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            String ss = (String) request.get(Constants.ss);
            String queryString = (String) request.get("query");
            boolean isfavourite = false;
            boolean ismultiselectcustomeridsFlag = false;
            String moduleid = "";
            if (request.containsKey(Constants.moduleid) && request.get(Constants.moduleid) != null) {
                moduleid = request.get(Constants.moduleid).toString();
            }
            boolean deleted = Boolean.parseBoolean((String) request.get("deleted"));
            boolean nondeleted = Boolean.parseBoolean((String) request.get("nondeleted"));
            boolean pendingapproval = true;
            if (request.get("isfavourite") != null) {
                isfavourite = Boolean.parseBoolean((String) request.get(Constants.MARKED_FAVOURITE));
            }
            if (request.containsKey("pendingapproval")) {
                pendingapproval = Boolean.parseBoolean(request.get("pendingapproval").toString());
            }
            String userDepartment = "";
            if (request.containsKey("userDepartment") && request.get("userDepartment") != null) {
                userDepartment = (String) request.get("userDepartment");
            }
            
            boolean isFixedAsset = false;
            if (request.get("isFixedAsset") != null) {
                isFixedAsset = (Boolean) request.get("isFixedAsset");
            }
            boolean isRequisitionOutstandingFilterApplied = false;
            if (request.containsKey("isRequisitionOutstandingFilterApplied") && request.get("isRequisitionOutstandingFilterApplied") != null) {
                isRequisitionOutstandingFilterApplied = (Boolean) request.get("isRequisitionOutstandingFilterApplied");
            }
            
            String condition = "";
            ArrayList params = new ArrayList();
            if (nondeleted) {
                params.add((String) request.get(Constants.companyKey));
                // condition = " where q.deleted=false and q.company.companyID=?";;
                condition = "where purchaserequisition.deleteflag='F' and purchaserequisition.company=?";
            } else if (deleted) {
                params.add((String) request.get(Constants.companyKey));
                //  condition += " where q.deleted=true and q.company.companyID=?";
                condition += "where purchaserequisition.deleteflag='T' and purchaserequisition.company=?";
            } else {
                params.add((String) request.get(Constants.companyKey));
                //condition += " where q.company.companyID=?";
                condition += " where purchaserequisition.company=?";
            }
            //String condition = " where q.deleted=false and q.company.companyID=?";
            if ((Integer) request.get("archieve") == 0) {
                // condition += " and q.archieve = 0 ";
                condition += " and purchaserequisition.archieve = 0 ";
            } else if ((Integer) request.get("archieve") == 1) {
                //condition += " and q.archieve = 1 ";
                condition += " and purchaserequisition.archieve = 1 ";
            }
            
            if (isFixedAsset) {
                condition += " and purchaserequisition.isfixedassetpurchaserequisition=true ";
            } else {
                condition += " and purchaserequisition.isfixedassetpurchaserequisition=false ";
            }
            if (request.get("linknumber") != null && !request.get("linknumber").toString().equals("")) {
                condition += " and purchaserequisition.prnumber = ? ";
                params.add(request.get("linknumber"));
            }

//            if (!StringUtil.isNullOrEmpty(ss)) {
//                for (int i = 0; i < 4; i++) {
//                    params.add(ss + "%");
//                }
//                condition += " and ( purchaserequisition.prnumber like ? or purchaserequisition.memo like ? )";//or q.vendor.name like ? 
//            }
            String searchJoin = "";
            String joinstring = "";
            if (!StringUtil.isNullOrEmpty(ss)) {
                String[] searchcol = new String[]{"purchaserequisition.prnumber", "purchaserequisition.memo", "product.name", "product.productid"};
                Map map = StringUtil.insertParamSearchStringMap(params, ss, 4);
                StringUtil.insertParamSearchString(map);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                condition += searchQuery;
                searchJoin = " inner join purchaserequisitiondetail on purchaserequisitiondetail.purchaserequisition = purchaserequisition.id "
                        + " inner join product on purchaserequisitiondetail.product= product.id ";
            }
            
            if (request.containsKey("prNumber")) {
                String prNumber = request.get("prNumber").toString();
                // condition += " and q.prNumber = ? ";
                condition += " and purchaserequisition.prnumber = ? ";
                params.add(prNumber);
            }
            if (request.containsKey("ID") && request.get("ID") != null) {
                String prIDs = request.get("ID").toString();
                prIDs = AccountingManager.getFilterInString(prIDs);
                // condition += " and q.ID = ? ";
                condition += " and purchaserequisition.id  IN " + prIDs;
//                params.add(prIDs);
            }
            CustomizeReportMapping customizeReportMapping = new CustomizeReportMapping();
            boolean isUnitPriceHiddenInPR = false;
            List<CustomizeReportMapping> customizeMappingContainsList = find("from CustomizeReportMapping where moduleId = "+Constants.Acc_Purchase_Requisition_ModuleId+" and company.companyID = '"+request.get(Constants.companyKey)+"' and customizeReportHeader.id= '380c6a5e-eeaf-11e6-9459-4ccc6a2d6a4d'");
            if (customizeMappingContainsList != null && !customizeMappingContainsList.isEmpty() && customizeMappingContainsList.size() > 0) {  //ERP-38157
                customizeReportMapping = customizeMappingContainsList.get(0);
                if (customizeReportMapping != null) {
                    isUnitPriceHiddenInPR = customizeReportMapping.isHidden();
                }
            }
            if (!isUnitPriceHiddenInPR) {
            if (request.containsKey("currencyfilterfortrans") && request.get("currencyfilterfortrans") != null) {
                String currencyfilterfortrans = (String) request.get("currencyfilterfortrans");
                if (!StringUtil.isNullOrEmpty(currencyfilterfortrans)) {
                    //condition += " and q.currency.currencyID = ?";
                    condition += " and purchaserequisition.currency = ?";
                    params.add(currencyfilterfortrans);
                }
            }
            }
            if (request.containsKey("ismultiselectcustomeridsFlag") && request.get("ismultiselectcustomeridsFlag") != null && !StringUtil.isNullOrEmpty(request.get("ismultiselectcustomeridsFlag").toString())) {
                ismultiselectcustomeridsFlag = Boolean.parseBoolean(request.get("ismultiselectcustomeridsFlag").toString());
            }
            if (request.containsKey("multiselectcustomerids") && request.get("multiselectcustomerids") != null) {
                String multiselectcustomerIdGroup = request.get("multiselectcustomerids").toString();
                multiselectcustomerIdGroup = AccountingManager.getFilterInString(multiselectcustomerIdGroup);
                if (ismultiselectcustomeridsFlag) {
                    condition += " AND purchaserequisition.id IN " + multiselectcustomerIdGroup;
                } else {
                    condition += " AND purchaserequisition.id NOT IN " + multiselectcustomerIdGroup;
                }
            }
            
            if (!StringUtil.isNullOrEmpty(queryString) && !ismultiselectcustomeridsFlag) {
                String[] searchcol = new String[]{"purchaserequisition.prnumber"};  // search on Purchase Requisition number
                Map map = StringUtil.insertParamSearchStringMap(params, queryString, 1);
                StringUtil.insertParamSearchString(map);
                String searchQuery = StringUtil.getSearchString(queryString, "and", searchcol);
                condition += searchQuery;
            }
            if (request.containsKey("onlyApprovedRecords") && request.get("onlyApprovedRecords") != null) {
                if (Boolean.parseBoolean(request.get("onlyApprovedRecords").toString())) {
                    //condition += " and q.approvestatuslevel = ?";
                    condition += " and purchaserequisition.approvestatuslevel = ?";
                    params.add(Constants.MaximumLimitOfLevelsInMultilevelApproval);
                }
            }

            if (request.get(Constants.productid) != null && !request.get(Constants.productid).toString().equals("")) {
                //condition += " and q.ID in (select prd.purchaserequisition.ID from PurchaseRequisitionDetail prd where prd.product.ID ='" + request.get(Constants.productid).toString() + "' )";
                condition += " and purchaserequisition.id in (select prd.purchaserequisition from purchaserequisitiondetail prd where prd.product ='" + request.get(Constants.productid).toString() + "' )";
            }

            if (request.get(Constants.productCategoryid) != null) {
                String productCategory = (String) request.get(Constants.productCategoryid);
                if (!StringUtil.isNullOrEmpty(productCategory)) {
                    //  condition += " and q.ID in (select prd.purchaserequisition.ID from PurchaseRequisitionDetail prd where prd.product.ID in ( select pcm.productID from ProductCategoryMapping pcm where pcm.productCategory='" + productCategory + "' ))";
                    condition += " and purchaserequisition.id in (select prd.purchaserequisition from purchaserequisitiondetail prd where prd.product in ( select pcm.productid from productcategorymapping pcm where pcm.productcategory='" + productCategory + "' ))";
                }
            }

            if (isfavourite) {
                //condition += " and q.favourite = true ";
                condition += " and purchaserequisition.favouriteflag = 1 ";
            }
            if (request.get("prpolinkflag") != null && request.get("prpolinkflag").equals("true")) {
                condition += " and purchaserequisition.isopeninpo = 'T' ";
            }
            if (!StringUtil.isNullOrEmpty(userDepartment)) {
                joinstring += " inner join users on users.userid = purchaserequisition.users ";
                condition += " and users.department = ? ";                
                params.add(userDepartment);
            }

            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                //condition += " and (q.requisitionDate >=? and q.requisitionDate <=?)";
                condition += " and (purchaserequisition.requisitiondate>=? and purchaserequisition.requisitiondate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            if (!pendingapproval) { // show only Approved and Drafted Records
                //condition += " and ( q.approvestatuslevel = "+Constants.MaximumLimitOfLevelsInMultilevelApproval+ " or q.approvestatuslevel = "+ Constants.DraftedPurchaseRequisitions+")"; //ApproveStatusLevel== 11(Approved) or  -99(Drafted)
                condition += " and ( purchaserequisition.approvestatuslevel = " + Constants.MaximumLimitOfLevelsInMultilevelApproval + " or purchaserequisition.approvestatuslevel = " + Constants.DraftedPurchaseRequisitions + ")"; //ApproveStatusLevel== 11(Approved) or  -99(Drafted)
            }
            String appendCase = "and";
            String mySearchFilterString = "";
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (request.containsKey("filterConjuctionCriteria") && request.get("filterConjuctionCriteria") != null) {
                if (request.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            boolean isDraft = false;
            if (request.containsKey(Constants.isDraft) && request.get(Constants.isDraft) != null) {
                isDraft = (Boolean) request.get(Constants.isDraft);
            }
            //Append isDraft condition in query for fetching particular transactions
            if (isDraft) {
                condition += " and purchaserequisition.isDraft = true ";
            } else {
                params.add(false);
                condition += " and purchaserequisition.isDraft = ? ";
            }
            String[] stringSort = null;
            String orderBy = "";
            if (request.containsKey("dir") && request.containsKey("sort")) {
                String Col_Name = request.get("sort").toString();
                String Col_Dir = request.get("dir").toString();
                stringSort = columSortOnPR(Col_Name, Col_Dir);
                orderBy += stringSort[0];
            }
            
            boolean advancedSearchOnCustomFields=false;
            String Searchjson = "";
            String searchDefaultFieldSQL = "";
            if (request.containsKey("searchJson") && request.get("searchJson") != null) {
                Searchjson = request.get("searchJson").toString();

                if (!StringUtil.isNullOrEmpty(Searchjson)) {
                    JSONObject serachJobj = new JSONObject(Searchjson);
                    JSONArray customSearchFieldArray = new JSONArray();
                    JSONArray defaultSearchFieldArray = new JSONArray();
                    StringUtil.seperateCostomAndDefaultSerachJson(serachJobj, customSearchFieldArray, defaultSearchFieldArray);
                    if (defaultSearchFieldArray.length() > 0) {
                        /*
                         Advance Search For Default Form fields
                         */
                        ArrayList tableArray = new ArrayList();
                        tableArray.add("customer"); //this table array used to identified wheather join exists on table or not                         
                        Map<String, Object> map = buildSqlDefaultFieldAdvSearch(defaultSearchFieldArray, params, moduleid, tableArray, filterConjuctionCriteria);
                        searchJoin += map.containsKey("searchjoin") ? map.get("searchjoin") : "";
                        searchDefaultFieldSQL = (String) (map.containsKey("condition") ? map.get("condition") : "");
                    }
                    if (customSearchFieldArray.length() > 0) {   //Advance search case for Custome field
                        request.put(Constants.Searchjson, Searchjson);
                        request.put(Constants.appendCase, appendCase);
                        request.put("filterConjuctionCriteria", filterConjuctionCriteria);
                        mySearchFilterString = String.valueOf(StringUtil.getAdvanceSearchString(request, true).get(Constants.myResult));
                        String innerJoinOnDetailTable = "";
                        if (!searchJoin.contains("purchaserequisitiondetail.purchaserequisition")) {
                            innerJoinOnDetailTable = " inner join purchaserequisitiondetail on purchaserequisitiondetail.purchaserequisition=purchaserequisition.id ";
                        }
                        boolean isInnerJoinAppend = false;
                        // mySearchFilterString = mySearchFilterString.replaceAll("PurchaseRequisitionCustomData", "q.purchaseRequisitionCustomData");
                        
                        /*--- Same query as "innerJoinOnDetailTable" query is already appended above 
                        
                         When Quick search is applied , So assigning empty value to it here----*/
                       
                        if (!StringUtil.isNullOrEmpty(ss)) {
                            innerJoinOnDetailTable = "";
                        }

                        if (mySearchFilterString.contains("purchaserequisitioncustomdata")) { //for Global Level Custom field
                            joinstring = "inner join purchaserequisitioncustomdata on purchaserequisitioncustomdata.purchaserequisitionid=purchaserequisition.accpurchaserequisitioncustomdataref ";
                        }
                        if (mySearchFilterString.contains("AccJEDetailCustomData")) { //For Line Level Cuatom field
                            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "purchaserequisitiondetailcustomdata");
                            joinstring += innerJoinOnDetailTable +(isRequisitionOutstandingFilterApplied ?  " and (purchaserequisitiondetail.balanceqty > 0" : " " )+ " left join purchaserequisitiondetailcustomdata on purchaserequisitiondetail.id=purchaserequisitiondetailcustomdata.purchaserequisitiondetailid ";
                            isInnerJoinAppend = true;
                             advancedSearchOnCustomFields=true;
                        }
                        //product custom data
                        if (mySearchFilterString.contains("accproductcustomdata")) {
                             advancedSearchOnCustomFields=true;
                            joinstring += (isInnerJoinAppend ? "" : innerJoinOnDetailTable + (isRequisitionOutstandingFilterApplied ?  " and purchaserequisitiondetail.balanceqty > 0" : " " )) + " left join product  on product.id=purchaserequisitiondetail.product left join accproductcustomdata on accproductcustomdata.productId=product.id ";
                        }
                        StringUtil.insertParamAdvanceSearchString1(params, Searchjson);
                    }
                    mySearchFilterString = StringUtil.combineCustomAndDefaultSearch(searchDefaultFieldSQL, mySearchFilterString, filterConjuctionCriteria);
                }
            }
            
            /*------If Outstanding filter applied in Requisition report && Advance search is not applied----------  */
            if (isRequisitionOutstandingFilterApplied && !advancedSearchOnCustomFields) {
                if (StringUtil.isNullOrEmpty(ss)) {
                    searchJoin = " inner join purchaserequisitiondetail on purchaserequisitiondetail.purchaserequisition =  purchaserequisition.id  and purchaserequisitiondetail.balanceqty > 0 ";
                } else if (!StringUtil.isNullOrEmpty(ss)) {
                    searchJoin += " and purchaserequisitiondetail.balanceqty > 0 ";
                }

            }
            
//            if(request.containsKey("pendingapproval")) {
//                boolean pendingFlag = Boolean.parseBoolean(request.get("pendingapproval").toString());
//                if(pendingFlag) {
//                    condition += " and approvestatuslevel = ? ";
//                    params.add(df.parse(startDate));
//                } else {
//                    condition += " and approvestatuslevel = ? ";
//                    params.add(df.parse(startDate));
//                }
//            }
            String query = "select DISTINCT purchaserequisition.id from purchaserequisition " + searchJoin + joinstring + condition + mySearchFilterString + orderBy;
//            query += " order by purchaserequisition.requisitiondate desc";
            list = executeSQLQuery( query, params.toArray());
            count = list.size();
            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false && !ismultiselectcustomeridsFlag) {
                //list = executeQueryPaging( query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
                list = executeSQLQueryPaging( query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderOrderImpl.getPurchaseRequisition:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    public KwlReturnObject getPendingPurchaseRequisition(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        String query="";
        try {
           String userDepartment = "";
            if (request.containsKey("userDepartment") && request.get("userDepartment") != null) {
                userDepartment = (String) request.get("userDepartment");
            }
            
            boolean isFixedAsset = false;
            if (request.containsKey("isFixedAsset") && request.get("isFixedAsset") != null) {
                isFixedAsset = (Boolean) request.get("isFixedAsset");
            }
            
            list = new ArrayList();
            ArrayList params = new ArrayList();
            DateFormat df = (DateFormat) request.get(Constants.df);
            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            String ss = (String) request.get(Constants.ss);
            params.clear();
            params.add((String) request.get(Constants.companyKey));
            String condition = " where q.company.companyID=?";
            if ((Integer) request.get("archieve") == 0) {
                condition += " and q.archieve = 0 ";
            } else if ((Integer) request.get("archieve") == 1) {
                condition += " and q.archieve = 1 ";
            }

            if (!StringUtil.isNullOrEmpty(ss)) {
                Map map = StringUtil.insertParamSearchStringMap(params, ss, 1);
                StringUtil.insertParamSearchString(map);
                condition += " and ( prNumber like ? or q.memo like ?)";
            }
            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);

            if (request.get(Constants.productid) != null && !request.get(Constants.productid).toString().equals("")) {
                condition += " and q.ID in (select prd.purchaserequisition.ID from PurchaseRequisitionDetail prd where prd.product.ID ='" + request.get(Constants.productid).toString() + "' )";
            }

            if (request.get(Constants.productCategoryid) != null) {
                String productCategory = (String) request.get(Constants.productCategoryid);
                if (!StringUtil.isNullOrEmpty(productCategory)) {
                    condition += " and q.ID in (select prd.purchaserequisition.ID from PurchaseRequisitionDetail prd where prd.product.ID in ( select pcm.productID from ProductCategoryMapping pcm where pcm.productCategory='" + productCategory + "' ))";
                }
            }

            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                condition += " and (q.requisitionDate >=? and q.requisitionDate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
                condition += " and (q.approvestatuslevel BETWEEN 1 AND 10 or (q.approvestatuslevel<0 AND q.approvestatuslevel != "+Constants.DraftedPurchaseRequisitions+" ) ) ";  // Records with approval level = 1 to 10 or minus (i.e. Rejected Records), but other than -99(Drafted)
                
                
            if (!StringUtil.isNullOrEmpty(userDepartment)) {
                condition += " and q.users.department = ? ";
                params.add(userDepartment);
            }
            
            if (isFixedAsset) {
                condition += " and q.fixedAssetPurchaseRequisition=true ";
            } else {
                condition += " and q.fixedAssetPurchaseRequisition=false ";
            }
            if (request.containsKey("linknumber") && request.get("linknumber") != null && !request.get("linknumber").toString().equals("")) {
                condition += " and q.prNumber = ? ";
                params.add(request.get("linknumber"));
            }

            String appendCase = "and";
            String mySearchFilterString = "";
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (request.containsKey("filterConjuctionCriteria") && request.get("filterConjuctionCriteria") != null) {
                if (request.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            String Searchjson = "";
            String joinString = " ";
            if (request.containsKey("searchJson") && request.get("searchJson") != null) {
                Searchjson = request.get("searchJson").toString();

                if (!StringUtil.isNullOrEmpty(Searchjson)) {
                    request.put(Constants.Searchjson, Searchjson);
                    request.put(Constants.appendCase, appendCase);
                    request.put("filterConjuctionCriteria", filterConjuctionCriteria);
                    mySearchFilterString = String.valueOf(StringUtil.getMyAdvanceSearchString(request, true).get(Constants.myResult));
                    if (mySearchFilterString.contains("AccJEDetailCustomData")) {
                        joinString += " inner join q.rows row ";
                        mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "row.purchaseRequisitionDetailCustomData");
                    }
                    mySearchFilterString = mySearchFilterString.replaceAll("(?i)PurchaseRequisitionCustomData", "q.purchaseRequisitionCustomData"); // (?i) is used for case in-sensitive repalce
                    StringUtil.insertParamAdvanceSearchString1(params, Searchjson);
                }
            }
            query = "select distinct q from PurchaseRequisition q" + joinString + condition + mySearchFilterString;;
            query += " order by q.requisitionDate desc";
            list = executeQuery( query, params.toArray());
            count = list.size();
            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                list = executeQueryPaging( query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
                }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accSalesOrderImpl.getPurchaseRequisition:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    public KwlReturnObject getPurchaseRequisitionDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from PurchaseRequisitionDetail";
        return buildNExecuteQuery( query, requestParams);
    }

    public KwlReturnObject approvePendingRequisition(String prID, String companyid, int status) throws ServiceException {
        String query = "update PurchaseRequisition set approvestatuslevel = ? where ID=? and company.companyID=?";
//        if(isbilling) {
//            query = "update BillingPurchaseOrder set pendingapproval = 0 where ID=? and company.companyID=?";
//        }
        int numRows = executeUpdate( query, new Object[]{status, prID, companyid});
        return new KwlReturnObject(true, "Purchase Requisition has been updated successfully.", null, null, numRows);
    }

    public KwlReturnObject savePurchaseRequisitionFlow(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            Session currSession = getSessionFactory().getCurrentSession();
            String companid = dataMap.get("companyid").toString();
            String level = dataMap.get("level").toString();
            String rule = dataMap.get("rule").toString();
            String flowid = UUID.randomUUID().toString();
            boolean hasapprover = Boolean.parseBoolean(dataMap.get("hasapprover").toString());
            ArrayList params = new ArrayList();
            params.add(flowid);
            params.add(level);
            params.add(rule);
            params.add(companid);
            params.add(hasapprover);
            String query = "insert into prflow(id,level,rule,companyid,hasapprover) values(?,?,?,?,?)";

            executeSQLUpdate(query, params.toArray());
            if (hasapprover) {
                String approver = dataMap.get("approver").toString();
                if (!StringUtil.isNullOrEmpty(approver)) {
                    String subQuery = "insert into prflowtargets(id,flowid,userid) value (?,?,?)";
                    String[] approverArr = approver.split(",");
                    for (int cnt = 0; cnt < approverArr.length; cnt++) {
                        executeSQLUpdate(subQuery, new Object[]{UUID.randomUUID().toString(), flowid, approverArr[cnt]});
                    }
                }
            }
            list.add(flowid);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("savePurchaseRequisitionFlow : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject deletePurchaseRequisitionFlow(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            Session currSession = getSessionFactory().getCurrentSession();
            String flowid = dataMap.get("id").toString();
            ArrayList params = new ArrayList();
            params.add(flowid);
            String query = "delete from prflow where id = ?";
            executeSQLUpdate(query, params.toArray());
            list.add(flowid);
            String subQuery = "delete from prflowtargets where flowid=?";
            executeSQLUpdate(subQuery, params.toArray());
        } catch (Exception ex) {
            throw ServiceException.FAILURE("deletePurchaseRequisitionFlow : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject getRequisitionFlowData(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            ArrayList params = new ArrayList();
            String companyid = dataMap.get("companyid").toString();
            String condition = " where companyid = ?";
            params.add(companyid);

            if (dataMap.containsKey("level")) {
                condition += " and level = ?";
                params.add(dataMap.get("level"));
            }

                String query = "select id, level, rule, hasapprover from prflow " + condition;
            query += " order by level desc";
            list = executeSQLQuery( query, params.toArray());
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getRequisitionFlowData : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject getRequisitionFlowTargetUsers(String flowid) throws ServiceException {
        List list = new ArrayList();
        try {
//            String query = "select userid,fname,lname, emailid from users where userid in (select userid from prflowtargets where flowid = ?)";
            String query = "select u.userid,u.fname,u.lname,u.emailid from users u inner join prflowtargets prflow on u.userid=prflow.userid where prflow.flowid = ?";
            ArrayList params = new ArrayList();
            params.add(flowid);
            list = executeSQLQuery( query, params.toArray());
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getRequisitionFlowTargetUsers : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    //   RFQ
    public KwlReturnObject getRequestForQuotations(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            DateFormat df = (DateFormat) request.get(Constants.df);
            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            String ss = (String) request.get(Constants.ss);
            String vendorId = request.get(Constants.newvendorid)!=null ? (String) request.get(Constants.newvendorid) : "";
            ArrayList params = new ArrayList();
            boolean isfavourite = false;
            boolean deleted = Boolean.parseBoolean((String) request.get("deleted"));
            boolean nondeleted = Boolean.parseBoolean((String) request.get("nondeleted"));
            boolean isFixedAsset = false;
            if (request.containsKey("isFixedAsset") && request.get("isFixedAsset") != null) {
                isFixedAsset = (Boolean) request.get("isFixedAsset");
            }
            String moduleid = "";
            if (request.containsKey(Constants.moduleid) && request.get(Constants.moduleid) != null) {
                moduleid = request.get(Constants.moduleid).toString();
            }
            String condition="";
            String sqlCondition="";
//            String condition = " where q.deleted=false and q.company.companyID=?";
             if (nondeleted) {
                params.add((String) request.get(Constants.companyKey));
                condition = " where q.deleted=false and q.company.companyID=?";;
                sqlCondition=" where q.deleted='F' and q.company=?";

            } else if (deleted) {
                params.add((String) request.get(Constants.companyKey));
                condition += " where q.deleted=true and q.company.companyID=?";
                sqlCondition += " where q.deleted='T' and q.company=?";

            } else {
                 params.add((String) request.get(Constants.companyKey));
                condition += " where q.company.companyID=?";
                sqlCondition += " where q.company=?";

            }
            if ((Integer) request.get("archieve") == 0) {
                condition += " and q.archieve = 0 ";
            } else if ((Integer) request.get("archieve") == 1) {
                condition += " and q.archieve = 1 ";
                sqlCondition += " and q.archieve = 1 ";
            }

            if (!StringUtil.isNullOrEmpty(ss)) {
                condition += " and ( ";
                //Search on RFQ No. & Memo
                for (int i = 0; i < 2; i++) {
                    params.add("%" + ss + "%");//ERP-9307:Option to search by any letter.
                }
                condition += " q.rfqNumber like ? or q.memo like ?  ";
                //Search on Product ID & Product Name
                for (int i = 0; i < 2; i++) {
                    params.add("%" + ss + "%");//ERP-9307:Option to search by any letter.
                }                
                condition += "or q.ID in (select rfqd.requestforquotation.ID from RequestForQuotationDetail rfqd where rfqd.product.productid like ? or rfqd.product.name like ?) ";
                //Search on Vendor Name & Vendor Alias Name
                for (int i = 0; i < 2; i++) {
                    params.add("%" + ss + "%");//ERP-9307:Option to search by any letter.
                }
                params.add((String) request.get(Constants.companyKey));
                condition += "or q.vendors in (select v.ID from Vendor v where v.name like ? or v.aliasname like ? and v.company.companyID=?) ";
                
                condition += ")";
            }
            if (request.get("isfavourite") != null) {
                isfavourite = Boolean.parseBoolean((String) request.get(Constants.MARKED_FAVOURITE));
            }
            if (request.containsKey("rfqNumber")) {
                String prNumber = request.get("rfqNumber").toString();
                condition += " and q.rfqNumber = ? ";
                params.add(prNumber);
            }
            if (isfavourite) {
                condition += " and q.favourite = true ";
                sqlCondition += " and q.favourite = 'T' ";
            }
            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                condition += " and (q.rfqDate >=? and q.rfqDate <=?)";
                sqlCondition += " and (q.rfqdate >=? and q.rfqdate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
//            if(request.containsKey("pendingapproval")) {
//                boolean pendingFlag = Boolean.parseBoolean(request.get("pendingapproval").toString());
//                if(pendingFlag) {
//                    condition += " and approvestatuslevel = ? ";
//                    params.add(df.parse(startDate));
//                } else {
//                    condition += " and approvestatuslevel = ? ";
//                    params.add(df.parse(startDate));
//                }
//            }
            /*
            (ERP-28854) Changed the below query to load the RFQs with multiple Vendors while linking in VQ
            */
            if(!StringUtil.isNullOrEmpty(vendorId)){
                condition += " and q.vendors like '%"+vendorId+"%'";
//                params.add(vendorId);
            }
            
            if (request.get(Constants.productid) != null ) {
                String productId = (String) request.get(Constants.productid);
                if (!StringUtil.isNullOrEmpty(productId)) {
                    condition += " and q.ID in (select rfqd.requestforquotation.ID from RequestForQuotationDetail rfqd where rfqd.product.ID ='" + productId + "' )";
                }
            }

            if (request.get(Constants.productCategoryid) != null ) {
                String productCategory = (String) request.get(Constants.productCategoryid);
                if (!StringUtil.isNullOrEmpty(productCategory)) {
                    condition += " and q.ID in (select rfqd.requestforquotation.ID from RequestForQuotationDetail rfqd where rfqd.product.ID  in ( select pcm.productID from ProductCategoryMapping pcm where pcm.productCategory='" + productCategory + "' ))";
                }
            }
            if (request.get(Constants.customerCategoryid) != null ) {
                String vendorCategory = (String) request.get(Constants.customerCategoryid);
                if (!StringUtil.isNullOrEmpty(vendorCategory)) {
                    condition += " and q.vendors in(select vcm.vendorID from VendorCategoryMapping vcm where vcm.vendorCategory='" + vendorCategory + "' )";
                }
            }
            if (request.containsKey("linknumber") && request.get("linknumber") != null && !request.get("linknumber").toString().equals("")) {
                condition += " and q.rfqNumber = ? ";
                params.add(request.get("linknumber"));
            }
            
            if (isFixedAsset) {
                condition += " and q.fixedAssetRFQ=true ";
                sqlCondition += " and q.isfixedassetrfq='1' ";
            } else {
                condition += " and q.fixedAssetRFQ=false ";
                sqlCondition += " and q.isfixedassetrfq='0' ";
            }
            
            String appendCase = "and";
            String mySearchFilterString = "";
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (request.containsKey("filterConjuctionCriteria") && request.get("filterConjuctionCriteria") != null) {
                if (request.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            String sqlQuey="";
            String Searchjson = "";
            String searchDefaultFieldSQL = "";
            boolean isSqlQuery=false;
            if (request.containsKey("searchJson") && request.get("searchJson") != null) {
                Searchjson = request.get("searchJson").toString();

                if (!StringUtil.isNullOrEmpty(Searchjson)) {
                    isSqlQuery = true;
                    sqlQuey = " select DISTINCT rfd.requestforquotation from requestforquotationdetail rfd inner join requestforquotation q on q.id=rfd.requestforquotation ";
                    JSONObject serachJobj = new JSONObject(Searchjson);
                    JSONArray customSearchFieldArray = new JSONArray();
                    JSONArray defaultSearchFieldArray = new JSONArray();
                    StringUtil.seperateCostomAndDefaultSerachJson(serachJobj, customSearchFieldArray, defaultSearchFieldArray);
                    if (defaultSearchFieldArray.length() > 0) {
                        /*
                         Advance Search For Default Form fields
                         */
                        ArrayList tableArray = new ArrayList();
                        tableArray.add("customer"); //this table array used to identified wheather join exists on table or not                         
                        Map<String, Object> map = buildSqlDefaultFieldAdvSearch(defaultSearchFieldArray, params, moduleid, tableArray, filterConjuctionCriteria);
                        searchDefaultFieldSQL = (String) (map.containsKey("condition") ? map.get("condition") : "");
                        searchDefaultFieldSQL = searchDefaultFieldSQL.replaceAll("requestforquotation", "q");
                    }
                    if (customSearchFieldArray.length() > 0) {

                        request.put(Constants.Searchjson, Searchjson);
                        request.put(Constants.appendCase, appendCase);
                        request.put("filterConjuctionCriteria", filterConjuctionCriteria);
                        mySearchFilterString = String.valueOf(StringUtil.getAdvanceSearchString(request, true).get(Constants.myResult));
                        if (mySearchFilterString.contains("RFQCustomData")) {
                            mySearchFilterString = mySearchFilterString.replaceAll("RFQCustomData", "rfqcustomdata");
                            sqlQuey += " inner join rfqcustomdata on rfqcustomdata.rfqid=q.accrfqcustomdataref ";
                        }

                        if (mySearchFilterString.contains("AccJEDetailCustomData")) {
                            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "requestforquotationdetailcustomdata");
                            sqlQuey += " inner join requestforquotationdetailcustomdata on rfd.accrequestforquotationdetailcustomdataref=requestforquotationdetailcustomdata.requestforquotationdetailid ";
                        }
                        if (mySearchFilterString.contains("VendorCustomData")) {
                            sqlQuey += " inner join vendor v  on FIND_IN_SET(v.id,q.vendors) > 0 "
                                    + " left join vendorcustomdata  on vendorcustomdata.vendorId=v.id ";
                            mySearchFilterString = mySearchFilterString.replaceAll("VendorCustomData", "vendorcustomdata");
                        }
                        StringUtil.insertParamAdvanceSearchString1(params, Searchjson);
                    }
                    mySearchFilterString = StringUtil.combineCustomAndDefaultSearch(searchDefaultFieldSQL, mySearchFilterString, filterConjuctionCriteria);
                }
            }
//            /*
//             * condition to load RFQs of same currency
//             */
//            if(request.containsKey("currencyfilterfortrans") && request.get("currencyfilterfortrans") != null && request.get("currencyfilterfortrans") != "") {
//                condition += "and rfd.prid.currency= "+request.get("currencyfilterfortrans");
//            }
            if (!isSqlQuery) {
                String query = " select rfd.requestforquotation.ID from RequestForQuotationDetail rfd INNER JOIN rfd.requestforquotation q " + condition + mySearchFilterString;
                query += " group by rfd.requestforquotation order by q.rfqDate desc";
                list = executeQuery(query, params.toArray());
                count = list.size();
                if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                    list = executeQueryPaging(query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
                }
            } else {
                sqlQuey += sqlCondition + mySearchFilterString;
                sqlQuey += " group by rfd.requestforquotation order by q.rfqDate desc";
                list = executeSQLQuery(sqlQuey, params.toArray());
                count = list.size();
                if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                    list = executeSQLQueryPaging(sqlQuey, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
                }
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accSalesOrderImpl.getRequestForQuotations:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    public KwlReturnObject getRFQDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from RequestForQuotationDetail";
        return buildNExecuteQuery( query, requestParams);
    }

    public KwlReturnObject getRFQCount(String qno, String companyid) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        String q = "from RequestForQuotation where rfqNumber=? and company.companyID=?";
        list = executeQuery( q, new Object[]{qno, companyid});
        count = list.size();
        return new KwlReturnObject(true, "", null, list, count);
    }
    //for checking purchase used in invoices or not

    public KwlReturnObject getPOforinvoice(String poid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from GoodsReceiptDetail ge where ge.purchaseorderdetail.purchaseOrder.ID = ? and ge.company.companyID=? and ge.goodsReceipt.deleted=false";
        list = executeQuery( q, new Object[]{poid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    //for checking expense purchase order  used in invoices or not
    @Override
    public KwlReturnObject getExpensePOforinvoice(String poid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from ExpenseGRDetail ge where ge.expensePODetail.purchaseOrder.ID = ? and ge.company.companyID=? and ge.goodsReceipt.deleted=false";
        list = executeQuery( q, new Object[]{poid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    //for checking purchase used in goods receipt order or not

    public KwlReturnObject getGROforinvoice(String poid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from GoodsReceiptOrderDetails ge where ge.podetails.purchaseOrder.ID = ? and ge.company.companyID=? and ge.grOrder.deleted=false";
        list = executeQuery( q, new Object[]{poid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    public KwlReturnObject getGROforSGE(String poid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from GoodsReceiptOrderDetails ge where ge.securitydetails.securityGateEntry.ID = ? and ge.company.companyID=? and ge.grOrder.deleted=false";
        list = executeQuery( q, new Object[]{poid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    public KwlReturnObject getSOforPO(String poid, String companyid) throws ServiceException {
        List list = new ArrayList();
//        String q = "select purchaseorderdetailid from sodetails sod where sod.purchaseorderdetailid in (select pod.id from purchaseorder as po  inner join podetails as pod on pod.purchaseorder=po.id where po.id= ? and po.company= ?)";
        String q = "select sod.purchaseorderdetailid from sodetails sod inner join podetails pod on pod.id=sod.purchaseorderdetailid inner join purchaseorder po on pod.purchaseorder=po.id  where po.id= ? and po.company=?";
        list = executeSQLQuery( q, new Object[]{poid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    /**
     * To Get PO For Security gate Entry
     * @param securityId
     * @param companyid
     * @return
     * @throws ServiceException 
     */
    public KwlReturnObject getPOforSecurityGate(String securityId, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "select sod.id from securitygatedetails sod inner join podetails pod on pod.id=sod.podetail inner join securitygateentry sge on sod.securitygateentry=sge.id  where sge.id= ? and sge.company=?";
        list = executeSQLQuery( q, new Object[]{securityId, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getGRDFromVQD(String poid) throws ServiceException {
        List list = new ArrayList();
        String q = "from GoodsReceiptDetail grd where grd.vendorQuotationDetail.ID = ? and grd.goodsReceipt.deleted=false";
        list = executeQuery( q, new Object[]{poid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getPODFromVQD(String poid) throws ServiceException {
        List list = new ArrayList();
        String q = "from PurchaseOrderDetail prod where prod.vqdetail.ID = ? and prod.purchaseOrder.deleted=false";
        list = executeQuery( q, new Object[]{poid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    /*---------- Fetching PO detail which are linked with Requisition--------*/
    public KwlReturnObject getPurchaseOrderDetailLinkedWithRequisitionDetail(HashMap requestParams) throws ServiceException {
        String condidtion = "";
        ArrayList params = new ArrayList();

        if (requestParams.containsKey("requisitionDetailId")) {
            condidtion += " and prod.purchaseRequisitionDetailId= ?";
            params.add(requestParams.get("requisitionDetailId"));
        }
        if (requestParams.containsKey("purchaseOrderDetailId")) {
            condidtion += " and prod.ID= ?";
            params.add(requestParams.get("purchaseOrderDetailId"));
        }
        
        List list = new ArrayList();
        String q = "from PurchaseOrderDetail prod where prod.purchaseOrder.deleted=false" + condidtion;
        list = executeQuery(q, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    

    public KwlReturnObject getVQforinvoice(String qid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from GoodsReceiptDetail ge where ge.vendorQuotationDetail.vendorquotation.ID = ? and ge.company.companyID=? and ge.goodsReceipt.deleted=false";
        list = executeQuery( q, new Object[]{qid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    public KwlReturnObject getVQforCQ(String qid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "select qd.id from quotationdetails qd inner join quotation q on q.id=qd.quotation where  qd.vendorquotationdetails in( "+qid +") and qd.company=? and q.deleteflag=false";
        list = executeSQLQuery( q, new Object[]{companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getVQforPO(String qid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from PurchaseOrderDetail ge where ge.vqdetail.vendorquotation.ID = ? and ge.company.companyID=? and ge.purchaseOrder.deleted=false";
        list = executeQuery( q, new Object[]{qid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getPurchaseOrderByProduct(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = (String) request.get(Constants.companyKey);
            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            DateFormat df = (DateFormat) request.get(Constants.df);
            String productid = (String) request.get("productid");
            String productCategoryid = "";
            boolean isProductView = false;
            if (request.containsKey(Constants.productCategoryid) && request.get(Constants.productCategoryid) != null) {
                productCategoryid = (String) request.get(Constants.productCategoryid);
            }
            if (request.containsKey("isProductView") && request.get("isProductView") != null) {
                isProductView = (boolean) request.get("isProductView");
            }
            String ss = (String) request.get(Constants.ss);
            
            ArrayList params = new ArrayList();

            String conditionSQL = "";
            params.add(companyid);
            if (!StringUtil.isNullOrEmpty(productid) && !StringUtil.equal(productid, "-1") && !StringUtil.equal(productid, "All")) {
                productid = AccountingManager.getFilterInString(productid);
                conditionSQL += " and podetails.product in " + productid + "  ";
            }

            if (!StringUtil.isNullOrEmpty(productCategoryid) && !StringUtil.equal(productCategoryid, "-1")) {
                params.add(productCategoryid);
                conditionSQL += " and podetails.product in (select productid from productcategorymapping where productcategory = ?)  ";
            }

            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                conditionSQL += " and (purchaseorder.orderdate >=? and purchaseorder.orderdate <=?) ";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            
            if (StringUtil.isNullOrEmpty(ss) == false) {
                for (int i = 0; i < 4; i++) {
                    params.add("%" +ss + "%");
                }
                conditionSQL += " and (purchaseorder.ponumber like ? or product.name like ? or podetails.description like ? or vendor.name like ? ) ";
            }
            String orderby = "order by vendor.name, purchaseorder.ponumber asc";
            if (isProductView) {
                orderby = "order by purchaseorder.orderdate desc";
            }
            
            String mysqlQuery = "select purchaseorder.id,  'false' as withoutinventory, purchaseorder.createdon , podetails.id as podid   from purchaseorder  "
                    + " inner join podetails on podetails.purchaseorder = purchaseorder.id "
                    + " inner join vendor on vendor.id = purchaseorder.vendor "
                    + " inner join product on product.id = podetails.product "
                    + " where purchaseorder.company = ? and purchaseorder.deleteflag='F' and purchaseorder.approvestatuslevel=11 " + conditionSQL + " "
                    +  orderby;
            list = executeSQLQuery( mysqlQuery, params.toArray());
            count = list.size();
            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                    list = executeSQLQueryPaging( mysqlQuery, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex) {
            Logger.getLogger(accPurchaseOrderImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getPurchaseOrderByProduct:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, count);
    }

    public KwlReturnObject saveRFQ(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String soid = (String) dataMap.get("id");

            RequestForQuotation requisition = new RequestForQuotation();
            if (StringUtil.isNullOrEmpty(soid)) {
                requisition.setDeleted(false);
            } else {
                requisition = (RequestForQuotation) get(RequestForQuotation.class, soid);
            }
            if (dataMap.containsKey(Constants.SEQFORMAT)) {
                requisition.setSeqformat((SequenceFormat) get(SequenceFormat.class, (String) dataMap.get(Constants.SEQFORMAT)));
            }
            if (dataMap.containsKey(Constants.SEQNUMBER)) {
                requisition.setSeqnumber(Integer.parseInt(dataMap.get(Constants.SEQNUMBER).toString()));
            }
            if (dataMap.containsKey(Constants.DATEPREFIX) && dataMap.get(Constants.DATEPREFIX) != null) {
                requisition.setDatePreffixValue((String) dataMap.get(Constants.DATEPREFIX));
            }
            if (dataMap.containsKey(Constants.DATEAFTERPREFIX) && dataMap.get(Constants.DATEAFTERPREFIX) != null) {
                requisition.setDateAfterPreffixValue((String) dataMap.get(Constants.DATEAFTERPREFIX));
            }
            if (dataMap.containsKey(Constants.DATESUFFIX) && dataMap.get(Constants.DATESUFFIX) != null) {
                requisition.setDateSuffixValue((String) dataMap.get(Constants.DATESUFFIX));
            }
            if (dataMap.containsKey("entrynumber")) {
                requisition.setRfqNumber((String) dataMap.get("entrynumber"));
            }
            if (dataMap.containsKey("autogenerated")) {
                requisition.setAutoGenerated((Boolean) dataMap.get("autogenerated"));
            }
            if (dataMap.containsKey("perDiscount")) {
                requisition.setPerDiscount((Boolean) dataMap.get("perDiscount"));
            }
            if (dataMap.containsKey("discount")) {
                requisition.setDiscount((Double) dataMap.get("discount"));
            }
            if (dataMap.containsKey("approvestatuslevel")) {
                requisition.setApprovestatuslevel((Integer) dataMap.get("approvestatuslevel"));
            }
            if (dataMap.containsKey("memo")) {
                requisition.setMemo((String) dataMap.get("memo"));
            }
            if (dataMap.containsKey("othervendoremails")) {
                requisition.setOthervendoremails((String) dataMap.get("othervendoremails"));
            }
            if (dataMap.containsKey("vendorid")) {
//                Vendor vendor = dataMap.get("vendorid")==null?null:(Vendor) get(Vendor.class, (String) dataMap.get("vendorid"));
                requisition.setVendors((String) dataMap.get("vendorid"));
            }
            if (dataMap.containsKey("orderdate")) {
                requisition.setRfqDate((Date) dataMap.get("orderdate"));
            }
            if (dataMap.containsKey("duedate")) {
                requisition.setDueDate((Date) dataMap.get("duedate"));
            }
//            if (dataMap.containsKey("taxid")) {
//                Tax tax = dataMap.get("taxid")==null?null:(Tax) get(Tax.class, (String) dataMap.get("taxid"));
//                requisition.setTax(tax);
//            }
            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid"));
                requisition.setCompany(company);
            }
            if (dataMap.containsKey("userid")) {
                User user = dataMap.get("userid") == null ? null : (User) get(User.class, (String) dataMap.get("userid"));
                requisition.setUsers(user);
            }
            if (dataMap.containsKey("sodetails")) {
                if (dataMap.get("sodetails") != null) {
                    requisition.setRows((Set<RequestForQuotationDetail>) dataMap.get("sodetails"));
                }
            }
             if (dataMap.containsKey("isfavourite")) {
                if (dataMap.get("isfavourite") != null) {
                    requisition.setFavourite(Boolean.parseBoolean(dataMap.get("isfavourite").toString()));
                }
            }
            if (dataMap.containsKey("isFixedAsset") && dataMap.get("isFixedAsset") != null) {
                requisition.setFixedAssetRFQ(Boolean.parseBoolean(dataMap.get("isFixedAsset").toString()));
            }
//            if(dataMap.containsKey("currencyid")){
//                requisition.setCurrency((KWLCurrency) get(KWLCurrency.class, (String)dataMap.get("currencyid")));
//            }
            requisition.setTemplateid((Projreport_Template) get(Projreport_Template.class, Constants.HEADER_IMAGE_TEMPLATE_ID));
            saveOrUpdate(requisition);
            list.add(requisition);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveRFQ : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject saveRFQDetails(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String sodid = (String) dataMap.get("id");

            RequestForQuotationDetail requisitionDetail = new RequestForQuotationDetail();
            if (!StringUtil.isNullOrEmpty(sodid)) {
                requisitionDetail = (RequestForQuotationDetail) get(PurchaseRequisitionDetail.class, sodid);
            }

            if (dataMap.containsKey("vendorquotationid")) {
                RequestForQuotation quotation = dataMap.get("vendorquotationid") == null ? null : (RequestForQuotation) get(RequestForQuotation.class, (String) dataMap.get("vendorquotationid"));
                requisitionDetail.setRequestforquotation(quotation);
            }
            if (dataMap.containsKey("srno")) {
                requisitionDetail.setSrno((Integer) dataMap.get("srno"));
            }
            if (dataMap.containsKey("rate")) {
                requisitionDetail.setRate((Double) dataMap.get("rate"));
            }
            if (dataMap.containsKey("quantity")) {
                requisitionDetail.setQuantity((Double) dataMap.get("quantity"));
            }
            if (dataMap.containsKey("uomid")) {
                requisitionDetail.setUom((UnitOfMeasure) get(UnitOfMeasure.class, dataMap.get("uomid").toString()));
            }
            if (dataMap.containsKey("baseuomquantity") && dataMap.get("baseuomquantity") != null && dataMap.get("baseuomquantity") != "") {
                requisitionDetail.setBaseuomquantity((Double) dataMap.get("baseuomquantity"));
//            } else {
//                if (dataMap.containsKey("quantity")) {
//                    requisitionDetail.setBaseuomquantity((Double) dataMap.get("quantity"));
//                }
            }
            if (dataMap.containsKey("baseuomrate") && dataMap.get("baseuomrate") != null && dataMap.get("baseuomrate") != "") {
                requisitionDetail.setBaseuomrate((Double) dataMap.get("baseuomrate"));
//            } else {
//                requisitionDetail.setBaseuomrate(1);
            }
            if (dataMap.containsKey("remark")) {
                requisitionDetail.setRemark(StringUtil.DecodeText(StringUtil.isNullOrEmpty((String) dataMap.get("remark")) ? "" : (String) dataMap.get("remark")));
            }
            if (dataMap.containsKey("prid")) {
                requisitionDetail.setPrid((PurchaseRequisition) get(PurchaseRequisition.class, dataMap.get("prid").toString()));
            }
//            if (dataMap.containsKey("discount")) {
//            	requisitionDetail.setDiscount((Double) dataMap.get("discount"));
//            }
            if (dataMap.containsKey("productid")) {
                Product product = dataMap.get("productid") == null ? null : (Product) get(Product.class, (String) dataMap.get("productid"));
                requisitionDetail.setProduct(product);
            }
            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid"));
                requisitionDetail.setCompany(company);
            }
            if (dataMap.containsKey("pricingbandmasterid") && dataMap.get("pricingbandmasterid") != null) {
                requisitionDetail.setPricingBandMasterid((String)dataMap.get("pricingbandmasterid"));
            }
             if (dataMap.containsKey("priceSource") && dataMap.get("priceSource") != null) {
                requisitionDetail.setPriceSource((String)dataMap.get("priceSource"));
            }
//            if (dataMap.containsKey("discountispercent")) {
//                requisitionDetail.setDiscountispercent((Integer)dataMap.get("discountispercent"));
//            } else {
//                requisitionDetail.setDiscountispercent(1);
//            }
//            if(dataMap.containsKey("rowtaxid")){
//                Tax rowtax = (dataMap.get("rowtaxid")==null?null:(Tax) get(Tax.class, (String) dataMap.get("rowtaxid")));
//                requisitionDetail.setTax(rowtax);
//            }
            saveOrUpdate(requisitionDetail);
            list.add(requisitionDetail);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveRFQDetails : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject deleteRFQ(String poid, String companyid) throws ServiceException {
        try {
            String query = "update RequestForQuotation set deleted=true where ID=? and company.companyID=?";
            int numRows = executeUpdate( query, new Object[]{poid, companyid});
            return new KwlReturnObject(true, "RFQ has been deleted successfully.", null, null, numRows);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.deleteRFQ : " + ex.getMessage(), ex);
        }
    }
    
    public KwlReturnObject deleteRFQPermanent(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            String delQuery1 = "", delQuery2 = "", delQuery3 = "", delQuery4 = "", delQuery5 = "", delQuery6;
            int numtotal = 0, numRows2=0, numRows3=0;
            if (requestParams.containsKey("rfqid") && requestParams.containsKey("companyid")) {
                boolean isFixedAsset = false;
                boolean isEditRfq = false;
                if (requestParams.containsKey("isFixedAsset") && requestParams.get("isFixedAsset") != null) {
                    isFixedAsset = (Boolean) requestParams.get("isFixedAsset");
                }
                 if (requestParams.containsKey("isEditRfq") && requestParams.get("isEditRfq") != null) {
                    isEditRfq = (Boolean) requestParams.get("isEditRfq");
                }

                ArrayList params8 = new ArrayList();
                params8.add(requestParams.get("rfqid"));
                params8.add(requestParams.get("companyid"));
//                String myquery = " select id from requestforquotationdetail where requestforquotation in (select id from requestforquotation where id=? and company = ?) ";
                String myquery = "select rfqd.id from requestforquotationdetail rfqd inner join requestforquotation rfq on rfqd.requestforquotation=rfq.id where rfq.id=? and rfq.company = ?";
                List list = executeSQLQuery( myquery, params8.toArray());
                Iterator itr = list.iterator();
                String idStrings = "";
                while (itr.hasNext()) {
                    String invdid = itr.next().toString();
                    idStrings += "'" + invdid + "',";
                }
                if (!StringUtil.isNullOrEmpty(idStrings)) {
                    idStrings = idStrings.substring(0, idStrings.length() - 1);
                }

                if (isFixedAsset) {
                    HashMap<String, Object> requestMap = new HashMap<String, Object>();
                    requestMap.put("companyid", requestParams.get("companyid"));
                    requestMap.put("rfqid", requestParams.get("rfqid"));

                    deleteRequestForQuotationAssetDetails(requestMap);
                }

                ArrayList params5 = new ArrayList();
                params5.add(requestParams.get("rfqid"));
                params5.add(requestParams.get("companyid"));
//                delQuery5 = " delete from requestforquotationdetail where requestforquotation in (select id from requestforquotation where id=? and company = ?) ";
                delQuery5 = " delete rfqd from requestforquotationdetail rfqd inner join requestforquotation rfq on rfqd.requestforquotation=rfq.id where rfq.id=? and rfq.company = ?";
                int numRows5 = executeSQLUpdate( delQuery5, params5.toArray());

                ArrayList params9 = new ArrayList();
                params9.add(requestParams.get("rfqid"));
                params9.add(requestParams.get("companyid"));
                String myquery1 = " select id from requestforquotation where id=? and company = ?";
                List list1 = executeSQLQuery( myquery1, params9.toArray());
                Iterator itr1 = list1.iterator();
                String journalent = "";
                while (itr1.hasNext()) {

                    String jeidi = itr1.next().toString();
                    journalent += "'" + jeidi + "',";
                }
                if (!StringUtil.isNullOrEmpty(journalent)) {
                    journalent = journalent.substring(0, journalent.length() - 1);
                }

                ArrayList params1 = new ArrayList();
                delQuery1 = "delete  from requestforquotationdetailcustomdata where requestforquotationdetailid in (" + idStrings + ")";
                int numRows1 = executeSQLUpdate( delQuery1, params1.toArray());
		
		ArrayList params2 = new ArrayList();
                params2.add(requestParams.get("rfqid"));
                delQuery2 = "delete from purchaserequisitionlinking where linkeddocid=?";
                numRows2 = executeSQLUpdate(delQuery2, params2.toArray());

                delQuery2 = "delete from requestforquotationlinking where docid=?";
                numRows3 = executeSQLUpdate(delQuery2, params2.toArray());
               
                int numRows6=0;
                /*We restricting to delete RFQ while editing*/
                if(!isEditRfq){
                ArrayList params6 = new ArrayList();
                params6.add(requestParams.get("companyid"));
                params6.add(requestParams.get("rfqid"));
                delQuery6 = "delete from requestforquotation where company = ? and id=?";
                numRows6 = executeSQLUpdate(delQuery6, params6.toArray());  
                }
                             
                numtotal = numRows1 + numRows2 + numRows3 + numRows5 + numRows6;
            }


            return new KwlReturnObject(true, "RFQ has been deleted successfully.", null, null, numtotal);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.deleteRFQ : " + ex.getMessage(), ex);
        }
    }

    public KwlReturnObject getOutstandingPurchaseOrders(HashMap<String, Object> request) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        try {

            DateFormat df = (DateFormat) request.get(Constants.df);
            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            String ss = (String) request.get(Constants.ss);
            boolean isOpeningBalanceOrder = false;
            if (request.get("isOpeningBalanceOrder") != null) {
                isOpeningBalanceOrder = (Boolean) request.get("isOpeningBalanceOrder");
            }
            boolean isfavourite = false;
            if (request.get(Constants.MARKED_FAVOURITE) != null) {
                isfavourite = Boolean.parseBoolean((String) request.get(Constants.MARKED_FAVOURITE));
            }
            boolean approvedPO = false; // flag to get only approved purchase orders.
            if (request.get("approvedPO") != null && request.get("approvedPO") instanceof Boolean) {
                approvedPO = (Boolean) request.get("approvedPO");
            }
            boolean pendingapproval = (Boolean) request.get("pendingapproval");
            String newvendorid = "";
            if (request.containsKey(Constants.newvendorid) && request.get(Constants.newvendorid) != null) {
                newvendorid = (String) request.get(Constants.newvendorid);
            }
            boolean isFixedAsset = false;
            if (request.containsKey("isFixedAsset") && request.get("isFixedAsset") != null) {
                isFixedAsset = (Boolean) request.get("isFixedAsset");
            }
            boolean isOutstanding = false;
            if (request.containsKey("isOutstanding") && request.get("isOutstanding") != null) {
                isOutstanding = (Boolean) request.get("isOutstanding");
            }
            boolean isProductView = false;
            if (request.containsKey("isProductView") && request.get("isProductView") != null) {
                isProductView = (Boolean) request.get("isProductView");
            }
            ArrayList params = new ArrayList();
            ArrayList paramsWithTradingFlow = new ArrayList();
            params.add((String) request.get(Constants.companyKey));
            paramsWithTradingFlow.add((String) request.get(Constants.companyKey));
            
            String productid = "";
            if (request.containsKey(Constants.productid) && request.get(Constants.productid) != null) {
                productid = (String) request.get(Constants.productid);
            }
            
            String moduleid = "";
            if (request.containsKey(Constants.moduleid) && request.get(Constants.moduleid) != null) {
                moduleid = request.get(Constants.moduleid).toString();
            }
            
            String condition = " where deleted=false and company.companyID=?";
            String conditionSQL = " where purchaseorder.deleteflag='F' and purchaseorder.company = ?";

            //// query based on CostCenter parameter
            String costCenterId = (String) request.get(CCConstants.REQ_costCenterId);
            if (!StringUtil.isNullOrEmpty(costCenterId)) {
                params.add(costCenterId);
                paramsWithTradingFlow.add(costCenterId);

                condition += " and purchaseorder.costcenter.ID=?";
                conditionSQL += " and purchaseorder.costcenter=?";
            }
            //for checking with vendor
            if (!StringUtil.isNullOrEmpty(newvendorid)) {
                params.add(newvendorid);
                paramsWithTradingFlow.add(newvendorid);
                condition += " and purchaseorder.vendor = ? ";
                conditionSQL += " and  purchaseorder.vendor = ? ";

            }
            //// query based on start date & end date parameters
            String startDate = request.get(Constants.REQ_startdate)!=null? StringUtil.DecodeText((String) request.get(Constants.REQ_startdate)):(String) request.get(Constants.REQ_startdate);
            String endDate = request.get(Constants.REQ_enddate)!=null? StringUtil.DecodeText((String) request.get(Constants.REQ_enddate)):(String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                condition += " and (purchaseorder.orderDate >=? and purchaseorder.orderDate <=? )";
                conditionSQL += " and (purchaseorder.orderdate >=? and purchaseorder.orderdate <=? )";

                params.add(df.parse(startDate));
                params.add(df.parse(endDate));

                paramsWithTradingFlow.add(df.parse(startDate));
                paramsWithTradingFlow.add(df.parse(endDate));
            }
            
            String searchJoin = "";
            if (!StringUtil.isNullOrEmpty(ss)) {
                String[] searchcol = new String[]{"purchaseorder.ponumber", "purchaseorder.memo", "purchaseorder.supplierinvoiceno", "vendor.name","vendor.aliasname",
                    "bsaddr.billingaddress", "bsaddr.billingcountry", "bsaddr.billingstate", "bsaddr.billingcity", "bsaddr.billingemail", "bsaddr.billingpostal",
                    "bsaddr.shippingaddress", "bsaddr.shippingCountry", "bsaddr.shippingstate", "bsaddr.shippingcity", "bsaddr.shippingemail", "bsaddr.shippingpostal","product.name","product.productid"};
                Map SearchStringMap = StringUtil.insertParamSearchStringMap(paramsWithTradingFlow, ss, 19);
                StringUtil.insertParamSearchString(SearchStringMap);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                conditionSQL += searchQuery;
                searchJoin = " left join podetails on podetails.purchaseorder = purchaseorder.id "
                           + " left join product on product.id = podetails.product"
                           + " inner join billingshippingaddresses bsaddr on bsaddr.id = purchaseorder.billingshippingaddresses ";
            }
            
            boolean isCustomFieldAdvSearch = false;
            String appendCase = "and";
            String Searchjson = "";
            String mySearchFilterString = "";
            String searchDefaultFieldSQL = "";
            String joinString1 = "";
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (request.containsKey("filterConjuctionCriteria") && request.get("filterConjuctionCriteria") != null) {
                if (request.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            if (request.containsKey("searchJson") && request.get("searchJson") != null) {
                Searchjson = StringUtil.DecodeText(request.get("searchJson").toString());

                if (!StringUtil.isNullOrEmpty(Searchjson)) {
                    JSONObject serachJobj = new JSONObject(Searchjson);
                    JSONArray customSearchFieldArray = new JSONArray();
                    JSONArray defaultSearchFieldArray = new JSONArray();
                    StringUtil.seperateCostomAndDefaultSerachJson(serachJobj, customSearchFieldArray, defaultSearchFieldArray);
                    if (defaultSearchFieldArray.length() > 0) {
                        /*
                         Advance Search For Default Form fields
                         */
                        ArrayList tableArray = new ArrayList();
                        tableArray.add("customer"); //this table array used to identified wheather join exists on table or not                         
                        Map<String, Object> map = buildSqlDefaultFieldAdvSearch(defaultSearchFieldArray, paramsWithTradingFlow, moduleid, tableArray, filterConjuctionCriteria);
                        searchJoin += map.containsKey("searchjoin") ? map.get("searchjoin") : "";
                        searchDefaultFieldSQL = (String) (map.containsKey("condition") ? map.get("condition") : "");
                        searchJoin += " left join polinking on polinking.docid=purchaseorder.id and polinking.sourceflag = 1 ";
                    }

                    if (customSearchFieldArray.length() > 0) {   //Advance search case for Custome field
                        isCustomFieldAdvSearch = true;
                        request.put(Constants.Searchjson, Searchjson);
                        request.put(Constants.appendCase, appendCase);
                        request.put("filterConjuctionCriteria", filterConjuctionCriteria);
                        mySearchFilterString = String.valueOf(StringUtil.getAdvanceSearchString(request, true).get(Constants.myResult));
                        String innerJoinOnDetailTable = "";
                        if (!searchJoin.contains("podetails.purchaseorder")) {
                            innerJoinOnDetailTable = " inner join podetails on podetails.purchaseorder=purchaseorder.id ";
                        }
                        boolean isInnerJoinAppend = false;
                        if (mySearchFilterString.contains("purchaseordercustomdata")) {
                            joinString1 = " inner join purchaseordercustomdata on purchaseordercustomdata.poID=purchaseorder.purchaseordercustomdataref ";
                        }
                        if (mySearchFilterString.contains("AccJEDetailCustomData")) {
                            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "purchaseorderdetailcustomdata");
                            joinString1 += innerJoinOnDetailTable + " left join purchaseorderdetailcustomdata on podetails.id=purchaseorderdetailcustomdata.poDetailID ";
                            isInnerJoinAppend = true;
                        }
                        if (mySearchFilterString.contains("AccJEDetailsProductCustomData")) {
                            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailsProductCustomData", "podetailproductcustomdata");
                            joinString1 += (isInnerJoinAppend ? "" : innerJoinOnDetailTable) + " left join podetailproductcustomdata on podetails.id=podetailproductcustomdata.poDetailID ";
                            isInnerJoinAppend = true;
                        }
                        if (mySearchFilterString.contains("VendorCustomData")) {
                            joinString1 += " left join vendorcustomdata  on vendorcustomdata.vendorId=vendor.id ";
                            mySearchFilterString = mySearchFilterString.replaceAll("VendorCustomData", "vendorcustomdata");
                        }
                        //product custom data
                        if (mySearchFilterString.contains("accproductcustomdata")) {
                            joinString1 += (isInnerJoinAppend ? "" : innerJoinOnDetailTable) + " left join product on product.id=podetails.product left join accproductcustomdata on accproductcustomdata.productId=product.id ";
                        }
                        StringUtil.insertParamAdvanceSearchString1(paramsWithTradingFlow, Searchjson);
                    }
                    mySearchFilterString = StringUtil.combineCustomAndDefaultSearch(searchDefaultFieldSQL, mySearchFilterString, filterConjuctionCriteria);
                }
            }
            
            String orderByQuery = "";
            String sort_Col = "";
            String joinString2 = " ";
            String[] stringSort = null;
            if (request.containsKey("dir") && request.containsKey("sort")) {
                String Col_Name = request.get("sort").toString();
                String Col_Dir = request.get("dir").toString();
                stringSort = columSort(Col_Name, Col_Dir);
                orderByQuery += stringSort[0];
                sort_Col += stringSort[1];
                if(request.get("sort").toString().equals("agentname")){
                    joinString2 += "  left join masteritem on masteritem.id = purchaseorder.masteragent  ";
                }

            } else {
                orderByQuery = " order by orderdate desc";
                sort_Col += ", purchaseorder.orderdate";
            }

            if (isfavourite) {
                conditionSQL += " and purchaseorder.favouriteflag=1 ";
            }

            if (isOpeningBalanceOrder) {
                conditionSQL += " and purchaseorder.isopeningbalencepo=1 ";
            } else {
                conditionSQL += " and purchaseorder.isopeningbalencepo=0 ";
            }

            if (pendingapproval) {
                conditionSQL += " and purchaseorder.pendingapproval != 0 and purchaseorder.approvestatuslevel != 11";
            } else {
                conditionSQL += " and purchaseorder.pendingapproval= 0 and purchaseorder.approvestatuslevel = 11";
            }
            
            if (approvedPO) {
                paramsWithTradingFlow.add(11);
                conditionSQL += " and purchaseorder.approvestatuslevel = ? ";
            } 
            
            if (isFixedAsset) {
                conditionSQL += " and purchaseorder.isfixedassetpo = true ";
            } else {
                conditionSQL += " and purchaseorder.isfixedassetpo = false ";
            }
            
            if (isOutstanding) {        //This flag is to show only Outstanding record when we select Outstanding PO in Purchase Order Report
                conditionSQL += " and pod.balanceqty > 0 ";
            }
            /* Manually closed PO is not fetching in outstanding PO report*/
            conditionSQL += " and purchaseorder.ispoclosed = 'F' ";

            //Ignore POs created as only templates.
            conditionSQL += " and purchaseorder.istemplate != 2 ";
            
             if (!StringUtil.isNullOrEmpty(productid)) {
                conditionSQL += " and pod.product = '" + productid + "' ";
            }

            Boolean isTradingFlow = (Boolean) request.get("isTradingFlow");
            String query = "";
            String selectQuery = " SELECT distinct purchaseorder.id, 'false' as WithoutInventory, purchaseorder.orderdate ";

            if (isProductView) {
                selectQuery += " ,pod.id as 'podid' ";
                orderByQuery =" order by purchaseorder.orderdate desc, purchaseorder.createdon desc";
            }
             if (isTradingFlow == true) {
                query= selectQuery + sort_Col + " FROM podetails as pod " 
                       + " INNER JOIN purchaseorder on pod.purchaseorder = purchaseorder.id " 
                       + " INNER JOIN vendor on vendor.id = purchaseorder.vendor "
                       + " left join costcenter on costcenter.id = purchaseorder.costcenter "
                       + " left JOIN grodetails as grod on grod.podetails = pod.id " 
                       + " left JOIN grorder as gro on grod.grorder = gro.id " 
                       + " left JOIN grdetails as grd on grd.purchaseorderdetail = pod.id " 
                       + " left JOIN goodsreceipt as gr on grd.goodsreceipt = gr.id " 
                       + " left JOIN prdetails as prd on prd.grdetails=grod.id " 
                       + " left JOIN product p on p.id=pod.product " + searchJoin + joinString1 + joinString2 + conditionSQL + mySearchFilterString
                       + " and ( gro.gronumber is null or (gro.deleteflag='F' and grod.actualquantity != grod.deliveredquantity) or (gro.gronumber is not null and gro.deleteflag='T') "
                       + " or gr.grnumber is null or (gr.grnumber is not null and gr.deleteflag='T' ) )" + orderByQuery;
            } else {
                query = selectQuery + sort_Col + " from podetails as pod "
                        + " inner join purchaseorder on pod.purchaseorder = purchaseorder.id "
                        + " inner join vendor on vendor.id = purchaseorder.vendor "
                        + " left join costcenter on costcenter.id = purchaseorder.costcenter "
                        + " left outer join grdetails as grd on grd.purchaseorderdetail = pod.id "
                        + " left outer join goodsreceipt as gr on grd.goodsreceipt = gr.id " + searchJoin + joinString1 + joinString2 + conditionSQL + mySearchFilterString
                        + " and ( gr.grnumber is null or (gr.grnumber is not null and gr.deleteflag='T' ) )"
                        + " AND purchaseorder.id not in (  "
                        + " select purchaseorder.id "
                        + " from grdetails as grd "
                        + " inner join goodsreceipt as gr on grd.goodsreceipt = gr.id "
                        + " inner join podetails as pod on grd.purchaseorderdetail = pod.id "
                        + " inner join purchaseorder as po on pod.purchaseorder = purchaseorder.id  "
                        + " where purchaseorder.company = ? and gr.deleteflag='F' )" + orderByQuery;
                paramsWithTradingFlow.add((String) request.get(Constants.companyKey));
            }
//            System.out.println("getOutstandingPurchaseOrders - query:"+query);            
            list = executeSQLQuery( query, paramsWithTradingFlow.toArray());
            count = list.size();
                if (!StringUtil.isNullOrEmpty(start) && StringUtil.isNullOrEmpty(limit) == false) {
                    list = executeSQLQueryPaging( query, paramsWithTradingFlow.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
                }
        } catch (Exception ex) {
            ex.printStackTrace();
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getOutstandingPurchaseOrders : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    public KwlReturnObject saveVendorQuotationTermMap(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            VendorQuotationTermMap termmap = new VendorQuotationTermMap();


            VendorQuotation vendorQuotation = null;
            if (dataMap.containsKey("term") && dataMap.containsKey("vendorQuotationID")) {
                vendorQuotation = (VendorQuotation) get(VendorQuotation.class, (String) dataMap.get("vendorQuotationID"));
                InvoiceTermsSales term = (InvoiceTermsSales) get(InvoiceTermsSales.class, (String) dataMap.get("term"));
                List<VendorQuotationTermMap> listTermMap = find("from VendorQuotationTermMap where vendorQuotation.ID = '" + vendorQuotation.getID() + "' and term.id = '" + term.getId() + "'");
                if (listTermMap.size() > 0) {
                    termmap = listTermMap.get(0);
                }
                termmap.setTerm(term);
            }

            if (dataMap.containsKey("termamount")) {
                termmap.setTermamount((Double) dataMap.get("termamount"));
            }
            if (dataMap.containsKey("termtaxamount")) {
                termmap.setTermtaxamount((Double) dataMap.get("termtaxamount"));
            }
            if (dataMap.containsKey("termtaxamountinbase")) {
                termmap.setTermtaxamountinbase((Double) dataMap.get("termtaxamountinbase"));
            }
            if (dataMap.containsKey("termAmountExcludingTax")) {
                termmap.setTermAmountExcludingTax((Double) dataMap.get("termAmountExcludingTax"));
            }
            if (dataMap.containsKey("termAmountExcludingTaxInBase")) {
                termmap.setTermAmountExcludingTaxInBase((Double) dataMap.get("termAmountExcludingTaxInBase"));
            }
            if (dataMap.containsKey("termamountinbase")) {
                termmap.setTermamountinbase((Double) dataMap.get("termamountinbase"));
            }
            if (dataMap.containsKey("termtax") && dataMap.get("termtax") != null) {
                Tax termtax = (Tax) get(Tax.class, (String) dataMap.get("termtax"));
                termmap.setTermtax(termtax);
            }
            if (dataMap.containsKey("termpercentage")) {
                termmap.setPercentage((Double) dataMap.get("termpercentage"));
            }
            if (dataMap.containsKey("vendorQuotationID") && vendorQuotation != null) {
                termmap.setVendorQuotation(vendorQuotation);
            }
//            if (dataMap.containsKey("term")) {
//                InvoiceTermsSales term = (InvoiceTermsSales) get(InvoiceTermsSales.class, (String) dataMap.get("term"));
//                termmap.setTerm(term);
//            }
            if (dataMap.containsKey("userid")) {
                User userid = (User) get(User.class, (String) dataMap.get("userid"));
                termmap.setCreator(userid);
            }
            if (dataMap.containsKey("createdon")) {
                termmap.setCreatedOn(((Date) dataMap.get("creationdate")).getTime());
            }
            saveOrUpdate(termmap);
            list.add(termmap);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accGoodsReceiptImpl.saveInvoiceTermMap : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    
    public KwlReturnObject updateVendorQuotationTermMap(HashMap<String, Object> dataMap) throws ServiceException{
        List list = new ArrayList();
        try {
            VendorQuotationTermMap termmap = new VendorQuotationTermMap();

            if (dataMap.containsKey("quotationtermid")) {
                termmap = (VendorQuotationTermMap) get(VendorQuotationTermMap.class, (String) dataMap.get("quotationtermid"));
            }
            if(termmap != null){
                if (dataMap.containsKey("termamount")) {
                    termmap.setTermamount((Double) dataMap.get("termamount"));
                }
                if (dataMap.containsKey("termamountinbase")) {
                    termmap.setTermamountinbase((Double) dataMap.get("termamountinbase"));
                }
                if (dataMap.containsKey("termtaxamount")) {
                    termmap.setTermtaxamount((Double) dataMap.get("termtaxamount"));
                }
                if (dataMap.containsKey("termtaxamountinbase")) {
                    termmap.setTermtaxamountinbase((Double) dataMap.get("termtaxamountinbase"));
                }
                if (dataMap.containsKey("termAmountExcludingTax")) {
                    termmap.setTermAmountExcludingTax((Double) dataMap.get("termAmountExcludingTax"));
                }
                if (dataMap.containsKey("termAmountExcludingTaxInBase")) {
                    termmap.setTermAmountExcludingTaxInBase((Double) dataMap.get("termAmountExcludingTaxInBase"));
                }
                if (dataMap.containsKey("termtax") && dataMap.get("termtax") != null) {
                    Tax termtax = (Tax) get(Tax.class, (String) dataMap.get("termtax"));
                    termmap.setTermtax(termtax);
                }
//                if (dataMap.containsKey("termpercentage")) {
//                    termmap.setPercentage((Double) dataMap.get("termpercentage"));
//                }
//                if (dataMap.containsKey("vendorQuotationID") && vendorQuotation != null) {
//                    termmap.setVendorQuotation(vendorQuotation);
//                }
//                if (dataMap.containsKey("term")) {
//                    InvoiceTermsSales term = (InvoiceTermsSales) get(InvoiceTermsSales.class, (String) dataMap.get("term"));
//                    termmap.setTerm(term);
//                }
//                if (dataMap.containsKey("userid")) {
//                    User userid = (User) get(User.class, (String) dataMap.get("userid"));
//                    termmap.setCreator(userid);
//                }
//                if (dataMap.containsKey("createdon")) {
//                    termmap.setCreatedOn(((Date) dataMap.get("creationdate")).getTime());
//                }
                saveOrUpdate(termmap);
                list.add(termmap);
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accGoodsReceiptImpl.saveInvoiceTermMap : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    /**
     * Save Vendor Quotation Data Line level Term data for INDIA country only.
     * for Save And Update Same function used, With link case (Link with RFQ and PR)
     * @param dataMap
     * @return
     * @throws ServiceException 
     */
    @Override
    public KwlReturnObject saveVendorQuotationDetailsTermMap(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            VendorQuotationDetailsTermMap termmap = new VendorQuotationDetailsTermMap();
            
            if (dataMap.containsKey("id") && !StringUtil.isNullOrEmpty(dataMap.get("id").toString())) {
                termmap = (VendorQuotationDetailsTermMap) get(VendorQuotationDetailsTermMap.class, (String) dataMap.get("id"));
                if(termmap ==null){
                    termmap =  new VendorQuotationDetailsTermMap();
                }
            }
            if (dataMap.containsKey("termamount") && !StringUtil.isNullOrEmpty(dataMap.get("termamount").toString())) {
                termmap.setTermamount(Double.parseDouble(dataMap.get("termamount").toString()));
            }
            if (dataMap.containsKey("termpercentage")) {
                termmap.setPercentage(Double.parseDouble(dataMap.get("termpercentage").toString()));
            }
            if (dataMap.containsKey("vendorquotationdetails")) {
                VendorQuotationDetail vendorquotationdetails = (VendorQuotationDetail) get(VendorQuotationDetail.class, (String) dataMap.get("vendorquotationdetails"));
                termmap.setVendorquotationdetails(vendorquotationdetails);
            }
            if (dataMap.containsKey("term")) {
                LineLevelTerms term = (LineLevelTerms) get(LineLevelTerms.class, (String) dataMap.get("term"));
                termmap.setTerm(term);
            }
            if (dataMap.containsKey("product")) {
                Product product = (Product) get(Product.class, (String) dataMap.get("product"));
                termmap.setProduct(product);
            }
            if (dataMap.containsKey("userid")) {
                User userid = (User) get(User.class, (String) dataMap.get("userid"));
                termmap.setCreator(userid);
            }
            if (dataMap.containsKey("createdOn") && !StringUtil.isNullOrEmpty(dataMap.get("createdOn").toString())) {
                termmap.setCreatedOn(((Date) dataMap.get("createdOn")).getTime());
            }
            if (dataMap.containsKey("purchasevalueorsalevalue") && !StringUtil.isNullObject(dataMap.get("purchasevalueorsalevalue")) && !StringUtil.isNullOrEmpty(dataMap.get("purchasevalueorsalevalue").toString())) {
                termmap.setPurchaseValueOrSaleValue(Double.parseDouble(dataMap.get("purchasevalueorsalevalue").toString()));
            }
            if (dataMap.containsKey("deductionorabatementpercent") && !StringUtil.isNullObject(dataMap.get("deductionorabatementpercent")) && !StringUtil.isNullOrEmpty(dataMap.get("deductionorabatementpercent").toString())) {
                termmap.setDeductionOrAbatementPercent(Double.parseDouble(dataMap.get("deductionorabatementpercent").toString()));
            }
            if (dataMap.containsKey("assessablevalue") && !StringUtil.isNullObject(dataMap.get("assessablevalue")) && !StringUtil.isNullOrEmpty(dataMap.get("assessablevalue").toString())) {
                termmap.setAssessablevalue(Double.parseDouble(dataMap.get("assessablevalue").toString()));
            }
            if (dataMap.containsKey("taxtype")) {
                termmap.setTaxType(Integer.parseInt(dataMap.get("taxtype").toString()));
            }
            if (dataMap.containsKey("isDefault")) {
                termmap.setIsGSTApplied(Boolean.parseBoolean(dataMap.get("isDefault").toString()));
            }
            if (dataMap.containsKey("productentitytermid")) {
                EntitybasedLineLevelTermRate term = (EntitybasedLineLevelTermRate) get(EntitybasedLineLevelTermRate.class, (String) dataMap.get("productentitytermid"));
                termmap.setEntitybasedLineLevelTermRate(term);
            }
            saveOrUpdate(termmap);
            list.add(termmap);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.saveInvoiceDetailsTermMap : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    /**
     * Get Mapped product level term for INDIA country Only for Edit VQ with link cases RFQ and PR
     * @param mapData
     * @return
     * @throws ServiceException 
     */
    @Override
    public KwlReturnObject getVendorQuotationProductTermDetails(Map<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        List param = new ArrayList();
        try {
            String query = "from VendorQuotationDetailsTermMap ";
            String condition = "";
            String orderby = " order by term.termSequence ";
            if (hm.containsKey("vendorquotationdetails") && hm.get("vendorquotationdetails") != null) {
                String VQDetailid = hm.get("vendorquotationdetails").toString();
                condition += " vendorquotationdetails.ID = ? ";
                param.add(VQDetailid);
            }
            if (hm.containsKey("productid") && hm.get("productid") != null) {
                if (!StringUtil.isNullOrEmpty(condition)) {
                    condition += " and ";
                }
                condition += " product.ID = ? ";
                param.add(hm.get("productid"));
            }
            if (hm.containsKey("termtype") && hm.get("termtype") != null) {
                if (!StringUtil.isNullOrEmpty(condition)) {
                    condition += " and ";
                }
                condition += " term.termType = ? ";
                param.add(hm.get("termtype"));
            }
            if (!StringUtil.isNullOrEmpty(condition)) {
                query += " where " + condition;
            }
            if (hm.containsKey("orderbyadditionaltax") && hm.get("orderbyadditionaltax") != null) {
                orderby += " , term.isAdditionalTax ";
            }
            orderby += " ASC ";
            query += orderby;
            list = executeQuery(query, param.toArray());
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getVendorQuotationProductTermDetails:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    @Override
    public KwlReturnObject getVendorQuotationTermMap(HashMap<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        try {
            String vendorQuotationID = hm.get("vendorQuotation").toString();
            String query = "from VendorQuotationTermMap where vendorQuotation.ID = ?";
            list = executeQuery( query, new Object[]{vendorQuotationID});
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getVendorQuotationTermMap:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public KwlReturnObject savePurchaseOrderTermMap(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            PurchaseOrderTermMap termmap = new PurchaseOrderTermMap();

            PurchaseOrder purchaseOrder = null;
            if (dataMap.containsKey("term") && dataMap.containsKey("purchaseOrderID")) {
                purchaseOrder = (PurchaseOrder) get(PurchaseOrder.class, (String) dataMap.get("purchaseOrderID"));
                InvoiceTermsSales term = (InvoiceTermsSales) get(InvoiceTermsSales.class, (String) dataMap.get("term"));
                List<PurchaseOrderTermMap> listTermMap = find("from PurchaseOrderTermMap where purchaseOrder.ID = '" + purchaseOrder.getID() + "' and term.id = '" + term.getId() + "'");
                if (listTermMap.size() > 0) {
                    termmap = listTermMap.get(0);
                }
                termmap.setTerm(term);
            }

            if (dataMap.containsKey("termamount")) {
                termmap.setTermamount((Double) dataMap.get("termamount"));
            }
            
            if (dataMap.containsKey("termtaxamount")) {
                termmap.setTermtaxamount((Double) dataMap.get("termtaxamount"));
            }
            if (dataMap.containsKey("termtaxamountinbase")) {
                termmap.setTermtaxamountinbase((Double) dataMap.get("termtaxamountinbase"));
            }
            if (dataMap.containsKey("termAmountExcludingTax")) {
                termmap.setTermAmountExcludingTax((Double) dataMap.get("termAmountExcludingTax"));
            }
            if (dataMap.containsKey("termAmountExcludingTaxInBase")) {
                termmap.setTermAmountExcludingTaxInBase((Double) dataMap.get("termAmountExcludingTaxInBase"));
            }
            if (dataMap.containsKey("termamountinbase")) {
                termmap.setTermamountinbase((Double) dataMap.get("termamountinbase"));
            }
            if (dataMap.containsKey("termtax") && dataMap.get("termtax") != null) {
                Tax termtax = (Tax) get(Tax.class, (String) dataMap.get("termtax"));
                termmap.setTermtax(termtax);
            }
            if (dataMap.containsKey("termpercentage")) {
                termmap.setPercentage((Double) dataMap.get("termpercentage"));
            }
            if (dataMap.containsKey("purchaseOrderID") && purchaseOrder != null) {
                termmap.setPurchaseOrder(purchaseOrder);
            }
//            if (dataMap.containsKey("term")) {
//                InvoiceTermsSales term = (InvoiceTermsSales) get(InvoiceTermsSales.class, (String) dataMap.get("term"));
//                termmap.setTerm(term);
//            }
            if (dataMap.containsKey("userid")) {
                User userid = (User) get(User.class, (String) dataMap.get("userid"));
                termmap.setCreator(userid);
            }
            if (dataMap.containsKey("createdon")) {
                termmap.setCreatedOn(((Date) dataMap.get("creationdate")).getTime());
            }
            saveOrUpdate(termmap);
            list.add(termmap);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accGoodsReceiptImpl.saveInvoiceTermMap : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    
    public KwlReturnObject updatePurchaseOrderTermMap(HashMap<String, Object> dataMap) throws ServiceException{
        List list = new ArrayList();
        try {
            PurchaseOrderTermMap termmap = new PurchaseOrderTermMap();

            if (dataMap.containsKey("ordertermid")) {
                termmap = (PurchaseOrderTermMap) get(PurchaseOrderTermMap.class, (String) dataMap.get("ordertermid"));
            }
            if(termmap != null){
                if (dataMap.containsKey("termamount")) {
                    termmap.setTermamount((Double) dataMap.get("termamount"));
                }
                if (dataMap.containsKey("termamountinbase")) {
                    termmap.setTermamountinbase((Double) dataMap.get("termamountinbase"));
                }
                if (dataMap.containsKey("termtaxamount")) {
                    termmap.setTermtaxamount((Double) dataMap.get("termtaxamount"));
                }
                if (dataMap.containsKey("termtaxamountinbase")) {
                    termmap.setTermtaxamountinbase((Double) dataMap.get("termtaxamountinbase"));
                }
                if (dataMap.containsKey("termAmountExcludingTax")) {
                    termmap.setTermAmountExcludingTax((Double) dataMap.get("termAmountExcludingTax"));
                }
                if (dataMap.containsKey("termAmountExcludingTaxInBase")) {
                    termmap.setTermAmountExcludingTaxInBase((Double) dataMap.get("termAmountExcludingTaxInBase"));
                }
                if (dataMap.containsKey("termtax") && dataMap.get("termtax") != null) {
                    Tax termtax = (Tax) get(Tax.class, (String) dataMap.get("termtax"));
                    termmap.setTermtax(termtax);
                }
//                if (dataMap.containsKey("termpercentage")) {
//                    termmap.setPercentage((Double) dataMap.get("termpercentage"));
//                }
//                if (dataMap.containsKey("vendorQuotationID") && vendorQuotation != null) {
//                    termmap.setVendorQuotation(vendorQuotation);
//                }
//                if (dataMap.containsKey("term")) {
//                    InvoiceTermsSales term = (InvoiceTermsSales) get(InvoiceTermsSales.class, (String) dataMap.get("term"));
//                    termmap.setTerm(term);
//                }
//                if (dataMap.containsKey("userid")) {
//                    User userid = (User) get(User.class, (String) dataMap.get("userid"));
//                    termmap.setCreator(userid);
//                }
//                if (dataMap.containsKey("createdon")) {
//                    termmap.setCreatedOn(((Date) dataMap.get("creationdate")).getTime());
//                }
                saveOrUpdate(termmap);
                list.add(termmap);
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accGoodsReceiptImpl.saveInvoiceTermMap : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    
/**
     * Save Purchase Order Data Line level Term data for INDIA country only.
     * for Save And Update Same function used, With link case 
     * @param dataMap
     * @return
     * @throws ServiceException 
     */
    @Override
    public KwlReturnObject savePurchaseOrderDetailsTermMap(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            PurchaseOrderDetailsTermMap termmap = new PurchaseOrderDetailsTermMap();
            
            if (dataMap.containsKey("id") && !StringUtil.isNullOrEmpty(dataMap.get("id").toString())) {
                termmap = (PurchaseOrderDetailsTermMap) get(PurchaseOrderDetailsTermMap.class, (String) dataMap.get("id"));
                if(termmap ==null){
                    termmap =  new PurchaseOrderDetailsTermMap();
                }
            }
            if (dataMap.containsKey("termamount") && !StringUtil.isNullOrEmpty(dataMap.get("termamount").toString())) {
                termmap.setTermamount(Double.parseDouble(dataMap.get("termamount").toString()));
            }
            if (dataMap.containsKey("termpercentage")) {
                termmap.setPercentage(Double.parseDouble(dataMap.get("termpercentage").toString()));
            }
            if (dataMap.containsKey("podetails")) {
                PurchaseOrderDetail purchaseorderdetail = (PurchaseOrderDetail) get(PurchaseOrderDetail.class, (String) dataMap.get("podetails"));
                termmap.setPodetails(purchaseorderdetail);
            }
            if (dataMap.containsKey("term")) {
                LineLevelTerms term = (LineLevelTerms) get(LineLevelTerms.class, (String) dataMap.get("term"));
                termmap.setTerm(term);
            }
            if (dataMap.containsKey("product")) {
                Product product = (Product) get(Product.class, (String) dataMap.get("product"));
                termmap.setProduct(product);
            }
            if (dataMap.containsKey("userid")) {
                User userid = (User) get(User.class, (String) dataMap.get("userid"));
                termmap.setCreator(userid);
            }
            if (dataMap.containsKey("createdOn") && !StringUtil.isNullOrEmpty(dataMap.get("createdOn").toString())) {
                termmap.setCreatedOn(((Date) dataMap.get("createdOn")).getTime());
            }
            if (dataMap.containsKey("purchasevalueorsalevalue")) {
                termmap.setPurchaseValueOrSaleValue(Double.parseDouble(dataMap.get("purchasevalueorsalevalue").toString()));
            }
            if (dataMap.containsKey("deductionorabatementpercent")) {
                termmap.setDeductionOrAbatementPercent(Double.parseDouble(dataMap.get("deductionorabatementpercent").toString()));
            }
            if (dataMap.containsKey("assessablevalue")) {
                termmap.setAssessablevalue(Double.parseDouble(dataMap.get("assessablevalue").toString()));
            }
            if (dataMap.containsKey("taxtype")) {
                termmap.setTaxType(Integer.parseInt(dataMap.get("taxtype").toString()));
            }
            if (dataMap.containsKey("isDefault")) {
                termmap.setIsGSTApplied(Boolean.parseBoolean(dataMap.get("isDefault").toString()));
            }
            if (dataMap.containsKey("productentitytermid")) {
                EntitybasedLineLevelTermRate term = (EntitybasedLineLevelTermRate) get(EntitybasedLineLevelTermRate.class, (String) dataMap.get("productentitytermid"));
                termmap.setEntitybasedLineLevelTermRate(term);
            }
            saveOrUpdate(termmap);
            list.add(termmap);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.savePurchaseOrderDetailsTermMap : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    
    /*
     * This Method Saves Terms related Details For Security Gate Entry..
     */
    @Override
    public KwlReturnObject saveSGEDetailsTermMap(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            SGEDetailsTermMap termmap = new SGEDetailsTermMap();
            
            if (dataMap.containsKey("id") && !StringUtil.isNullOrEmpty(dataMap.get("id").toString())) {
                termmap = (SGEDetailsTermMap) get(SGEDetailsTermMap.class, (String) dataMap.get("id"));
                if(termmap ==null){
                    termmap =  new SGEDetailsTermMap();
                }
            }
            if (dataMap.containsKey("termamount") && !StringUtil.isNullOrEmpty(dataMap.get("termamount").toString())) {
                termmap.setTermamount(Double.parseDouble(dataMap.get("termamount").toString()));
            }
            if (dataMap.containsKey("termpercentage")) {
                termmap.setPercentage(Double.parseDouble(dataMap.get("termpercentage").toString()));
            }
            if (dataMap.containsKey("sgedetails")) {
                SecurityGateDetails securityGateDetails = (SecurityGateDetails) get(SecurityGateDetails.class, (String) dataMap.get("sgedetails"));
                termmap.setSgedetails(securityGateDetails);
            }
            if (dataMap.containsKey("term")) {
                LineLevelTerms term = (LineLevelTerms) get(LineLevelTerms.class, (String) dataMap.get("term"));
                termmap.setTerm(term);
            }
            if (dataMap.containsKey("product")) {
                Product product = (Product) get(Product.class, (String) dataMap.get("product"));
                termmap.setProduct(product);
            }
            if (dataMap.containsKey("userid")) {
                User userid = (User) get(User.class, (String) dataMap.get("userid"));
                termmap.setCreator(userid);
            }
            if (dataMap.containsKey("createdOn") && !StringUtil.isNullOrEmpty(dataMap.get("createdOn").toString())) {
                termmap.setCreatedOn(((Date) dataMap.get("createdOn")).getTime());
            }
            if (dataMap.containsKey("purchasevalueorsalevalue")) {
                termmap.setPurchaseValueOrSaleValue(Double.parseDouble(dataMap.get("purchasevalueorsalevalue").toString()));
            }
            if (dataMap.containsKey("deductionorabatementpercent")) {
                termmap.setDeductionOrAbatementPercent(Double.parseDouble(dataMap.get("deductionorabatementpercent").toString()));
            }
            if (dataMap.containsKey("assessablevalue")) {
                termmap.setAssessablevalue(Double.parseDouble(dataMap.get("assessablevalue").toString()));
            }
            if (dataMap.containsKey("taxtype")) {
                termmap.setTaxType(Integer.parseInt(dataMap.get("taxtype").toString()));
            }
            if (dataMap.containsKey("isDefault")) {
                termmap.setIsGSTApplied(Boolean.parseBoolean(dataMap.get("isDefault").toString()));
            }
            if (dataMap.containsKey("productentitytermid")) {
                EntitybasedLineLevelTermRate term = (EntitybasedLineLevelTermRate) get(EntitybasedLineLevelTermRate.class, (String) dataMap.get("productentitytermid"));
                termmap.setEntitybasedLineLevelTermRate(term);
            }
            saveOrUpdate(termmap);
            list.add(termmap);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.saveSGEDetailsTermMap : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    
    
    /*
     * This Method Returns Terms related Details For Security Gate Entry..
     */
    @Override
    public KwlReturnObject getSGEDetailsTermMap(Map<String, Object> mapData) throws ServiceException {
        List<Object> list = new ArrayList<Object>();
        List param = new ArrayList();
        String query = "from SGEDetailsTermMap ";
        String condition = "";
        String orderby = " order by term.termSequence ";
        if (mapData.containsKey("sgedetails") && mapData.get("sgedetails") != null) {
            String podetailsid = mapData.get("sgedetails").toString();
            condition += " sgedetails.ID = ? ";
            param.add(podetailsid);
        }
        if (mapData.containsKey("termtype") && mapData.get("termtype") != null) {
            if (!StringUtil.isNullOrEmpty(condition)) {
                condition += " and ";
            }
            condition += " term.termType = ? ";
            param.add(mapData.get("termtype"));
        }
        if (mapData.containsKey("productid") && mapData.get("productid") != null) {
            if (!StringUtil.isNullOrEmpty(condition)) {
                condition += " and ";
            }
            condition += " product.ID = ? ";
            param.add(mapData.get("productid"));
        }
        if (!StringUtil.isNullOrEmpty(condition)) {
            query += " where " + condition;
        }
        if (mapData.containsKey("orderbyadditionaltax") && mapData.get("orderbyadditionaltax") != null) {
            orderby += " , term.isAdditionalTax ";
        }
        orderby += " ASC ";
        query += orderby;
        list = executeQuery(query, param.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    /**
     * Get Mapped product level term for INDIA country Only
     * @param mapData
     * @return
     * @throws ServiceException 
     */
    @Override
    public KwlReturnObject getPurchaseOrderDetailsTermMap(Map<String, Object> mapData) throws ServiceException {
        List<Object> list = new ArrayList<Object>();
        List param = new ArrayList();
        String query = "from PurchaseOrderDetailsTermMap ";
        String condition = "";
        String orderby = " order by term.termSequence ";
        if (mapData.containsKey("podetails") && mapData.get("podetails") != null) {
            String podetailsid = mapData.get("podetails").toString();
            condition += " podetails.ID = ? ";
            param.add(podetailsid);
        }
        if (mapData.containsKey("termtype") && mapData.get("termtype") != null) {
            if (!StringUtil.isNullOrEmpty(condition)) {
                condition += " and ";
            }
            condition += " term.termType = ? ";
            param.add(mapData.get("termtype"));
        }
        if (mapData.containsKey("productid") && mapData.get("productid") != null) {
            if (!StringUtil.isNullOrEmpty(condition)) {
                condition += " and ";
            }
            condition += " product.ID = ? ";
            param.add(mapData.get("productid"));
        }
        if (!StringUtil.isNullOrEmpty(condition)) {
            query += " where " + condition;
        }
        if (mapData.containsKey("orderbyadditionaltax") && mapData.get("orderbyadditionaltax") != null) {
            orderby += " , term.isAdditionalTax ";
        }
        orderby += " ASC ";
        query += orderby;
        list = executeQuery(query, param.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    @Override
    public KwlReturnObject getPurchaseOrderTermMap(HashMap<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        try {
            String purchaseOrderID = hm.get("purchaseOrder").toString();
            String query = "from PurchaseOrderTermMap where purchaseOrder.ID = ?";
            list = executeQuery( query, new Object[]{purchaseOrderID});
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getPurchaseOrderTermMap:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public KwlReturnObject updateVendorQuotationCustomData(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            String vendorQuotationRefId = (String) requestParams.get("accvendorquotationcustomdataref");
            VendorQuotation vendorQuotation = (VendorQuotation) get(VendorQuotation.class, vendorQuotationRefId);
            if (requestParams.containsKey("accvendorquotationcustomdataref")) {
                VendorQuotationCustomData vendorQuotationCustomData = null;
                vendorQuotationCustomData = (VendorQuotationCustomData) get(VendorQuotationCustomData.class, (String) requestParams.get("accvendorquotationcustomdataref"));
                vendorQuotation.setVendorQuotationCustomData(vendorQuotationCustomData);
            }
            saveOrUpdate(vendorQuotation);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.updateVendorQuotationCustomData:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }

    @Override
    public KwlReturnObject updatePurchaseRequisitionCustomData(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            String purchaseRequisitionRefId = (String) requestParams.get("accpurchaserequisitioncustomdataref");
            PurchaseRequisition purchaseRequisition = (PurchaseRequisition) get(PurchaseRequisition.class, purchaseRequisitionRefId);
            if (requestParams.containsKey("accpurchaserequisitioncustomdataref")) {
                PurchaseRequisitionCustomData purchaseRequisitionCustomData = null;
                purchaseRequisitionCustomData = (PurchaseRequisitionCustomData) get(PurchaseRequisitionCustomData.class, (String) requestParams.get("accpurchaserequisitioncustomdataref"));
                purchaseRequisition.setPurchaseRequisitionCustomData(purchaseRequisitionCustomData);
            }
            saveOrUpdate(purchaseRequisition);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.updatePurchaseRequisitionCustomData:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }

    @Override
    public KwlReturnObject updateRFQCustomData(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            String RFQRefId = (String) requestParams.get("accrfqcustomdataref");
            RequestForQuotation requestForQuotation = (RequestForQuotation) get(RequestForQuotation.class, RFQRefId);
            if (requestParams.containsKey("accrfqcustomdataref")) {
                RFQCustomData rfqCustomData = null;
                rfqCustomData = (RFQCustomData) get(RFQCustomData.class, (String) requestParams.get("accrfqcustomdataref"));
                requestForQuotation.setRfqCustomData(rfqCustomData);
            }
            saveOrUpdate(requestForQuotation);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.updateRFQCustomData:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }
    
    @Override
    public KwlReturnObject updatePurchaseRequisitionDetailCustomData(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            String accpurchaserequisitiondetailcustomdataref = (String) requestParams.get("accpurchaserequisitiondetailcustomdataref");
            PurchaseRequisitionDetail purchaseRequisitionDetail = (PurchaseRequisitionDetail) get(PurchaseRequisitionDetail.class, accpurchaserequisitiondetailcustomdataref);
            if (requestParams.containsKey("accpurchaserequisitiondetailcustomdataref")) {
                PurchaseRequisitionDetailCustomData purchaseRequisitionDetailCustomData = null;
                purchaseRequisitionDetailCustomData = (PurchaseRequisitionDetailCustomData) get(PurchaseRequisitionDetailCustomData.class, (String) requestParams.get("accpurchaserequisitiondetailcustomdataref"));
                purchaseRequisitionDetail.setPurchaseRequisitionDetailCustomData(purchaseRequisitionDetailCustomData);
            }
            saveOrUpdate(purchaseRequisitionDetail);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.updatePurchaseRequisitionDetailCustomData:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }
      
     @Override
    public KwlReturnObject updateRFQDetailCustomData(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            String accrequestforquotationdetailcustomdataref = (String) requestParams.get("accrequestforquotationdetailcustomdataref");
            RequestForQuotationDetail requestForQuotationDetail = (RequestForQuotationDetail) get(RequestForQuotationDetail.class, accrequestforquotationdetailcustomdataref);
            if (requestParams.containsKey("accrequestforquotationdetailcustomdataref")) {
                RequestForQuotationDetailCustomData requestForQuotationDetailCustomData = null;
                requestForQuotationDetailCustomData = (RequestForQuotationDetailCustomData) get(RequestForQuotationDetailCustomData.class, (String) requestParams.get("accrequestforquotationdetailcustomdataref"));
                requestForQuotationDetail.setRequestForQuotationDetailCustomData(requestForQuotationDetailCustomData);
            }
            saveOrUpdate(requestForQuotationDetail);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.updatePurchaseRequisitionDetailCustomData:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }
      
    @Override
    public KwlReturnObject updateVQuotationDetailsCustomData(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            String vendorQuotationRefId = (String) requestParams.get("vqdetailscustomdataref");
            VendorQuotationDetail vendorQuotationDetail = (VendorQuotationDetail) get(VendorQuotationDetail.class, vendorQuotationRefId);
            if (requestParams.containsKey("vqdetailscustomdataref")) {
                VendorQuotationDetailCustomData vendorQuotationDetailCustomData = null;
                vendorQuotationDetailCustomData = (VendorQuotationDetailCustomData) get(VendorQuotationDetailCustomData.class, (String) requestParams.get("vqdetailscustomdataref"));
                vendorQuotationDetail.setVendorQuotationDetailCustomData(vendorQuotationDetailCustomData);
            }
            saveOrUpdate(vendorQuotationDetail);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.updateVendorQuotationCustomData:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }
    
    @Override
    public KwlReturnObject updateVQuotationDetailsProductCustomData(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            String vendorQuotationRefId = (String) requestParams.get("vqdetailscustomdataref");
            VendorQuotationDetail vendorQuotationDetail = (VendorQuotationDetail) get(VendorQuotationDetail.class, vendorQuotationRefId);
            if (requestParams.containsKey("vqdetailscustomdataref")) {
                VendorQuotationDetailsProductCustomData VQDetailsProductCustomData = null;
                VQDetailsProductCustomData = (VendorQuotationDetailsProductCustomData) get(VendorQuotationDetailsProductCustomData.class, (String) requestParams.get("vqdetailscustomdataref"));
                vendorQuotationDetail.setVQDetailsProductCustomData(VQDetailsProductCustomData);
            }
            saveOrUpdate(vendorQuotationDetail);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.updateVendorQuotationCustomData:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }

    @Override
    public KwlReturnObject deleteQuotationDetails(String quotationid, String companyid) throws ServiceException, AccountingException {
        //Delete Goods Receipt Details
        try {
            ArrayList params8 = new ArrayList();
            params8.add(quotationid);
            params8.add(companyid);
//            String myquery = " select id from vendorquotationdetails where vendorquotation in (select id from vendorquotation where id=? and company = ?) ";
            String myquery = " select vqd.id from vendorquotationdetails vqd inner join vendorquotation vq on vqd.vendorquotation=vq.id where vq.id=? and vq.company = ?";
            List list = executeSQLQuery( myquery, params8.toArray());
            Iterator itr = list.iterator();
            String idStrings = "";
            while (itr.hasNext()) {
                String invdid = itr.next().toString();
                idStrings += "'" + invdid + "',";
            }
            if (!StringUtil.isNullOrEmpty(idStrings)) {
                idStrings = idStrings.substring(0, idStrings.length() - 1);
            }
            /**
             * delete GST history data.
             */
            deleteGstTaxClassDetails(idStrings);
            ArrayList params1 = new ArrayList();
            String deletecustomdetails = "delete  from vendorquotationdetailscustomdata where vendorquotationdetailsid in (" + idStrings + ")";
            int numRows1 = executeSQLUpdate( deletecustomdetails, params1.toArray());
            String deleteproductcustomdetails = "delete  from vqdetailproductcustomdata where vqDetailID in (" + idStrings + ")";
            int numRows2 = executeSQLUpdate( deleteproductcustomdetails, params1.toArray());
            String delQuery = "delete from VendorQuotationDetail vqd where vqd.vendorquotation.ID=? and vqd.company.companyID=?";
            int numRows = executeUpdate( delQuery, new Object[]{quotationid, companyid});
            return new KwlReturnObject(true, "Quotation Details has been deleted successfully.", null, null, numRows);
        } catch (Exception ex) {
            //throw ServiceException.FAILURE("Cannot Edit Quotation.", ex);
            throw new AccountingException("Cannot Edit Quotation as it is or was already used in Other Transactions.", ex);
        }
    }
    /**
     * Function to delete Tax class history
     *
     * @param docrefid
     * @throws ServiceException
     */
    public void deleteGstTaxClassDetails(String docrefid) throws ServiceException {
        if (!StringUtil.isNullOrEmpty(docrefid)) {
            String delQuery = " delete from gsttaxclasshistory where refdocid IN (" + docrefid + ")";
            executeSQLUpdate(delQuery);
        }
    }

    /**
     * Function to delete GST fields history
     *
     * @param docrefid
     * @throws ServiceException
     */
    public void deleteGstDocHistoryDetails(String docrefid) throws ServiceException {
        if (!StringUtil.isNullOrEmpty(docrefid)) {
            String delQuery = " delete from gstdocumenthistory where refdocid=?";
            executeSQLUpdate(delQuery, new Object[]{docrefid});
        }
    }
    @Override
    public KwlReturnObject getQAApprovalItems(HashMap<String, Object> request) throws ServiceException {

        List list = new ArrayList();
        int count = 0;
        try {
//            KWLCurrency kwlcurrency = (KWLCurrency) get(KWLCurrency.class, (String) request.get("currencyid"));
            DateFormat df = (DateFormat) request.get(Constants.df);
            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            String ss = (String) request.get(Constants.ss);

            ArrayList params = new ArrayList();

            params.add((String) request.get(Constants.companyKey));
            String condition = " where pod.purchaseOrder.deleted=false and company.companyID=?";

            if (!StringUtil.isNullOrEmpty(ss)) {
                for (int i = 0; i < 3; i++) {
                    params.add(ss + "%");
                }
                condition += " and (pod.purchaseOrder.purchaseOrderNumber like ? or pod.purchaseOrder.memo like ? or pod.purchaseOrder.vendor.name like ? )";
            }


            if (request.containsKey("isPending") && request.get("isPending") != null) {
                boolean isPending = (Boolean) request.get("isPending");
                if (isPending) {
                    params.add(1);
                    condition += " and pod.qastatus=?";
                } else {
                    params.add(2);
                    condition += " and pod.qastatus=?";
                }
            }

            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                condition += " and (pod.purchaseOrder.orderDate >=? and pod.purchaseOrder.orderDate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
//            condition += " and po.pendingapproval= 0 and po.istemplate != 2 ";
            String query = "from PurchaseOrderDetail pod" + condition;
            list = executeQuery( query, params.toArray());
            count = list.size();
            if (!StringUtil.isNullOrEmpty(start) && StringUtil.isNullOrEmpty(limit) == false) {
                list = executeQueryPaging( query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getPurchaseOrders : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    @Override
    public KwlReturnObject updateQAApprovalItems(HashMap<String, Object> request) throws ServiceException {
        try {
            PurchaseOrderDetail purchaseOrderDetail = (PurchaseOrderDetail) request.get("purchaseOrderDetail");
            int qastatus = (Integer) request.get("qastatus");
            purchaseOrderDetail.setQastatus(qastatus);
            if (request.containsKey("qastatusremark")) {
                purchaseOrderDetail.setQastatusremark((String) request.get("qastatusremark"));
            }
            saveOrUpdate(purchaseOrderDetail);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.updateQAApprovalItems:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }

    @Override
    public KwlReturnObject getPOEditCount(String entryNumber, String companyid, String poid) throws ServiceException {
        try {
            List list = new ArrayList();
            int count = 0;
            String q = "from PurchaseOrder where purchaseOrderNumber=? and company.companyID=? and ID!=? AND isDraft='F'";  //ERM-1238 (Reference - SDP-13487) - Do not check duplicate in Draft Report. Because Multiple draft records having empty entry no.
            list = executeQuery( q, new Object[]{entryNumber, companyid, poid});
            count = list.size();
            return new KwlReturnObject(true, "", null, list, count);

        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.updateQAApprovalItems:" + ex.getMessage(), ex);
        }
    }
    /**
     * To Check duplicate no for Security gate Entry record
     * @param entryNumber
     * @param companyid
     * @param securityId
     * @return
     * @throws ServiceException 
     */
    @Override
    public KwlReturnObject getSGEEditCount(String entryNumber, String companyid, String securityId) throws ServiceException {
        try {
            List list = new ArrayList();
            int count = 0;
            String q = "from SecurityGateEntry where securityNumber=? and company.companyID=? and ID!=?";
            list = executeQuery( q, new Object[]{entryNumber, companyid, securityId});
            count = list.size();
            return new KwlReturnObject(true, "", null, list, count);

        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.updateQAApprovalItems:" + ex.getMessage(), ex);
        }
    }
    @Override
    public KwlReturnObject getQuotationEditCount(String entryNumber, String companyid, String quotationId) throws ServiceException {
        try {
            List list = new ArrayList();
            int count = 0;
            String q = "from VendorQuotation where quotationNumber=? and company.companyID=? and ID!=?";
            list = executeQuery( q, new Object[]{entryNumber, companyid, quotationId});
            count = list.size();
            return new KwlReturnObject(true, "", null, list, count);

        } catch (Exception ex) {
            throw ServiceException.FAILURE("Cannot Purchase order.", ex);
        }
    }

    @Override
    public KwlReturnObject approvePendingVendorQuotation(String vqID, String companyid, int status) throws ServiceException {
        String query = "update VendorQuotation set approvestatuslevel = ? where ID=? and company.companyID=?";
        int numRows = executeUpdate( query, new Object[]{status, vqID, companyid});
        return new KwlReturnObject(true, "Vendor Quotation has been updated successfully.", null, null, numRows);
    }
    
    public KwlReturnObject rejectPendingVendorQuotation(String vqID, String companyid) throws ServiceException {
        try {
            String query = "update VendorQuotation set deleted=true,approvestatuslevel = (-approvestatuslevel) where ID=? and company.companyID=?";
            int numRows = executeUpdate( query, new Object[]{vqID, companyid});
            return new KwlReturnObject(true, "Vendor Quotation has been rejected successfully.", null, null, numRows);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.rejectPendingVendorQuotation : " + ex.getMessage(), ex);
        }
    }
    
    @Override
    public KwlReturnObject getEditPurchaseRequisitionCount(String entryNumber, String companyid, String poid) throws ServiceException {
        try {
            List list = new ArrayList();
            int count = 0;
            String q = "from PurchaseRequisition where prNumber=? and company.companyID=? and ID!=? AND isDraft='F'";    //SDP-13487 - Do not check duplicate in Draft Report. Because Multiple draft records having empty entry no.
            list = executeQuery( q, new Object[]{entryNumber, companyid, poid});
            count = list.size();
            return new KwlReturnObject(true, "", null, list, count);

        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.updateQAApprovalItems:" + ex.getMessage(), ex);
        }
    }
    
    @Override
    public KwlReturnObject getEditRFQCount(String entryNumber, String companyid, String poid) throws ServiceException {
        try {
            List list = new ArrayList();
            int count = 0;
            String q = "from RequestForQuotation where rfqNumber=? and company.companyID=? and ID!=?";
            list = executeQuery( q, new Object[]{entryNumber, companyid, poid});
            count = list.size();
            return new KwlReturnObject(true, "", null, list, count);

        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.updateQAApprovalItems:" + ex.getMessage(), ex);
        }
    }

    @Override
    public KwlReturnObject getPR_Product(String productid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from PurchaseRequisitionDetail prd where prd.product.ID=? and prd.company.companyID=?";// and prd.purchaserequisition.deleted=false ";
        list = executeQuery( q, new Object[]{productid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getVQ_Product(String productid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from VendorQuotationDetail vqd where vqd.product.ID=? and vqd.company.companyID=? ";//and vqd.vendorquotation.deleted=false ";
        list = executeQuery( q, new Object[]{productid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public KwlReturnObject getPurchaseOrderLinkedWithVQ(String invoiceId, String companyId) throws ServiceException {
        ArrayList params = new ArrayList();
        params.add(invoiceId);
        params.add(companyId);
        String query = "select distinct purchaseorder from podetails pd inner join vendorquotationdetails vqd on pd.vqdetail = vqd.id "
                + "where vqd.vendorquotation = ? and vqd.company = ?";

        List list = executeSQLQuery( query, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    /**
     * 
     * @param poId
     * @param companyId
     * @return
     * @throws ServiceException 
     * @Description : It return Purchase order link with PR
     */
    public KwlReturnObject getPurchaseOrderLinkedWithPR(String poId, String companyId) throws ServiceException {
        ArrayList params = new ArrayList();
        params.add(poId);
        params.add(companyId);
        String query = "select distinct purchaseorder from podetails pd inner join purchaserequisitiondetail vqd on pd.purchaserequisitiondetailid = vqd.id "
                + "where vqd.purchaserequisition = ? and vqd.company = ?";
        List list = executeSQLQuery(query, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    @Override
    public KwlReturnObject getPurchaseInvoiceLinkedWithVQ(String invoiceId, String companyId) throws ServiceException {
        ArrayList params = new ArrayList();
        params.add(invoiceId);
        params.add(companyId);
        String query = "select distinct goodsreceipt from grdetails grd inner join vendorquotationdetails vqd on grd.vendorquotationdetail = vqd.id "
                + "where vqd.vendorquotation = ? and vqd.company = ?";

        List list = executeSQLQuery( query, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getVendorQuotationLinkedWithPR(String billid, String companyId) throws ServiceException {
        ArrayList params = new ArrayList();
        params.add(billid);
        params.add(companyId);
        String query = "select distinct vendorquotation from vendorquotationdetails vqd inner join purchaserequisitiondetail prd "
                + "on vqd.purchaserequisitiondetailsid = prd.id where prd.purchaserequisition = ? and prd.company = ?";

        List list = executeSQLQuery( query, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public Boolean checkForRule(int level, String companyid, String amount, String userid) throws AccountingException, ServiceException, ScriptException {
        boolean validate = false;
        ScriptEngineManager mgr = new ScriptEngineManager();
        ScriptEngine engine = mgr.getEngineByName("JavaScript");
        int levelToCheck = level;
        List params = new ArrayList();
        params.add(levelToCheck);
        params.add(companyid);
        List<Object[]> rules = new ArrayList();
        String query = "select id,level,rule from prflow where level= ? and companyid = ?";
        try {
            rules = executeSQLQuery( query, params.toArray());
        } catch (ServiceException ex) {
            Logger.getLogger(accPurchaseOrderImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        for (Object[] row : rules) {
            String rule = row[2].toString();
            String ruleExpression = rule;
            rule = rule.replaceAll("[$$]+", amount);
            //if(!StringUtil.isNullOrEmpty(rule)) {
            if ((!StringUtil.isNullOrEmpty(rule) && Boolean.parseBoolean(engine.eval(rule).toString())) || StringUtil.isNullOrEmpty(rule)) { // rule valid so check for current user as approver 
                List user = new ArrayList();
                List ParamsNew = new ArrayList();
                ParamsNew.add(levelToCheck);
                ParamsNew.add(companyid);
                ParamsNew.add(ruleExpression);
                ParamsNew.add(userid);
//                String query1 = "select * from prflowtargets where flowid in(select id from prflow where level=? and companyid=? and rule=?) and userid=?";
                String query1 = "select prflowtargets.* from prflowtargets inner join prflow on prflowtargets.flowid=prflow.id where prflow.level=? and prflow.companyid=? and prflow.rule=? and prflowtargets.userid=?";
                try {
                    user = executeSQLQuery( query1, ParamsNew.toArray());
                } catch (ServiceException ex) {
                    Logger.getLogger(accPurchaseOrderImpl.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (user.size() != 0) {
                    validate = true;
                    break;
                }
            }

            // }
        }
        return validate;
    }

    @Override
    public boolean checkIfRequisitionLinkedInVendorQuotation(String prid, String companyid) throws ServiceException {
        List list = new ArrayList();
        List params=new ArrayList();
//        String query = "select id from vendorquotationdetails  where purchaserequisitiondetailsid in (select id from purchaserequisitiondetail where purchaserequisition = ?) and company= ? ";
        String query = "select vqd.id from vendorquotationdetails vqd inner join purchaserequisitiondetail prd on prd.id=vqd.purchaserequisitiondetailsid where prd.purchaserequisition = ? and vqd.company= ?";
        params.add(prid);
        params.add(companyid);
        list = executeSQLQuery( query, params.toArray());
        if(list.size()==0){
            return false;
        } else {
            return true;
        }
    }
    /**
     * 
     * @param prid
     * @param companyid
     * @return = return true if linked.
     * @throws ServiceException 
     * @Description: Check PR linked in PO on Not
     */
    public boolean checkIfRequisitionLinkedInPurchaseOrder(String prid, String companyid) throws ServiceException {
        List list = new ArrayList();
        List params = new ArrayList();
        String query = "select pod.id from podetails pod inner join purchaserequisitiondetail prd on prd.id=pod.purchaserequisitiondetailid where prd.purchaserequisition = ? and pod.company= ?";
        params.add(prid);
        params.add(companyid);
        list = executeSQLQuery(query, params.toArray());
        if (list.size() == 0) {
            return false;
        } else {
            return true;
        }
    }
    /**
     * 
     * @param prid = RFQ Id
     * @return = Return True if Used
     * @throws ServiceException 
     */
    public boolean checkIfRFQLinkedInVendorQuotation(String prid) throws ServiceException {
        List list = new ArrayList();
        List params = new ArrayList();
        String query = "select id from requestforquotationlinking where docid=? and moduleid=23";
        params.add(prid);
        list = executeSQLQuery(query, params.toArray());
        if (list.size() == 0) {
            return false;
        } else {
            return true;
        }
    }
    @Override
    public KwlReturnObject getBudgeting(HashMap<String, Object> requestParams) throws ServiceException {
        List returnList = new ArrayList();
        int totalCount = 0;
        try {
            ArrayList params = new ArrayList();
            String condition = "";
            params.add((String) requestParams.get("companyID"));
            
            if (requestParams.containsKey("dimensionValue") && requestParams.get("dimensionValue") != null) {
                params.add((String) requestParams.get("dimensionValue"));
                condition += " and dimensionValue.id = ? ";
            }
            
            if (requestParams.containsKey("product") && requestParams.get("product") != null) {
                params.add((String) requestParams.get("product"));
                condition += " and product.ID = ? ";
            } else {
                condition += " and product.ID is null ";
            }
            
            if (requestParams.containsKey("productCategory") && requestParams.get("productCategory") != null) {
                params.add((String) requestParams.get("productCategory"));
                condition += " and productCategory.ID = ? ";
            } else {
                condition += " and productCategory.ID is null ";
            }
            
            if (requestParams.containsKey("frequencyType") && requestParams.get("frequencyType") != null) {
                params.add((String) requestParams.get("frequencyType"));
                condition += " and frequencyType = ? ";
            }
            
            if (requestParams.containsKey("frequencyColumn") && requestParams.get("frequencyColumn") != null) {
                params.add((String) requestParams.get("frequencyColumn"));
                condition += " and frequencyColumn = ? ";
            }
            
            if (requestParams.containsKey("year") && requestParams.get("year") != null) {
                params.add((String) requestParams.get("year"));
                condition += " and year = ? ";
            }

            String query = " from Budgeting where company.companyID = ? " + condition;

            returnList = executeQuery( query, params.toArray());
            totalCount = returnList.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, returnList, totalCount);
    }
    
    @Override
    public KwlReturnObject saveBudgeting(HashMap<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        try {
            Budgeting budgeting;
            String budgetingID = (String) requestParams.get("budgetingID");
            
            if (!StringUtil.isNullOrEmpty(budgetingID)) {
                budgeting = (Budgeting) get(Budgeting.class, budgetingID);
            } else {
                budgeting = new Budgeting();
            }

            if (requestParams.containsKey("dimensionValue") && requestParams.get("dimensionValue") != null) {
                FieldComboData dimensionValue = (FieldComboData) get(FieldComboData.class, (String) requestParams.get("dimensionValue"));
                budgeting.setDimensionValue(dimensionValue);
            }

            if (requestParams.containsKey("product") && requestParams.get("product") != null) {
                Product product = (Product) get(Product.class, (String) requestParams.get("product"));
                budgeting.setProduct(product);
            }

            if (requestParams.containsKey("productCategory") && requestParams.get("productCategory") != null) {
                MasterItem productCategory = (MasterItem) get(MasterItem.class, (String) requestParams.get("productCategory"));
                budgeting.setProductCategory(productCategory);
            }

            if (requestParams.containsKey("frequencyType") && requestParams.get("frequencyType") != null) {
                budgeting.setFrequencyType((String) requestParams.get("frequencyType"));
            }

            if (requestParams.containsKey("frequencyColumn") && requestParams.get("frequencyColumn") != null) {
                budgeting.setFrequencyColumn((String) requestParams.get("frequencyColumn"));
            }

            if (requestParams.containsKey("year") && requestParams.get("year") != null) {
                budgeting.setYear((String) requestParams.get("year"));
            }

            if (requestParams.containsKey("amount") && requestParams.get("amount") != null) {
                budgeting.setAmount((Double) requestParams.get("amount"));
            }

            if (requestParams.containsKey("companyID") && requestParams.get("companyID") != null) {
                Company company = (Company) get(Company.class, (String) requestParams.get("companyID"));
                budgeting.setCompany(company);
            }

            saveOrUpdate(budgeting);

            list.add(budgeting);
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getPuchaseRequisitionInvoiceAmount(HashMap<String, Object> requestParams) throws ServiceException {
        List returnList = new ArrayList();
        int totalCount = 0;
        try {
            ArrayList params = new ArrayList();
            ArrayList params1 = new ArrayList();
            ArrayList params2 = new ArrayList();
            ArrayList params3 = new ArrayList();
            
            String innerCondition1 = "";
            String innerCondition2 = "";
            String innerCondition3 = "";
            
            params1.add((String) requestParams.get("companyID"));
            params2.add((String) requestParams.get("companyID"));
            params3.add((String) requestParams.get("companyID"));

            if (requestParams.containsKey("productID") && requestParams.get("productID") != null) {
                params1.add((String) requestParams.get("productID"));
                params2.add((String) requestParams.get("productID"));
                params3.add((String) requestParams.get("productID"));
                innerCondition1 += " and prd2.product = ? ";
                innerCondition2 += " and prd3.product = ? ";
                innerCondition3 += " and prd4.product = ? ";
            }
            
            Date startDate = (Date) requestParams.get(Constants.REQ_startdate);
            Date endDate = (Date) requestParams.get(Constants.REQ_enddate);
            if (startDate != null && endDate != null) {
                innerCondition1 += " and (je2.entrydate >=? and je2.entrydate <=?)";
                innerCondition2 += " and (je3.entrydate >=? and je3.entrydate <=?)";
                innerCondition3 += " and (je4.entrydate >=? and je4.entrydate <=?)";

                params1.add(startDate);
                params1.add(endDate);
                
                params2.add(startDate);
                params2.add(endDate);
                
                params3.add(startDate);
                params3.add(endDate);
            }
            
            String joinString1 = "";
            String joinString2 = "";
            String joinString3 = "";
            String appendCase = "and";
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            String mySearchFilterString = "";
            String mySearchFilterString2 = "";
            String mySearchFilterString3 = "";
            String mySearchFilterString4 = "";
            String Searchjson = "";
            if (requestParams.containsKey("searchJson") && requestParams.get("searchJson") != null) {
                Searchjson = requestParams.get("searchJson").toString();

                if (!StringUtil.isNullOrEmpty(Searchjson)) {
                    JSONObject serachJobj = new JSONObject(Searchjson);
                    JSONArray customSearchFieldArray = new JSONArray();
                    JSONArray defaultSearchFieldArray = new JSONArray();
                    StringUtil.seperateCostomAndDefaultSerachJson(serachJobj, customSearchFieldArray, defaultSearchFieldArray);

                    if (customSearchFieldArray.length() > 0) {
                        /*
                         * Advance Search For Custom fields
                         */
                        requestParams.put(Constants.Searchjson, Searchjson);
                        requestParams.put(Constants.appendCase, appendCase);
                        requestParams.put("filterConjuctionCriteria", filterConjuctionCriteria);

                        mySearchFilterString = String.valueOf(StringUtil.getAdvanceSearchString(requestParams, true).get(Constants.myResult));
                        
                        if (mySearchFilterString.contains("accjecustomdata")) {
                            mySearchFilterString2 = mySearchFilterString.replaceAll("accjecustomdata", "accjecustdata2");
                            mySearchFilterString3 = mySearchFilterString.replaceAll("accjecustomdata", "accjecustdata3");
                            mySearchFilterString4 = mySearchFilterString.replaceAll("accjecustomdata", "accjecustdata4");
                            
                            joinString1 = " inner join accjecustomdata accjecustdata2 on accjecustdata2.journalentryId=gr2.journalentry ";
                            joinString2 = " inner join accjecustomdata accjecustdata3 on accjecustdata3.journalentryId=gr3.journalentry ";
                            joinString3 = " inner join accjecustomdata accjecustdata4 on accjecustdata4.journalentryId=gr4.journalentry ";
                        }
                        if (mySearchFilterString.contains("AccJEDetailCustomData")) {
                            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "accjedetailcustomdata");
                            
                            mySearchFilterString2 = mySearchFilterString.replaceAll("accjedetailcustomdata", "accjedetailcustdata2");
                            mySearchFilterString3 = mySearchFilterString.replaceAll("accjedetailcustomdata", "accjedetailcustdata3");
                            mySearchFilterString4 = mySearchFilterString.replaceAll("accjedetailcustomdata", "accjedetailcustdata4");
                            
                            joinString1 += " left join accjedetailcustomdata accjedetailcustdata2  on accjedetailcustdata2.jedetailId=jed2.id ";
                            joinString2 += " left join accjedetailcustomdata accjedetailcustdata3  on accjedetailcustdata3.jedetailId=jed3.id ";
                            joinString3 += " left join accjedetailcustomdata accjedetailcustdata4  on accjedetailcustdata4.jedetailId=jed4.id ";
                        }

                        StringUtil.insertParamAdvanceSearchString1(params1, Searchjson);
                        StringUtil.insertParamAdvanceSearchString1(params2, Searchjson);
                        StringUtil.insertParamAdvanceSearchString1(params3, Searchjson);
                    }
                }
            }
            
            params.addAll(params1);
            params.addAll(params2);
            params.addAll(params3);
            
            String query = "select grd2.id from grdetails grd2 "
                    + " inner join goodsreceipt gr2 on gr2.id = grd2.goodsreceipt "
                    + " inner join journalentry je2 on je2.id = gr2.journalentry "
                    + " inner join jedetail jed2 on jed2.journalEntry = je2.id "
                    + " inner join podetails pod2 on pod2.id = grd2.purchaseorderdetail "
                    + " inner join vendorquotationdetails vqd2 on vqd2.id = pod2.vqdetail "
                    + " inner join purchaserequisitiondetail prd2 on prd2.id = vqd2.purchaserequisitiondetailsid "
                    + " inner join purchaserequisition pr2 on pr2.id = prd2.purchaserequisition " + joinString1
                    + " where grd2.company = ? " + innerCondition1 + mySearchFilterString2
                    + " union "
                    + " select grd3.id from grdetails grd3 "
                    + " inner join goodsreceipt gr3 on gr3.id = grd3.goodsreceipt "
                    + " inner join journalentry je3 on je3.id = gr3.journalentry "
                    + " inner join jedetail jed3 on jed3.journalEntry = je3.id "
                    + " inner join vendorquotationdetails vqd3 on vqd3.id = grd3.vendorquotationdetail "
                    + " inner join purchaserequisitiondetail prd3 on prd3.id = vqd3.purchaserequisitiondetailsid "
                    + " inner join purchaserequisition pr3 on pr3.id = prd3.purchaserequisition " + joinString2
                    + " where grd3.company = ? " + innerCondition2 + mySearchFilterString3
                    + " union "
                    + " select grd4.id from grdetails grd4 "
                    + " inner join goodsreceipt gr4 on gr4.id = grd4.goodsreceipt "
                    + " inner join journalentry je4 on je4.id = gr4.journalentry "
                    + " inner join jedetail jed4 on jed4.journalEntry = je4.id "
                    + " inner join grodetails grod4 on grod4.id = grd4.grorderdetails "
                    + " inner join podetails pod4 on pod4.id = grod4.podetails "
                    + " inner join vendorquotationdetails vqd4 on vqd4.id = pod4.vqdetail "
                    + " inner join purchaserequisitiondetail prd4 on prd4.id = vqd4.purchaserequisitiondetailsid "
                    + " inner join purchaserequisition pr4 on pr4.id = prd4.purchaserequisition " + joinString3
                    + " where grd4.company = ? " + innerCondition3 + mySearchFilterString4;


            returnList = executeSQLQuery( query, params.toArray());
            totalCount = returnList.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, returnList, totalCount);
    }
    
    @Override
    public KwlReturnObject getApprovedPurchaseRequisitionAmountWhoseInvoiceIsNotCreated(HashMap<String, Object> requestParams) throws ServiceException {
        List returnList = new ArrayList();
        int totalCount = 0;
        try {
            ArrayList params = new ArrayList();
            String condition = "";
            String innerCondition1 = "";
            String innerCondition2 = "";
            String innerCondition3 = "";
            params.add((String) requestParams.get("companyID"));

            if (requestParams.containsKey("productID") && requestParams.get("productID") != null) {
                params.add((String) requestParams.get("productID"));
                condition += " and prd1.product = ? ";
                innerCondition1 += " and prd2.product = prd1.product ";
                innerCondition2 += " and prd3.product = prd1.product ";
                innerCondition3 += " and prd4.product = prd1.product ";
            }

            Date startDate = (Date) requestParams.get(Constants.REQ_startdate);
            Date endDate = (Date) requestParams.get(Constants.REQ_enddate);
            if (startDate != null && endDate != null) {
                condition += " and (pr1.requisitiondate >=? and pr1.requisitiondate <=?)";
                
                params.add(startDate);
                params.add(endDate);
            }
            
            String joinString1 = "";
            String appendCase = "and";
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            String mySearchFilterString = "";
            String mySearchFilterString2 = "";
            String Searchjson = "";
            if (requestParams.containsKey("searchJson") && requestParams.get("searchJson") != null) {
                Searchjson = requestParams.get("searchJson").toString();

                if (!StringUtil.isNullOrEmpty(Searchjson)) {
                    JSONObject serachJobj = new JSONObject(Searchjson);
                    JSONArray customSearchFieldArray = new JSONArray();
                    JSONArray defaultSearchFieldArray = new JSONArray();
                    StringUtil.seperateCostomAndDefaultSerachJson(serachJobj, customSearchFieldArray, defaultSearchFieldArray);
                    
                    if (customSearchFieldArray.length() > 0) { // Advance search case for Custome field
                        requestParams.put(Constants.Searchjson, Searchjson);
                        requestParams.put(Constants.appendCase, appendCase);
                        requestParams.put("filterConjuctionCriteria", filterConjuctionCriteria);
                        mySearchFilterString = String.valueOf(StringUtil.getAdvanceSearchString(requestParams, true).get(Constants.myResult));

                        if (mySearchFilterString.contains("purchaserequisitioncustomdata")) { // for Global Level Custom field
                            mySearchFilterString2 = mySearchFilterString.replaceAll("purchaserequisitioncustomdata", "preqcustdata1");
                            joinString1 = "inner join purchaserequisitioncustomdata preqcustdata1 on preqcustdata1.purchaserequisitionid = pr1.accpurchaserequisitioncustomdataref ";
                        }
                        if (mySearchFilterString.contains("AccJEDetailCustomData")) { // For Line Level Cuatom field
                            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "purchaserequisitiondetailcustomdata");
                            mySearchFilterString2 = mySearchFilterString.replaceAll("purchaserequisitiondetailcustomdata", "preqdetailcustdata1");
                            joinString1 += " left join purchaserequisitiondetailcustomdata preqdetailcustdata1 on prd1.id = preqdetailcustdata1.purchaserequisitiondetailid ";
                        }
                        StringUtil.insertParamAdvanceSearchString1(params, Searchjson);
                    }
                }
            }

            String query = " select prd1.id from purchaserequisitiondetail prd1 "
                    + " inner join purchaserequisition pr1 on pr1.id = prd1.purchaserequisition " + joinString1
                    + " where pr1.approvestatuslevel = 11 "
                    
                    + " and pr1.id not in (select pr2.id from grdetails grd2 "
                    + " inner join goodsreceipt gr2 on gr2.id = grd2.goodsreceipt "
                    + " inner join journalentry je2 on je2.id = gr2.journalentry "
                    + " inner join podetails pod2 on pod2.id = grd2.purchaseorderdetail "
                    + " inner join vendorquotationdetails vqd2 on vqd2.id = pod2.vqdetail "
                    + " inner join purchaserequisitiondetail prd2 on prd2.id = vqd2.purchaserequisitiondetailsid "
                    + " inner join purchaserequisition pr2 on pr2.id = prd2.purchaserequisition "
                    + " where grd2.company = prd1.company " + innerCondition1
                    + " union "
                    + " select pr3.id from grdetails grd3 "
                    + " inner join goodsreceipt gr3 on gr3.id = grd3.goodsreceipt "
                    + " inner join journalentry je3 on je3.id = gr3.journalentry "
                    + " inner join vendorquotationdetails vqd3 on vqd3.id = grd3.vendorquotationdetail "
                    + " inner join purchaserequisitiondetail prd3 on prd3.id = vqd3.purchaserequisitiondetailsid "
                    + " inner join purchaserequisition pr3 on pr3.id = prd3.purchaserequisition "
                    + " where grd3.company = prd1.company " + innerCondition2 
                    + " union "
                    + " select pr4.id from grdetails grd4 "
                    + " inner join goodsreceipt gr4 on gr4.id = grd4.goodsreceipt "
                    + " inner join journalentry je4 on je4.id = gr4.journalentry "
                    + " inner join grodetails grod4 on grod4.id = grd4.grorderdetails "
                    + " inner join podetails pod4 on pod4.id = grod4.podetails "
                    + " inner join vendorquotationdetails vqd4 on vqd4.id = pod4.vqdetail "
                    + " inner join purchaserequisitiondetail prd4 on prd4.id = vqd4.purchaserequisitiondetailsid "
                    + " inner join purchaserequisition pr4 on pr4.id = prd4.purchaserequisition "
                    + " where grd4.company = prd1.company " + innerCondition3
                    + ") "
                    
                    + " and prd1.company = ? " + condition + mySearchFilterString2;

            returnList = executeSQLQuery( query, params.toArray());
            totalCount = returnList.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, returnList, totalCount);
    }
    
    @Override
    public KwlReturnObject saveApprovalDocMap(HashMap<String, Object> approvalDocMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String companID = (approvalDocMap.containsKey("companyID") && approvalDocMap.get("companyID") != null) ? approvalDocMap.get("companyID").toString() : "";
            String docID = (approvalDocMap.containsKey("docID") && approvalDocMap.get("docID") != null) ? approvalDocMap.get("docID").toString() : "";
            String approvalHistoryID = (approvalDocMap.containsKey("approvalHistoryID") && approvalDocMap.get("approvalHistoryID") != null) ? approvalDocMap.get("approvalHistoryID").toString() : "";
            String approvalDocMapID = UUID.randomUUID().toString();

            ArrayList params = new ArrayList();
            params.add(approvalDocMapID);
            params.add(docID);
            params.add(approvalHistoryID);
            params.add(companID);

            String query = "insert into invoicedoccompmap(id,documentid,invoiceid,company) values(?,?,?,?)";

            executeSQLUpdate( query, params.toArray());
            list.add(approvalDocMapID);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveApprovalDocMap : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    
    @Override
    public KwlReturnObject deletePurchaseRequisitionAssetDetails(HashMap<String, Object> requestParams) throws ServiceException {
        int numtotal = 0;
        try {
            if (requestParams.containsKey("purchaserequisitionid") && requestParams.containsKey("companyid")) {

                int numRows = 0;
                ArrayList params8 = new ArrayList();
                params8.add(requestParams.get("companyid"));
                params8.add(requestParams.get("purchaserequisitionid"));
                
                String assetDetailIdString = "";

                // Deleting data from asset details table
                String assetQuery = "SELECT ad.id FROM purchaserequisition preq "
                        + " INNER JOIN  purchaserequisitiondetail preqd ON preq.id=preqd.purchaserequisition "
                        + " INNER JOIN assetdetailspurchaserequisitiondetailmapping amp ON preqd.id=amp.purchaserequisitiondetailid "
                        + " INNER JOIN purchaserequisitionassetdetail ad on ad.id=amp.purchaserequisitionassetdetails "
                        + " WHERE amp.moduleid=87 AND preq.company=? and preq.id=? ";

                List assetList = executeSQLQuery( assetQuery, params8.toArray());
                Iterator assetItr = assetList.iterator();

                while (assetItr.hasNext()) {
                    String assetDetailId = assetItr.next().toString();
                    assetDetailIdString += "'" + assetDetailId + "',";
                }

                if (!StringUtil.isNullOrEmpty(assetDetailIdString)) {
                    assetDetailIdString = assetDetailIdString.substring(0, assetDetailIdString.length() - 1);
                }

//                String myquery = "select id from purchaserequisitiondetail where purchaserequisition in (select id from purchaserequisition where company =? and id=?)";
                String myquery = "select prd.id from purchaserequisitiondetail prd inner join purchaserequisition  pr on pr.id=prd.purchaserequisition where pr.company =? and pr.id=?";
                List list = executeSQLQuery( myquery, params8.toArray());
                Iterator itr = list.iterator();
                String idStrings = "";
                while (itr.hasNext()) {
                    String invdid = itr.next().toString();
                    idStrings += "'" + invdid + "',";
                }
                if (!StringUtil.isNullOrEmpty(idStrings)) {
                    idStrings = idStrings.substring(0, idStrings.length() - 1);
                }
                
                // Deleting data from assetdetailsinvdetailmapping
                if (!StringUtil.isNullOrEmpty(idStrings)) {
                    ArrayList assetParams = new ArrayList();
                    assetParams.add(requestParams.get("companyid"));

                    String assetMapDelQuery = "DELETE FROM assetdetailspurchaserequisitiondetailmapping WHERE purchaserequisitiondetailid IN (" + idStrings + ") and moduleid=87 and company=?";
                    numRows = executeSQLUpdate( assetMapDelQuery, assetParams.toArray());
                }
                
                if (!StringUtil.isNullOrEmpty(assetDetailIdString)) {
                    ArrayList assetParams = new ArrayList();
                    assetParams.add(requestParams.get("companyid"));
                    String assupdateQuery = "DELETE FROM purchaserequisitionassetdetail  WHERE id IN(" + assetDetailIdString + ") AND company=?";
                    numRows += executeSQLUpdate( assupdateQuery, assetParams.toArray());
                }
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("Cannot delete Asset Purchase Requisition as its referance child field is not deleted.", ex);
        }
        return new KwlReturnObject(true, "Asset Purchase Requisition has been deleted successfully.", null, null, numtotal);
    }
    
    @Override
    public KwlReturnObject deleteVendorQuotationAssetDetails(HashMap<String, Object> requestParams) throws ServiceException {
        int numtotal = 0;
        try {
            if (requestParams.containsKey("qid") && requestParams.containsKey("companyid")) {

                int numRows = 0;
                ArrayList params8 = new ArrayList();
                params8.add(requestParams.get("companyid"));
                params8.add(requestParams.get("qid"));
                
                String assetDetailIdString = "";

                // Deleting data from asset details table
                String assetQuery = "SELECT ad.id FROM vendorquotation vq "
                        + " INNER JOIN  vendorquotationdetails vqd ON vq.id=vqd.vendorquotation "
                        + " INNER JOIN assetdetailspurchaserequisitiondetailmapping amp ON vqd.id=amp.purchaserequisitiondetailid "
                        + " INNER JOIN purchaserequisitionassetdetail ad on ad.id=amp.purchaserequisitionassetdetails "
                        + " WHERE amp.moduleid=89 AND vq.company=? and vq.id=? ";

                List assetList = executeSQLQuery( assetQuery, params8.toArray());
                Iterator assetItr = assetList.iterator();

                while (assetItr.hasNext()) {
                    String assetDetailId = assetItr.next().toString();
                    assetDetailIdString += "'" + assetDetailId + "',";
                }

                if (!StringUtil.isNullOrEmpty(assetDetailIdString)) {
                    assetDetailIdString = assetDetailIdString.substring(0, assetDetailIdString.length() - 1);
                }

//                String myquery = "select id from vendorquotationdetails where vendorquotation in (select id from vendorquotation where company =? and id=?)";
                String myquery = "select vqd.id from vendorquotationdetails vqd inner join vendorquotation vq on vqd.vendorquotation=vq.id where vq.company = ? and vq.id=?";
                List list = executeSQLQuery( myquery, params8.toArray());
                Iterator itr = list.iterator();
                String idStrings = "";
                while (itr.hasNext()) {
                    String invdid = itr.next().toString();
                    idStrings += "'" + invdid + "',";
                }
                if (!StringUtil.isNullOrEmpty(idStrings)) {
                    idStrings = idStrings.substring(0, idStrings.length() - 1);
                }
                
                // Deleting data from assetdetailsinvdetailmapping
                if (!StringUtil.isNullOrEmpty(idStrings)) {
                    ArrayList assetParams = new ArrayList();
                    assetParams.add(requestParams.get("companyid"));

                    String assetMapDelQuery = "DELETE FROM assetdetailspurchaserequisitiondetailmapping WHERE purchaserequisitiondetailid IN (" + idStrings + ") and moduleid=89 and company=?";
                    numRows = executeSQLUpdate( assetMapDelQuery, assetParams.toArray());
                }
                
                if (!StringUtil.isNullOrEmpty(assetDetailIdString)) {
                    ArrayList assetParams = new ArrayList();
                    assetParams.add(requestParams.get("companyid"));
                    String assupdateQuery = "DELETE FROM purchaserequisitionassetdetail  WHERE id IN(" + assetDetailIdString + ") AND company=?";
                    numRows += executeSQLUpdate( assupdateQuery, assetParams.toArray());
                }
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("Cannot delete Asset Vendor Quotation as its referance child field is not deleted.", ex);
        }
        return new KwlReturnObject(true, "Asset Vendor Quotation has been deleted successfully.", null, null, numtotal);
    }
    
    @Override
    public KwlReturnObject deleteRequestForQuotationAssetDetails(HashMap<String, Object> requestParams) throws ServiceException {
        int numtotal = 0;
        try {
            if (requestParams.containsKey("rfqid") && requestParams.containsKey("companyid")) {

                int numRows = 0;
                ArrayList params8 = new ArrayList();
                params8.add(requestParams.get("companyid"));
                params8.add(requestParams.get("rfqid"));
                
                String assetDetailIdString = "";

                // Deleting data from asset details table
                String assetQuery = "SELECT ad.id FROM requestforquotation rfq "
                        + " INNER JOIN  requestforquotationdetail rfqd ON rfq.id=rfqd.requestforquotation "
                        + " INNER JOIN assetdetailspurchaserequisitiondetailmapping amp ON rfqd.id=amp.purchaserequisitiondetailid "
                        + " INNER JOIN purchaserequisitionassetdetail ad on ad.id=amp.purchaserequisitionassetdetails "
                        + " WHERE amp.moduleid=88 AND rfq.company=? and rfq.id=? ";

                List assetList = executeSQLQuery( assetQuery, params8.toArray());
                Iterator assetItr = assetList.iterator();

                while (assetItr.hasNext()) {
                    String assetDetailId = assetItr.next().toString();
                    assetDetailIdString += "'" + assetDetailId + "',";
                }

                if (!StringUtil.isNullOrEmpty(assetDetailIdString)) {
                    assetDetailIdString = assetDetailIdString.substring(0, assetDetailIdString.length() - 1);
                }

//                String myquery = "select id from requestforquotationdetail where requestforquotation in (select id from requestforquotation where company =? and id=?)";
                String myquery = "select rfqd.id from requestforquotationdetail rfqd inner join requestforquotation rfq on rfqd.requestforquotation=rfq.id where rfq.company = ? and rfq.id=?";
                List list = executeSQLQuery( myquery, params8.toArray());
                Iterator itr = list.iterator();
                String idStrings = "";
                while (itr.hasNext()) {
                    String invdid = itr.next().toString();
                    idStrings += "'" + invdid + "',";
                }
                if (!StringUtil.isNullOrEmpty(idStrings)) {
                    idStrings = idStrings.substring(0, idStrings.length() - 1);
                }
                
                // Deleting data from assetdetailsinvdetailmapping
                if (!StringUtil.isNullOrEmpty(idStrings)) {
                    ArrayList assetParams = new ArrayList();
                    assetParams.add(requestParams.get("companyid"));

                    String assetMapDelQuery = "DELETE FROM assetdetailspurchaserequisitiondetailmapping WHERE purchaserequisitiondetailid IN (" + idStrings + ") and moduleid=88 and company=?";
                    numRows = executeSQLUpdate( assetMapDelQuery, assetParams.toArray());
                }
                
                if (!StringUtil.isNullOrEmpty(assetDetailIdString)) {
                    ArrayList assetParams = new ArrayList();
                    assetParams.add(requestParams.get("companyid"));
                    String assupdateQuery = "DELETE FROM purchaserequisitionassetdetail  WHERE id IN(" + assetDetailIdString + ") AND company=?";
                    numRows += executeSQLUpdate( assupdateQuery, assetParams.toArray());
                }
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("Cannot delete Asset Request For Quotation.", ex);
        }
        return new KwlReturnObject(true, "Asset Request For Quotation has been deleted successfully.", null, null, numtotal);
    }
    
    @Override
    public KwlReturnObject deletePurchaseOrderAssetDetails(HashMap<String, Object> requestParams) throws ServiceException {
        int numtotal = 0;
        try {
            if (requestParams.containsKey("poid") && requestParams.containsKey("companyid")) {

                int numRows = 0;
                ArrayList params8 = new ArrayList();
                params8.add(requestParams.get("companyid"));
                params8.add(requestParams.get("poid"));
                
                String assetDetailIdString = "";

                // Deleting data from asset details table
                String assetQuery = "SELECT ad.id FROM purchaseorder po "
                        + " INNER JOIN  podetails pod ON po.id=pod.purchaseorder "
                        + " INNER JOIN assetdetailspurchaserequisitiondetailmapping amp ON pod.id=amp.purchaserequisitiondetailid "
                        + " INNER JOIN purchaserequisitionassetdetail ad on ad.id=amp.purchaserequisitionassetdetails "
                        + " WHERE amp.moduleid=90 AND po.company=? and po.id=? ";

                List assetList = executeSQLQuery( assetQuery, params8.toArray());
                Iterator assetItr = assetList.iterator();

                while (assetItr.hasNext()) {
                    String assetDetailId = assetItr.next().toString();
                    assetDetailIdString += "'" + assetDetailId + "',";
                }

                if (!StringUtil.isNullOrEmpty(assetDetailIdString)) {
                    assetDetailIdString = assetDetailIdString.substring(0, assetDetailIdString.length() - 1);
                }

//                String myquery = "select id from podetails where purchaseorder in (select id from purchaseorder where company =? and id=?)";
                String myquery = "select pod.id from podetails pod inner join purchaseorder po on pod.purchaseorder=po.id where po.company = ? and po.id=?";
                List list = executeSQLQuery( myquery, params8.toArray());
                Iterator itr = list.iterator();
                String idStrings = "";
                while (itr.hasNext()) {
                    String invdid = itr.next().toString();
                    idStrings += "'" + invdid + "',";
                }
                if (!StringUtil.isNullOrEmpty(idStrings)) {
                    idStrings = idStrings.substring(0, idStrings.length() - 1);
                }
                
                // Deleting data from assetdetailsinvdetailmapping
                if (!StringUtil.isNullOrEmpty(idStrings)) {
                    ArrayList assetParams = new ArrayList();
                    assetParams.add(requestParams.get("companyid"));

                    String assetMapDelQuery = "DELETE FROM assetdetailspurchaserequisitiondetailmapping WHERE purchaserequisitiondetailid IN (" + idStrings + ") and moduleid=90 and company=?";
                    numRows = executeSQLUpdate( assetMapDelQuery, assetParams.toArray());
                }
                
                if (!StringUtil.isNullOrEmpty(assetDetailIdString)) {
                    ArrayList assetParams = new ArrayList();
                    assetParams.add(requestParams.get("companyid"));
                    String assupdateQuery = "DELETE FROM purchaserequisitionassetdetail  WHERE id IN(" + assetDetailIdString + ") AND company=?";
                    numRows += executeSQLUpdate( assupdateQuery, assetParams.toArray());
                }
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("Cannot delete Asset Purchase Order as its referance child field is not deleted.", ex);
        }
        return new KwlReturnObject(true, "Asset Purchase Order has been deleted successfully.", null, null, numtotal);
    }
    
    @Override
    public KwlReturnObject getIDFromPurchaseRequisitionDetails(String pReqID) throws ServiceException {
        String selQuery = " from VendorQuotationDetail vqd where vqd.purchaseRequisitionDetailsId = ?";
        List list = executeQuery( selQuery, new Object[]{pReqID});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getJobWorkOutPurchaseOrder(String companyid) throws ServiceException {
        String selQuery = " from PurchaseOrder where isJobWorkOutOrder='T' and company.companyID=?";
        List list = executeQuery( selQuery, new Object[]{companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    //ERP-10941
    @Override
    public KwlReturnObject getPR_AssetProduct(String productid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from PurchaseRequisitionAssetDetails prd where prd.product.ID=? and prd.company.companyID=?";// and prd.purchaserequisition.deleted=false ";
        list = executeQuery( q, new Object[]{productid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    //ERP-10941
    @Override
    public KwlReturnObject getPR_AssetRequisitionMappingProduct(String productid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from AssetPurchaseRequisitionDetailMapping aprd where aprd.purchaseRequisitionAssetDetails.product.ID=? and aprd.purchaseRequisitionAssetDetails.company.companyID=?";// and prd.purchaserequisition.deleted=false ";
        list = executeQuery( q, new Object[]{productid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public KwlReturnObject getRFQDetails(String productid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from RequestForQuotationDetail rfq where rfq.product.ID=? and rfq.company.companyID=?";
        list = executeQuery( q, new Object[]{productid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
     public synchronized String updatePOEntryNumberForNewPO(Map<String, Object> seqNumberMap) {
        String documnetNumber = "";
        try {
            documnetNumber = seqNumberMap.containsKey(Constants.AUTO_ENTRYNUMBER) ? (String)seqNumberMap.get(Constants.AUTO_ENTRYNUMBER) : "";
            int seqNumber = 0;
            if(seqNumberMap.containsKey(Constants.SEQNUMBER) && !StringUtil.isNullObject(seqNumberMap.get(Constants.SEQNUMBER)) && !StringUtil.isNullOrEmpty(seqNumberMap.get(Constants.SEQNUMBER).toString())){
               seqNumber= Integer.parseInt(seqNumberMap.get(Constants.SEQNUMBER).toString());
            }
            boolean isDraft = false;
            if(seqNumberMap.containsKey(Constants.isDraft) && seqNumberMap.get(Constants.isDraft)!=null){
                isDraft = (Boolean)seqNumberMap.get(Constants.isDraft);  
                if(isDraft){
                    documnetNumber = "";    //ERM-1238 (Reference - SDP-13487) : Set PO no.empty
                    seqNumber = 0;
                }
            }
            String datePrefix = seqNumberMap.containsKey(Constants.DATEPREFIX) ? (String)seqNumberMap.get(Constants.DATEPREFIX) : "";
            String dateafterPrefix = seqNumberMap.containsKey(Constants.DATEAFTERPREFIX) ? (String)seqNumberMap.get(Constants.DATEAFTERPREFIX) : "";
            String dateSuffix = seqNumberMap.containsKey(Constants.DATESUFFIX) ? (String)seqNumberMap.get(Constants.DATESUFFIX) : "";
            String sequenceFormatID = seqNumberMap.containsKey(Constants.SEQUENCEFORMATID) ? (String)seqNumberMap.get(Constants.SEQUENCEFORMATID) : "";
            String documentID = seqNumberMap.containsKey(Constants.DOCUMENTID) ? (String)seqNumberMap.get(Constants.DOCUMENTID) : "";
            String companyID = seqNumberMap.containsKey(Constants.companyKey) ? (String)seqNumberMap.get(Constants.companyKey) : "";
            String query = "update PurchaseOrder set purchaseOrderNumber = ?,seqnumber=?,datePreffixValue=?, dateAfterPreffixValue=?, dateSuffixValue=?,seqformat.ID=? where ID=? and company.companyID=?";
            int numRows = executeUpdate( query, new Object[]{documnetNumber,seqNumber,datePrefix,dateafterPrefix,dateSuffix,sequenceFormatID, documentID, companyID});
        } catch (Exception e) {
            System.out.println(e);
        }
        return documnetNumber;
    }
    /**
     * To Update Journal entry For Security gate Entry record
     * @param seqNumberMap
     * @return 
     */
    @Override
     public synchronized String updatePOEntryNumberForNewSecurityGateNo(Map<String, Object> seqNumberMap) {
        String documnetNumber = "";
        try {
            documnetNumber = seqNumberMap.containsKey(Constants.AUTO_ENTRYNUMBER) ? (String)seqNumberMap.get(Constants.AUTO_ENTRYNUMBER) : "";
            int seqNumber = 0;
            if(seqNumberMap.containsKey(Constants.SEQNUMBER) && !StringUtil.isNullObject(seqNumberMap.get(Constants.SEQNUMBER)) && !StringUtil.isNullOrEmpty(seqNumberMap.get(Constants.SEQNUMBER).toString())){
               seqNumber= Integer.parseInt(seqNumberMap.get(Constants.SEQNUMBER).toString());
            }
            String datePrefix = seqNumberMap.containsKey(Constants.DATEPREFIX) ? (String)seqNumberMap.get(Constants.DATEPREFIX) : "";
            String dateafterPrefix = seqNumberMap.containsKey(Constants.DATEAFTERPREFIX) ? (String)seqNumberMap.get(Constants.DATEAFTERPREFIX) : "";
            String dateSuffix = seqNumberMap.containsKey(Constants.DATESUFFIX) ? (String)seqNumberMap.get(Constants.DATESUFFIX) : "";
            String sequenceFormatID = seqNumberMap.containsKey(Constants.SEQUENCEFORMATID) ? (String)seqNumberMap.get(Constants.SEQUENCEFORMATID) : "";
            String documentID = seqNumberMap.containsKey(Constants.DOCUMENTID) ? (String)seqNumberMap.get(Constants.DOCUMENTID) : "";
            String companyID = seqNumberMap.containsKey(Constants.companyKey) ? (String)seqNumberMap.get(Constants.companyKey) : "";
            String query = "update SecurityGateEntry set securityNumber = ?,seqnumber=?,datePreffixValue=?, dateAfterPreffixValue=?, dateSuffixValue=?,seqformat.ID=? where ID=? and company.companyID=?";
            int numRows = executeUpdate( query, new Object[]{documnetNumber,seqNumber,datePrefix,dateafterPrefix,dateSuffix,sequenceFormatID, documentID, companyID});
        } catch (Exception e) {
            System.out.println(e);
        }
        return documnetNumber;
    }
    public KwlReturnObject updatePoIsUsedForSecurityGateEntry(String PoID, String companyId,boolean isPoUsed) {
        List list = new ArrayList();
        int numRows=0;
        try {
            String linkNumber[] = PoID.split(",");
            int i = 0;
            while (i < linkNumber.length) {
                String query = "update PurchaseOrder set isPoUsed = ? where ID=? and company.companyID=?";
                numRows = executeUpdate(query, new Object[]{isPoUsed, linkNumber[i], companyId});
                i++;
            }

        } catch (ServiceException ex) {
            Logger.getLogger(accPurchaseOrderImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getJobWorkOutPurchaseOrderSinglePO(String companyid,String PoId) throws ServiceException {
        String selQuery = " from PurchaseOrder where isJobWorkOutOrder='T' and company.companyID=? and ID=?";
        List list = executeQuery( selQuery, new Object[]{companyid,PoId});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
     public synchronized String updateVQEntryNumberForNewVQ(Map<String, Object> seqNumberMap) {
         String documnetNumber = "";
        try {
            documnetNumber = seqNumberMap.containsKey(Constants.AUTO_ENTRYNUMBER) ? (String)seqNumberMap.get(Constants.AUTO_ENTRYNUMBER) : "";
            int seqNumber = 0;
            if(seqNumberMap.containsKey(Constants.SEQNUMBER) && !StringUtil.isNullObject(seqNumberMap.get(Constants.SEQNUMBER)) && !StringUtil.isNullOrEmpty(seqNumberMap.get(Constants.SEQNUMBER).toString())){
               seqNumber= Integer.parseInt(seqNumberMap.get(Constants.SEQNUMBER).toString());
            }
            String datePrefix = seqNumberMap.containsKey(Constants.DATEPREFIX) ? (String)seqNumberMap.get(Constants.DATEPREFIX) : "";
            String dateafterPrefix = seqNumberMap.containsKey(Constants.DATEAFTERPREFIX) ? (String)seqNumberMap.get(Constants.DATEAFTERPREFIX) : "";
            String dateSuffix = seqNumberMap.containsKey(Constants.DATESUFFIX) ? (String)seqNumberMap.get(Constants.DATESUFFIX) : "";
            String sequenceFormatID = seqNumberMap.containsKey(Constants.SEQUENCEFORMATID) ? (String)seqNumberMap.get(Constants.SEQUENCEFORMATID) : "";
            String documentID = seqNumberMap.containsKey(Constants.DOCUMENTID) ? (String)seqNumberMap.get(Constants.DOCUMENTID) : "";
            String query = "update VendorQuotation set quotationNumber = ?,seqnumber=?,datePreffixValue=?, dateAfterPreffixValue=?, dateSuffixValue=?,seqformat.ID=? where ID=?";
            int numRows = executeUpdate( query, new Object[]{documnetNumber,seqNumber,datePrefix,dateafterPrefix,dateSuffix,sequenceFormatID, documentID});
        } catch (Exception e) {
            System.out.println(e);
        }
        return documnetNumber;
    }

    @Override
     public synchronized String updateVQEntryNumberForNA(String vqid,String entrynumber) {
        try {
            String query = "update VendorQuotation set quotationNumber = ? where ID=?";
            int numRows = executeUpdate( query, new Object[]{entrynumber,vqid});
        } catch (Exception e) {
            System.out.println(e);
        }
        return entrynumber;
    }

    @Override
     public synchronized String updatePOEntryNumberForNA(String poid,String entrynumber) {
        try {
            String query = "update PurchaseOrder set purchaseOrderNumber = ? where ID=?";
            int numRows = executeUpdate( query, new Object[]{entrynumber,poid});
        } catch (Exception e) {
            System.out.println(e);
        }
        return entrynumber;
    }
    @Override
    public KwlReturnObject getAllVendorQuotaionsByCompanyid(HashMap<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        params.add(requestParams.get("companyid"));
        String hqlQuery = "from VendorQuotation quo where quo.company.companyID=? ";
        list = executeQuery( hqlQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    @Override
    public KwlReturnObject getAllGlobalVendorQuotaionsOfInvoiceTerms(HashMap<String, Object> requestParams) throws ServiceException{
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        params.add(requestParams.get("companyid"));
        String sqlQuery = "select q.id as qid,qtm.id as qtmid,q.tax,qtm.termamount,tl.percent,qtm.term  from vendorquotationtermmap qtm  inner join vendorquotation q on q.id=qtm.vendorquotation  inner join taxlist tl on tl.tax=q.tax  where qtm.termamount != 0 and q.tax is not null and q.company= ? ";
        list = executeSQLQuery( sqlQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getAllGlobalPurcahseOrderOfInvoiceTerms(HashMap<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        params.add(requestParams.get("companyid"));
        String sqlQuery = "select o.id as oid,otm.id as otmid,o.tax,otm.termamount,tl.percent,otm.term  from purchaseordertermmap otm  inner join purchaseorder o on o.id=otm.purchaseorder  inner join taxlist tl on tl.tax=o.tax  where otm.termamount != 0 and o.tax is not null and o.company=? ";
        list = executeSQLQuery( sqlQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public boolean updateVendorQuotationAmount(VendorQuotation quotation, JSONObject json) throws ServiceException {
        boolean success = true;
        try {
            String companyid = json.optString("companyid");
            if (quotation != null) {
                if (json.has("quotationamount")) { // quotation amount
                    quotation.setQuotationamount(authHandler.round(json.optDouble("quotationamount", 0.0), companyid));
                }
                if (json.has("quotationamountinbase")) { // quotation amount in base
                    quotation.setQuotationamountinbase(authHandler.round(json.optDouble("quotationamountinbase", 0.0), companyid));
                }
                if (json.has("discountinbase")) { // Discount in base
                    quotation.setDiscountinbase(authHandler.round(json.optDouble("discountinbase", 0.0), companyid));
                }
                if (json.has("totallineleveldiscount")) { //  Total Discount
                    quotation.setTotallineleveldiscount(authHandler.round(json.optDouble("totallineleveldiscount", 0.0), companyid));
                }
                saveOrUpdate(quotation);
            }
        } catch (Exception ex) {
            success = false;
            System.out.println("accPurchaseOrderImpl.updateQuotation:" + ex.getMessage());
        }
        return success;
    }
     @Override
    public KwlReturnObject getAllPurchaseOrderByCompanyid(HashMap<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        params.add(requestParams.get("companyid"));
        String hqlQuery = "from PurchaseOrder po where po.company.companyID=? ";
        list = executeQuery( hqlQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    @Override
    public KwlReturnObject getAllPurchaseReturnByCompanyid(HashMap<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        params.add(requestParams.get("companyid"));
        String hqlQuery = "from PurchaseReturn pr where pr.company.companyID=? ";
        list = executeQuery( hqlQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getAllSalesReturnByCompanyid(HashMap<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        params.add(requestParams.get("companyid"));
        String hqlQuery = "from SalesReturn pr where pr.company.companyID=? ";
        list = executeQuery( hqlQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public boolean updatePurchaseOrderAmount(PurchaseOrder po, JSONObject json) throws ServiceException {
        boolean success = true;
        try {
            String companyid = json.optString("companyid");
           if (po != null) {
                if (json.has("totalamount")) { // Total SO amount
                    po.setTotalamount(authHandler.round(json.optDouble("totalamount", 0.0), companyid));
                }
                if (json.has("totalamountinbase")) { // Total amount in base
                    po.setTotalamountinbase(authHandler.round(json.optDouble("totalamountinbase", 0.0), companyid));
                }
                if (json.has("discountinbase")) { // Discount in base
                    po.setDiscountinbase(authHandler.round(json.optDouble("discountinbase", 0.0), companyid));
                }
                if (json.has("totallineleveldiscount")) { //  Total Discount
                    po.setTotallineleveldiscount(authHandler.round(json.optDouble("totallineleveldiscount", 0.0), companyid));
                }
                saveOrUpdate(po);
            }
        } catch (Exception ex) {
            success = false;
            System.out.println("accPurchaseOrderImpl.updatePurchaseOrderAmount:" + ex.getMessage());
        }
        return success;
    }
    
    @Override
    public KwlReturnObject deleteVendorQuotationTermMap(HashMap<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        try {
            String quotationID = null;
            if(hm.containsKey("quotationid")) {
                quotationID =(String) hm.get("quotationid");
            }
            String query = "delete from vendorquotationtermmap where vendorquotation = ?";
            executeSQLUpdate( query, new Object[]{quotationID});
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.deleteVendorQuotationTermMap:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject deletePOTermMap(HashMap<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        try {
            String poID = null;
            if(hm.containsKey("poid")) {
                poID =(String) hm.get("poid");
            }
            String query = "delete from purchaseordertermmap where purchaseorder = ?";
            executeSQLUpdate( query, new Object[]{poID});
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.deletePOTermMap:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getQuotationVersionCount(String quotationid, String companyid) throws ServiceException {
        try {
            List list = new ArrayList();
            int count = 0;
            String q = "from VendorQuotationVersion where quotation.ID=? and company.companyID=?";
            list = executeQuery( q, new Object[]{quotationid, companyid});
            count = list.size();
            return new KwlReturnObject(true, "", null, list, count);

        } catch (Exception ex) {
            throw ServiceException.FAILURE("accSalesOrderImpl.getEditQuotationCount:" + ex.getMessage(), ex);
}
    }

    public KwlReturnObject saveQuotationVersion(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String soid = (String) dataMap.get("id");
            VendorQuotationVersion quotation = new VendorQuotationVersion();
            if (StringUtil.isNullOrEmpty(soid)) {
                quotation.setDeleted(false);
                if (dataMap.containsKey("createdby")) {
                    User createdby = dataMap.get("createdby") == null ? null : (User) get(User.class, (String) dataMap.get("createdby"));
                    quotation.setCreatedby(createdby);
                }
                if (dataMap.containsKey("modifiedby")) {
                    User modifiedby = dataMap.get("modifiedby") == null ? null : (User) get(User.class, (String) dataMap.get("modifiedby"));
                    quotation.setModifiedby(modifiedby);
                }
                if (dataMap.containsKey("createdon")) {
                    quotation.setCreatedon((Long) dataMap.get("createdon"));
                }
                if (dataMap.containsKey("updatedon")) {
                    quotation.setUpdatedon((Long) dataMap.get("updatedon"));
                }
            }
            if (dataMap.containsKey(Constants.SEQFORMAT)) {
                quotation.setSeqformat((SequenceFormat) get(SequenceFormat.class, (String) dataMap.get(Constants.SEQFORMAT)));
            }
            if (dataMap.containsKey(Constants.SEQNUMBER)) {
                quotation.setSeqnumber(Integer.parseInt(dataMap.get(Constants.SEQNUMBER).toString()));
            }
            if (dataMap.containsKey(Constants.DATEPREFIX) && dataMap.get(Constants.DATEPREFIX) != null) {
                quotation.setDatePreffixValue((String) dataMap.get(Constants.DATEPREFIX));
            }
            if (dataMap.containsKey(Constants.DATESUFFIX) && dataMap.get(Constants.DATESUFFIX) != null) {
                quotation.setDateSuffixValue((String) dataMap.get(Constants.DATESUFFIX));
            }
            if (dataMap.containsKey("shipLength")) {
                quotation.setShiplength((Double) dataMap.get("shipLength"));
            }
            if (dataMap.containsKey("invoicetype")) {
                quotation.setInvoicetype((String) dataMap.get("invoicetype"));
            }
            if (dataMap.containsKey("entrynumber")) {
                quotation.setQuotationNumber((String) dataMap.get("entrynumber"));
            }
            if (dataMap.containsKey("autogenerated")) {
                quotation.setAutoGenerated((Boolean) dataMap.get("autogenerated"));
            }
            if (dataMap.containsKey("perDiscount")) {
                quotation.setPerDiscount((Boolean) dataMap.get("perDiscount"));
            }
            if (dataMap.containsKey("discount")) {
                quotation.setDiscount((Double) dataMap.get("discount"));
            }
            if (dataMap.containsKey("memo")) {
                quotation.setMemo((String) dataMap.get("memo"));
            }
            if (dataMap.containsKey("posttext")) {
                quotation.setPostText((String) dataMap.get("posttext"));
            }
            if (dataMap.containsKey("vendorid")) {
                Vendor vendor = dataMap.get("vendorid") == null ? null : (Vendor) get(Vendor.class, (String) dataMap.get("vendorid"));
                quotation.setVendor(vendor);
            }
            if (dataMap.containsKey("agent")) {
                MasterItem salesPerson = dataMap.get("agent") == null ? null : (MasterItem) get(MasterItem.class, (String) dataMap.get("agent"));
                quotation.setMasteragent(salesPerson);
            }
            if (dataMap.containsKey("quotationID")) {
                VendorQuotation qo = dataMap.get("quotationID") == null ? null : (VendorQuotation) get(VendorQuotation.class, (String) dataMap.get("quotationID"));
                quotation.setQuotation(qo);
            }
            if (dataMap.containsKey("orderdate")) {
                quotation.setQuotationDate((Date) dataMap.get("orderdate"));
            }
            if (dataMap.containsKey("duedate")) {
                quotation.setDueDate((Date) dataMap.get("duedate"));
            }
            if (dataMap.containsKey("shipdate")) {
                quotation.setShipdate((Date) dataMap.get("shipdate"));
            }
            if (dataMap.containsKey("validdate")) {
                quotation.setValiddate((Date) dataMap.get("validdate"));
            }
            if (dataMap.containsKey("shipvia")) {
                quotation.setShipvia((String) dataMap.get("shipvia"));
            }
            if (dataMap.containsKey("fob")) {
                quotation.setFob((String) dataMap.get("fob"));
            }
            if (dataMap.containsKey("taxid")) {
                Tax tax = dataMap.get("taxid") == null ? null : (Tax) get(Tax.class, (String) dataMap.get("taxid"));
                quotation.setTax(tax);
            }
            if (dataMap.containsKey("isfavourite")) {
                if (dataMap.get("isfavourite") != null) {
                    quotation.setFavourite(Boolean.parseBoolean(dataMap.get("isfavourite").toString()));
                }
            }
            if (dataMap.containsKey(Constants.MARKED_PRINTED)) {
                if (dataMap.get(Constants.MARKED_PRINTED) != null) {
                    quotation.setPrinted(Boolean.parseBoolean(dataMap.get(Constants.MARKED_PRINTED).toString()));
                }
            }
            if (dataMap.containsKey("billto")) {
                if (dataMap.get("billto") != null) {
                    quotation.setBillTo((String) dataMap.get("billto"));
                }
            }
            if (dataMap.containsKey("shipaddress")) {
                if (dataMap.get("shipaddress") != null) {
                    quotation.setShipTo((String) dataMap.get("shipaddress"));
                }
            }
            if (dataMap.containsKey("istemplate")) {
                quotation.setIstemplate((Integer) dataMap.get("istemplate"));
            } else {
                quotation.setIstemplate(0);
            }
            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid"));
                quotation.setCompany(company);
            }
            if (dataMap.containsKey("createdon")) {
                quotation.setCreatedon((Long) dataMap.get("createdon"));
            }
            if (dataMap.containsKey("updatedon")) {
                quotation.setUpdatedon((Long) dataMap.get("updatedon"));
            }
            if (dataMap.containsKey("createdby")) {
                User createdby = dataMap.get("createdby") == null ? null : (User) get(User.class, (String) dataMap.get("createdby"));
                quotation.setCreatedby(createdby);
            }
            if (dataMap.containsKey("modifiedby")) {
                User modifiedby = dataMap.get("modifiedby") == null ? null : (User) get(User.class, (String) dataMap.get("modifiedby"));
                quotation.setModifiedby(modifiedby);
            }
            if (dataMap.containsKey("sodetails")) {
                if (dataMap.get("sodetails") != null) {
                    quotation.setRows((Set<VendorQuotationVersionDetail>) dataMap.get("sodetails"));
                }
            }
            if (dataMap.containsKey("currencyid")) {
                quotation.setCurrency((KWLCurrency) get(KWLCurrency.class, (String) dataMap.get("currencyid")));
            }
            if (dataMap.containsKey("billshipAddressid")) {
                BillingShippingAddresses bsa = dataMap.get("billshipAddressid") == null ? null : (BillingShippingAddresses) get(BillingShippingAddresses.class, (String) dataMap.get("billshipAddressid"));
                quotation.setBillingShippingAddresses(bsa);
            }
            if (dataMap.containsKey("gstIncluded") && dataMap.get("gstIncluded") != null) {
                quotation.setGstIncluded((Boolean) dataMap.get("gstIncluded"));
            }
            if (dataMap.containsKey("externalCurrencyRate")) {
                quotation.setExternalCurrencyRate((Double) dataMap.get("externalCurrencyRate"));
            }
            if (dataMap.containsKey("version")) {
                quotation.setVersion((String) dataMap.get("version"));
            }
            quotation.setTemplateid((Projreport_Template) get(Projreport_Template.class, Constants.HEADER_IMAGE_TEMPLATE_ID));
            saveOrUpdate(quotation);
            list.add(quotation);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveQuotation : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject updateQuotationVersionCustomData(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            String quotationRefId = (String) requestParams.get("accquotationcustomdataref");
            VendorQuotationVersion quotation = (VendorQuotationVersion) get(VendorQuotationVersion.class, quotationRefId);
            if (requestParams.containsKey("accquotationcustomdataref")) {
                VendorQuotationVersionCustomData quotationCustomData = null;
                quotationCustomData = (VendorQuotationVersionCustomData) get(VendorQuotationVersionCustomData.class, (String) requestParams.get("accquotationcustomdataref"));
                quotation.setQuotationCustomData(quotationCustomData);
            }
            saveOrUpdate(quotation);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accSalesOrderImpl.updateQuotationCustomData:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }

    public KwlReturnObject saveQuotationVersionDetails(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String sodid = (String) dataMap.get("id");

            VendorQuotationVersionDetail quotationDetail = new VendorQuotationVersionDetail();
            if (!StringUtil.isNullOrEmpty(sodid)) {
                quotationDetail = (VendorQuotationVersionDetail) get(VendorQuotationVersionDetail.class, sodid);
            }

            if (dataMap.containsKey("soid")) {
                VendorQuotationVersion quotation = dataMap.get("soid") == null ? null : (VendorQuotationVersion) get(VendorQuotationVersion.class, (String) dataMap.get("soid"));
                quotationDetail.setQuotationversion(quotation);
            }
            if (dataMap.containsKey("srno")) {
                quotationDetail.setSrno((Integer) dataMap.get("srno"));
            }
            if (dataMap.containsKey("desc")) {
                quotationDetail.setDescription((String) dataMap.get("desc"));
            }
            if (dataMap.containsKey("rate")) {
                quotationDetail.setRate((Double) dataMap.get("rate"));
            }
            if (dataMap.containsKey("quantity")) {
                quotationDetail.setQuantity((Double) dataMap.get("quantity"));
            }
            if (dataMap.containsKey("uomid")) {
                quotationDetail.setUom((UnitOfMeasure) get(UnitOfMeasure.class, dataMap.get("uomid").toString()));
            }
            if (dataMap.containsKey("baseuomquantity") && dataMap.get("baseuomquantity") != null && dataMap.get("baseuomquantity") != "") {
                quotationDetail.setBaseuomquantity((Double) dataMap.get("baseuomquantity"));

            }
            if (dataMap.containsKey("baseuomrate") && dataMap.get("baseuomrate") != null && dataMap.get("baseuomrate") != "") {
                quotationDetail.setBaseuomrate((Double) dataMap.get("baseuomrate"));
            }
            if (dataMap.containsKey("remark")) {
                quotationDetail.setRemark(StringUtil.DecodeText(StringUtil.isNullOrEmpty((String) dataMap.get("remark")) ? "" : (String) dataMap.get("remark")));
            }
            if (dataMap.containsKey("dependentType")) {
                quotationDetail.setDependentType((String) dataMap.get("dependentType"));
            }
            if (dataMap.containsKey("inouttime")) {
                quotationDetail.setInouttime((String) dataMap.get("inouttime"));
            }
            if (dataMap.containsKey("showquantity")) {
                quotationDetail.setShowquantity((String) dataMap.get("showquantity"));
            }
            if (dataMap.containsKey("discount")) {
                quotationDetail.setDiscount((Double) dataMap.get("discount"));
            }
            if (dataMap.containsKey("productid")) {
                Product product = dataMap.get("productid") == null ? null : (Product) get(Product.class, (String) dataMap.get("productid"));
                quotationDetail.setProduct(product);
            }

            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid"));
                quotationDetail.setCompany(company);
            }
            if (dataMap.containsKey("discountispercent")) {
                quotationDetail.setDiscountispercent((Integer) dataMap.get("discountispercent"));
            } else {
                quotationDetail.setDiscountispercent(1);
            }

            if (dataMap.containsKey("rowTaxAmount")) {
                double rowTaxAmount = (Double) dataMap.get("rowTaxAmount");
                quotationDetail.setRowTaxAmount(rowTaxAmount);
            }
            if (dataMap.containsKey("rowtaxid")) {
                Tax rowtax = (dataMap.get("rowtaxid") == null ? null : (Tax) get(Tax.class, (String) dataMap.get("rowtaxid")));
                quotationDetail.setTax(rowtax);
            }
            if (dataMap.containsKey("invstoreid")) {
                quotationDetail.setInvstoreid((String) dataMap.get("invstoreid"));
            } else {
                quotationDetail.setInvstoreid("");
            }
            if (dataMap.containsKey("invlocationid")) {
                quotationDetail.setInvlocid((String) dataMap.get("invlocationid"));
            } else {
                quotationDetail.setInvlocid("");
            }
            saveOrUpdate(quotationDetail);
            list.add(quotationDetail);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveQuotationDetail : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject updateQuotationVersionDetailsCustomData(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            String quotationRefId = (String) requestParams.get("qdetailscustomdataref");
            VendorQuotationVersionDetail quotationDetail = (VendorQuotationVersionDetail) get(VendorQuotationVersionDetail.class, quotationRefId);
            if (requestParams.containsKey("qdetailscustomdataref")) {
                VendorQuotationVersionDetailCustomData quotationDetailCustomData = null;
                quotationDetailCustomData = (VendorQuotationVersionDetailCustomData) get(VendorQuotationVersionDetailCustomData.class, (String) requestParams.get("qdetailscustomdataref"));
                quotationDetail.setQuotationDetailCustomData(quotationDetailCustomData);
            }
            saveOrUpdate(quotationDetail);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accSalesOrderImpl.updateQuotationCustomData:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }

    public KwlReturnObject getVersionQuotations(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            DateFormat df = (DateFormat) request.get(Constants.df);
            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            String ss = (String) request.get(Constants.ss);
            boolean isfavourite = false;
            boolean linkFlagInPO = false;
            boolean linkFlagInGR = false;
            if (request.containsKey("linkFlagInPO") && request.get("linkFlagInPO") != null) {
                linkFlagInPO = Boolean.parseBoolean((String) request.get("linkFlagInPO"));
            }
            if (request.containsKey("linkFlagInGR") && request.get("linkFlagInGR") != null) {
                linkFlagInGR = Boolean.parseBoolean((String) request.get("linkFlagInGR"));
            }
            if (request.get("isfavourite") != null) {
                isfavourite = Boolean.parseBoolean((String) request.get(Constants.MARKED_FAVOURITE));
            }
            boolean isprinted = false;
            if (request.get(Constants.MARKED_PRINTED) != null) {
                isprinted = Boolean.parseBoolean((String) request.get(Constants.MARKED_PRINTED));
            }
            String vendorCategoryid = "";
            if (request.containsKey(Constants.customerCategoryid) && request.get(Constants.customerCategoryid) != null) {
                vendorCategoryid = (String) request.get(Constants.customerCategoryid);
            }
            boolean deleted = Boolean.parseBoolean((String) request.get("deleted"));
            boolean nondeleted = Boolean.parseBoolean((String) request.get("nondeleted"));
            String userDepartment = "";
            if (request.containsKey("userDepartment") && request.get("userDepartment") != null) {
                userDepartment = (String) request.get("userDepartment");
            }
            boolean isFixedAsset = false;
            if (request.containsKey("isFixedAsset") && request.get("isFixedAsset") != null) {
                isFixedAsset = (Boolean) request.get("isFixedAsset");
            }
            String userID = "";
            boolean isenableSalesPersonAgentFlow = false;
            if (request.containsKey("enablesalespersonagentflow") && request.get("enablesalespersonagentflow") != null && !StringUtil.isNullOrEmpty(request.get("enablesalespersonagentflow").toString())) {
                isenableSalesPersonAgentFlow = Boolean.parseBoolean(request.get("enablesalespersonagentflow").toString());
                if (isenableSalesPersonAgentFlow) {
                    if (request.containsKey("userid") && request.get("userid") != null && !StringUtil.isNullOrEmpty(request.get("userid").toString())) {
                        userID = (String) request.get("userid");
                    }
                }
            }
            String condition = "";
            ArrayList params = new ArrayList();
            if (nondeleted) {
                params.add((String) request.get(Constants.companyKey));
                condition = " where vendorquotationversion.deleteflag='F' and vendorquotationversion.company=?";
            } else if (deleted) {
                params.add((String) request.get(Constants.companyKey));
                condition += " where vendorquotationversion.deleteflag='T' and vendorquotationversion.company=?";
            } else {
                params.add((String) request.get(Constants.companyKey));
                condition += " where vendorquotationversion.company=?";
            }
            String billDate = "";
            if (request.containsKey(Constants.BillDate)) {
                billDate = (String) request.get(Constants.BillDate);
            }
            boolean validflag = false;
            if (request.get("validflag") != null) {
                validflag = Boolean.parseBoolean((String) request.get(Constants.ValidFlag));
            }
            if (request.get("archieve") != null) {
                if ((Integer) request.get("archieve") == 0) {
                    condition += " and vendorquotationversion.archieve = 0 ";
                } else if ((Integer) request.get("archieve") == 1) {
                    condition += " and vendorquotationversion.archieve = 1 ";
                }
            }
            if (isfavourite) {
                condition += " and vendorquotationversion.favouriteflag = 1 ";
            }

            if (isprinted) {
                condition += " and vendorquotationversion.printedflag = 1 ";
            }

            if (validflag) {
                params.add(df.parse(billDate));
                condition += " and (vendorquotationversion.validdate>=? or vendorquotationversion.validdate is null) ";
            }

            if (request.get(Constants.productid) != null && !request.get(Constants.productid).toString().equals("")) {
                condition += " and vendorquotationversion.id in (select vqd.quotationversion from  vendorquotationversiondetails vqd where vqd.product ='" + request.get(Constants.productid).toString() + "' )";
            }

            if (request.get(Constants.productCategoryid) != null) {
                String productCategory = (String) request.get(Constants.productCategoryid);
                if (!StringUtil.isNullOrEmpty(productCategory)) {
                    condition += " and vendorquotationversion.id in (select vqd.quotationversion from vendorquotationversiondetails vqd where vqd.product in ( select pcm.productid from productcategorymapping pcm where pcm.productcategory='" + productCategory + "' ))";
                }
            }
            String searchJoin = "";
            String joinstring = "";
            if (!StringUtil.isNullOrEmpty(ss)) {
                String[] searchcol = new String[]{"vendorquotationversion.quotationnumber", "vendorquotationversion.memo", "vendor.name", "vendor.aliasname", "product.name", "product.productid"};
                Map SearchStringMap = StringUtil.insertParamSearchStringMap(params, ss, 6);
                StringUtil.insertParamSearchString(SearchStringMap);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                condition += searchQuery;
                searchJoin = " inner join vendorquotationversiondetails on vendorquotationversiondetails.quotationversion = vendorquotationversion.id "
                        + " inner join product on vendorquotationversiondetails.product= product.id "
                        + " inner join vendor on vendorquotationversion.vendor= vendor.id";
            }

            if (request.containsKey("billId")) {
                String billId = (String) request.get("billId");
                if (!StringUtil.isNullOrEmpty(billId)) {
                    params.add(billId);
                    condition += " and vendorquotationversion.id=? ";
                }
            }
            if (request.containsKey("versionid")) {
                String versionid = (String) request.get("versionid");
                if (!StringUtil.isNullOrEmpty(versionid)) {
                    params.add(versionid);
                    condition += " and vendorquotationversion.quotation=? ";
                }
            }
            if (linkFlagInGR) {
                condition += " and ( vendorquotationversion.linkflag = 0 or vendorquotationversion.linkflag = 1 ) and isopen='T' ";
            }
            if (linkFlagInPO) {
                condition += " and ( vendorquotationversion.linkflag = 0 or vendorquotationversion.linkflag = 2 ) and isopen='T'";
            }
            String vendorId = (String) request.get(Constants.REQ_vendorId);
            if (!StringUtil.isNullOrEmpty(vendorId)) {
                params.add(vendorId);
                condition += " and vendorquotationversion.vendor=?";
            }
            if (!StringUtil.isNullOrEmpty(vendorCategoryid) && !StringUtil.equal(vendorCategoryid, "-1") && !StringUtil.equal(vendorCategoryid, "All")) {
                condition += " and vendorquotationversion.vendor in (select vcm.vendorid from vendorcategorymapping vcm where vcm.vendorcategory = '" + vendorCategoryid + "' )  ";
            }
            String currencyId = (String) request.get("currencyid");
            if (!StringUtil.isNullOrEmpty(currencyId)) {
                params.add(currencyId);
                condition += " and vendorquotationversion.currency=?";
            }
            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                condition += " and (vendorquotationversion.quotationdate >=? and vendorquotationversion.quotationdate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }

            if (request.containsKey("includingGSTFilter") && request.get("includingGSTFilter") != null) {
                condition += " and vendorquotationversion.gstincluded = ?";
                params.add((Boolean) request.get("includingGSTFilter"));
            }
            if (!StringUtil.isNullOrEmpty(userDepartment)) {
                joinstring += " inner join users on users.userid = vendorquotationversion.createdby ";
                condition += " and users.department = ? ";
                params.add(userDepartment);
            }
            if (isFixedAsset) {
                condition += " and vendorquotationversion.isfixedassetvq = true ";
            } else {
                condition += " and vendorquotationversion.isfixedassetvq = false ";
            }
            String appendCase = "and";
            String mySearchFilterString = "";
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (request.containsKey("filterConjuctionCriteria") && request.get("filterConjuctionCriteria") != null) {
                if (request.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            String Searchjson = "";
            if (request.containsKey("searchJson") && request.get("searchJson") != null) {
                Searchjson = request.get("searchJson").toString();

                if (!StringUtil.isNullOrEmpty(Searchjson)) {
                    request.put(Constants.Searchjson, Searchjson);
                    request.put(Constants.appendCase, appendCase);
                    request.put("filterConjuctionCriteria", filterConjuctionCriteria);
                    mySearchFilterString = String.valueOf(StringUtil.getMyAdvanceSearchString(request, true).get(Constants.myResult));
                    mySearchFilterString = mySearchFilterString.replaceAll("VendorQuotationCustomData", "vendorquotationcustomdata");
                    if (mySearchFilterString.contains("vendorquotationcustomdata")) {
                        joinstring = " inner join vendorquotationcustomdata on vendorquotationcustomdata.vendorquotationid=vendorquotation.accvendorquotationcustomdataref  ";
                    }
                    if (mySearchFilterString.contains("AccJEDetailCustomData")) {
                        mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "vendorquotationdetailscustomdata");
                        joinstring += " inner join vendorquotationdetails on vendorquotationdetails.vendorquotation=vendorquotation.id inner join vendorquotationdetailscustomdata on vendorquotationdetails.id=vendorquotationdetailscustomdata.vendorquotationdetailsid ";
                    }
                    StringUtil.insertParamAdvanceSearchString1(params, Searchjson);
                }
            }
            String orderBy = "";
            String stringSort = "";
            boolean isAlreadyVendorInnerJoinPresentInQuery = false;
            if (request.containsKey("dir") && request.containsKey("sort")) {
                String Col_Name = request.get("sort").toString();
                String Col_Dir = request.get("dir").toString();
                if (StringUtil.isNullOrEmpty(searchJoin) && (Col_Name.equals("personname") || Col_Name.equals("aliasname"))) {
                    joinstring += " inner join vendor on vendor.id=vendorquotation.vendor ";
                    isAlreadyVendorInnerJoinPresentInQuery = true;
                }
                stringSort = columSortVendorQutation(Col_Name, Col_Dir);
                orderBy += stringSort;

            } else {
                orderBy = " order by vendorquotationversion.quotationdate desc";
            }
            String salesPersonMappingQuery = "";
            if (isenableSalesPersonAgentFlow && !StringUtil.isNullOrEmpty(userID)) {
                if (!isAlreadyVendorInnerJoinPresentInQuery) {
                    joinstring += " inner join vendor on vendor.id=vendorquotationversion.vendor ";
                }
                salesPersonMappingQuery = " left join vendoragentmapping spm on spm.vendorid=vendorquotationversion.vendor  left join masteritem  mst on mst.id=spm.agent ";
                joinstring += salesPersonMappingQuery;
                condition += " and ((mst.user= '" + userID + "' or mst.user is null  and vendor.vendavailtoagent='T' ) or  (vendor.vendavailtoagent='F')) ";
            }

            String query = "select DISTINCT vendorquotationversion.id from vendorquotationversion " + searchJoin + joinstring + condition + mySearchFilterString;
            query += orderBy;
            list = executeSQLQuery( query, params.toArray());
            count = list.size();
            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                list = executeSQLQueryPaging( query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getQuotations:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    public KwlReturnObject getQuotationVersionDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from VendorQuotationVersionDetail";
        return buildNExecuteQuery( query, requestParams);
    }

    public KwlReturnObject deleteQuotationVersion(String versionID, String companyid) throws ServiceException {
        String query = "update VendorQuotationVersion set deleted=true where ID=? and company.companyID=?";
        int numRows = executeUpdate( query, new Object[]{versionID, companyid});
        return new KwlReturnObject(true, "Quotation Version has been deleted successfully.", null, null, numRows);
    }

    public KwlReturnObject deleteQuotationVersionsPermanent(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            String delQuery1 = "", delQuery2 = "", delQuery3 = "", delQuery4 = "", delQuery5 = "";
            int numtotal = 0;
            if (requestParams.containsKey("versionid") && requestParams.containsKey("companyid")) {

                ArrayList params1 = new ArrayList();
                params1.add(requestParams.get("versionid"));
                params1.add(requestParams.get("companyid"));
                String myquery = " select id from vendorquotationversiondetails where quotationversion in (select id from vendorquotationversion where id=? and company = ?) ";
                List list = executeSQLQuery( myquery, params1.toArray());
                Iterator itr = list.iterator();
                String idStrings = "";
                while (itr.hasNext()) {
                    String invdid = itr.next().toString();
                    idStrings += "'" + invdid + "',";
                }
                if (!StringUtil.isNullOrEmpty(idStrings)) {
                    idStrings = idStrings.substring(0, idStrings.length() - 1);
                }
                if (list.size() > 0 && list != null) {
                    ArrayList params2 = new ArrayList();
                    params2.add(requestParams.get("versionid"));
                    params2.add(requestParams.get("companyid"));
                    delQuery1 = " delete from vendorquotationversiondetails where quotationversion in (select id from vendorquotationversion where id=? and company = ?) ";
                    int numRows1 = executeSQLUpdate( delQuery1, params2.toArray());

                    ArrayList params3 = new ArrayList();
                    params3.add(requestParams.get("companyid"));
                    params3.add(requestParams.get("versionid"));
                    delQuery2 = "delete from vendorquotationversion where company = ? and id=?";
                    int numRows2 = executeSQLUpdate( delQuery2, params3.toArray());

                    ArrayList params4 = new ArrayList();
                    params4.add(requestParams.get("companyid"));
                    params4.add(requestParams.get("versionid"));
                    delQuery3 = "delete from vendorquotationversioncustomdata where company = ? and quotationId=?";
                    int numRows3 = executeSQLUpdate( delQuery3, params4.toArray());

                    ArrayList params5 = new ArrayList();
                    delQuery4 = " delete from vendorquotationversiondetailscustomdata  where quotationdetailsid in (" + idStrings + ")";
                    int numRows4 = executeSQLUpdate( delQuery4, params5.toArray());

                    numtotal = numRows1 + +numRows2 + numRows3 + numRows4;
                }
            }
            return new KwlReturnObject(true, "Quotation Version has been deleted successfully.", null, null, numtotal);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("Cannot delete Quotation Version  as its reference child field is not deleted.", ex);//+ex.getMessage(), ex);
        }

    }

    @Override
    public KwlReturnObject deleteLinkingInformationOfPO(HashMap<String, Object> requestParams) throws ServiceException {
        ArrayList params = new ArrayList();
        int numRows1 = 0, nuRows2 = 0,numRows3=0,numRows4=0, numRowsTotal = 0;
        try {
           
            String delQuery = "";
            if (requestParams.containsKey("unlinkflag") && requestParams.get("unlinkflag") != null && Boolean.parseBoolean(requestParams.get("unlinkflag").toString())) {
                int type = -1;
                if (requestParams.containsKey("type") && requestParams.get("type") != null) {
                    type = Integer.parseInt(requestParams.get("type").toString());
                }
                params.add(requestParams.get("linkedTransactionID"));
                params.add(requestParams.get("poid"));
                if (type == 1 || type == 5 || type == 4 || type == 2 || type == 3 || type==11) {
                    if (type == 5) {//VQ->PO
                        delQuery = "delete from VendorQuotationLinking vq where vq.DocID.ID=? and vq.LinkedDocID=?";
                        numRows1 = executeUpdate( delQuery, params.toArray());
                    } else if (type == 4) { // SO linked in DO
                        delQuery = "delete from GoodsReceiptOrderLinking grol where grol.DocID.ID=? and grol.LinkedDocID=?";
                        numRows1 = executeUpdate( delQuery, params.toArray());
                    } else if (type == 1) { // CQ linked in SO
                        delQuery = "delete from GoodsReceiptLinking grl where grl.DocID.ID=? and grl.LinkedDocID=? ";
                        numRows1 = executeUpdate( delQuery, params.toArray());
                    } else if (type == 2 || type == 3) {//SO->PO or PO->SO
                        delQuery = "delete from SalesOrderLinking sol where sol.DocID.ID=? and sol.LinkedDocID=? ";
                        numRows1 = executeUpdate( delQuery, params.toArray());
                    } else if (type == Constants.Link_PR_TO_PO) {//VQ->PO
                        delQuery = "delete from PurchaseRequisitionLinking prl where prl.DocID.ID=? and prl.LinkedDocID=?";
                        numRows1 = executeUpdate(delQuery, params.toArray());
                    }
                    delQuery = "delete from PurchaseOrderLinking po where po.LinkedDocID=? and po.DocID.ID=?";
                    nuRows2 = executeUpdate( delQuery, params.toArray());
                }
            }else{
                params.add(requestParams.get("poid"));
                delQuery = "delete from VendorQuotationLinking vq where vq.LinkedDocID=?";
                numRows1 = executeUpdate( delQuery, params.toArray());

                delQuery = "delete from PurchaseRequisitionLinking pr where pr.LinkedDocID=?";
                numRows4 = executeUpdate(delQuery, params.toArray());
                
                delQuery = "delete from SalesOrderLinking so where so.LinkedDocID=?";
                nuRows2 = executeUpdate( delQuery, params.toArray());

                delQuery = "delete from PurchaseOrderLinking po where po.DocID.ID=?";
                numRows3 = executeUpdate( delQuery, params.toArray());
               }
           

            numRowsTotal = numRows1 + nuRows2 + numRows3;
        } catch (Exception ex) {
            throw ServiceException.FAILURE("", ex);//+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, numRowsTotal);
    }

    @Override
    public KwlReturnObject getLinkedVendorInvoiceWithPO(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = request.get("companyid").toString();
            ArrayList params = new ArrayList();
            String query = "select grd.ID from GoodsReceiptDetail grd  inner join grd.purchaseorderdetail pord  where grd.company.companyID=?";

            list = executeQuery( query, new Object[]{companyid});
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getLinkedGoodsReceiptWithPI:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    @Override
    public KwlReturnObject getLinkedGoodsReceiptWithPI(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = request.get("companyid").toString();

            ArrayList params = new ArrayList();
            String query = "select grod.ID from GoodsReceiptOrderDetails grod  inner join grod.videtails grd  where grod.company.companyID=?";

            list = executeQuery( query, new Object[]{companyid});
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getLinkedGoodsReceiptWithPI:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    @Override
    public KwlReturnObject getLinkedPurchaseReturnWithPI(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = request.get("companyid").toString();

            ArrayList params = new ArrayList();
            String query = "select prd.ID from PurchaseReturnDetail prd  inner join prd.videtails grd where prd.company.companyID=?";
            params.add(companyid);

            list = executeQuery( query, new Object[]{companyid});
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getLinkedPurchaseReturnWithPI:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    @Override
    public KwlReturnObject getLinkedVendorInvoiceWithGR(HashMap<String, Object> request) throws ServiceException {
         List list = null;
        int count = 0;
        try {
            String companyid = request.get("companyid").toString();

            ArrayList params = new ArrayList();
            String query = "select grd.ID from GoodsReceiptDetail grd  inner join grd.goodsReceiptOrderDetails grod where grd.company.companyID=?";
            params.add(companyid);

            list = executeQuery( query, new Object[]{companyid});
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getLinkedVendorInvoiceWithGR:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    @Override
    public KwlReturnObject getLinkedPurchaseReturnWithGR(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = request.get("companyid").toString();

            ArrayList params = new ArrayList();
            String query = "select prd.ID from PurchaseReturnDetail prd  inner join prd.grdetails grod where prd.company.companyID=?";
            params.add(companyid);

            list = executeQuery( query, new Object[]{companyid});
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getLinkedPurchaseReturnWithGR:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    @Override
    public KwlReturnObject getLinkedVendorInvoiceWithVQ(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = request.get("companyid").toString();

            ArrayList params = new ArrayList();
            String query = "select grd.ID from GoodsReceiptDetail grd  inner join grd.vendorQuotationDetail vqd where grd.company.companyID=?";
            params.add(companyid);

            list = executeQuery( query, new Object[]{companyid});
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getLinkedVendorInvoiceWithVQ:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    @Override
    public KwlReturnObject getLinkedPurchaseOrderWithVQ(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = request.get("companyid").toString();

            ArrayList params = new ArrayList();
            String query = "select pord.ID from PurchaseOrderDetail pord  inner join pord.vqdetail vqd where pord.company.companyID=?";
            params.add(companyid);

            list = executeQuery( query, new Object[]{companyid});
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getLinkedPurchaseOrderWithVQ:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    @Override
    public KwlReturnObject getLinkedPurchaseOrderWithGR(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = request.get("companyid").toString();

            ArrayList params = new ArrayList();
            String query = "select pord.ID from PurchaseOrderDetail pord  inner join pord.vqdetail vqd where pord.company.companyID=?";
            params.add(companyid);

            list = executeQuery( query, new Object[]{companyid});
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getLinkedPurchaseOrderWithVQ:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    @Override
    public KwlReturnObject getLinkedGoodsReceiptWithPO(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = request.get("companyid").toString();

            ArrayList params = new ArrayList();
            String query = "select grod.ID from GoodsReceiptOrderDetails grod  inner join grod.podetails pord  where grod.company.companyID=?";

            list = executeQuery( query, new Object[]{companyid});
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getLinkedGoodsReceiptWithPI:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    /**
     * Description : Method is used to get Debit Note Detail ID that linked with
     * Invoice
     *
     * @param <request> contains company ID
     *
     * @return :List
     */
    
    @Override
    public KwlReturnObject getLinkedDebitNoteWithPI(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = request.get("companyid").toString();
            String query = "select dnd.ID from DebitNoteDetail dnd  inner join dnd.goodsReceipt inv  where dnd.company.companyID=?";


            list = executeQuery( query, new Object[]{companyid});
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getLinkedDebitNoteWithPI:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

  /**
     * Description : Method is used to get Customer Quotation linked with Vendor Quotation 
     * @param <request> Contains Vendor Quotation ID linked with CQ & Company ID
     * 
     * @return :ID of Linked CQ with VQ in List
     */
    @Override
    public KwlReturnObject getCQLinkedWithVQ(Map request) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        try {
            String companyid = "", quotationid = "";
            if (request.containsKey("quotationid") && request.containsKey("companyid")) {
                companyid = (String) request.get("companyid");
                quotationid = (String) request.get("quotationid");
            }
            if (!StringUtil.isNullOrEmpty(quotationid) && !StringUtil.isNullOrEmpty(companyid)) {
                String hqlQuery = "select DISTINCT quotation.id   from quotation inner join quotationdetails on quotationdetails.quotation = quotation.id inner join vendorquotationdetails on vendorquotationdetails.id = quotationdetails.vendorquotationdetails inner join vendorquotation on vendorquotationdetails.vendorquotation = vendorquotation.id\n"
                        + "where quotation.company=? and vendorquotation.id= ?";
                list = executeSQLQuery( hqlQuery, new Object[]{companyid, quotationid});
                if (list != null && list.size() > 0) {
                    count = list.size();
                }
            }
        } catch (Exception ex) {
            System.out.println("Exception: getCQLinkedWithVQ " + ex.getMessage());
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
      
  /**
     * Description : Method is used to get Purchase Requisition(PR) linked with Vendor Quotation(VQ) 
     * @param <request> Contains Vendor Quotation ID linked with PR & Company ID
     * 
     * @return :ID of Linked PR with VQ in List
     */
    @Override
    public KwlReturnObject getPurchaseRequisitionsLinkedWithVQ(Map request) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        try {
            String companyid = "", quotationid = "";
            if (request.containsKey("quotationid") && request.containsKey("companyid")) {
                companyid = (String) request.get("companyid");
                quotationid = (String) request.get("quotationid");
            }
            if (!StringUtil.isNullOrEmpty(quotationid) && !StringUtil.isNullOrEmpty(companyid)) {
                String hqlQuery ="select DISTINCT purchaserequisition.id  from purchaserequisition inner join purchaserequisitiondetail on purchaserequisitiondetail.purchaserequisition=purchaserequisition.id inner join vendorquotationdetails on vendorquotationdetails.purchaserequisitiondetailsid=purchaserequisitiondetail.id inner join vendorquotation on vendorquotationdetails.vendorquotation=vendorquotation.id\n"
                        + "where purchaserequisition.company=? and vendorquotation.id= ?";
                list = executeSQLQuery( hqlQuery, new Object[]{companyid, quotationid});
                if (list != null && list.size() > 0) {
                    count = list.size();
                }
            }
        } catch (Exception ex) {
            System.out.println("Exception: getPurchaseRequisitionsLinkedWithVQ " + ex.getMessage());
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
    /**
     * 
     * @param request
     * @return = Return list of PR
     * @throws ServiceException 
     * Description : Get Purchase Requisition Linked to PO
     */
    public KwlReturnObject getPurchaseRequisitionsLinkedWithPO(Map request) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        try {
            String companyid = "", quotationid = "";
            if (request.containsKey("poid") && request.containsKey("companyid")) {
                companyid = (String) request.get("companyid");
                quotationid = (String) request.get("poid");
            }
            if (!StringUtil.isNullOrEmpty(quotationid) && !StringUtil.isNullOrEmpty(companyid)) {
                String hqlQuery = "select DISTINCT purchaserequisition.id  from purchaserequisition inner join purchaserequisitiondetail on purchaserequisitiondetail.purchaserequisition=purchaserequisition.id inner join podetails on podetails.purchaserequisitiondetailid=purchaserequisitiondetail.id inner join purchaseorder on podetails.purchaseorder=purchaseorder.id\n"
                        + "where purchaserequisition.company=? and purchaseorder.id= ?";
                list = executeSQLQuery(hqlQuery, new Object[]{companyid, quotationid});
                if (list != null && list.size() > 0) {
                    count = list.size();
                }
            }
        } catch (Exception ex) {
            System.out.println("Exception: getPurchaseRequisitionsLinkedWithPo " + ex.getMessage());
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
      /**
     * Description : Method is used to get RFQ linked with Vendor Quotation(VQ) 
     * @param <request> Contains Vendor Quotation ID linked with RFQ & Company ID
     * 
     * @return :ID of Linked RFQ with VQ in List
     */
    public KwlReturnObject getRFQLinkedWithVQ(Map request) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        try {
            String companyid = "", quotationid = "";
            if (request.containsKey("quotationid") && request.containsKey("companyid")) {
                companyid = (String) request.get("companyid");
                quotationid = (String) request.get("quotationid");
            }
            if (!StringUtil.isNullOrEmpty(quotationid) && !StringUtil.isNullOrEmpty(companyid)) {
                String hqlQuery = "select DISTINCT requestforquotation.id  from requestforquotation inner join requestforquotationdetail on requestforquotationdetail.requestforquotation=requestforquotation.id inner join vendorquotationdetails on vendorquotationdetails.rfqdetailsid=requestforquotationdetail.id inner join vendorquotation on vendorquotationdetails.vendorquotation=vendorquotation.id\n"
                        + "where requestforquotation.company=? and vendorquotation.id= ?";
                list = executeSQLQuery(hqlQuery, new Object[]{companyid, quotationid});
                if (list != null && list.size() > 0) {
                    count = list.size();
                }
            }
        } catch (Exception ex) {
            System.out.println("Exception: getRFQLinkedWithVQ " + ex.getMessage());
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
    /**
     * Description : Method is used to Update Entry in linking information table
     * of Purchase Requisition
     *
     * @param <dataMap> :-Contains parameters needs to save in PR linking table
     *
     * @return :KwlReturnObject(contains list of record that is being saved in
     * PR linking table)
     */
    
    @Override
    public KwlReturnObject savePurchaseRequisitionLinking(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String purchaseRequisitionId = (String) dataMap.get("docid");
            PurchaseRequisitionLinking prlinking = new PurchaseRequisitionLinking();
            if (dataMap.containsKey("docid")) {
                PurchaseRequisition purchaserequisition = (PurchaseRequisition) get(PurchaseRequisition.class, purchaseRequisitionId);
                prlinking.setDocID(purchaserequisition);
            }
            if (dataMap.containsKey("moduleid")) {
                prlinking.setModuleID((Integer) dataMap.get("moduleid"));
            }
            if (dataMap.containsKey("linkeddocid")) {
                prlinking.setLinkedDocID((String) dataMap.get("linkeddocid"));
            }
            if (dataMap.containsKey("linkeddocno")) {
                prlinking.setLinkedDocNo((String) dataMap.get("linkeddocno"));
            }
            if (dataMap.containsKey("sourceflag")) {
                prlinking.setSourceFlag((Integer) dataMap.get("sourceflag"));
            }
            saveOrUpdate(prlinking);
            list.add(prlinking);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.savePurchaseRequisitionLinking : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
        /**
     * Description : Method is used to Update Entry in linking information table
     * of RFQ
     *
     * @param <dataMap> :-Contains parameters needs to save in RFQ linking table
     *
     * @return :KwlReturnObject(contains list of record that is being saved in
     * RFQ linking table)
     */
    
   public KwlReturnObject saveRFQLinking(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String rfqId = (String) dataMap.get("docid");
            RequestForQuotationLinking forQuotationLinking = new RequestForQuotationLinking();
            if (dataMap.containsKey("docid")) {
                RequestForQuotation requestForQuotation = (RequestForQuotation) get(RequestForQuotation.class, rfqId);
                forQuotationLinking.setDocID(requestForQuotation);
            }
            if (dataMap.containsKey("moduleid")) {
                forQuotationLinking.setModuleID((Integer) dataMap.get("moduleid"));
            }
            if (dataMap.containsKey("linkeddocid")) {
                forQuotationLinking.setLinkedDocID((String) dataMap.get("linkeddocid"));
            }
            if (dataMap.containsKey("linkeddocno")) {
                forQuotationLinking.setLinkedDocNo((String) dataMap.get("linkeddocno"));
            }
            if (dataMap.containsKey("sourceflag")) {
                forQuotationLinking.setSourceFlag((Integer) dataMap.get("sourceflag"));
            }
            saveOrUpdate(forQuotationLinking);
            list.add(forQuotationLinking);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.savePurchaseRequisitionLinking : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    @Override
    public KwlReturnObject deleteLinkingInformationOfVQ(HashMap<String, Object> requestParams) throws ServiceException {
        ArrayList params = new ArrayList();
        int numRows1 = 0, nuRows2 = 0, numRowsTotal = 0;
        try {

            String delQuery = "";
            if (requestParams.containsKey("unlinkflag") && requestParams.get("unlinkflag") != null && Boolean.parseBoolean(requestParams.get("unlinkflag").toString())) {
                int type = -1;
                if (requestParams.containsKey("type") && requestParams.get("type") != null) {
                    type = Integer.parseInt(requestParams.get("type").toString());
                }
                params.add(requestParams.get("qid"));
                params.add(requestParams.get("linkedTransactionID"));

                if (type == 2) {
                    delQuery = "delete from PurchaseOrderLinking po where po.LinkedDocID=? and po.DocID.ID=?";
                    nuRows2 = executeUpdate(delQuery, params.toArray());

                } else if (type == 6) {//VQ->CQ
                    delQuery = "delete from QuotationLinking cql where cql.LinkedDocID=? and cql.DocID.ID=?";
                    nuRows2 = executeUpdate(delQuery, params.toArray());
                } else if (type == 9) {
                    delQuery = "delete from RequestForQuotationLinking po where po.LinkedDocID=? and po.DocID.ID=?";
                    nuRows2 = executeUpdate(delQuery, params.toArray());
                } else {
                    delQuery = "delete from PurchaseRequisitionLinking po where po.LinkedDocID=? and po.DocID.ID=?";
                    nuRows2 = executeUpdate(delQuery, params.toArray());

                }

                delQuery = "delete from VendorQuotationLinking vq where vq.DocID.ID=? and vq.LinkedDocID=?";
                numRows1 = executeUpdate(delQuery, params.toArray());


            } else {
                params.add(requestParams.get("qid"));
                delQuery = "delete from PurchaseRequisitionLinking prl where prl.LinkedDocID=?";
                numRows1 = executeUpdate(delQuery, params.toArray());
                
                delQuery = "delete from RequestForQuotationLinking prl where prl.LinkedDocID=?";
                numRows1 = executeUpdate(delQuery, params.toArray());

                delQuery = "delete from VendorQuotationLinking vq where vq.DocID.ID=?";
                nuRows2 = executeUpdate(delQuery, params.toArray());
            }


            numRowsTotal = numRows1 + nuRows2;
        } catch (Exception ex) {
            throw ServiceException.FAILURE("", ex);
        }
        return new KwlReturnObject(true, "", null, null, numRowsTotal);
    }
    
    /**
     * Description : Method is used to Delete Entry from linking information table
     * of RFQ & Purchase Requisition
     *
     * @param <dataMap> :-Contains parameters RFQ ID
     *
     * @return :return no of rows deleted
     */
    @Override
    public KwlReturnObject deleteLinkingInformationOfRFQ(HashMap<String, Object> requestParams) throws ServiceException {
        ArrayList params = new ArrayList();
        int numRows1 = 0, numRows2 = 0, numRowsTotal = 0;
        try {

            String delQuery = "";

            params.add(requestParams.get("rfqid"));
            delQuery = "delete from PurchaseRequisitionLinking prl where prl.LinkedDocID=?";
            numRows1 = executeUpdate(delQuery, params.toArray());

            delQuery = "delete from RequestForQuotationLinking prl where prl.DocID.ID=?";
            numRows2 = executeUpdate(delQuery, params.toArray());

            numRowsTotal = numRows1 + numRows2;
        } catch (Exception ex) {
            throw ServiceException.FAILURE("", ex);
        }
        return new KwlReturnObject(true, "", null, null, numRowsTotal);
    }

    @Override
    public KwlReturnObject getLinkedVQWithPurchaseRequisition(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {

            String companyid = request.get("companyid").toString();
            String query = "select distinct vendorquotationdetails.id from vendorquotationdetails  inner join purchaserequisitiondetail  on purchaserequisitiondetail.id= vendorquotationdetails.purchaserequisitiondetailsid where  vendorquotationdetails.company=?";

            list = executeSQLQuery( query, new Object[]{companyid});
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getLinkedVQWithPurchaseRequisition:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
    
    /**
     * Description : Method is used to Fetch linked RFQ with Purchase
     * Requisition
     *
     * @param <dataMap> :-Contains parameters company ID
     *
     * @return :return list
     */
    @Override
    public KwlReturnObject getLinkedRFQWithPurchaseRequisition(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {

            String companyid = request.get("companyid").toString();
            String query = "select distinct requestforquotationdetail.id from requestforquotationdetail  inner join purchaserequisition  on purchaserequisition.id = requestforquotationdetail.prid where  requestforquotationdetail.company=?";

            list = executeSQLQuery(query, new Object[]{companyid});
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getLinkedRFQWithPurchaseRequisition:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    @Override
    public KwlReturnObject checkEntryForVendorQuotationLinkingTable(String docid, String linkeddocid) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        params.add(docid);
        params.add(linkeddocid);
        String hqlQuery = "from VendorQuotationLinking vqnl where vqnl.DocID.ID=? and vqnl.LinkedDocID=?";
        list = executeQuery( hqlQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    /**
     * Description : Method is used to check whether entry is present in linking
     * information of RFQ
     *
     * @param :- docid:-ID of RFQ , linkeddocid:-Purchase Requisition ID
     *
     * @return :return List
     */
        @Override
    public KwlReturnObject checkEntryForRFQLinkingTable(String docid, String linkeddocid) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        params.add(docid);
        params.add(linkeddocid);
        String hqlQuery = "from RequestForQuotationLinking rfql where rfql.DocID.ID=? and rfql.LinkedDocID=?";
        list = executeQuery( hqlQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
     public synchronized void updateRequisitionEntryNumber(Map<String, Object> seqNumberMap) {
        String documnetNumber= "";
        try {
             documnetNumber = seqNumberMap.containsKey(Constants.AUTO_ENTRYNUMBER) ? (String)seqNumberMap.get(Constants.AUTO_ENTRYNUMBER) : "";
            int seqNumber = 0;
            if(seqNumberMap.containsKey(Constants.SEQNUMBER) && !StringUtil.isNullObject(seqNumberMap.get(Constants.SEQNUMBER)) && !StringUtil.isNullOrEmpty(seqNumberMap.get(Constants.SEQNUMBER).toString())){
               seqNumber= Integer.parseInt(seqNumberMap.get(Constants.SEQNUMBER).toString());
            }
            boolean isDraft = false;
            if(seqNumberMap.containsKey(Constants.isDraft) && seqNumberMap.get(Constants.isDraft)!=null){
                isDraft = (Boolean)seqNumberMap.get(Constants.isDraft);  
                if(isDraft){
                    documnetNumber = "";    //SDP-13487 : Set Requisition No.empty
                    seqNumber = 0;
                }
            }
            String datePrefix = seqNumberMap.containsKey(Constants.DATEPREFIX) ? (String)seqNumberMap.get(Constants.DATEPREFIX) : "";
            String dateafterPrefix = seqNumberMap.containsKey(Constants.DATEAFTERPREFIX) ? (String)seqNumberMap.get(Constants.DATEAFTERPREFIX) : "";
            String dateSuffix = seqNumberMap.containsKey(Constants.DATESUFFIX) ? (String)seqNumberMap.get(Constants.DATESUFFIX) : "";
            String sequenceFormatID = seqNumberMap.containsKey(Constants.SEQUENCEFORMATID) ? (String)seqNumberMap.get(Constants.SEQUENCEFORMATID) : "";
            String documentID = seqNumberMap.containsKey(Constants.DOCUMENTID) ? (String)seqNumberMap.get(Constants.DOCUMENTID) : "";
            
            String query = "update PurchaseRequisition set prNumber = ?,seqnumber=?,datePreffixValue=?, dateAfterPreffixValue=?, dateSuffixValue=?,seqformat.ID=? where ID=?";
            int numRows = executeUpdate(query, new Object[]{documnetNumber,seqNumber,datePrefix,dateafterPrefix,dateSuffix,sequenceFormatID, documentID});
        } catch (Exception e) {
            System.out.println(e);
        }
    }
    /**
     * Description : Method is used to get Sales Order Number
     *
     * @param <salesOrderID> :-Sales Order ID
     * @return :Purchase Order No
     */

    @Override
    public KwlReturnObject getSalesOrderNumber(String salesOrderID) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        params.add(salesOrderID);
       
        String hqlQuery = "select so.salesOrderNumber from SalesOrder so where so.ID=?";
        list = executeQuery( hqlQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    /**
     * Description : Method is used to get Sales Order Linked with PO
     *
     * @param <request> :-Contains Company ID
     * @return :Sales Order Detail ID linked with PO
     */
    
    @Override
    public KwlReturnObject getLinkedSOWithPO(HashMap<String, Object> request) throws ServiceException {
      List list = null;
        int count = 0;
        try {

            String companyid = request.get("companyid").toString();
            String query = "select distinct sodetails.id from sodetails  inner join podetails  on podetails.id= sodetails.purchaseorderdetailid where  sodetails.company=?";

            list = executeSQLQuery( query, new Object[]{companyid});
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getLinkedSOWithPO:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    @Override
    public KwlReturnObject checkPOIsPresentInLinkingTable(String docid, String linkeddocid) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        params.add(docid);
        params.add(linkeddocid);
        String hqlQuery = "from PurchaseOrderLinking pol where pol.DocID.ID=? and pol.LinkedDocID=?";
        list = executeQuery( hqlQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());

    }
    
    /**
     * Description : Method is used to get CQ linked With VQ
     *
     * @param <request> :-used to get company id
     *
     * @return :List(contains CQ detail id)
     */
    
    @Override
    public KwlReturnObject getLinkedCQWithVQ(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {

            String companyid = request.get("companyid").toString();
            String query = "select distinct quotationdetails.id from quotationdetails  inner join vendorquotationdetails  on vendorquotationdetails.id= quotationdetails.vendorquotationdetails where  quotationdetails.company=?";

            list = executeSQLQuery(query, new Object[]{companyid});
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getLinkedCQWithVQ:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
    /*
     * function to save Purchase Order Status for Sales Order
     */

    @Override
    public KwlReturnObject savePurchaseOrderStatusForSO(HashMap<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        String message = "";
        try {
            String poid = (String) hm.get("purchaseOrderID");
            String status = (String) hm.get("status");
            String purchaseOrderNo = (String) hm.get("purchaseOrderNo");
            Locale locale = null;
            if (hm.containsKey("locale")) {
                locale = (Locale) hm.get("locale");
            }
            PurchaseOrder purchaseorder = (PurchaseOrder) get(PurchaseOrder.class, poid);
            if (status.equals("Open")) {
                purchaseorder.setDisabledPOforSO(true);
                message = messageSource.getMessage("acc.module.name.18", null, locale) + " "+ purchaseOrderNo + " " + messageSource.getMessage("acc.po.hasbeenblockedforSalesOrder", null, locale);
            } else {
                purchaseorder.setDisabledPOforSO(false);
                message = messageSource.getMessage("acc.module.name.18", null, locale) + " "+ purchaseOrderNo + " " + messageSource.getMessage("acc.po.hasbeenunblockedforSalesOrder", null, locale);
            }

            saveOrUpdate(purchaseorder);
            list.add(purchaseorder);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.savePurchaseOrderStatusForSO : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, message, null, list, list.size());
    }
    
    /**
     * Description : Method is used to update RFQ number
     * 
     * @param <sequenceformat> :Sequence format id
     * @param <nextAutoNo> :Next auto generated number
     * @param <nextAutoNoInt> : Integer count for auto generated number
     * @param <rfqid>: Request for Quotation Id
     * @throws ServiceException
     */
    @Override
    public synchronized void updateRFQEntryNumber(Map<String, Object> seqNumberMap) throws ServiceException {
        String documnetNumber = "";
        try {
            documnetNumber = seqNumberMap.containsKey(Constants.AUTO_ENTRYNUMBER) ? (String) seqNumberMap.get(Constants.AUTO_ENTRYNUMBER) : "";
            int seqNumber = 0;
            if (seqNumberMap.containsKey(Constants.SEQNUMBER) && !StringUtil.isNullObject(seqNumberMap.get(Constants.SEQNUMBER)) && !StringUtil.isNullOrEmpty(seqNumberMap.get(Constants.SEQNUMBER).toString())) {
                seqNumber = Integer.parseInt(seqNumberMap.get(Constants.SEQNUMBER).toString());
            }
            String datePrefix = seqNumberMap.containsKey(Constants.DATEPREFIX) ? (String) seqNumberMap.get(Constants.DATEPREFIX) : "";
            String dateafterPrefix = seqNumberMap.containsKey(Constants.DATEAFTERPREFIX) ? (String) seqNumberMap.get(Constants.DATEAFTERPREFIX) : "";
            String dateSuffix = seqNumberMap.containsKey(Constants.DATESUFFIX) ? (String) seqNumberMap.get(Constants.DATESUFFIX) : "";
            String sequenceFormatID = seqNumberMap.containsKey(Constants.SEQUENCEFORMATID) ? (String) seqNumberMap.get(Constants.SEQUENCEFORMATID) : "";
            String documentID = seqNumberMap.containsKey(Constants.DOCUMENTID) ? (String) seqNumberMap.get(Constants.DOCUMENTID) : "";
            String query = "update RequestForQuotation set rfqNumber = ?,seqnumber=?,datePreffixValue=?, dateAfterPreffixValue=?, dateSuffixValue=?,seqformat.ID=? where ID=?";
            int numRows = executeUpdate(query, new Object[]{documnetNumber, seqNumber,datePrefix,dateafterPrefix,dateSuffix, sequenceFormatID, documentID});
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.updateRFQEntryNumber:" + ex.getMessage(), ex);
        }
    }
    
    @Override
    public KwlReturnObject getPurchaseOrderFromDeliveryPlanner(String poid, String companyid) throws ServiceException {
        String selQuery = "from DeliveryPlanner dp  where dp.documentNo=? and dp.company.companyID=?";
        List list = executeQuery(selQuery, new Object[]{poid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    /**
     * 
     * @param poid
     * @param companyid
     * @desc : Check Stock Transfer created for Order or not
     * @return
     * @throws ServiceException 
     */
    public KwlReturnObject getStockTransferFromJobWorkOutOrder(String poid, String companyid) throws ServiceException {
        String selQuery = "select id from in_interstoretransfer where podetails in (select id from podetails where purchaseorder=?) and company=?";
        List list = executeSQLQuery(selQuery, new Object[]{poid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    /* Method is used to get RFQ linked with Purchase Requisition */
    @Override
    public KwlReturnObject getRFQLinkedWithPR(String billid, String companyid) throws ServiceException {
        ArrayList params = new ArrayList();
        params.add(companyid);
         params.add(billid);
       String sqlQuery = "select DISTINCT rfq.id from requestforquotation rfq inner join requestforquotationdetail rfqd on rfqd.requestforquotation = rfq.id inner join purchaserequisition prq on prq.id = rfqd.prid where rfq.company=? and prq.id= ? ";

        List list = executeSQLQuery(sqlQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }

       /* Method is used to get Purchase Requisition linked with RFQ */
    @Override
    public KwlReturnObject getPRLinkedInRFQ(Map request) throws ServiceException {
        ArrayList params = new ArrayList();
        String companyid = (String) request.get("companyid");
        String billid = (String) request.get("rfqID");
        params.add(companyid);
        params.add(billid);
        String sqlQuery = "select DISTINCT prq.id from purchaserequisition prq inner join requestforquotationdetail rfqd on rfqd.prid = prq.id   inner join requestforquotation rfq on rfq.id=rfqd.requestforquotation where prq.company=? and rfq.id= ? ";

        List list = executeSQLQuery(sqlQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }

      /* Method is used to get Vendor Quotation linked with RFQ */
    @Override
    public KwlReturnObject getVQLinkedInRFQ(Map request) throws ServiceException {
        ArrayList params = new ArrayList();
        String companyid = (String) request.get("companyid");
        String billid = (String) request.get("rfqID");
        params.add(companyid);
        params.add(billid);
        String sqlQuery = "select DISTINCT vq.id from vendorquotation vq inner join vendorquotationdetails vqd  on vqd.vendorquotation = vq.id   inner join requestforquotationdetail rfqd on rfqd.id=vqd.rfqdetailsid inner join requestforquotation rfq on rfq.id=rfqd.requestforquotation where vq.company=? and rfq.id= ? ";

        List list = executeSQLQuery(sqlQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
       /* Method is used to close Purchase Order manually*/
    @Override
    public KwlReturnObject closeDocument(HashMap<String, Object> requestParams) throws ServiceException {
        String message = "";
        try {
            PurchaseOrder purchaseOrder = (PurchaseOrder) requestParams.get("purchaseOrder");
            boolean poCloseFlag = (Boolean) requestParams.get("closeFlag");
            Locale locale = null;
            if (requestParams.containsKey("locale")) {
                locale = (Locale) requestParams.get("locale");
            }
            purchaseOrder.setIsPOClosed(poCloseFlag);
            saveOrUpdate(purchaseOrder);
            message = messageSource.getMessage("acc.po.PurchaseOrderhasbeenClosedManually", null, locale);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.closeDocument:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, message, null, null, 0);
    }

      /* Method is used to close line level product manually*/
    @Override
    public KwlReturnObject closeLineItem(HashMap<String, Object> requestParams) throws ServiceException {
        String message = "";
        try {
            PurchaseOrderDetail purchaseOrderDetail = (PurchaseOrderDetail) requestParams.get("purchaseOrderDetail");
            purchaseOrderDetail.setIsLineItemClosed(true);
            saveOrUpdate(purchaseOrderDetail);
            message = "Selected Line Item has been Closed Manually";
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.closeLineItem:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, message, null, null, 0);
    }

    /* Method is used to check whether PO is used in GR or not i.e PO->GR or PO->PI->GR*/
    @Override
    public KwlReturnObject checkWhetherPOIsUsedInGROrNot(String poDetailID, String companyid) throws ServiceException {
        List list = new ArrayList();
        try {
            String query = "select grodetails.id from grodetails inner join grorder on grodetails.grorder=grorder.id "
                    + "where  grorder.company=? and grorder.deleteflag='F' and grodetails.videtails in "
                    + " ( select grdetails.id from grdetails inner join goodsreceipt on grdetails.goodsreceipt=goodsreceipt.id "
                    + "where goodsreceipt.company=? and goodsreceipt.deleteflag='F' and grdetails.purchaseorderdetail=? )";
            list = executeSQLQuery(query, new Object[]{companyid, companyid, poDetailID});
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.checkWhetherSOIsUsedInDOOrNot:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    /*@Override
    public List getPurchaseRerturnVatDetails(String companyid) {
        List list = null;
        String query = "SELECT acc.`name`,its.account,prtm.percentage,prtm.assessablevalue  FROM prdetails prd INNER JOIN purchasereturndetailtermmap prtm ON  prtm.purchasereturndetail= prd.id "
                + "INNER JOIN invoicetermssales its ON prtm.term=its.id INNER JOIN account acc ON its.account = acc.id "
                + " WHERE  prd.company = ? AND its.termtype = 1  ORDER BY its.account ;";

        try {
            list = executeSQLQuery(query, new Object[]{companyid});

        } catch (ServiceException ex) {
            Logger.getLogger(accPurchaseOrderImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }*/
    
   @Override
    public KwlReturnObject saveAssetExciseDetails(HashMap<String, Object> dataMap ) throws ServiceException {
        List list = new ArrayList();
        try {
            ExciseDetailsAssets exciseDetails = new ExciseDetailsAssets();

            VendorQuotation vq = null;
            PurchaseOrder po = null;
            State state = null;
            if (dataMap.containsKey("id") && !StringUtil.isNullOrEmpty(dataMap.get("id").toString())){
                exciseDetails = (ExciseDetailsAssets) get(ExciseDetailsAssets.class, dataMap.get("id").toString());
            }
//                exciseDetails.setId(UUID.randomUUID().toString());
            if (dataMap.containsKey("quatationid") && dataMap.get("quatationid")!=null) {
                vq = (VendorQuotation) get(VendorQuotation.class, (String) dataMap.get("quatationid"));
                exciseDetails.setQuotation(vq);
            }
            if (dataMap.containsKey("purchaseorder") && dataMap.get("purchaseorder")!=null) {
                po = (PurchaseOrder) get(PurchaseOrder.class, (String) dataMap.get("purchaseorder"));
                exciseDetails.setPurchaseOrder(po);
            }
            if (dataMap.containsKey("suppliers")) {
                exciseDetails.setSupplier(dataMap.get("suppliers").toString());
            }
            if (dataMap.containsKey("supplierTINSalesTAXNo")) {
                exciseDetails.setSupplierTINSalesTaxNo(dataMap.get("supplierTINSalesTAXNo").toString());
            }
            if (dataMap.containsKey("supplierExciseRegnNo")) {
                exciseDetails.setSupplierExciseRegnNo(dataMap.get("supplierExciseRegnNo").toString());
            }
            if (dataMap.containsKey("cstnumber")) {
                exciseDetails.setCstnumber(dataMap.get("cstnumber").toString());
            }
            if (dataMap.containsKey("supplierCommissionerate")) {
                exciseDetails.setSupplierCommissioneRate(dataMap.get("supplierCommissionerate").toString());
            }
            if (dataMap.containsKey("supplierAddress")) {
                exciseDetails.setSupplierAddress(dataMap.get("supplierAddress").toString());
            }
            if (dataMap.containsKey("supplierRange")) {
                exciseDetails.setSupplierRange(dataMap.get("supplierRange").toString());
            }
            if (dataMap.containsKey("supplierState")) {
                exciseDetails.setSupplierstate(dataMap.get("supplierState").toString());
            }
            if (dataMap.containsKey("supplierImporterExporterCode")) {
                exciseDetails.setSupplierImporterExporterCode(dataMap.get("supplierImporterExporterCode").toString());
            }
            if (dataMap.containsKey("supplierDivision")) {
                exciseDetails.setSupplierDivision(dataMap.get("supplierDivision").toString());
            }
            if (dataMap.containsKey("manufacturername")) {
                exciseDetails.setManufacturerName(dataMap.get("manufacturername").toString());
            }
            if (dataMap.containsKey("manufacturerExciseRegnNo")) {
                exciseDetails.setManufacturerExciseregnNo(dataMap.get("manufacturerExciseRegnNo").toString());
            }
            if (dataMap.containsKey("manufacturerRange")) {
                exciseDetails.setManufacturerRange(dataMap.get("manufacturerRange").toString());
            }
            if (dataMap.containsKey("manufacturerCommissionerate")) {
                exciseDetails.setManufacturerCommissionerate(dataMap.get("manufacturerCommissionerate").toString());
            }
            if (dataMap.containsKey("manufacturerDivision")) {
                exciseDetails.setManufacturerDivision(dataMap.get("manufacturerDivision").toString());
            }
            if (dataMap.containsKey("manufacturerAddress")) {
                exciseDetails.setManufacturerAddress(dataMap.get("manufacturerAddress").toString());
            }
            if (dataMap.containsKey("manufacturerImporterExporterCode")) {
                exciseDetails.setManufacturerImporterexporterCode(dataMap.get("manufacturerImporterExporterCode").toString());
            }
            if (dataMap.containsKey("InvoicenoManuFacture")) {
                exciseDetails.setInvoicenoManufacture(dataMap.get("InvoicenoManuFacture").toString());
            }
            if (dataMap.containsKey("InvoiceDateManuFacture")) {
                exciseDetails.setInvoiceDateManufacture((Date)dataMap.get("InvoiceDateManuFacture"));
            }
            
            saveOrUpdate(exciseDetails);
            list.add(exciseDetails);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accGoodsReceiptImpl.saveGoodsReceiptTermMap : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }
  
    /* Get PO with or without GR/invoice or with GR+Invoice both*/
    @Override
    public KwlReturnObject getRelevantPurchaseOrderLinkingWise(HashMap<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        int count=0;
        try {
            String sqlQuery = "";
            String start = (String) requestParams.get(Constants.start);
            String limit = (String) requestParams.get(Constants.limit);

            DateFormat df = (DateFormat) requestParams.get(Constants.df);
            String ss = (String) requestParams.get(Constants.ss);
            int orderLinkedWithDocType = (Integer) requestParams.get("orderLinkedWithDocType");
            boolean isDraft = false;
           
          
            boolean pendingapproval = (Boolean) requestParams.get("pendingapproval");
            String newvendorid = "";
            if (requestParams.containsKey(Constants.newvendorid) && requestParams.get(Constants.newvendorid) != null) {
                newvendorid = (String) requestParams.get(Constants.newvendorid);
            }
            boolean isConsignment = false;
            boolean isMRPJOBWORKOUT = false;
            if (requestParams.containsKey("isConsignment") && requestParams.get("isConsignment") != null) {
                isConsignment = (Boolean) requestParams.get("isConsignment");
            }
            if (requestParams.containsKey("isMRPJOBWORKOUT") && requestParams.get("isMRPJOBWORKOUT") != null) {
                isMRPJOBWORKOUT = (Boolean) requestParams.get("isMRPJOBWORKOUT");
            }
            if (requestParams.containsKey(Constants.isDraft) && requestParams.get(Constants.isDraft) != null) {
                isDraft = (Boolean) requestParams.get(Constants.isDraft);
            }
            boolean isFixedAsset = false;
            if (requestParams.containsKey("isFixedAsset") && requestParams.get("isFixedAsset") != null) {
                isFixedAsset = (Boolean) requestParams.get("isFixedAsset");
            }

            String conditionSQL = "";
            String innerQuery = "";
            ArrayList paramsWithTradingFlow = new ArrayList();
            ArrayList params=new ArrayList();
            ArrayList searchParams = new ArrayList();

            params.add((String) requestParams.get(Constants.companyKey));
            paramsWithTradingFlow.add((String) requestParams.get(Constants.companyKey));
            conditionSQL = " where purchaseorder.deleteflag='F' and purchaseorder.company = ?";

            //// query based on CostCenter parameter
            String costCenterId = (String) requestParams.get(CCConstants.REQ_costCenterId);
            if (!StringUtil.isNullOrEmpty(costCenterId)) {

                params.add(costCenterId);
                 paramsWithTradingFlow.add(costCenterId);

                conditionSQL += " and purchaseorder.costcenter=?";
            }
            //for checking with vendor
            if (!StringUtil.isNullOrEmpty(newvendorid)) {

                params.add(newvendorid);
                paramsWithTradingFlow.add(newvendorid);

                conditionSQL += " and  purchaseorder.vendor = ? ";

            }  
            String vendorCategoryid = "";
            if (requestParams.containsKey(Constants.customerCategoryid) && requestParams.get(Constants.customerCategoryid) != null) {
                vendorCategoryid = (String) requestParams.get(Constants.customerCategoryid);
            }

            if (!StringUtil.isNullOrEmpty(vendorCategoryid) && !StringUtil.equal(vendorCategoryid, "-1") && !StringUtil.equal(vendorCategoryid, "All")) {
                params.add(vendorCategoryid);
                paramsWithTradingFlow.add(vendorCategoryid);

                conditionSQL += " and purchaseorder.vendor in (select vendorid from vendorcategorymapping where vendorcategory = ?)  ";

            }


            if (pendingapproval) {
                conditionSQL += " and purchaseorder.pendingapproval != 0 and purchaseorder.approvestatuslevel != 11";
            } else {
                conditionSQL += " and purchaseorder.pendingapproval= 0 and purchaseorder.approvestatuslevel = 11";
            }
            if (isDraft) {
                conditionSQL += " and purchaseorder.isdraft = true ";
            } else {
                conditionSQL += " and purchaseorder.isdraft = false ";
            }

            if (isFixedAsset) {
                conditionSQL += " and purchaseorder.isfixedassetpo = true ";
            } else {
                conditionSQL += " and purchaseorder.isfixedassetpo = false ";
            }

            if (isConsignment) {
                conditionSQL += " and (purchaseorder.isconsignment='T') ";
            } else {
                conditionSQL += " and (purchaseorder.isconsignment='F') ";
            }

            if (isMRPJOBWORKOUT) {
                conditionSQL += " and (purchaseorder.ismrpjobworkout='T') ";
            } else {
                conditionSQL += " and (purchaseorder.ismrpjobworkout='F') ";
            }

            if (isFixedAsset) {
                conditionSQL += " and purchaseorder.isfixedassetpo = true ";
            } else {
                conditionSQL += " and purchaseorder.isfixedassetpo = false ";
            }
            
            if (orderLinkedWithDocType==12) {
                conditionSQL += " and  purchaseorder.linkflag = 0 ";

            }

            //Ignore POs created as only templates.
            conditionSQL += " and purchaseorder.istemplate != 2 ";

            //// query based on start date & end date parameters
            String startDate = (requestParams.containsKey(Constants.REQ_startdate) && requestParams.get(Constants.REQ_startdate)!= null)? StringUtil.DecodeText((String) requestParams.get(Constants.REQ_startdate)) : (String) requestParams.get(Constants.REQ_startdate);
            String endDate = (requestParams.containsKey(Constants.REQ_enddate) && requestParams.get(Constants.REQ_enddate)!= null)? StringUtil.DecodeText((String) requestParams.get(Constants.REQ_enddate)) : (String) requestParams.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {

                conditionSQL += " and (purchaseorder.orderdate >=? and purchaseorder.orderdate <=? )";

                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
                
                paramsWithTradingFlow.add(df.parse(startDate));
                paramsWithTradingFlow.add(df.parse(endDate));
            }
                   
            String productid = "";
            if (requestParams.containsKey(Constants.productid) && requestParams.get(Constants.productid) != null) {
                productid = (String) requestParams.get(Constants.productid);
            }

            String productCategoryid = "";
            if (requestParams.containsKey(Constants.productCategoryid) && requestParams.get(Constants.productCategoryid) != null) {
                productCategoryid = (String) requestParams.get(Constants.productCategoryid);
            }
            
            if (!StringUtil.isNullOrEmpty(productid)) {
                params.add(productid);
                paramsWithTradingFlow.add(productid);
                innerQuery = " inner join podetails on podetails.purchaseorder = purchaseorder.id ";
                conditionSQL += " and podetails.product = ? ";

            }

            if (!StringUtil.isNullOrEmpty(productCategoryid)) {
                params.add(productCategoryid);
                paramsWithTradingFlow.add(productCategoryid);
                innerQuery = " inner join podetails on podetails.purchaseorder = purchaseorder.id ";
                conditionSQL += " and podetails.product in (select productid from productcategorymapping where productcategory = ?) ";

            }
            
            String moduleid = "";
            if (requestParams.containsKey(Constants.moduleid) && requestParams.get(Constants.moduleid) != null) {
                moduleid = requestParams.get(Constants.moduleid).toString();
            }
            
            if (requestParams.containsKey("linknumber") && requestParams.get("linknumber") != null && !requestParams.get("linknumber").toString().equals("")) {
                conditionSQL += " and purchaseorder.ponumber = ? ";
                params.add(requestParams.get("linknumber"));
                paramsWithTradingFlow.add(requestParams.get("linknumber"));
            }
            
            String appendCase = "and";
            String Searchjson = "";
            String mySearchFilterString = "";
            String searchDefaultFieldSQL = "";
            String joinString = "";
            String joinString1 = "";
            String searchJoin = "";
            if (!StringUtil.isNullOrEmpty(ss)) {
                String[] searchcol = new String[]{"purchaseorder.ponumber", "purchaseorder.memo", "purchaseorder.supplierinvoiceno", "vendor.name", "vendor.aliasname",
                    "bsaddr.billingaddress", "bsaddr.billingcountry", "bsaddr.billingstate", "bsaddr.billingcity", "bsaddr.billingemail", "bsaddr.billingpostal",
                    "bsaddr.shippingaddress", "bsaddr.shippingCountry", "bsaddr.shippingstate", "bsaddr.shippingcity", "bsaddr.shippingemail", "bsaddr.shippingpostal", "product.name", "product.productid"};
                Map SearchStringMap = StringUtil.insertParamSearchStringMap(searchParams, ss, 19);
                StringUtil.insertParamSearchString(SearchStringMap);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                conditionSQL += searchQuery;
                searchJoin = " left join podetails on podetails.purchaseorder = purchaseorder.id "
                        + " left join product on product.id = podetails.product"
                        + " inner join billingshippingaddresses bsaddr on bsaddr.id = purchaseorder.billingshippingaddresses "
                        + " inner join vendor on vendor.id = purchaseorder.vendor ";

                innerQuery += searchJoin;
            }
           
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (requestParams.containsKey("filterConjuctionCriteria") && requestParams.get("filterConjuctionCriteria") != null) {
                if (requestParams.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            String linkSearchDocument = "";
            String linkQuery="";
            if (requestParams.containsKey("searchJson") && requestParams.get("searchJson") != null) {
                Searchjson = StringUtil.DecodeText(requestParams.get("searchJson").toString());
            
                if (!StringUtil.isNullOrEmpty(Searchjson)) {
                    JSONObject serachJobj = new JSONObject(Searchjson);
                    
                    JSONArray customSearchFieldArray = new JSONArray();
                    JSONArray defaultSearchFieldArray = new JSONArray();
                    StringUtil.seperateCostomAndDefaultSerachJson(serachJobj, customSearchFieldArray, defaultSearchFieldArray);
                    if (defaultSearchFieldArray.length() > 0) {

                        for (int i = 0; i < defaultSearchFieldArray.length(); i++) {
                            JSONObject jsonobj = defaultSearchFieldArray.getJSONObject(i);
                            linkSearchDocument = StringUtil.DecodeText(jsonobj.optString("columnheader"));
                            if (linkSearchDocument.equalsIgnoreCase("VQ No.") || linkSearchDocument.equalsIgnoreCase("SO No.") || linkSearchDocument.equalsIgnoreCase("PR No.")) {
                                linkQuery = "left join polinking on polinking.docid=purchaseorder.id and polinking.sourceflag = 1";
                                break;
                            }

                        }

                        /*
                         Advance Search For Default Form fields
                         */
                        ArrayList tableArray = new ArrayList();
                        tableArray.add("customer"); //this table array used to identified wheather join exists on table or not                         
                        Map<String, Object> map = buildSqlDefaultFieldAdvSearch(defaultSearchFieldArray, searchParams, moduleid, tableArray, filterConjuctionCriteria);
                        searchJoin += map.containsKey("searchjoin") ? map.get("searchjoin") : "";
                        searchDefaultFieldSQL = (String) (map.containsKey("condition") ? map.get("condition") : "");
                        searchJoin += " left join polinking on polinking.docid=purchaseorder.id and polinking.sourceflag = 1 ";

//                        if(!defaultSearchFieldArray.get(0).toString()){
//                            
//                        }
                    }

                    if (customSearchFieldArray.length() > 0) {   //Advance search case for Custome field
                        
                        requestParams.put(Constants.Searchjson, Searchjson);
                        requestParams.put(Constants.appendCase, appendCase);
                        requestParams.put("filterConjuctionCriteria", filterConjuctionCriteria);
                        mySearchFilterString = String.valueOf(StringUtil.getAdvanceSearchString(requestParams, true).get(Constants.myResult));
//                    joinString = " inner join purchaseordercustomdata on purchaseordercustomdata.poID=purchaseorder.purchaseordercustomdataref ";
                        String innerJoinOnDetailTable = " inner join podetails on podetails.purchaseorder=purchaseorder.id ";
                        boolean isInnerJoinAppend = false;
                        if (mySearchFilterString.contains("purchaseordercustomdata")) {
                            joinString1 = " inner join purchaseordercustomdata on purchaseordercustomdata.poID=purchaseorder.purchaseordercustomdataref ";
                        }
                        if (mySearchFilterString.contains("AccJEDetailCustomData")) {
                            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "purchaseorderdetailcustomdata");
                            joinString1 += innerJoinOnDetailTable + " left join purchaseorderdetailcustomdata on podetails.id=purchaseorderdetailcustomdata.poDetailID ";
                            isInnerJoinAppend = true;
                        }
                        if (mySearchFilterString.contains("AccJEDetailsProductCustomData")) {
                            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailsProductCustomData", "podetailproductcustomdata");
                            joinString1 += (isInnerJoinAppend ? "" : innerJoinOnDetailTable) + " left join podetailproductcustomdata on podetails.id=podetailproductcustomdata.poDetailID ";
                            isInnerJoinAppend = true;
                        }
                        if (mySearchFilterString.contains("VendorCustomData")) {
                            joinString1 += " inner join vendor on vendor.id = purchaseorder.vendor "
                                    + " left join vendorcustomdata  on vendorcustomdata.vendorId=vendor.id ";
                            mySearchFilterString = mySearchFilterString.replaceAll("VendorCustomData", "vendorcustomdata");
                        }
                        //product custom data
                        if (mySearchFilterString.contains("accproductcustomdata")) {
                            joinString1 += (isInnerJoinAppend ? "" : innerJoinOnDetailTable) + " left join product on product.id=podetails.product left join accproductcustomdata on accproductcustomdata.productId=product.id ";
                        }
                        StringUtil.insertParamAdvanceSearchString1(searchParams, Searchjson);
                    }
                    mySearchFilterString = StringUtil.combineCustomAndDefaultSearch(searchDefaultFieldSQL, mySearchFilterString, filterConjuctionCriteria);
                }
            }
            
            String mySearchFilterString1 = "";
            if (linkQuery != "") {
                mySearchFilterString1 = mySearchFilterString;
                mySearchFilterString = "";
            }
            
            String orderBy = "";
            String sort_Col = "";
            String sort_Col1 = "";
            String joinString2 = " ";
            String[] stringSort = null;
            if (requestParams.containsKey("dir") && requestParams.containsKey("sort")) {
                String Col_Name = requestParams.get("sort").toString();
                String Col_Dir = requestParams.get("dir").toString();
                stringSort = columSort(Col_Name, Col_Dir);
                orderBy += stringSort[0];
                sort_Col += stringSort[1];
                sort_Col1 += stringSort[2];
                if(requestParams.get("sort").toString().equals("agentname")){
                    joinString2 += "  left join masteritem on masteritem.id = purchaseorder.masteragent  ";
                }else if((requestParams.get("sort").toString().equals("personname") || requestParams.get("sort").toString().equals("aliasname"))&& StringUtil.isNullOrEmpty(ss)){
                    joinString2 += " inner join vendor on vendor.id = purchaseorder.vendor ";
                }

            } else {
                orderBy = " order by orderdate desc";
                sort_Col += ", purchaseorder.orderdate";
                sort_Col1 += ", billingpurchaseorder.orderdate";
            }
            
            if (orderLinkedWithDocType != 15) {
                if (linkQuery != "") {
                    mySearchFilterString1 += orderBy;
                } else {
                    mySearchFilterString += orderBy;
                }
            }
            
            
            
            if (orderLinkedWithDocType == 12) {

                /*Query for Get PO linked without GR or Invoice */
                sqlQuery = "select   DISTINCT purchaseorder.id, 'false' as withoutinventory , purchaseorder.orderdate " + sort_Col + " from purchaseorder " + linkQuery + innerQuery + joinString1 + joinString2 + conditionSQL + ((StringUtil.isNullOrEmpty(linkQuery)) ? mySearchFilterString : mySearchFilterString1);
                params.addAll(searchParams);
            } else if (orderLinkedWithDocType == 13) {

                /*Query for Get PO linked with Invoice only 
                 ie PO->VI
                 */
                sqlQuery = "select   DISTINCT purchaseorder.id, 'false' as withoutinventory , purchaseorder.orderdate " + sort_Col + " from purchaseorder  \n"
                        + innerQuery + joinString1 + joinString2
                        + "inner join polinking on purchaseorder.id=polinking.docid \n"
                        + " inner join goodsreceiptlinking invl on invl.docid  =polinking.linkeddocid \n"
                        + conditionSQL+" and invl.docid not in (select grol.linkeddocid from goodsreceiptorderlinking grol inner join grorder gro on gro.id=grol.docid where gro.company=? ) "+mySearchFilterString;
                params.add((String) requestParams.get(Constants.companyKey));
                params.addAll(searchParams);
                if (linkQuery != "") {
                    sqlQuery += "and  purchaseorder.id IN(select purchaseorder.id from purchaseorder  \n"
                            + "inner join polinking on polinking.docid=purchaseorder.id and polinking.sourceflag=1\n"
                            + conditionSQL + mySearchFilterString1+")";

                    params.add((String) requestParams.get(Constants.companyKey));
                    params.add(df.parse(startDate));
                    params.add(df.parse(endDate));
                    params.addAll(searchParams);
                }
            } else if (orderLinkedWithDocType == 14) {

                /*Query for Get PO linked with GR only
                 I.e PO->GR
                 */
            
                sqlQuery = "select   DISTINCT purchaseorder.id, 'false' as withoutinventory , purchaseorder.orderdate " + sort_Col + " from purchaseorder  \n"
                        + innerQuery + joinString1 + joinString2
                        + "inner join polinking on purchaseorder.id=polinking.docid \n"
                        + " inner join goodsreceiptorderlinking grol on grol.docid  =polinking.linkeddocid \n"
                        + conditionSQL + " and grol.docid not in (select invl.linkeddocid from goodsreceiptlinking invl inner join goodsreceipt inv on inv.id=invl.docid where inv.company=? ) "+mySearchFilterString;
                params.add((String) requestParams.get(Constants.companyKey));
                params.addAll(searchParams);
                if (linkQuery != "") {
                    sqlQuery += "and  purchaseorder.id IN(select purchaseorder.id from purchaseorder \n"
                            + "inner join polinking on polinking.docid=purchaseorder.id and polinking.sourceflag=1\n"
                            + conditionSQL + mySearchFilterString1+")";

                    params.add((String) requestParams.get(Constants.companyKey));
                    params.add(df.parse(startDate));
                    params.add(df.parse(endDate));
                    params.addAll(searchParams);
                }
            } else if (orderLinkedWithDocType == 15) {

                /*Query for Get PO linked with GR and Invoice
                
                 i.e PO->GR->VI or PO->VI->GR
                 */
                                           
                sqlQuery = "select  DISTINCT purchaseorder.id, 'false' as withoutinventory , purchaseorder.orderdate " + sort_Col + " from purchaseorder \n"
                        + innerQuery + joinString1 + joinString2
                        + "inner join polinking on purchaseorder.id=polinking.docid \n"
                        + " inner join goodsreceiptorderlinking grol on grol.docid  =polinking.linkeddocid \n"
                        + " inner join  goodsreceiptlinking invl on invl.linkeddocid = grol.docid \n"
                        +"\n"
                        + conditionSQL+" "+mySearchFilterString;
                params.addAll(searchParams);
                if (linkQuery != "") {
                    sqlQuery += "and  purchaseorder.id IN(select purchaseorder.id from purchaseorder \n"
                            + "inner join polinking on polinking.docid=purchaseorder.id and polinking.sourceflag=1\n"
                            + conditionSQL + mySearchFilterString1 + ")";

                    params.add((String) requestParams.get(Constants.companyKey));
                    params.add(df.parse(startDate));
                    params.add(df.parse(endDate));
                    params.addAll(searchParams);
                }
                
                sqlQuery += "\n"
                    + "union"
                    + "\n"
                    + "select  DISTINCT purchaseorder.id, 'false' as withoutinventory , purchaseorder.orderdate " + sort_Col + " from purchaseorder\n"
                    + innerQuery + joinString1 + joinString2
                    + "inner join polinking  on purchaseorder.id=polinking.docid \n"
                    + "inner join  goodsreceiptlinking invl on invl.docid = polinking.linkeddocid  \n"
                    + "inner join goodsreceiptorderlinking grol on grol.docid  =invl.linkeddocid  \n"
                    + conditionSQL+" "+mySearchFilterString;

                params.add((String) requestParams.get(Constants.companyKey));
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
                params.addAll(searchParams);
                
                if (linkQuery != "") {
                    sqlQuery += "and  purchaseorder.id IN(select purchaseorder.id from purchaseorder \n"
                            + "inner join polinking on polinking.docid=purchaseorder.id and polinking.sourceflag=1\n"
                            + conditionSQL + mySearchFilterString1 + ")";

                    params.add((String) requestParams.get(Constants.companyKey));
                    params.add(df.parse(startDate));
                    params.add(df.parse(endDate));
                    params.addAll(searchParams);
                }
                
                sqlQuery += orderBy;
            }

            list = executeSQLQuery(sqlQuery, params.toArray());
            count = list.size();
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                list = executeSQLQueryPaging(sqlQuery, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }

        } catch (Exception ex) {
            throw ServiceException.FAILURE("accSalesOrderImpl.getRelevantPurchaseOrderLinkingWise:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);

    }
    
        /*  Get Purchase Order detail for bulk Invoice */
    @Override
    public KwlReturnObject getPurchaseOrderDetailsForBulkInvoices(List soId, String companyId) throws ServiceException {
        List list = null;
        List newList=new ArrayList();
        int count = 0;
        try {
            String query = "from PurchaseOrderDetail where purchaseOrder.ID =? and company.companyID=? "; //" order by inv.customerEntry.account.id, inv.invoiceNumber";            
            for(int i= 0; i < soId.size(); i++) {
                String soIdstr = (String) soId.get(i);
                list = executeQuery( query, new Object[]{soIdstr, companyId});
                for (int j = 0; j < list.size(); j++) {
                    newList.add(list.get(j));
                }
            }
            count = newList.size();
        } catch (Exception ex) {
            Logger.getLogger(accSalesOrderImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getPurchaseOrderDetailsForBulkInvoices:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, newList, count);
    }

       /*  Get Purchase Order detail for individual Invoice */
    @Override
    public KwlReturnObject getPurchaseOrderDetails(String soId, String companyId) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String query = "from PurchaseOrderDetail where purchaseOrder.ID =? and company.companyID=? "; //" order by inv.customerEntry.account.id, inv.invoiceNumber";            
            list = executeQuery(query, new Object[]{soId, companyId});
            count = list.size();
        } catch (Exception ex) {
            Logger.getLogger(accSalesOrderImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getPurchaseOrderDetails:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, count);
    }
    
    /**
     * Check Purchase Order and Get Purchase Return Quantity for PO->PI->GR->PR flow 
     * @param requestParams : PurchaseOrderID and Company ID
     * @return returnQuantity of Purchase Return
     * @throws ServiceException 
     */
    @Override
    public double checkPurchaseReturnAndgetReturnQuantity(JSONObject requestParams) throws ServiceException {
        List list = null;
        double result = 0;
        try {
            String query = "";
            String companyID = "";
            String purchaseOrderDetailsID = "";
            if (requestParams.has(Constants.companyid)) {
                companyID = requestParams.optString(Constants.companyid, "");
            }
            if (requestParams.has("purchaseOrderDetailsID")) {
                purchaseOrderDetailsID = requestParams.optString("purchaseOrderDetailsID", "");
            }
            
            query = "select sum(prd.returnquantity) from purchaseorder po, podetails pod , grdetails pid , grodetails grd , prdetails prd "
                    + "where po.id = pod.purchaseorder and "
                    + "pod.id = pid.purchaseorderdetail and "
                    + "pid.id = grd.videtails and "
                    + "grd.id = prd.grdetails and "
                    + "prd.company = ? and pod.id = ? group by pod.id";
            list = executeSQLQuery(query, new Object[]{companyID,purchaseOrderDetailsID});
            
            result = (!list.isEmpty()) ? (Double) list.get(0) : 0;
        } catch (ServiceException ex) {
            Logger.getLogger("checkPurchaseReturnAndgetReturnQuantity").log(Level.SEVERE, null, ex);
        }
        return authHandler.roundQuantity(result,requestParams.optString(Constants.companyid, ""));
    }
    
    /*--Function is Used to Update Balance Quantity of Requisition Detail(Linked with PO i.e PR->PO) while linking , unlinking or Deleting PR----- */
    public KwlReturnObject updateBalanceQuantityOfRequisitionDetail(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            double quantityUsedInpodetail = 0;
            String query = "";
            boolean unlinkOrDelete = false;

            if (requestParams.containsKey("unlinkOrDelete") && requestParams.get("unlinkOrDelete") != null && requestParams.get("unlinkOrDelete") != "") {
                unlinkOrDelete = (Boolean) requestParams.get("unlinkOrDelete");
            }
            if (unlinkOrDelete) {
                query = "update PurchaseRequisitionDetail set balanceqty = balanceqty+? where ID=? and company.companyID=?";
            } else {
                query = "update PurchaseRequisitionDetail set balanceqty = balanceqty-? where ID=? and company.companyID=?";
            }

            if (requestParams.containsKey("quantityUsedInpodetail") && requestParams.get("quantityUsedInpodetail") != null && requestParams.get("quantityUsedInpodetail") != "") {
                quantityUsedInpodetail = (Double) requestParams.get("quantityUsedInpodetail");
            }
            String requisitiondetailID = (String) requestParams.get("requisitiondetails");
            String companyid = (String) requestParams.get("companyid");
            int numRows = executeUpdate(query, new Object[]{quantityUsedInpodetail, requisitiondetailID, companyid});

        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.updateDeliveryOrderStatus:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }
    @Override
    public KwlReturnObject getLinkedSO(JSONObject request) throws ServiceException {
        List list = null;
        int count = 0;
        ArrayList paramList = new ArrayList();
        try {
            String soId = request.optString("docid", "");
            String query = "select linkeddocid from polinking where moduleid=20 and docid=?";
            paramList.add(soId);
            list = executeSQLQuery(query, paramList.toArray());
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getLinkedSO:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
    
    @Override
    public KwlReturnObject getPurchaseOrderDetailsTermMapForVersion(Map<String, Object> mapData) throws ServiceException {
        List<Object> list = new ArrayList<Object>();
        List param = new ArrayList();
        String query = "select * from purchaseorderdetailstermmap where podetails=? ";
        String podetailsid = mapData.get("podetails").toString();
        param.add(podetailsid);

        list = executeSQLQuery(query, param.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public void savePurchaseOrderVersionTermMap(PurchaseOrderTermMap potm, PurchaseOrderVersion pov) throws ServiceException {
        List list = new ArrayList();
        try {
            PurchaseOrderVersionTermMap vtermmap = new PurchaseOrderVersionTermMap();
            vtermmap.setTerm(potm.getTerm());
            vtermmap.setTermamount(potm.getTermamount());
            vtermmap.setPercentage(potm.getPercentage());
            vtermmap.setPurchaseOrderVersion(pov);
            vtermmap.setCreator(potm.getCreator());
            vtermmap.setCreatedOn(potm.getCreatedOn());
            saveOrUpdate(vtermmap);
            list.add(vtermmap);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accGoodsReceiptImpl.saveInvoiceTermMap : " + ex.getMessage(), ex);
        }
    }

    @Override
    public KwlReturnObject getPurchaseOrderVersionDetailsTermMap(Map<String, Object> mapData) throws ServiceException {
        List<Object> list = new ArrayList<Object>();
        List param = new ArrayList();
        String query = "from PurchaseOrderVersionDetailsTermMap ";
        String condition = "";
        String orderby = " order by term.termSequence ";
        if (mapData.containsKey("povdetails") && mapData.get("povdetails") != null) {
            String podetailsid = mapData.get("povdetails").toString();
            condition += " povdetails.ID = ? ";
            param.add(podetailsid);
        }
        if (mapData.containsKey("termtype") && mapData.get("termtype") != null) {
            if (!StringUtil.isNullOrEmpty(condition)) {
                condition += " and ";
            }
            condition += " term.termType = ? ";
            param.add(mapData.get("termtype"));
        }
        if (mapData.containsKey("productid") && mapData.get("productid") != null) {
            if (!StringUtil.isNullOrEmpty(condition)) {
                condition += " and ";
            }
            condition += " product.ID = ? ";
            param.add(mapData.get("productid"));
        }
        if (!StringUtil.isNullOrEmpty(condition)) {
            query += " where " + condition;
        }
        if (mapData.containsKey("orderbyadditionaltax") && mapData.get("orderbyadditionaltax") != null) {
            orderby += " , term.isAdditionalTax ";
        }
        orderby += " ASC ";
        query += orderby;
        list = executeQuery(query, param.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public KwlReturnObject getPurchaseOrderDetailsForVersion(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from PurchaseOrderDetail";
        return buildNExecuteQuery(query, requestParams);
    }

    @Override
    public KwlReturnObject getExpensePODetailsForVersion(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from ExpensePODetail";
        return buildNExecuteQuery(query, requestParams);
    }

    public KwlReturnObject getPurchaseOrderVersionDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from PurchaseOrderVersionDetails";
        return buildNExecuteQuery(query, requestParams);
    }

    public KwlReturnObject getExpensePurchaseOrderVersionDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from ExpensePOVersionDetails";
        return buildNExecuteQuery(query, requestParams);
    }

    public KwlReturnObject saveExpensePurchaseOrderVersionDetails(Map<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            ExpensePOVersionDetails epod = new ExpensePOVersionDetails();

            if (dataMap.containsKey("srno") && dataMap.get("srno") != null) {
                epod.setSrno((Integer) dataMap.get("srno"));
            }
            if (dataMap.containsKey("rate") && dataMap.get("rate") != null) {
                epod.setRate((Double) dataMap.get("rate"));
            }
            if (dataMap.containsKey("isdebit") && dataMap.get("isdebit") != null) {
                epod.setIsdebit((Boolean) dataMap.get("isdebit"));
            }
            if (dataMap.containsKey("rateincludinggstex") && dataMap.get("rateincludinggstex") != null) {
                epod.setRateIncludingGst((Double) dataMap.get("rateincludinggstex"));
            }
            if (dataMap.containsKey("calamount") && dataMap.get("calamount") != null) {
                epod.setAmount((Double) dataMap.get("calamount"));
            }
            if (dataMap.containsKey("desc") && dataMap.get("desc") != null) {
                epod.setDescription((String) dataMap.get("desc"));
            }
            if (dataMap.containsKey("rowtaxamount") && dataMap.get("rowtaxamount") != null) {
                epod.setRowTaxAmount((Double) dataMap.get("rowtaxamount"));
            }
            if (dataMap.containsKey("poid") && dataMap.get("poid") != null) {
                PurchaseOrderVersion po = StringUtil.isNullOrEmpty(dataMap.get("poid").toString()) ? null : (PurchaseOrderVersion) get(PurchaseOrderVersion.class, (String) dataMap.get("poid"));
                epod.setPurchaseOrderVersion(po);
            }
            if (dataMap.containsKey("taxid") && dataMap.get("taxid") != null) {
                Tax tax = StringUtil.isNullOrEmpty(dataMap.get("taxid").toString()) ? null : (Tax) get(Tax.class, (String) dataMap.get("taxid"));
                epod.setTax(tax);
            }
            if (dataMap.containsKey("discountid") && dataMap.get("discountid") != null) {
                Discount discount = StringUtil.isNullOrEmpty(dataMap.get("discountid").toString()) ? null : (Discount) get(Discount.class, (String) dataMap.get("discountid"));
                epod.setDiscount(discount);
            }
            if (dataMap.containsKey("accountid") && dataMap.get("accountid") != null) {
                Account account = StringUtil.isNullOrEmpty(dataMap.get("accountid").toString()) ? null : (Account) get(Account.class, (String) dataMap.get("accountid"));
                epod.setAccount(account);
            }
            if (dataMap.containsKey("companyid") && dataMap.get("companyid") != null) {
                Company cmp = StringUtil.isNullOrEmpty(dataMap.get("companyid").toString()) ? null : (Company) get(Company.class, (String) dataMap.get("companyid"));
                epod.setCompany(cmp);
            }
            save(epod);
            list.add(epod);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.saveExpensePurchaseOrderDetails : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    @Override
    public KwlReturnObject getPurchaseOrderVersionTermMap(HashMap<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        try {
            String purchaseOrderID = hm.get("purchaseOrderVersion").toString();
            String query = "from PurchaseOrderVersionTermMap where purchaseOrderVersion.ID = ?";
            list = executeQuery(query, new Object[]{purchaseOrderID});
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getPurchaseOrderTermMap:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public KwlReturnObject getPurchaseOrderVersionCount(String poid, String companyid) throws ServiceException {
        try {
            List list = new ArrayList();
            int count = 0;
            String q = "from PurchaseOrderVersion where purchaseOrder.ID=? and company.companyID=?";
            list = executeQuery(q, new Object[]{poid, companyid});
            count = list.size();
            return new KwlReturnObject(true, "", null, list, count);

        } catch (Exception ex) {
            throw ServiceException.FAILURE("accSalesOrderImpl.getPurchaseOrderVersionCount:" + ex.getMessage(), ex);
        }
    }

    @Override
    public KwlReturnObject updateExpensePOVersionDetailsCustomData(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            String quotationRefId = (String) requestParams.get("expensepodetailscustomdataref");
            ExpensePOVersionDetails quotationDetail = (ExpensePOVersionDetails) get(ExpensePOVersionDetails.class, quotationRefId);
            if (requestParams.containsKey("expensepodetailscustomdataref")) {
                ExpensePOVersionDetailCustomData expensePOVersionDetailsCustomData = null;
                expensePOVersionDetailsCustomData = (ExpensePOVersionDetailCustomData) get(ExpensePOVersionDetailCustomData.class, (String) requestParams.get("expensepodetailscustomdataref"));
                quotationDetail.setExpensePOVersionDetailCustomData(expensePOVersionDetailsCustomData);
            }
            saveOrUpdate(quotationDetail);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accSalesOrderImpl.updateExpensePOVersionDetailsCustomData:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }

    @Override
    public KwlReturnObject updatePurchaseOrderVersionDetailsCustomData(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            String quotationRefId = (String) requestParams.get("podetailscustomdataref");
            PurchaseOrderVersionDetails quotationDetail = (PurchaseOrderVersionDetails) get(PurchaseOrderVersionDetails.class, quotationRefId);
            if (requestParams.containsKey("podetailscustomdataref")) {
                PurchaseOrderVersionDetailsCustomData purchaseOrderVersionDetailsCustomData = null;
                purchaseOrderVersionDetailsCustomData = (PurchaseOrderVersionDetailsCustomData) get(PurchaseOrderVersionDetailsCustomData.class, (String) requestParams.get("podetailscustomdataref"));
                quotationDetail.setPoVersionDetailCustomData(purchaseOrderVersionDetailsCustomData);
            }
            saveOrUpdate(quotationDetail);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accSalesOrderImpl.updatePurchaseOrderVersionDetailsCustomData:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }

    @Override
    public KwlReturnObject savePurchaseOrderVersionDetails(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String sodid = (String) dataMap.get("id");

            PurchaseOrderVersionDetails quotationDetail = new PurchaseOrderVersionDetails();
            if (!StringUtil.isNullOrEmpty(sodid)) {
                quotationDetail = (PurchaseOrderVersionDetails) get(PurchaseOrderVersionDetails.class, sodid);
            }

            if (dataMap.containsKey("soid")) {
                PurchaseOrderVersion quotation = dataMap.get("soid") == null ? null : (PurchaseOrderVersion) get(PurchaseOrderVersion.class, (String) dataMap.get("soid"));
                quotationDetail.setPurchaseOrderVersion(quotation);
            }
            if (dataMap.containsKey("srno")) {
                quotationDetail.setSrno((Integer) dataMap.get("srno"));
            }
            if (dataMap.containsKey("desc")) {
                quotationDetail.setDescription((String) dataMap.get("desc"));
            }
            if (dataMap.containsKey("rate")) {
                quotationDetail.setRate((Double) dataMap.get("rate"));
            }
            if (dataMap.containsKey("quantity")) {
                quotationDetail.setQuantity((Double) dataMap.get("quantity"));
            }
            if (dataMap.containsKey("uomid")) {
                quotationDetail.setUom((UnitOfMeasure) get(UnitOfMeasure.class, dataMap.get("uomid").toString()));
            }
            if (dataMap.containsKey("baseuomquantity") && dataMap.get("baseuomquantity") != null && dataMap.get("baseuomquantity") != "") {
                quotationDetail.setBaseuomquantity((Double) dataMap.get("baseuomquantity"));

            }
            if (dataMap.containsKey("baseuomrate") && dataMap.get("baseuomrate") != null && dataMap.get("baseuomrate") != "") {
                quotationDetail.setBaseuomrate((Double) dataMap.get("baseuomrate"));
            }
            if (dataMap.containsKey("remark")) {
                quotationDetail.setRemark(StringUtil.DecodeText(StringUtil.isNullOrEmpty((String) dataMap.get("remark")) ? "" : (String) dataMap.get("remark")));
            }
            if (dataMap.containsKey("dependentType")) {
                quotationDetail.setDependentType((String) dataMap.get("dependentType"));
            }
            if (dataMap.containsKey("inouttime")) {
                quotationDetail.setInouttime((String) dataMap.get("inouttime"));
            }
            if (dataMap.containsKey("showquantity")) {
                quotationDetail.setShowquantity((String) dataMap.get("showquantity"));
            }
            if (dataMap.containsKey("discount")) {
                quotationDetail.setDiscount((Double) dataMap.get("discount"));
            }
            if (dataMap.containsKey("productid")) {
                Product product = dataMap.get("productid") == null ? null : (Product) get(Product.class, (String) dataMap.get("productid"));
                quotationDetail.setProduct(product);
            }

            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid"));
                quotationDetail.setCompany(company);
            }
            if (dataMap.containsKey("discountispercent")) {
                quotationDetail.setDiscountispercent((Integer) dataMap.get("discountispercent"));
            } else {
                quotationDetail.setDiscountispercent(1);
            }

            if (dataMap.containsKey("rowTaxAmount")) {
                double rowTaxAmount = (Double) dataMap.get("rowTaxAmount");
                quotationDetail.setRowTaxAmount(rowTaxAmount);
            }
            if (dataMap.containsKey("rowTermAmount")) {
                double rowTaxAmount = (Double) dataMap.get("rowTermAmount");
                quotationDetail.setRowTermAmount(rowTaxAmount);
            }
            if (dataMap.containsKey("rowtax")) {
                Tax rowtax = (Tax) dataMap.get("rowtax");
                quotationDetail.setTax(rowtax);
            }
            if (dataMap.containsKey("invstoreid")) {
                quotationDetail.setInvstoreid((String) dataMap.get("invstoreid"));
            } else {
                quotationDetail.setInvstoreid("");
            }
            if (dataMap.containsKey("invlocationid")) {
                quotationDetail.setInvlocid((String) dataMap.get("invlocationid"));
            } else {
                quotationDetail.setInvlocid("");
            }
            if (dataMap.containsKey("OtherTermNonTaxableAmount")) {
                quotationDetail.setOtherTermNonTaxableAmount((double) dataMap.get("OtherTermNonTaxableAmount"));
            }
            if (dataMap.containsKey("vqdetail")) {
                quotationDetail.setVqdetail((VendorQuotationDetail) dataMap.get("vqdetail"));
            }
            if (dataMap.containsKey("purchaseRequisition")) {
                quotationDetail.setPurchaseRequisitionDetailId((String)dataMap.get("purchaseRequisition"));
            }
            if (dataMap.containsKey("salesOrderDetailid")) {
                quotationDetail.setSalesorderdetailid((String) dataMap.get("salesOrderDetailid"));
            }
            if (dataMap.containsKey("rateincludegst")) {
                quotationDetail.setRateincludegst((double) dataMap.get("rateincludegst"));
            }
            if (dataMap.containsKey("balanceqty")) {
                quotationDetail.setBalanceqty((double) dataMap.get("balanceqty"));
            }
            saveOrUpdate(quotationDetail);
            list.add(quotationDetail);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("savePurchaseOrderVersionDetails : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    @Override
    public KwlReturnObject savePurchaseOrderVersion(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String soid = (String) dataMap.get("id");
            PurchaseOrderVersion purchaseorderversion = new PurchaseOrderVersion();
            if (StringUtil.isNullOrEmpty(soid)) {
                purchaseorderversion.setDeleted(false);
                if (dataMap.containsKey("createdby")) {
                    User createdby = dataMap.get("createdby") == null ? null : (User) get(User.class, (String) dataMap.get("createdby"));
                    purchaseorderversion.setCreatedby(createdby);
                }
                if (dataMap.containsKey("modifiedby")) {
                    User modifiedby = dataMap.get("modifiedby") == null ? null : (User) get(User.class, (String) dataMap.get("modifiedby"));
                    purchaseorderversion.setModifiedby(modifiedby);
                }
                if (dataMap.containsKey("createdon")) {
                    purchaseorderversion.setCreatedon((Long) dataMap.get("createdon"));
                }
                if (dataMap.containsKey("updatedon")) {
                    purchaseorderversion.setUpdatedon((Long) dataMap.get("updatedon"));
                }
            }
            if (dataMap.containsKey(Constants.SEQFORMAT)) {
                purchaseorderversion.setSeqformat((SequenceFormat) get(SequenceFormat.class, (String) dataMap.get(Constants.SEQFORMAT)));
            }
            if (dataMap.containsKey(Constants.SEQNUMBER)) {
                purchaseorderversion.setSeqnumber(Integer.parseInt(dataMap.get(Constants.SEQNUMBER).toString()));
            }
            if (dataMap.containsKey(Constants.isApplyTaxToTerms) && dataMap.get(Constants.isApplyTaxToTerms) != null) {
                purchaseorderversion.setApplyTaxToTerms((Boolean) dataMap.get(Constants.isApplyTaxToTerms));
            }
            if (dataMap.containsKey(Constants.DATEPREFIX) && dataMap.get(Constants.DATEPREFIX) != null) {
                purchaseorderversion.setDatePreffixValue((String) dataMap.get(Constants.DATEPREFIX));
            }
            if (dataMap.containsKey(Constants.DATESUFFIX) && dataMap.get(Constants.DATESUFFIX) != null) {
                purchaseorderversion.setDateSuffixValue((String) dataMap.get(Constants.DATESUFFIX));
            }
            if (dataMap.containsKey("shipLength")) {
                purchaseorderversion.setShiplength((Double) dataMap.get("shipLength"));
            }
            if (dataMap.containsKey("invoicetype")) {
                purchaseorderversion.setInvoicetype((String) dataMap.get("invoicetype"));
            }
            if (dataMap.containsKey("entrynumber")) {
                purchaseorderversion.setPurchaseOrderNumber((String) dataMap.get("entrynumber"));
            }
            if (dataMap.containsKey("autogenerated")) {
                purchaseorderversion.setAutoGenerated((Boolean) dataMap.get("autogenerated"));
            }
            if (dataMap.containsKey("perDiscount")) {
                purchaseorderversion.setPerDiscount((Boolean) dataMap.get("perDiscount"));
            }
            if (dataMap.containsKey("discount")) {
                purchaseorderversion.setDiscount((Double) dataMap.get("discount"));
            }
            if (dataMap.containsKey("memo")) {
                purchaseorderversion.setMemo((String) dataMap.get("memo"));
            }
            if (dataMap.containsKey("posttext")) {
                purchaseorderversion.setPostText((String) dataMap.get("posttext"));
            }
            if (dataMap.containsKey("isExpenseType")) {
                purchaseorderversion.setIsExpenseType((boolean) dataMap.get("isExpenseType"));
            }
            if (dataMap.containsKey("vendorid")) {
                Vendor vendor = dataMap.get("vendorid") == null ? null : (Vendor) get(Vendor.class, (String) dataMap.get("vendorid"));
                purchaseorderversion.setVendor(vendor);
            }
            if (dataMap.containsKey("term")) {
                purchaseorderversion.setTerm((Term) dataMap.get("term"));
            }
            if (dataMap.containsKey("agent")) {
                MasterItem salesPerson = dataMap.get("agent") == null ? null : (MasterItem) get(MasterItem.class, (String) dataMap.get("agent"));
                purchaseorderversion.setMasteragent(salesPerson);
            }
            if (dataMap.containsKey("purchaseOrderID")) {
                PurchaseOrder po = dataMap.get("purchaseOrderID") == null ? null : (PurchaseOrder) get(PurchaseOrder.class, (String) dataMap.get("purchaseOrderID"));
                purchaseorderversion.setPurchaseOrder(po);
            }
            if (dataMap.containsKey("orderdate")) {
                purchaseorderversion.setOrderDate((Date) dataMap.get("orderdate"));
            }
            if (dataMap.containsKey("duedate")) {
                purchaseorderversion.setDueDate((Date) dataMap.get("duedate"));
            }
            if (dataMap.containsKey("shipdate")) {
                purchaseorderversion.setShipdate((Date) dataMap.get("shipdate"));
            }
            if (dataMap.containsKey("shipvia")) {
                purchaseorderversion.setShipvia((String) dataMap.get("shipvia"));
            }
            if (dataMap.containsKey("fob")) {
                purchaseorderversion.setFob((String) dataMap.get("fob"));
            }
            if (dataMap.containsKey("isopen")) {
                purchaseorderversion.setIsOpen((boolean) dataMap.get("isopen"));
            }
            if (dataMap.containsKey("totalamount")) {
                purchaseorderversion.setTotalamount((double) dataMap.get("totalamount"));
            }
            if (dataMap.containsKey("totalamountinbase")) {
                purchaseorderversion.setTotalamountinbase((double) dataMap.get("totalamountinbase"));
            }
            if (dataMap.containsKey("taxid")) {
                Tax tax = dataMap.get("taxid") == null ? null : (Tax) get(Tax.class, (String) dataMap.get("taxid"));
                purchaseorderversion.setTax(tax);
            }
            if (dataMap.containsKey("costCenterId")) {
                CostCenter costCenter = (CostCenter) dataMap.get("costCenterId");
                purchaseorderversion.setCostcenter(costCenter);
            } else {
                purchaseorderversion.setCostcenter(null);
            }
            if (dataMap.containsKey("isfavourite")) {
                if (dataMap.get("isfavourite") != null) {
                    purchaseorderversion.setFavourite(Boolean.parseBoolean(dataMap.get("isfavourite").toString()));
                }
            }
            if (dataMap.containsKey(Constants.MARKED_PRINTED)) {
                if (dataMap.get(Constants.MARKED_PRINTED) != null) {
                    purchaseorderversion.setPrinted(Boolean.parseBoolean(dataMap.get(Constants.MARKED_PRINTED).toString()));
                }
            }
            if (dataMap.containsKey("billto")) {
                if (dataMap.get("billto") != null) {
                    purchaseorderversion.setBillTo((String) dataMap.get("billto"));
                }
            }
            if (dataMap.containsKey("shipaddress")) {
                if (dataMap.get("shipaddress") != null) {
                    purchaseorderversion.setShipTo((String) dataMap.get("shipaddress"));
                }
            }
            if (dataMap.containsKey("istemplate")) {
                purchaseorderversion.setIstemplate((Integer) dataMap.get("istemplate"));
            } else {
                purchaseorderversion.setIstemplate(0);
            }
            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid"));
                purchaseorderversion.setCompany(company);
            }
            if (dataMap.containsKey("createdon")) {
                purchaseorderversion.setCreatedon((Long) dataMap.get("createdon"));
            }
            if (dataMap.containsKey("updatedon")) {
                purchaseorderversion.setUpdatedon((Long) dataMap.get("updatedon"));
            }
            if (dataMap.containsKey("createdby")) {
                User createdby = dataMap.get("createdby") == null ? null : (User) get(User.class, (String) dataMap.get("createdby"));
                purchaseorderversion.setCreatedby(createdby);
            }
            if (dataMap.containsKey("modifiedby")) {
                User modifiedby = dataMap.get("modifiedby") == null ? null : (User) get(User.class, (String) dataMap.get("modifiedby"));
                purchaseorderversion.setModifiedby(modifiedby);
            }
            if (dataMap.containsKey("sodetails")) {
                if (dataMap.get("sodetails") != null) {
                    purchaseorderversion.setRows((Set<PurchaseOrderVersionDetails>) dataMap.get("sodetails"));
                }
            }
            if (dataMap.containsKey("currencyid")) {
                purchaseorderversion.setCurrency((KWLCurrency) get(KWLCurrency.class, (String) dataMap.get("currencyid")));
            }
            if (dataMap.containsKey("billshipAddressid")) {
                BillingShippingAddresses bsa = dataMap.get("billshipAddressid") == null ? null : (BillingShippingAddresses) get(BillingShippingAddresses.class, (String) dataMap.get("billshipAddressid"));
                purchaseorderversion.setBillingShippingAddresses(bsa);
            }
            if (dataMap.containsKey("gstapplicable") && dataMap.get("gstIncluded") != null) {
                purchaseorderversion.setGstIncluded((Boolean) dataMap.get("gstIncluded"));
            }
            if (dataMap.containsKey("externalCurrencyRate")) {
                purchaseorderversion.setExternalCurrencyRate((Double) dataMap.get("externalCurrencyRate"));
            }
            if (dataMap.containsKey("version")) {
                purchaseorderversion.setVersion((String) dataMap.get("version"));
            }
            if (dataMap.containsKey("shipLength")) {
                purchaseorderversion.setShiplength((double) dataMap.get("shipLength"));
            }
            if (dataMap.containsKey("invoicetype")) {
                purchaseorderversion.setInvoicetype((String) dataMap.get("invoicetype"));
            }
            if (dataMap.containsKey("isConsignment") && dataMap.get("isConsignment") != null) {
                purchaseorderversion.setIsconsignment((Boolean) dataMap.get("isConsignment"));
            }
            if (dataMap.containsKey(Constants.roundingadjustmentamountinbase) && dataMap.get(Constants.roundingadjustmentamountinbase) != null) {
                purchaseorderversion.setRoundingadjustmentamountinbase((double) dataMap.get(Constants.roundingadjustmentamountinbase));
            }

            if (dataMap.containsKey(Constants.roundingadjustmentamount) && dataMap.get(Constants.roundingadjustmentamount) != null) { // quotation amount
                purchaseorderversion.setRoundingadjustmentamount((double) dataMap.get(Constants.roundingadjustmentamount));
            }
            if (dataMap.containsKey(Constants.IsRoundingAdjustmentApplied) && dataMap.get(Constants.IsRoundingAdjustmentApplied) != null) {  // If New GST Appliled
                purchaseorderversion.setIsRoundingAdjustmentApplied((Boolean) dataMap.get(Constants.IsRoundingAdjustmentApplied));
            }
            if (dataMap.containsKey("discountinbase") && dataMap.get("discountinbase") != null) { // Discount in Base
                purchaseorderversion.setDiscountinbase((double) dataMap.get("discountinbase"));
            }

            if (dataMap.containsKey("totallineleveldiscount") && dataMap.get("totallineleveldiscount") != null) { // Discount
                purchaseorderversion.setTotallineleveldiscount((double) dataMap.get("totallineleveldiscount"));
            }
            if (dataMap.containsKey(Constants.termsincludegst)) {
                purchaseorderversion.setTermsincludegst((Boolean) dataMap.get(Constants.termsincludegst));
            }
            if (dataMap.containsKey(PurchaseOrder.DATEOFSHIPMENT) && !StringUtil.isNullObject(dataMap.get(PurchaseOrder.DATEOFSHIPMENT))) {
                purchaseorderversion.setDateofshipment((Date) dataMap.get(PurchaseOrder.DATEOFSHIPMENT));
            }
            if (dataMap.containsKey(PurchaseOrder.JOBWORKLOCATIONID) && !StringUtil.isNullOrEmpty((String) dataMap.get(PurchaseOrder.JOBWORKLOCATIONID))) {
                InventoryLocation loc = (InventoryLocation) dataMap.get(PurchaseOrder.JOBWORKLOCATIONID);
                if (loc != null) {
                    purchaseorderversion.setJobworklocation(loc);
                }
            }
            if (dataMap.containsKey(PurchaseOrder.SHIPMENTROUTE) && !StringUtil.isNullOrEmpty((String) dataMap.get(PurchaseOrder.SHIPMENTROUTE))) {
                purchaseorderversion.setShipmentroute((String) dataMap.get(PurchaseOrder.SHIPMENTROUTE));
            }
            if (dataMap.containsKey(PurchaseOrder.GATEPASS) && !StringUtil.isNullOrEmpty((String) dataMap.get(PurchaseOrder.GATEPASS))) {
                purchaseorderversion.setGatepass((String) dataMap.get(PurchaseOrder.GATEPASS));
            }

            if (dataMap.containsKey(PurchaseOrder.OTHERREMARKS) && !StringUtil.isNullOrEmpty((String) dataMap.get(PurchaseOrder.OTHERREMARKS))) {
                purchaseorderversion.setOtherremarks((String) dataMap.get(PurchaseOrder.OTHERREMARKS));
            }

            if (dataMap.containsKey(PurchaseOrder.PRODUCTID) && !StringUtil.isNullOrEmpty((String) dataMap.get(PurchaseOrder.PRODUCTID))) {
                Product prod = (Product) dataMap.get(PurchaseOrder.PRODUCTID);
                if (prod != null) {
                    purchaseorderversion.setProduct(prod);
                }
            }
            if (dataMap.containsKey(PurchaseOrder.WORKORDERID) && !StringUtil.isNullOrEmpty((String) dataMap.get(PurchaseOrder.WORKORDERID))) {
                purchaseorderversion.setWorkorderid(PurchaseOrder.WORKORDERID);
            }
            if (dataMap.containsKey(PurchaseOrder.PRODUCTQUANTITY) && !StringUtil.isNullOrEmpty(dataMap.get(PurchaseOrder.PRODUCTQUANTITY).toString())) {
                purchaseorderversion.setProductquantity((Double) dataMap.get(PurchaseOrder.PRODUCTQUANTITY));
            }
            if (dataMap.containsKey("isJobWorkOutOrder") && dataMap.get("isJobWorkOutOrder") != null) {
                purchaseorderversion.setIsJobWorkOutOrder((Boolean) dataMap.get("isJobWorkOutOrder"));

            }
            if (dataMap.containsKey("gstapplicable") && dataMap.get("gstapplicable") != null) {  // If New GST Appliled
                purchaseorderversion.setIsIndGSTApplied((Boolean) dataMap.get("gstapplicable"));
            }

            if (dataMap.containsKey("isLinkedSOBlocked") && dataMap.get("isLinkedSOBlocked") != null) {  // If New GST Appliled
                purchaseorderversion.setLinkedSOBlocked((Boolean) dataMap.get("isLinkedSOBlocked"));
            }
            if (dataMap.containsKey("supplierInvoiceNo") && dataMap.get("supplierInvoiceNo") != null) {  // If New GST Appliled
                purchaseorderversion.setSupplierInvoiceNo((String) dataMap.get("supplierInvoiceNo"));
            }


            purchaseorderversion.setTemplateid((Projreport_Template) get(Projreport_Template.class, Constants.HEADER_IMAGE_TEMPLATE_ID));
            saveOrUpdate(purchaseorderversion);
            list.add(purchaseorderversion);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("savePurchaseOrderVersion : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    @Override
    public KwlReturnObject updatePurchaseOrderVersionCustomData(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            String purchaseordercustomdataref = (String) requestParams.get("purchaseordercustomdataref");
            PurchaseOrderVersion purchaseOrderVersion = (PurchaseOrderVersion) get(PurchaseOrderVersion.class, purchaseordercustomdataref);
            if (requestParams.containsKey("purchaseordercustomdataref")) {
                PurchaseOrderVersionCustomData poVersionCustomData = null;
                poVersionCustomData = (PurchaseOrderVersionCustomData) get(PurchaseOrderVersionCustomData.class, (String) requestParams.get("purchaseordercustomdataref"));
                purchaseOrderVersion.setPoVersionCustomData(poVersionCustomData);
            }
            saveOrUpdate(purchaseOrderVersion);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accSalesOrderImpl.updatePurchaseOrderVersionCustomData:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }

    @Override
    public KwlReturnObject getPurchaseOrderVersions(HashMap<String, Object> request) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        try {
            DateFormat df = (DateFormat) request.get(Constants.df);
            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            String ss = (String) request.get(Constants.ss);
            boolean isFixedAsset = false;
            ArrayList params = new ArrayList();

            if (request.containsKey("isFixedAsset") && request.get("isFixedAsset") != null) {
                isFixedAsset = (Boolean) request.get("isFixedAsset");
            }
            params.add((String) request.get(Constants.companyKey));
            String condition = " where po.deleted=false and po.company.companyID=?";
            if (!StringUtil.isNullOrEmpty(ss)) {
                for (int i = 0; i < 4; i++) {
                    params.add("%" + ss + "%");
                }
                condition += " and (purchaseOrderNumber like ? or version like ? or po.memo like ? or po.vendor.name like ? )";
            }

            String vendorId = (String) request.get("newvendorid");
            if (!StringUtil.isNullOrEmpty(vendorId)) {
                params.add(vendorId);
                condition += " and po.vendor.ID=?";
            }
            String customerCategoryid = (String) request.get("customerCategoryid");
            if (!StringUtil.isNullOrEmpty(customerCategoryid)) {
                params.add(customerCategoryid);
                condition += " and po.vendor.ID in (select vendorID.ID from VendorCategoryMapping where vendorCategory.ID = ?)";
            }

            if (isFixedAsset) {
                condition += "  and po.fixedAssetPO=1 ";
            } else {
                condition += " and po.fixedAssetPO= 0 ";
            }

            String productid = (String) request.get("productid");
            if (!StringUtil.isNullOrEmpty(productid)) {
                params.add(productid);
                condition += " and povd.product.ID = ? ";
            }
            String productCategoryid = (String) request.get("productCategoryid");
            if (!StringUtil.isNullOrEmpty(productCategoryid)) {
                params.add(productCategoryid);
                condition += " and povd.product.ID in (select productID.ID from ProductCategoryMapping where productCategory.ID = ?) ";
            }

            // Required JOINs based on Filters
            String innerJoin = "";
            if (!StringUtil.isNullOrEmpty(productCategoryid) || !StringUtil.isNullOrEmpty(productid)) {
                innerJoin = " JOIN po.rows povd ";
            }

            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                condition += " and (po.orderDate >=? and po.orderDate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            if (request.containsKey("versionid") && request.get("versionid") != null) {
                String billid = (String) request.get("versionid");
                if (!StringUtil.isNullOrEmpty(billid)) {
                    if (billid.contains(",")) {
                        String poids = AccountingManager.getFilterInString(billid);
                        condition += " and po.purchaseOrder.ID in " + poids;
                    } else {
                        condition += " and po.purchaseOrder.ID=?";
                        params.add(billid);
                    }
                }
            }

            String orderBy = "";
            if (request.containsKey("dir") && request.containsKey("sort")) {
                String Col_Name = request.get("sort").toString();
                String Col_Dir = request.get("dir").toString();
                orderBy += "order by po.purchaseOrderNumber " + Col_Dir;
            }

            String query = "SELECT DISTINCT po.ID from PurchaseOrderVersion po " + innerJoin + condition + orderBy;
            list = executeQuery(query, params.toArray());
            count = list.size();
            if (!StringUtil.isNullOrEmpty(start) && StringUtil.isNullOrEmpty(limit) == false) {
                list = executeQueryPaging(query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }

        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getPurchaseOrderVersions : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    @Override
    public KwlReturnObject getPurchaseOrderTermDetails(String podId) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String query = "from PurchaseOrderTermMap where purchaseOrder.ID =? "; //" order by inv.customerEntry.account.id, inv.invoiceNumber";            
            list = executeQuery(query, new Object[]{podId});
            count = list.size();
        } catch (Exception ex) {
            Logger.getLogger(accPurchaseOrderImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getPurchaseOrderDetails:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, count);
    }

    @Override
    public void savePurchaseOrderVersionTermDetails(HashMap<String, Object> povdtmMap) throws ServiceException {
        try {
            if (povdtmMap != null && !povdtmMap.isEmpty()) {
                PurchaseOrderVersionDetailsTermMap povdtm = new PurchaseOrderVersionDetailsTermMap();
                povdtm.setTermamount((double) povdtmMap.get("termAmount"));
                povdtm.setPercentage((double) povdtmMap.get("percentage"));

                LineLevelTerms terms = (LineLevelTerms) get(LineLevelTerms.class, (String) povdtmMap.get("term"));
                povdtm.setTerm(terms);

                Product product = (Product) get(Product.class, (String) povdtmMap.get("product"));
                povdtm.setProduct(product);

                PurchaseOrderVersionDetails povdetails = (PurchaseOrderVersionDetails) get(PurchaseOrderVersionDetails.class, (String) povdtmMap.get("povdetails"));
                povdtm.setPovdetails(povdetails);


                User creator = (User) get(User.class, (String) povdtmMap.get("creator"));
                povdtm.setCreator(creator);
                if (povdtmMap.containsKey("createon") && povdtmMap.get("createon") != null) {
                    povdtm.setCreatedOn(Long.parseLong(povdtmMap.get("createon").toString()));
                }
                povdtm.setPurchaseValueOrSaleValue((double) povdtmMap.get("purchseorsales"));
                povdtm.setDeductionOrAbatementPercent((double) povdtmMap.get("decutionorAbt"));
                povdtm.setAssessablevalue((double) povdtmMap.get("assessablevalue"));
                povdtm.setTaxType((int) povdtmMap.get("taxtype"));
                povdtm.setIsGSTApplied((boolean) povdtmMap.get("isgstapplied"));

                if (povdtmMap.containsKey("entitybasedLinelevelTerm") && povdtmMap.get("entitybasedLinelevelTerm") != null) {
                    EntitybasedLineLevelTermRate entitybasedLinelevelTerm = (EntitybasedLineLevelTermRate) get(EntitybasedLineLevelTermRate.class, (String) povdtmMap.get("entitybasedLinelevelTerm"));
                    povdtm.setEntitybasedLineLevelTermRate(entitybasedLinelevelTerm);
                }

                saveOrUpdate(povdtm);
            }

        } catch (Exception ex) {
            Logger.getLogger(accPurchaseOrderImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getPurchaseOrderDetails:" + ex.getMessage(), ex);
        }
    }
    
    /**
     * To Purchase Order Version Entry record
     * @param purchaseorderid as poid
     * @param companyid
     * @return KwlReturnObject
     * @throws ServiceException 
     */
    public KwlReturnObject deletePurchaseOrderVersoning(HashMap<String, Object> requestParams) throws ServiceException {
        String poid = requestParams.get("poid").toString();
        String companyid = requestParams.get("companyid").toString();
        try{
            String query = "Select id from purchaseorderversion where purchaseorder = ? and company=?";
            List numRows = executeSQLQuery(query, new Object[]{poid, companyid});
            Iterator itr = numRows.iterator();
            while (itr.hasNext()) {
                String row = (String) itr.next();
                PurchaseOrderVersion po = (PurchaseOrderVersion) get(PurchaseOrderVersion.class, row);
                boolean isExpence = po.isIsExpenseType();
                if (isExpence) {
                    Set<ExpensePOVersionDetails> rows = po.getExpenserows();
                    for (ExpensePOVersionDetails expensePOVersionDetail : rows) {
                        ExpensePOVersionDetailCustomData epovcd = expensePOVersionDetail.getExpensePOVersionDetailCustomData();
                        if (epovcd != null) {
                            String deleteExpenseDetailCustomData = "Delete From expensepoversiondetailcustomdata where expensePOVersionDetailID=?";
                            executeSQLUpdate(deleteExpenseDetailCustomData, new Object[]{epovcd.getExpensePOVersionDetailID()});
                        }
                        String deleteExpenseDetail = "Delete From expensepoversiondetails where id=?";
                        executeSQLUpdate(deleteExpenseDetail, new Object[]{expensePOVersionDetail.getID()});
                    }
                    String purchaseorderversioncustomdata = "Delete From purchaseorderversioncustomdata where poID=?";
                    executeSQLUpdate(purchaseorderversioncustomdata, new Object[]{po.getPoVersionCustomData().getPoID()});
                } else {
                    Set<PurchaseOrderVersionDetails> rows = po.getRows();
                    for (PurchaseOrderVersionDetails expensePOVersionDetail : rows) {
                        PurchaseOrderVersionDetailsCustomData povcd = expensePOVersionDetail.getPoVersionDetailCustomData();
                        if (povcd != null) {
                            String deleteExpenseDetailCustomData = "Delete From purchaseorderversiondetailcustomdata where poversionDetailID=?";
                            executeSQLUpdate(deleteExpenseDetailCustomData, new Object[]{povcd.getPoversionDetailID()});
                        }

                        String deletePoTermDetailData = "Delete From purchaseorderversiondetailstermmap where povdetails=?";
                        executeSQLUpdate(deletePoTermDetailData, new Object[]{expensePOVersionDetail.getID()});

                        String deletePODetail = "Delete From poversiondetails where id=?";
                        executeSQLUpdate(deletePODetail, new Object[]{expensePOVersionDetail.getID()});
                    }
                }

                String poversioncustomData = "Delete From purchaseorderversioncustomdata where poID=?";
                if(po!=null && po.getPoVersionCustomData()!=null){
                    executeSQLUpdate(poversioncustomData, new Object[]{po.getPoVersionCustomData().getPoID()});
                }

                String poversion = "Delete From purchaseorderversion where id=?";
                executeSQLUpdate(poversion, new Object[]{po.getID()});
            }
        }catch(Exception ex){
            Logger.getLogger("deletePurchaseOrderVersoning").log(Level.SEVERE, null, ex);
        }
        return new KwlReturnObject(true, "Purchase Order Version Entry has been deleted successfully.", null, null, 0);
    }    
    
    @Override
    public double getPOStatusOnBalanceQty(String poid, String companyId) throws ServiceException {
        List list = null;
        Double count = 0d;
        try {
            String query = "select sum(pod.balanceqty) from purchaseorder po inner join podetails pod on po.id=pod.purchaseorder where pod.purchaseorder=? and pod.balanceqty > 0 and po.company=? group by po.id";
            list = executeSQLQuery(query, new Object[]{poid, companyId});
            if (list != null && !list.isEmpty()) {
                for (int j = 0; j < list.size(); j++) {
                    count += (Double) list.get(j);
                }
            }
        } catch(Exception ex) {
            Logger.getLogger(accPurchaseOrderImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getPOStatusOnBalanceQty:" + ex.getMessage(), ex);
        }
        return authHandler.roundQuantity(count,companyId);
    }
}
