/*
 * Copyright (C) 2012  Krawler Information Systems Pvt Ltd
 * All rights reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package com.krawler.spring.accounting.vendor;

import com.krawler.common.admin.Company;
import com.krawler.common.admin.KWLCurrency;
import com.krawler.common.admin.PricingBandMaster;
import com.krawler.common.dao.BaseDAO;
import com.krawler.common.service.ServiceException;
import com.krawler.common.util.Constants;
import com.krawler.common.util.IndiaComplianceConstants;
import com.krawler.common.util.StringUtil;
import com.krawler.esp.utils.ConfigReader;
import com.krawler.spring.common.KwlReturnObject;
import com.krawler.hql.accounting.Account;
import com.krawler.hql.accounting.StaticValues;
import com.krawler.hql.accounting.Term;
import com.krawler.hql.accounting.*;
import com.krawler.hql.accounting.Vendor;
import com.krawler.spring.accounting.account.accAccountDAOImpl;
import com.krawler.spring.accounting.handler.AccountingManager;
import com.krawler.utils.json.base.JSONArray;
import com.krawler.utils.json.base.JSONException;
import com.krawler.utils.json.base.JSONObject;
import java.text.DateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author krawler
 */
public class accVendorDAOImpl extends BaseDAO implements accVendorDAO {

    public KwlReturnObject addVendor(HashMap request) {
        KwlReturnObject result;
        try {
            Vendor vendor = new Vendor();
            if (request.containsKey("creationDate")) {
                vendor.setCreatedOn((Date) request.get("creationDate"));
            }
            if (request.containsKey("accountid")) {
                Account account = (Account) get(Account.class, (String) request.get("accountid"));
                vendor.setAccount(account);
                if (account != null) {
                    String usedin = account.getUsedIn();
                    account.setUsedIn(StringUtil.getUsedInValue(usedin, Constants.Vendor_Default_Account));
                }
            }
            if (request.containsKey(Constants.SEQFORMAT)) {
                vendor.setSeqformat((SequenceFormat) get(SequenceFormat.class, (String) request.get(Constants.SEQFORMAT)));
            }
            if (request.containsKey(Constants.SEQNUMBER)) {
                vendor.setSeqnumber(Integer.parseInt(request.get(Constants.SEQNUMBER).toString()));
            }
            if (request.containsKey(Constants.DATEPREFIX) && request.get(Constants.DATEPREFIX) != null) {
                vendor.setDatePreffixValue((String) request.get(Constants.DATEPREFIX));
            }
            if (request.containsKey(Constants.DATEAFTERPREFIX) && request.get(Constants.DATEAFTERPREFIX) != null) {
                vendor.setDateAfterPreffixValue((String) request.get(Constants.DATEAFTERPREFIX));
            }
            if (request.containsKey(Constants.DATESUFFIX) && request.get(Constants.DATESUFFIX) != null) {
                vendor.setDateSuffixValue((String) request.get(Constants.DATESUFFIX));
            }

            if (request.containsKey("autogenerated")) {
                vendor.setAutoGenerated((Boolean) request.get("autogenerated"));
            }
            if (request.containsKey("title")) {
                vendor.setTitle((String) request.get("title"));
            }
            if (request.containsKey("accname")) {
                vendor.setName((String) request.get("accname"));
            }
            if (request.containsKey("aliasname")) {
               vendor.setAliasname((String) request.get("aliasname"));
            }
            if (request.containsKey("acccode")) {
                if (request.get("acccode") != null) {
                    vendor.setAcccode((String) request.get("acccode"));
                }
            }
            if (request.containsKey("taxId") && request.get("taxId") != null) {
                vendor.setTaxid((String) request.get("taxId"));
            }
            if (request.containsKey("bankaccountno")) {
                vendor.setBankaccountno((String) request.get("bankaccountno"));
            }
            if (request.containsKey("other")) {
                vendor.setOther((String) request.get("other"));
            }
            if (request.containsKey("mappingReceivedFromId") && request.get("mappingReceivedFromId") != null) {
                vendor.setMappingReceivedFrom((MasterItem) get(MasterItem.class, (String) request.get("mappingReceivedFromId")));
            }
            if (request.containsKey("mappingPaidTo") && request.get("mappingPaidTo") != null) {
                vendor.setMappingPaidTo((MasterItem) get(MasterItem.class, (String) request.get("mappingPaidTo")));
            }
            if (request.containsKey("taxidnumber")) {
                vendor.setTaxIDNumber((String) request.get("taxidnumber"));
            }
            if (request.containsKey("taxeligible")) {
                vendor.setTaxEligible((Boolean) request.get("taxeligible"));
            }
            if (request.containsKey("termid")) {
                vendor.setDebitTerm((Term) get(Term.class, (String) request.get("termid")));
            }
            if (request.containsKey("companyid")) {
                vendor.setCompany((Company) get(Company.class, (String) request.get("companyid")));
            }
            if (request.containsKey("mapcustomervendor")) {
                vendor.setMapcustomervendor((Boolean) request.get("mapcustomervendor"));
            }
            if (request.containsKey("debitLimit")) {
                vendor.setDebitlimit(Double.parseDouble((String) request.get("debitLimit")));
            }
            if (request.containsKey("parentid") && request.get("parentid") != null) {
                vendor.setParent((Vendor) get(Vendor.class, (String) request.get("parentid")));
            }
            if (request.containsKey("intercompanyflag")) {
                vendor.setIntercompanyflag((Boolean) request.get("intercompanyflag"));
            }
            if (request.containsKey("intercompanytype")) {
                vendor.setIntercompanytype((MasterItem) get(MasterItem.class, (String) request.get("intercompanytype")));
            }
            if (request.containsKey("isActivateIBG")) {
                vendor.setIbgActivated((Boolean) request.get("isActivateIBG"));
            }
            if (request.containsKey("currencyid")) {
                vendor.setCurrency((KWLCurrency) get(KWLCurrency.class, (String) request.get("currencyid")));
            }
            if (request.containsKey("paymentCriteria") && request.get("paymentCriteria") != null) {
                vendor.setPaymentCriteria(Integer.parseInt(request.get("paymentCriteria").toString()));
            }
            if (request.containsKey("minpricevalueforvendor") && request.get("minpricevalueforvendor") != null) {
                vendor.setMinpricevalueforvendor((String)request.get("minpricevalueforvendor"));
            }
            if (request.containsKey("companyRegistrationNumber") && request.get("companyRegistrationNumber") != null) {
                vendor.setCompanyRegistrationNumber((String) request.get("companyRegistrationNumber"));
            }
            if (request.containsKey("gstRegistrationNumber") && request.get("gstRegistrationNumber") != null) {
                vendor.setGstRegistrationNumber((String) request.get("gstRegistrationNumber"));
            }
            if (request.containsKey("rmcdApprovalNumber") && request.get("rmcdApprovalNumber") != null) {
                vendor.setRmcdApprovalNumber((String) request.get("rmcdApprovalNumber"));
            }
            if (request.containsKey("pricingBand") && request.get("pricingBand") != null) {
                vendor.setPricingBandMaster((PricingBandMaster) get(PricingBandMaster.class, (String) request.get("pricingBand")));
            }
            if (request.containsKey("uenno") && request.get("uenno") != null) {
                vendor.setUENNumber((String) request.get("uenno"));
            }
            if (request.containsKey("vattinno") && request.get("vattinno") != null) {
                vendor.setVATTINnumber((String) request.get("vattinno"));
            }
            if (request.containsKey("csttinno") && request.get("csttinno") != null) {
                vendor.setCSTTINnumber((String) request.get("csttinno"));
            }
            if (request.containsKey("panno") && request.get("panno") != null) {
                vendor.setPANnumber((String) request.get("panno"));
            }
            if (request.containsKey("vendorbranch") && request.get("vendorbranch") != null) {
                vendor.setVendorBranch((String) request.get("vendorbranch"));
            }
            if (request.containsKey("servicetaxno") && request.get("servicetaxno") != null) {
                vendor.setSERVICEnumber((String) request.get("servicetaxno"));
            }
            if (request.containsKey("tanno") && request.get("tanno") != null) {
                vendor.setTANnumber((String) request.get("tanno"));
            }
            if (request.containsKey("eccno") && request.get("eccno") != null) {
                vendor.setECCnumber((String) request.get("eccno"));
            }
            if (request.containsKey("residentialstatus") && !StringUtil.isNullOrEmpty(request.get("residentialstatus").toString()) ) {
                vendor.setResidentialstatus((int)request.get("residentialstatus"));
            }
//            if (request.containsKey("incometaxno") && request.get("incometaxno") != null) {
//                vendor.setIncomeTaxNo((String) request.get("incometaxno"));
//            }
            if (request.containsKey("panstatus") && request.get("panstatus") != null) {
                vendor.setPanStatus((String) request.get("panstatus"));
            }
            if (request.containsKey("natureOfPayment") && request.get("natureOfPayment") != null) {
                vendor.setNatureOfPayment((String) request.get("natureOfPayment"));
            }
            if (request.containsKey("tdsInterestPayableAccount") && request.get("tdsInterestPayableAccount") != null) {
                Account tdsInterestPayableAccount = (Account) get(Account.class, (String) request.get("tdsInterestPayableAccount"));
                vendor.setTdsInterestPayableAccount(tdsInterestPayableAccount);
            }
            if (request.containsKey("deducteetype") && request.get("deducteetype") != null) {
                vendor.setDeducteeType((String) request.get("deducteetype"));
            }
            if (request.containsKey("deducteeCode") && request.get("deducteeCode") != null) {
                vendor.setDeducteeCode((String) request.get("deducteeCode"));
            }
            if (request.containsKey("selfBilledFromDate") && request.get("selfBilledFromDate") != null) {
                vendor.setSelfBilledFromDate((Date) request.get("selfBilledFromDate"));
            }
            if (request.containsKey("gstVerifiedDate") && request.get("gstVerifiedDate") != null) {
                vendor.setGstVerifiedDate((Date) request.get("gstVerifiedDate"));
            }
            if (request.containsKey("sezfromdate") && request.get("sezfromdate") != null) {
                vendor.setSezFromDate((Date) request.get("sezfromdate"));
            }
            if (request.containsKey("seztodate") && request.get("seztodate") != null) {
                vendor.setSezToDate((Date) request.get("seztodate"));
            }
            if (request.containsKey("selfBilledToDate") && request.get("selfBilledToDate") != null) {
                vendor.setSelfBilledToDate((Date) request.get("selfBilledToDate"));
            }
            if (request.containsKey("createdInCustomer") && request.get("createdInCustomer") != null) {
                vendor.setCreatedInCustomer(Boolean.parseBoolean( request.get("createdInCustomer").toString()));
            }
            if (request.containsKey("isvendoravailabletoagent")) {
                vendor.setIntercompanyflag((Boolean) request.get("isvendoravailabletoagent"));
            }
            if (request.containsKey("defaultagentmapping") && request.get("defaultagentmapping") != null) {
                vendor.setMappingAgent((MasterItem) get(MasterItem.class, (String) request.get("defaultagentmapping")));
            }
             if (request.containsKey("parentCompanyVendorID") && request.get("parentCompanyVendorID") != null) {
                vendor.setPropagatedVendorID((Vendor) get(Vendor.class, (String) request.get("parentCompanyVendorID")));
            }
            if (request.containsKey("interstateparty")) {
                vendor.setInterstateparty((Boolean) request.get("interstateparty"));
            }
            if (request.containsKey("cformapplicable")) {
                vendor.setCformapplicable((Boolean) request.get("cformapplicable"));
            }
            if (request.containsKey("isTDSapplicableonvendor")) {
                vendor.setIsTDSapplicableonvendor((Boolean) request.get("isTDSapplicableonvendor"));
            }
            if (request.containsKey("dealertype") && request.get("dealertype") != null) {
                vendor.setDealertype((String) request.get("dealertype"));
            }
            if (request.containsKey("vatregdate")) {
                vendor.setVatregdate((Date) request.get("vatregdate"));
            }
            if (request.containsKey("cstregdate")) {
                vendor.setCSTRegDate((Date) request.get("cstregdate"));
            }
            if (request.containsKey("commissionerate") && request.get("commissionerate") != null) {
                vendor.setCommissionerate((String) request.get("commissionerate"));
            }
            if (request.containsKey("defaultnatureofpurchase") && request.get("defaultnatureofpurchase") != null) {
                vendor.setDefaultnatureOfPurchase((String) request.get("defaultnatureofpurchase"));
            }
            if (request.containsKey("manufacturerType") && request.get("manufacturerType") != null) {
                vendor.setManufacturerType((String) request.get("manufacturerType"));
            }
            if (request.containsKey("division") && request.get("division") != null) {
                vendor.setDivision((String) request.get("division"));
            }
            if (request.containsKey("iecno") && request.get("iecno") != null) {
                vendor.setIECNo((String) request.get("iecno"));
            }
            if (request.containsKey("importereccno") && request.get("importereccno") != null) {
                vendor.setImporterECCNo((String) request.get("importereccno"));
            }
            if (request.containsKey("range") && request.get("range") != null) {
                vendor.setRangecode((String) request.get("range"));
            }
            if (request.containsKey("gtaapplicable")) {
                vendor.setGtaapplicable((Boolean) request.get("gtaapplicable"));
            }
            if (request.containsKey("dtaaApplicable") && request.get("dtaaApplicable") != null) {
                vendor.setDTAAApplicable((String) request.get("dtaaApplicable"));
            }
            if (request.containsKey("dtaaFromDate")) {
                vendor.setDTAAFromDate((Date) request.get("dtaaFromDate"));
            }
            if (request.containsKey("dtaaToDate")) {
                vendor.setDTAAToDate((Date) request.get("dtaaToDate"));
            }
            if (request.containsKey("dtaaSpecialRate") && request.get("dtaaSpecialRate") != null) {
                vendor.setDTAASpecialRate((Double) request.get("dtaaSpecialRate"));
            }
            if (request.containsKey("lowerRate") && request.get("lowerRate") != null) {
                vendor.setLowerRate((Double) request.get("lowerRate"));
            }
            if (request.containsKey("higherTDSRate") && request.get("higherTDSRate") != null) {
                vendor.setHigherTDSRate((Double) request.get("higherTDSRate"));
            }
            if (request.containsKey("nonLowerDedutionApplicable") && request.get("nonLowerDedutionApplicable") != null) {
                vendor.setNonLowerDedutionApplicable((String)request.get("nonLowerDedutionApplicable"));
            }
            if (request.containsKey("deductionReason") && request.get("deductionReason") != null) {
                vendor.setDeductionReason((String)request.get("deductionReason"));
            }
            if (request.containsKey("certificateNo") && request.get("certificateNo") != null) {
                vendor.setCertificateNo((String)request.get("certificateNo"));
            }
            if (request.containsKey("deductionFromDate")) {
                vendor.setDeductionFromDate((Date) request.get("deductionFromDate"));
            }
            if (request.containsKey("deductionToDate")) {
                vendor.setDeductionToDate((Date) request.get("deductionToDate"));
            }
            if (request.containsKey("declareRefNo") && request.get("declareRefNo") != null) {
                vendor.setDeclareRefNo((String)request.get("declareRefNo"));
            }
            if (request.containsKey("gstin") && request.get("gstin") != null) {
                vendor.setGSTIN((String) request.get("gstin"));
            }
            if (request.containsKey("GSTINRegistrationTypeId") && request.get("GSTINRegistrationTypeId") != null && !StringUtil.isNullOrEmpty(request.get("GSTINRegistrationTypeId").toString())) {
                vendor.setGSTRegistrationType((MasterItem) get(MasterItem.class, (String) request.get("GSTINRegistrationTypeId")));
            }
            if (request.containsKey("CustomerVendorTypeId") && request.get("CustomerVendorTypeId") != null && !StringUtil.isNullOrEmpty(request.get("CustomerVendorTypeId").toString())) {
                vendor.setGSTVendorType((MasterItem) get(MasterItem.class, (String) request.get("CustomerVendorTypeId")));
            }
            if (request.containsKey("considerExemptLimit")) {
                vendor.setConsiderExemptLimit((boolean) request.get("considerExemptLimit"));
            }
            vendor.setPreferedDeliveryMode(StaticValues.PDM_EMAIL);
//            if (Integer.parseInt(request.getParameter("pdm")) == StaticValues.PDM_PRINT) {
//                vendor.setPreferedDeliveryMode(StaticValues.PDM_PRINT);
//
//            }
            saveOrUpdate(vendor);

            List resultlist = new ArrayList();
            resultlist.add(vendor);
            result = new KwlReturnObject(true, null, null, resultlist, resultlist.size());
        } catch (Exception ex) {
            result = new KwlReturnObject(false, "accVendorDAOImpl.addVendor:" + ex.getMessage(), null, null, 0);
        }
        return result;
    }

    @Override
    public KwlReturnObject saveIBGReceivingBankDetails(HashMap dataMap) throws ServiceException {
        IBGReceivingBankDetails receivingBankDetails = createIBGReceivingBankDetails(dataMap);
        saveOrUpdate(receivingBankDetails);
        List resultlist = new ArrayList();
        resultlist.add(receivingBankDetails);
        KwlReturnObject result = new KwlReturnObject(true, null, null, resultlist, resultlist.size());
        return result;
    }

    public IBGReceivingBankDetails createIBGReceivingBankDetails(HashMap dataMap) {
        IBGReceivingBankDetails receivingBankDetails = new IBGReceivingBankDetails();

        if (dataMap.containsKey("receivingBankDetailId") && dataMap.get("receivingBankDetailId") != null && !StringUtil.isNullOrEmpty((String)dataMap.get("receivingBankDetailId"))) {
            receivingBankDetails = (IBGReceivingBankDetails) get(IBGReceivingBankDetails.class, (String) dataMap.get("receivingBankDetailId"));
        }

        if (dataMap.containsKey("companyId") && dataMap.get("companyId") != null) {
            Company company = (Company) get(Company.class, (String) dataMap.get("companyId"));
            receivingBankDetails.setCompany(company);
        }

        if (dataMap.containsKey("masterItemId") && dataMap.get("masterItemId") != null) {
            MasterItem masterItem = (MasterItem) get(MasterItem.class, (String) dataMap.get("masterItemId"));
            receivingBankDetails.setMasterItem(masterItem);
        }

        if (dataMap.containsKey("vendorId") && dataMap.get("vendorId") != null) {
            Vendor vendor = (Vendor) get(Vendor.class, (String) dataMap.get("vendorId"));
            receivingBankDetails.setVendor(vendor);
        }

        if (dataMap.containsKey("receivingBankCode") && dataMap.get("receivingBankCode") != null) {
            receivingBankDetails.setReceivingBankCode((String) dataMap.get("receivingBankCode"));
        }

        if (dataMap.containsKey("receivingBankName") && dataMap.get("receivingBankName") != null) {
            receivingBankDetails.setReceivingBankName((String) dataMap.get("receivingBankName"));
        }

        if (dataMap.containsKey("receivingBranchCode") && dataMap.get("receivingBranchCode") != null) {
            receivingBankDetails.setReceivingBranchCode((String) dataMap.get("receivingBranchCode"));
        }

        if (dataMap.containsKey("receivingAccountNumber") && dataMap.get("receivingAccountNumber") != null) {
            receivingBankDetails.setReceivingAccountNumber((String) dataMap.get("receivingAccountNumber"));
        }

        if (dataMap.containsKey("receivingAccountName") && dataMap.get("receivingAccountName") != null) {
            receivingBankDetails.setReceivingAccountName((String) dataMap.get("receivingAccountName"));
        }
        return receivingBankDetails;
    }

    public KwlReturnObject updateVendor(HashMap request) {
        KwlReturnObject result;
        try {
            String vendorid = (String) request.get("accid");
            Vendor vendor = (Vendor) get(Vendor.class, vendorid);
            if (request.containsKey("creationDate")) {
                vendor.setModifiedOn((Date) request.get("creationDate"));
            }
            if (request.containsKey("accountid")) {
                Account account = (Account) get(Account.class, (String) request.get("accountid"));
                vendor.setAccount(account);
                if (account != null) {
                    String usedin = account.getUsedIn();
                    account.setUsedIn(StringUtil.getUsedInValue(usedin, Constants.Vendor_Default_Account));
                }
            }
            if (request.containsKey("title")) {
                vendor.setTitle((String) request.get("title"));
            }
            if (request.containsKey("accname")) {
                vendor.setName((String) request.get("accname"));
            }
            if (request.containsKey("aliasname")) {
                vendor.setAliasname((String) request.get("aliasname"));
            }
            if (request.containsKey(Constants.SEQFORMAT)) {
                vendor.setSeqformat((SequenceFormat) get(SequenceFormat.class, (String) request.get(Constants.SEQFORMAT)));
            }
            if (request.containsKey(Constants.SEQNUMBER)) {
                vendor.setSeqnumber(Integer.parseInt(request.get(Constants.SEQNUMBER).toString()));
            }
            if (request.containsKey(Constants.DATEPREFIX) && request.get(Constants.DATEPREFIX) != null) {
                vendor.setDatePreffixValue((String) request.get(Constants.DATEPREFIX));
            }
            if (request.containsKey(Constants.DATEAFTERPREFIX) && request.get(Constants.DATEAFTERPREFIX) != null) {
                vendor.setDateAfterPreffixValue((String) request.get(Constants.DATEAFTERPREFIX));
            }
            if (request.containsKey("mappingReceivedFromId") && request.get("mappingReceivedFromId") != null) {
                vendor.setMappingReceivedFrom((MasterItem) get(MasterItem.class, (String) request.get("mappingReceivedFromId")));
            }
            if (request.containsKey("mappingPaidTo") && request.get("mappingPaidTo") != null) {
                vendor.setMappingPaidTo((MasterItem) get(MasterItem.class, (String) request.get("mappingPaidTo")));
            }
            if (request.containsKey(Constants.DATESUFFIX) && request.get(Constants.DATESUFFIX) != null) {
                vendor.setDateSuffixValue((String) request.get(Constants.DATESUFFIX));
            }
            if (request.containsKey("autogenerated")) {
                vendor.setAutoGenerated((Boolean) request.get("autogenerated"));
            }
            if (request.containsKey("acccode")) {
                if (request.get("acccode") != null) {
                    vendor.setAcccode((String) request.get("acccode"));
                }
            }
            if (request.containsKey("bankaccountno") && request.get("bankaccountno") != null) {
                vendor.setBankaccountno((String) request.get("bankaccountno"));
            }
            if (request.containsKey("other") && request.get("other") != null) {
                vendor.setOther((String) request.get("other"));
            }
            if (request.containsKey("termid")) {
                vendor.setDebitTerm((Term) get(Term.class, (String) request.get("termid")));
            }
            if (request.containsKey("taxidnumber")) {
                vendor.setTaxIDNumber((String) request.get("taxidnumber"));
            }
            if (request.containsKey("taxidmailon")) {
                vendor.setMailOn((Date) request.get("taxidmailon"));
            }
            if (request.containsKey("taxeligible")) {
                vendor.setTaxEligible((Boolean) request.get("taxeligible"));
            }
            if (request.containsKey("companyid")) {
                vendor.setCompany((Company) get(Company.class, (String) request.get("companyid")));
            }
            if (request.containsKey("mapcustomervendor")) {
                vendor.setMapcustomervendor((Boolean) request.get("mapcustomervendor"));
            }
            if (request.containsKey("debitLimit")) {
                vendor.setDebitlimit(Double.parseDouble((String) request.get("debitLimit")));
            }
            if (request.containsKey("parentid")) {
                if (request.get("parentid") != null) {
                    vendor.setParent((Vendor) get(Vendor.class, (String) request.get("parentid")));
                } else {
                    vendor.setParent(null);
                }
            }
            if (request.containsKey("accvendorcustomdataref") && request.get("accvendorcustomdataref") != null) {
                VendorCustomData accVendorCustomData = null;
                accVendorCustomData = (VendorCustomData) get(VendorCustomData.class, (String) request.get("accvendorcustomdataref"));
                vendor.setAccVendorCustomData(accVendorCustomData);
            }
            if (request.containsKey("isActivateIBG")) {
                vendor.setIbgActivated((Boolean) request.get("isActivateIBG"));
            }
            if (request.containsKey("taxId")) {
                vendor.setTaxid((String) request.get("taxId"));
            }
            vendor.setPreferedDeliveryMode(StaticValues.PDM_EMAIL);
//            if (Integer.parseInt(request.getParameter("pdm")) == StaticValues.PDM_PRINT) {
//                vendor.setPreferedDeliveryMode(StaticValues.PDM_PRINT);
//
//            }
//            if (request.containsKey("addressId")) {
//                if (!StringUtil.isNullOrEmpty((String) request.get("addressId"))) {
//                    vendor.setVendorAddresses((VendorAddresses) get(VendorAddresses.class, (String) request.get("addressId")));
//                }
//            }
            if (request.containsKey("intercompanyflag")) {
                vendor.setIntercompanyflag((Boolean) request.get("intercompanyflag"));
            }
            if (request.containsKey("intercompanytype")) {
                vendor.setIntercompanytype((MasterItem) get(MasterItem.class, (String) request.get("intercompanytype")));
            }
            if (request.containsKey("currencyid")) {
                vendor.setCurrency((KWLCurrency) get(KWLCurrency.class, (String) request.get("currencyid")));
            }
            if (request.containsKey("paymentCriteria") && request.get("paymentCriteria") != null) {
                vendor.setPaymentCriteria(Integer.parseInt(request.get("paymentCriteria").toString()));
            }
            if (request.containsKey("minpricevalueforvendor") && request.get("minpricevalueforvendor") != null) {
                vendor.setMinpricevalueforvendor((String)request.get("minpricevalueforvendor"));
            }
            if (request.containsKey("companyRegistrationNumber") && request.get("companyRegistrationNumber") != null) {
                vendor.setCompanyRegistrationNumber((String) request.get("companyRegistrationNumber"));
            }
            if (request.containsKey("gstRegistrationNumber") && request.get("gstRegistrationNumber") != null) {
                vendor.setGstRegistrationNumber((String) request.get("gstRegistrationNumber"));
            }
            if (request.containsKey("rmcdApprovalNumber") && request.get("rmcdApprovalNumber") != null) {
                vendor.setRmcdApprovalNumber((String) request.get("rmcdApprovalNumber"));
            }
            if (request.containsKey("pricingBand") && request.get("pricingBand") != null) {
                vendor.setPricingBandMaster((PricingBandMaster) get(PricingBandMaster.class, (String) request.get("pricingBand")));
            }
            if (request.containsKey("uenno") && request.get("uenno") != null) {
                vendor.setUENNumber((String) request.get("uenno"));
            }
            if (request.containsKey("vattinno") && request.get("vattinno") != null) {
                vendor.setVATTINnumber((String) request.get("vattinno"));
            }
            if (request.containsKey("csttinno") && request.get("csttinno") != null) {
                vendor.setCSTTINnumber((String) request.get("csttinno"));
            }
            if (request.containsKey("panno") && request.get("panno") != null) {
                vendor.setPANnumber((String) request.get("panno"));
            }
            if (request.containsKey("vendorbranch") && request.get("vendorbranch") != null) {
                vendor.setVendorBranch((String) request.get("vendorbranch"));
            }
            if (request.containsKey("servicetaxno") && request.get("servicetaxno") != null) {
                vendor.setSERVICEnumber((String) request.get("servicetaxno"));
            }
            if (request.containsKey("tanno") && request.get("tanno") != null) {
                vendor.setTANnumber((String) request.get("tanno"));
            }
            if (request.containsKey("eccno") && request.get("eccno") != null) {
                vendor.setECCnumber((String) request.get("eccno"));
            }
            if (request.containsKey("residentialstatus") && !StringUtil.isNullOrEmpty((String)request.get("residentialstatus").toString())) {
                vendor.setResidentialstatus((int)request.get("residentialstatus"));
            }
            if (request.containsKey("selfBilledFromDate") && request.get("selfBilledFromDate") != null) {
                vendor.setSelfBilledFromDate((Date) request.get("selfBilledFromDate"));
            }
            
            if (request.containsKey("gstVerifiedDate") && request.get("gstVerifiedDate") != null) {
                vendor.setGstVerifiedDate((Date) request.get("gstVerifiedDate"));
            }
            if (request.containsKey("sezfromdate") && request.get("sezfromdate") != null) {
                vendor.setSezFromDate((Date) request.get("sezfromdate"));
            }
            if (request.containsKey("seztodate") && request.get("seztodate") != null) {
                vendor.setSezToDate((Date) request.get("seztodate"));
            }
            if (request.containsKey("selfBilledToDate") && request.get("selfBilledToDate") != null) {
                vendor.setSelfBilledToDate((Date) request.get("selfBilledToDate"));
            }
            if (request.containsKey("isvendoravailabletoagent")) {
                vendor.setIsVendorAvailableOnlyToSelectedAgents((Boolean) request.get("isvendoravailabletoagent"));
            }
            if (request.containsKey("defaultagentmapping") && request.get("defaultagentmapping") != null) {
                vendor.setMappingAgent((MasterItem) get(MasterItem.class, (String) request.get("defaultagentmapping")));
            }
            if (request.containsKey("parentCompanyVendorID") && request.get("parentCompanyVendorID") != null) {
                vendor.setPropagatedVendorID((Vendor) get(Vendor.class, (String) request.get("parentCompanyVendorID")));
            }
//            if (request.containsKey("incometaxno") && request.get("incometaxno") != null) {
//                vendor.setIncomeTaxNo((String) request.get("incometaxno"));
//            }
            if (request.containsKey("panstatus") && request.get("panstatus") != null) {
                vendor.setPanStatus((String) request.get("panstatus"));
            }
            if (request.containsKey("natureOfPayment") && request.get("natureOfPayment") != null) {
                vendor.setNatureOfPayment((String) request.get("natureOfPayment"));
            }
            if (request.containsKey("isTDSapplicableonvendor")) {
                vendor.setIsTDSapplicableonvendor((Boolean) request.get("isTDSapplicableonvendor"));
            }
            if (request.containsKey("tdsInterestPayableAccount") && request.get("tdsInterestPayableAccount") != null) {
                Account tdsInterestPayableAccount = (Account) get(Account.class, (String) request.get("tdsInterestPayableAccount"));
                vendor.setTdsInterestPayableAccount(tdsInterestPayableAccount);
            }
            if (request.containsKey("deducteetype") && request.get("deducteetype") != null) {
                vendor.setDeducteeType((String) request.get("deducteetype"));
            }
            if (request.containsKey("deducteeCode") && request.get("deducteeCode") != null) {
                vendor.setDeducteeCode((String) request.get("deducteeCode"));
            }
            if (request.containsKey("interstateparty")) {
                vendor.setInterstateparty((Boolean) request.get("interstateparty"));
            }
            if (request.containsKey("cformapplicable")) {
                vendor.setCformapplicable((Boolean) request.get("cformapplicable"));
            }
            if (request.containsKey("dealertype") && request.get("dealertype") != null) {
                vendor.setDealertype((String) request.get("dealertype"));
            }
            if (request.containsKey("vatregdate")) {
                vendor.setVatregdate((Date) request.get("vatregdate"));
            }
            if (request.containsKey("cstregdate")) {
                vendor.setCSTRegDate((Date) request.get("cstregdate"));
            }
            if (request.containsKey("commissionerate") && request.get("commissionerate") != null) {
                vendor.setCommissionerate((String) request.get("commissionerate"));
            }
            if (request.containsKey("defaultnatureofpurchase") && request.get("defaultnatureofpurchase") != null) {
                vendor.setDefaultnatureOfPurchase((String) request.get("defaultnatureofpurchase"));
            }
            if (request.containsKey("manufacturerType") && request.get("manufacturerType") != null) {
                vendor.setManufacturerType((String) request.get("manufacturerType"));
            }
            if (request.containsKey("division") && request.get("division") != null) {
                vendor.setDivision((String) request.get("division"));
            }
            if (request.containsKey("iecno") && request.get("iecno") != null) {
                vendor.setIECNo((String) request.get("iecno"));
            }
            if (request.containsKey("importereccno") && request.get("importereccno") != null) {
                vendor.setImporterECCNo((String) request.get("importereccno"));
            }
            if (request.containsKey("range") && request.get("range") != null) {
                vendor.setRangecode((String) request.get("range"));
            }
            if (request.containsKey("gtaapplicable")) {
                vendor.setGtaapplicable((Boolean) request.get("gtaapplicable"));
            }
            if (request.containsKey("dtaaApplicable") && request.get("dtaaApplicable") != null) {
                vendor.setDTAAApplicable((String) request.get("dtaaApplicable"));
            }
            if (request.containsKey("dtaaFromDate")) {
                vendor.setDTAAFromDate((Date) request.get("dtaaFromDate"));
            }
            if (request.containsKey("dtaaToDate")) {
                vendor.setDTAAToDate((Date) request.get("dtaaToDate"));
            }
            if (request.containsKey("dtaaSpecialRate") && request.get("dtaaSpecialRate") != null) {
                vendor.setDTAASpecialRate((Double) request.get("dtaaSpecialRate"));
            }
            if (request.containsKey("lowerRate") && request.get("lowerRate") != null) {
                vendor.setLowerRate((Double) request.get("lowerRate"));
            }
            if (request.containsKey("higherTDSRate") && request.get("higherTDSRate") != null) {
                vendor.setHigherTDSRate((Double) request.get("higherTDSRate"));
            }
            if (request.containsKey("nonLowerDedutionApplicable") && request.get("nonLowerDedutionApplicable") != null) {
                vendor.setNonLowerDedutionApplicable((String)request.get("nonLowerDedutionApplicable"));
            }
            if (request.containsKey("deductionReason") && request.get("deductionReason") != null) {
                vendor.setDeductionReason((String)request.get("deductionReason"));
            }
            if (request.containsKey("certificateNo") && request.get("certificateNo") != null) {
                vendor.setCertificateNo((String)request.get("certificateNo"));
            }
            if (request.containsKey("deductionFromDate")) {
                vendor.setDeductionFromDate((Date) request.get("deductionFromDate"));
            }
            if (request.containsKey("deductionToDate")) {
                vendor.setDeductionToDate((Date) request.get("deductionToDate"));
            }
            if (request.containsKey("declareRefNo") && request.get("declareRefNo") != null) {
                vendor.setDeclareRefNo((String)request.get("declareRefNo"));
            }
            if (request.containsKey("gstin") && request.get("gstin") != null) {
                vendor.setGSTIN((String) request.get("gstin"));
            }
            if (request.containsKey("GSTINRegistrationTypeId") && request.get("GSTINRegistrationTypeId") != null && !StringUtil.isNullOrEmpty(request.get("GSTINRegistrationTypeId").toString())) {
                vendor.setGSTRegistrationType((MasterItem) get(MasterItem.class, (String) request.get("GSTINRegistrationTypeId")));
            }
            if (request.containsKey("CustomerVendorTypeId") && request.get("CustomerVendorTypeId") != null && !StringUtil.isNullOrEmpty(request.get("CustomerVendorTypeId").toString())) {
                vendor.setGSTVendorType((MasterItem) get(MasterItem.class, (String) request.get("CustomerVendorTypeId")));
            }
            if (request.containsKey("considerExemptLimit")) {
                vendor.setConsiderExemptLimit((boolean) request.get("considerExemptLimit"));
            }
            saveOrUpdate(vendor);

            List resultlist = new ArrayList();
            resultlist.add(vendor);
            result = new KwlReturnObject(true, null, null, resultlist, resultlist.size());
        } catch (Exception ex) {
            result = new KwlReturnObject(false, "accVendorDAOImpl.updateVendor:" + ex.getMessage(), null, null, 0);
        }
        return result;
    }

    public ArrayList getVendorArrayList(List list, HashMap<String, Object> requestParams, boolean quickSearchFlag, boolean noactivityAcc) throws ServiceException {
        ArrayList resultlist = new ArrayList();
        boolean ignoreCustomers = requestParams.get("ignorecustomers") != null;
        boolean ignoreVendors = requestParams.get("ignorevendors") != null;
        String excludeaccountid = (String) requestParams.get("accountid");
        String includeaccountid = (String) requestParams.get("includeaccountid");
        String includeparentid = (String) requestParams.get("includeparentid");
        String customerCpath = ConfigReader.getinstance().get("Customer");
        String vendorCpath = ConfigReader.getinstance().get("Vendor");
        boolean deleted = Boolean.parseBoolean((String) requestParams.get("deleted"));
        boolean nondeleted = Boolean.parseBoolean((String) requestParams.get("nondeleted"));
        boolean getSundryCustomer = Boolean.parseBoolean((String) requestParams.get("getSundryCustomer"));
        boolean getSundryVendor = Boolean.parseBoolean((String) requestParams.get("getSundryVendor"));
        String currencyid = (String) requestParams.get("currencyid");
        KWLCurrency currency = (KWLCurrency) get(KWLCurrency.class, currencyid);
        if (list.size() > 0) {
            Iterator itr = list.iterator();
            int level = 0;
            while (itr.hasNext()) {
                Object listObj = itr.next();
                Vendor vendor = (Vendor) listObj;
                if (excludeaccountid != null && vendor.getID().equals(excludeaccountid)) {
                    continue;
                }
                if ((includeparentid != null && (!vendor.getID().equals(includeparentid) || (vendor.getParent() != null && !vendor.getParent().getID().equals(includeparentid))))) {
                    continue;
                } else if ((includeaccountid != null && !vendor.getID().equals(includeaccountid))) {
                    continue;
                }

            Object v ; 
            try{
                v = get(Class.forName(vendorCpath), vendor.getID());
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(accVendorDAOImpl.class.getName()).log(Level.SEVERE, null, ex);
                throw ServiceException.FAILURE(ex.getMessage(), ex);
            }
//                Object v = AccountingHandlerDAOImpl.getObject( vendorCpath, vendor.getID());


                Object tmplist[] = new Object[8];
                tmplist[0] = listObj;
                tmplist[1] = v;
                tmplist[2] = level;
                resultlist.add(tmplist);
                int resultListSize = resultlist.size();
                if (quickSearchFlag) {
                    tmplist[3] = true;
                    if (noactivityAcc) {
                        resultlist.remove(tmplist);
                    }
                } else {
                    boolean isLeaf = getChildVendor(vendor, resultlist, level, excludeaccountid, includeaccountid, ignoreCustomers, ignoreVendors, currency, customerCpath, vendorCpath, nondeleted, deleted, tmplist, noactivityAcc);
                    if (noactivityAcc && (!vendor.getChildren().isEmpty()) && resultlist.size() == resultListSize) {
                        resultlist.remove(tmplist);
                    }
                    tmplist[3] = isLeaf;

                }

                tmplist[4] = currency;
                tmplist[5] = null;//Parent Vendor

            }
        }
        return resultlist;
    }

    public boolean getChildVendor(Vendor vendor, List resultlist, int level, String excludeaccountid, String includeaccountid, boolean ignoreCustomers, boolean ignoreVendors, KWLCurrency currency, String customerCpath, String vendorCpath, boolean nondeleted, boolean deleted, Object tmplist1[], boolean noactivityAcc) throws ServiceException {
        boolean leaf = true;
        //Iterator<Account> itr = new TreeSet(account.getChildren()).iterator();
        List ll = new ArrayList(vendor.getChildren());//Added code for sorting on account code, account name
//        Collections.sort(ll, new accAccountDAOImpl.accountComp(sortOnType, directionDesc));
        Iterator<Account> itr = ll.iterator();

        level++;
        while (itr.hasNext()) {
            Object listObj = itr.next();
            Vendor child = (Vendor) listObj;
            if ((excludeaccountid != null && child.getID().equals(excludeaccountid))) {
                continue;
            }
            if ((includeaccountid != null && !child.getID().equals(includeaccountid))) {
                continue;
            }

//            Customer c=(Customer)get(Customer.class,child.getID());
//            Object c = get( vendorCpath, child.getID());
            Object c;
            try {
                c = get(Class.forName(vendorCpath), child.getID());
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(accVendorDAOImpl.class.getName()).log(Level.SEVERE, null, ex);
                throw ServiceException.FAILURE(ex.getMessage(), ex);
            }

            leaf = false;

            Object tmplist[] = new Object[8];
            tmplist[0] = listObj;
            tmplist[1] = c;
            tmplist[2] = level;
            resultlist.add(tmplist);
            int resultListSize = resultlist.size();
            tmplist[3] = getChildVendor(child, resultlist, level, excludeaccountid, excludeaccountid, ignoreCustomers, ignoreVendors, currency, customerCpath, vendorCpath, nondeleted, deleted, tmplist, noactivityAcc);
            if (noactivityAcc && (!child.getChildren().isEmpty()) && resultlist.size() == resultListSize) {
                resultlist.remove(tmplist);
            }
            tmplist[4] = currency;
            tmplist[5] = vendor;//Parent Account
        }

        return leaf;
    }

//    public KwlReturnObject getVendorObject(String vendorid) {
//        List list = new ArrayList();
//        Vendor vendor=(Vendor) get(Vendor.class, vendorid);
//        list.add(vendor);
//        return new KwlReturnObject(true, null, null, list, list.size());
//    }
    @Override
    public KwlReturnObject getIBGReceivingBankDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String condition = "";
        ArrayList params = new ArrayList();
        params.add((String) requestParams.get("companyId"));

        if (requestParams.containsKey("vendorId") && requestParams.get("vendorId") != null) {
            params.add((String) requestParams.get("vendorId"));
            condition += " and rbd.vendor.ID=? ";
        }

        if (requestParams.containsKey("masterItemId") && requestParams.get("masterItemId") != null) {
            params.add((String) requestParams.get("masterItemId"));
            condition += " and rbd.masterItem.ID=? ";
        }

        String query = "From IBGReceivingBankDetails rbd where rbd.company.companyID=? " + condition;

        List list = executeQuery( query, params.toArray());

        KwlReturnObject result = new KwlReturnObject(true, null, null, list, list.size());

        return result;

    }

    public KwlReturnObject getVendor(HashMap<String, Object> requestParams) throws ServiceException {
        KwlReturnObject result;
        try {
            int start = 0;
            int limit = 15;
            boolean pagingFlag = false;
            boolean quickSearchFlag = false;
            boolean getSundryVendor = false;
            if (requestParams.containsKey("start") && requestParams.containsKey("limit") && !StringUtil.isNullOrEmpty(requestParams.get("start").toString())) {
                start = Integer.parseInt(requestParams.get("start").toString());
                limit = Integer.parseInt(requestParams.get("limit").toString());
                pagingFlag = true;
            }

            ArrayList params = new ArrayList();
            String[] groups = (String[]) requestParams.get("group");

            String condition = (requestParams.get("ignore") == null ? "" : " not ");
            String[] nature = (String[]) requestParams.get("nature");
            String companyid = (String) requestParams.get("companyid");
            params.add(companyid);
            getSundryVendor = Boolean.parseBoolean((String) requestParams.get("getSundryVendor"));
            boolean deleted = Boolean.parseBoolean((String) requestParams.get("deleted"));
            boolean nondeleted = Boolean.parseBoolean((String) requestParams.get("nondeleted"));
            /*
                IN Query for fetching id specific Vendors
            */
            String exportvendors="";
            if (requestParams.containsKey("exportvendors") && requestParams.get("exportvendors") != null && !StringUtil.isNullOrEmpty(requestParams.get("exportvendors").toString())) {
                    exportvendors = requestParams.get("exportvendors").toString();
                    exportvendors=" and vd.ID IN("+exportvendors+")";
            }
            if (requestParams.containsKey("ss") && requestParams.get("ss") != null) {
                String ss = requestParams.get("ss").toString();
                ss = ss.replaceAll("%", "////");		// issue for search '% and _'
                ss = ss.replaceAll("_", "////");
                if (!StringUtil.isNullOrEmpty(ss)) {
                    String[] searchcol = new String[]{"vd.name", "vd.acccode","vd.aliasname","vd.UENNumber"};
                    Map map = StringUtil.insertParamSearchStringMap(params, ss, 4);
                    StringUtil.insertParamSearchString(map);
                    String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                    condition += searchQuery;
                    quickSearchFlag = true;
                }
            }
            /*
             * if (nondeleted) condition += " and vd.account.deleted=false ";
             * else if (deleted) condition += " and vd.account.deleted=true ";
             */

            if (requestParams.containsKey("activeDormantFlag") && requestParams.get("activeDormantFlag") != null) {
                String activeDormantFlag = requestParams.get("activeDormantFlag").toString();

                if (activeDormantFlag.equalsIgnoreCase("1")) {
                    condition += " and vd.activate='T' ";
                } else if (activeDormantFlag.equalsIgnoreCase("2")) {
                    condition += " and vd.activate='F' ";
                }

            }
            
            if(requestParams.containsKey(Constants.vendorid) && requestParams.get(Constants.vendorid) != null && !StringUtil.isNullOrEmpty(requestParams.get(Constants.vendorid).toString())){
                params.add(requestParams.get(Constants.vendorid).toString());
                condition += " and vd.ID=? ";
            }
            
            String parentid = "";
            String parentCondition = "";
            KwlReturnObject accResult = getSundryAccount(companyid, true);
            /*
             * if(accResult.getEntityList().size() > 0 &&
             * accResult.getEntityList().get(0) != null){ parentid = (String)
             * accResult.getEntityList().get(0); parentCondition = "
             * vd.account.parent.ID = '" + parentid + "' or vd.account.parent is
             * null "; } else {
             */
            parentCondition = " vd.parent is null ";
            //}

            //    [ERP-9824] In Vendor master, child account are showing two times when Parent child hierarchy are there.
            if (quickSearchFlag ) { //|| getSundryVendor
                parentCondition = "";
            } else {
                parentCondition = " and (" + parentCondition + ") ";
            }
            String appendCase = "and";
            String mySearchFilterString = "";
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (requestParams.containsKey("filterConjuctionCriteria") && requestParams.get("filterConjuctionCriteria") != null) {
                if (requestParams.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            String Searchjson = "";
            String searchJoin = "";
            String searchDefaultFieldSQL = "";
            if (requestParams.containsKey("searchJson") && requestParams.get("searchJson") != null) {
                Searchjson = requestParams.get("searchJson").toString();

                if (!StringUtil.isNullOrEmpty(Searchjson)) {
                    JSONObject serachJobj = new JSONObject(Searchjson);
                    JSONArray customSearchFieldArray = new JSONArray();
                    JSONArray defaultSearchFieldArray = new JSONArray();
                    StringUtil.seperateCostomAndDefaultSerachJson(serachJobj, customSearchFieldArray, defaultSearchFieldArray);
                    if (defaultSearchFieldArray.length() > 0) {
                        /*
                         Advance Search For Default Form fields
                         */
                        ArrayList tableArray = new ArrayList();
                        tableArray.add("customer"); //this table array used to identified wheather join exists on table or not                         
                        Map<String, Object> map = buildSqlDefaultFieldAdvSearch(defaultSearchFieldArray, params, Constants.Vendor_MODULE_UUID, tableArray, filterConjuctionCriteria);
                        searchJoin += map.containsKey("searchjoin") ? map.get("searchjoin") : "";
//                        searchJoin += " left join solinking on solinking.docid=salesorder.id and solinking.sourceflag = 1 ";
                        searchDefaultFieldSQL = (String) (map.containsKey("condition") ? map.get("condition") : "");
                        searchDefaultFieldSQL=searchDefaultFieldSQL.replaceAll("vendorRef", "vd");
                    }
                    if (customSearchFieldArray.length() > 0) {   //Advance search case for Custome field
                        requestParams.put(Constants.Searchjson, Searchjson);
                        requestParams.put(Constants.appendCase, appendCase);
                        requestParams.put("filterConjuctionCriteria", filterConjuctionCriteria);
                        mySearchFilterString = String.valueOf(StringUtil.getAdvanceSearchString(requestParams, true).get(Constants.myResult));
                        mySearchFilterString = mySearchFilterString.replaceAll("VendorCustomData", "vd.accVendorCustomData");
                        StringUtil.insertParamAdvanceSearchString1(params, Searchjson);
                    }
                    mySearchFilterString = StringUtil.combineCustomAndDefaultSearch(searchDefaultFieldSQL, mySearchFilterString, filterConjuctionCriteria);
                }
            }
            String orderBy = " order by vd.name ";
            if (requestParams.containsKey("dir") && requestParams.containsKey("sort")) {
                String Col_Name = requestParams.get("sort").toString();
                String Col_Dir = requestParams.get("dir").toString();
                orderBy = sortVendors(Col_Name, Col_Dir);
            }
            
            String vendorswithoutpancondition = "";
            if (requestParams.containsKey("vendorsWithoutpan") && (Boolean)requestParams.get("vendorsWithoutpan")) {
                vendorswithoutpancondition = " and (vd.panStatus = '2' or vd.panStatus = '3') ";
            }
            
            String vendorsWithoutDeducteecondition = "";
            if (requestParams.containsKey("vendorsWithoutDeductee") && (Boolean)requestParams.get("vendorsWithoutDeductee")) {
                String deducteeType="";
                KwlReturnObject rs = getMasterItemFromDefaultMasterItem(IndiaComplianceConstants.DEDUCTEETYPE_UNKNOWN_ID,companyid);
                Iterator itr = rs.getEntityList().iterator();
                if(itr.hasNext()) {
                    Object masterItemId = itr.next();
                    if(masterItemId!=null){
                        deducteeType = masterItemId.toString();
                    }
                }
                vendorsWithoutDeducteecondition = " and vd.deducteeType in ('','"+deducteeType+"') ";
            }
            
            String dateFillter = "";
            if (requestParams.containsKey("startdate") && requestParams.containsKey("enddate") && requestParams.containsKey(Constants.df)) {
                String fromDate = (String) requestParams.get("startdate");
                String toDate = (String) requestParams.get("enddate");
                DateFormat df = (DateFormat) requestParams.get(Constants.df);
                if (!StringUtil.isNullOrEmpty(fromDate) && !StringUtil.isNullOrEmpty(toDate)) {
                    dateFillter = " and vd.createdOn >= ? and vd.createdOn <=? ";
                    params.add(df.parse(fromDate));
                    params.add(df.parse(toDate));
                }
            }
            String query = "select vd from Vendor vd where vd.company.companyID=? " + parentCondition + condition+ vendorswithoutpancondition +vendorsWithoutDeducteecondition+ dateFillter+ mySearchFilterString + exportvendors +orderBy;
            List list = executeQuery( query, params.toArray());

            int totalCount = list.size();
            if (pagingFlag) {
                list = executeQueryPaging( query, params.toArray(), new Integer[]{start, limit});
            }

            result = new KwlReturnObject(true, null, null, list, totalCount);
        } catch (Exception ex) {
            result = new KwlReturnObject(false, "accAccountDAOImpl.getAccounts:" + ex.getMessage(), null, null, 0);
        }
        return result;
    }

    public String sortVendors(String Col_Name, String Col_Dir) throws ServiceException {
        String orderBy = "";
        if (Col_Name.equals("acccode")) {
            orderBy = " order by vd.acccode " + Col_Dir;
        } else if (Col_Name.equals("accname")) {
            orderBy = " order by vd.name " + Col_Dir;
        } else if (Col_Name.equals("billingAddress1")) {
            orderBy = " order by vd.vendorAddresses.billingAddress1 " + Col_Dir;
        } else if (Col_Name.equals("billingEmail1")) {
            orderBy = " order by vd.vendorAddresses.billingEmail1 " + Col_Dir;
        } else if (Col_Name.equals("billingMobile1")) {
            orderBy = " order by vd.vendorAddresses.billingMobile1 " + Col_Dir;
        } else if (Col_Name.equals("contactno2")) {//Vendor UEN
            orderBy = " order by vd.altContactNumber " + Col_Dir;
        } else if (Col_Name.equals("creationDate")) {
            orderBy = " order by vd.createdOn " + Col_Dir;
        } else if (Col_Name.equals("termname")) {
            orderBy = " order by vd.debitTerm.termname " + Col_Dir;
        } else if (Col_Name.equals("other")) { // GST NUmber/ Other Information 
            orderBy = " order by vd.other " + Col_Dir;
        } else if (Col_Name.equals("limit")) {
            orderBy = " order by vd.debitlimit " + Col_Dir;
        } else if (Col_Name.equals("aliasname")) {
            orderBy = " order by vd.aliasname " + Col_Dir;
        } else if (Col_Name.equals("uenno")) {
            orderBy = " order by vd.UENNumber " + Col_Dir;
        } else if (Col_Name.equals("isactivate")) {
            orderBy = " order by vd.activate " + Col_Dir;
        } else if (Col_Name.equals("other")) {
            orderBy = " order by vd.other " + Col_Dir;
        }
        return orderBy;
    }

    @Override
    public KwlReturnObject getVendorByCode(String vendorCode, String companyId) throws ServiceException {
        KwlReturnObject result = null;
        if (!StringUtil.isNullOrEmpty(companyId) && !StringUtil.isNullOrEmpty(vendorCode)) {
            ArrayList params = new ArrayList();
            params.add(vendorCode);
            params.add(companyId);
            String query = "from Vendor where acccode=? and company.companyID=?";
            List list = executeQuery( query, params.toArray());
            int totalCount = list.size();
            result = new KwlReturnObject(true, null, null, list, totalCount);
        }
        return result;
    }
    
    @Override
    public KwlReturnObject getVendorByName(String vendorName, String companyId) throws ServiceException {
        KwlReturnObject result = null;
        if (!StringUtil.isNullOrEmpty(companyId) && !StringUtil.isNullOrEmpty(vendorName)) {
            ArrayList params = new ArrayList();
            params.add(vendorName);
            params.add(companyId);
            String query = "from Vendor where name=? and company.companyID=?";
            List list = executeQuery( query, params.toArray());
            int totalCount = list.size();
            result = new KwlReturnObject(true, null, null, list, totalCount);
        }
        return result;
    }

    private KwlReturnObject getSundryAccount(String companyId, boolean isVendor) throws ServiceException {
        String query = "select acc.id from " + (isVendor ? "vendor v " : "customer v ") + "  right join account acc  ON v.id = acc.id where acc.company =  ?  and v.ID is  null  and acc.name =  ? ";
        ArrayList params = new ArrayList();
        params.add(companyId);
        params.add(isVendor ? Constants.SUNDRY_VENDOR : Constants.SUNDRY_CUSTOMER);
        List list = executeSQLQuery( query, params.toArray());;
        int count = list.size();
        return new KwlReturnObject(true, "", "", list, count);
    }

    public KwlReturnObject getVendorsForCombo(HashMap<String, Object> requestParams) throws ServiceException {
        KwlReturnObject result;
        int start = 0;
        int limit = 30;
        boolean pagingFlag = false;
        try {
            ArrayList params = new ArrayList();
            String[] groups = (String[]) requestParams.get("group");

            String condition = (requestParams.get("ignore") == null ? "" : " not ");
            String[] nature = (String[]) requestParams.get("nature");
            String companyid = (String) requestParams.get("companyid");
            String ss = (String) requestParams.get(Constants.ss);
            
            String sw = null;
            sw=(String) requestParams.get("searchstartwith");
            
            boolean deleted = Boolean.parseBoolean((String) requestParams.get("deleted"));
            boolean nondeleted = Boolean.parseBoolean((String) requestParams.get("nondeleted"));
            params.add(companyid);
            String currencyid = (requestParams.get("comboCurrencyid") == null ? "" : requestParams.get("comboCurrencyid").toString());
            boolean receivableAccFlag = requestParams.containsKey("receivableAccFlag") && requestParams.get("receivableAccFlag") != null ? Boolean.parseBoolean((String) requestParams.get("receivableAccFlag")) : false;
            boolean isIBGVendors = (requestParams.containsKey("isIBGVendors") && requestParams.get("isIBGVendors") != null) ? Boolean.parseBoolean((String) requestParams.get("isIBGVendors")) : false;
            int bankType = (requestParams.containsKey("bankType") && requestParams.get("bankType") != null) ? Integer.parseInt((String) requestParams.get("bankType")) : 0;
           String userID = "";
            boolean isenableSalesPersonAgentFlow = false;
            if (requestParams.containsKey("enablesalespersonagentflow") && requestParams.get("enablesalespersonagentflow") != null && !StringUtil.isNullOrEmpty(requestParams.get("enablesalespersonagentflow").toString())) {
                isenableSalesPersonAgentFlow = Boolean.parseBoolean(requestParams.get("enablesalespersonagentflow").toString());
                if (isenableSalesPersonAgentFlow) {
                    if (requestParams.containsKey("userid") && requestParams.get("userid") != null && !StringUtil.isNullOrEmpty(requestParams.get("userid").toString())) {
                        userID = (String) requestParams.get("userid");
                    }
                }
            }
            if (requestParams.containsKey("start") && requestParams.containsKey("limit") && !StringUtil.isNullOrEmpty(requestParams.get("start").toString())) {
                start = Integer.parseInt(requestParams.get("start").toString());
                limit = Integer.parseInt(requestParams.get("limit").toString());
                pagingFlag = true;
            }
            
            /*
             * if(groups!=null){ String qMarks="?"; params.add("null"); for(int
             * i=0;i<groups.length;i++){ qMarks+=",?"; params.add(groups[i]); }
             * if(receivableAccFlag){ condition=" and ac.group.ID "+condition+"
             * in ("+qMarks+") "; }else{ condition=" and vd.account.group.ID
             * "+condition+" in ("+qMarks+") "; } } else if(nature!=null){
             * String qMarks="?"; params.add(5);//not a nature for(int
             * i=0;i<nature.length;i++){ qMarks+=",?";
             * params.add(Integer.parseInt(nature[i])); } condition+=" and
             * vd.account.group.nature "+condition+" in ("+qMarks+") "; }
             *
             * if (nondeleted) condition += " and vd.account.deleted=false ";
             * else if (deleted) condition += " and vd.account.deleted=true ";
             */
            if (!currencyid.equals("")) {
                condition += " and vd.currency = " + currencyid;
            }

            if (isIBGVendors) {
                condition += " and vd.ibgActivated = true ";
            }
            
            /*
             In Edit Case we loaded only select vendor.
            */
            if(requestParams.containsKey(Constants.vendorid) && requestParams.get(Constants.vendorid) != null && !StringUtil.isNullOrEmpty(requestParams.get(Constants.vendorid).toString())){
                params.add(requestParams.get(Constants.vendorid).toString());
                condition += " and vd.ID=? ";
            }
            if(bankType!=0){
                if(bankType== Constants.DBS_BANK_Type){
                    condition+=" and vd.id in (select ibg.vendor from ibgreceivingbankdetails ibg where ibg.company=? ) ";
                    params.add(companyid);
                } else if(bankType == Constants.CIMB_BANK_Type){
                    condition+=" and vd.id in (select cimb.vendor from cimbreceivingdetails cimb where cimb.company=? ) ";
                    params.add(companyid);
                }
            }
            /**
             * ismultiselectvendoridsFlag : check true when getting selected
             * customres from SOA- vendor account statement.
             */
            boolean ismultiselectvendoridsFlag = false;
            if (requestParams.containsKey("ismultiselectvendoridsFlag") && requestParams.get("ismultiselectvendoridsFlag") != null && !StringUtil.isNullOrEmpty(requestParams.get("ismultiselectvendoridsFlag").toString())) {
                ismultiselectvendoridsFlag = Boolean.parseBoolean(requestParams.get("ismultiselectvendoridsFlag").toString());
            }
            if (!StringUtil.isNullOrEmpty(ss) && !ismultiselectvendoridsFlag) {
                String[] searchcol = new String[]{"vd.name", "vd.acccode"};  // search on Vendor code and name
                Map map = StringUtil.insertParamSearchStringMap(params, ss, 2); 
                StringUtil.insertParamSearchString(map);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                condition += searchQuery;
            }
            if (!StringUtil.isNullOrEmpty(sw)) {// search on Vendor code and name starting with 

                String searchby = (String) requestParams.get("cmpRecordField");
                if (searchby.equals("code")) {
                    condition += " and vd.acccode like '" + sw + "%' ";
                } else {
                    condition += " and vd.name like '" + sw + "%' ";
                }
            }
            String query = "";
            String orderBy = "";
            if (requestParams.containsKey("customervendorsortingflag") && requestParams.get("customervendorsortingflag") != null) {
                int customervendorsortingflag = Integer.parseInt(requestParams.get("customervendorsortingflag").toString());
                if (customervendorsortingflag == 0) {
                    orderBy = " order by vd.name";
                } else if (customervendorsortingflag == 1) {
                    orderBy = " order by vd.acccode";
                }

            }
            if (requestParams.containsKey("multiselectedvendorIds") && requestParams.get("multiselectedvendorIds") != null) {
                String multiselectvendorIdGroup = requestParams.get("multiselectedvendorIds").toString();
                multiselectvendorIdGroup = AccountingManager.getFilterInString(multiselectvendorIdGroup);
                if (ismultiselectvendoridsFlag) {
                    condition += " AND vd.id IN " + multiselectvendorIdGroup;
                }else {
                    condition += " AND vd.id NOT IN " + multiselectvendorIdGroup;
                }
            }
            if (requestParams.containsKey("selectedvendorIds") && requestParams.get("selectedvendorIds") != null) {
                String vendorIdGroup = requestParams.get("selectedvendorIds").toString();
                vendorIdGroup = AccountingManager.getFilterInString(vendorIdGroup);
                condition += " and vd.id IN " + vendorIdGroup;
            }
            if (requestParams.containsKey("notinquery") && requestParams.get("notinquery") != null) {
                String notinquery = (String) requestParams.get("notinquery");
                notinquery = AccountingManager.getFilterInString(notinquery);
                if (!StringUtil.isNullOrEmpty(notinquery)) {
                    condition +=" and vd.acccode NOT IN "+ notinquery;
                }
            }
            /**
             * if any select column added in Query , Please check below two points
             * 1) Add select Column in last - Don't add any column in between or first
             * 2) Check all Query conditions if any array Index out of bound exception is thrown
             */
            
            // Passing empty instead vd.tdspayableaccount column in select query as there is no use and column is removed
            if (receivableAccFlag) {
                query = "SELECT vd.id, vd.parent, vd.acccode, vd.vattinnumber, vd.csttinnumber, vd.pannumber, vd.vendorbranch, vd.servicetaxnumber, vd.tannumber, vd.eccnumber, vd.residentialstatus, vd.natureOfPayment, vd.deductionreason, '', vd.tdsinterestpayableaccount, vd.`name`, vd.aliasname, vd.rmcdapprovalnumber, vd.account, vd.currency, vd.taxid, vd.selfbilledfromdate, vd.selfbilledtodate, IF(vd.activate = 'T', 'true', 'false') as activate, vd.agent, vd.deducteetype, IF(vd.interstateparty = 'T', 'true', 'false') as interstateparty, IF(vd.cformapplicable = 'T', 'true', 'false') as cformapplicable, IF(vd.istdsapplicableonvendor = 'T', 'true', 'false') as istdsapplicableonvendor, IF(vd.gtaapplicable = 'T', 'true', 'false') as gtaapplicable, vd.commissionerate, vd.division, vd.rangecode, vd.iecno, vd.minpricevalueforvendor, vd.mappingpaidto, vd.address, vd.email, vd.receivedfrommap, vd.paymentcriteria, vd.defaultnatureofpurchase, vd.manufacturertype, cur.symbol, cur.`name` as currencyname, ct.termdays, ct.termid, ' ' as groupname, ' ' as deleteflag, ' ' as acctaxid, vd.gstvendortype, vd.sezfromdate, vd.seztodate , vd.gstin, vd.gstregistrationtype , IF(vd.considerexemptlimit = 'T', 'true', 'false') as considerexemptlimit " +
                        "FROM vendor vd " +
                        "INNER JOIN currency cur ON vd.currency = cur.currencyid " +
                        "INNER JOIN creditterm ct ON vd.debitTerm = ct.termid " +
                        "WHERE vd.company = ? " + condition + orderBy;
            } else {
               if (isenableSalesPersonAgentFlow && !StringUtil.isNullOrEmpty(userID)) {
                    query = "SELECT vd.id, vd.parent, vd.acccode, vd.vattinnumber, vd.csttinnumber, vd.pannumber, vd.vendorbranch, vd.servicetaxnumber, vd.tannumber, vd.eccnumber, vd.residentialstatus, vd.natureOfPayment, vd.deductionreason, '', vd.tdsinterestpayableaccount, vd.`name`, vd.aliasname, vd.rmcdapprovalnumber, vd.account, vd.currency, vd.taxid, vd.selfbilledfromdate, vd.selfbilledtodate, IF(vd.activate = 'T', 'true', 'false') as activate, vd.agent, vd.deducteetype, IF(vd.interstateparty = 'T', 'true', 'false') as interstateparty, IF(vd.cformapplicable = 'T', 'true', 'false') as cformapplicable, IF(vd.istdsapplicableonvendor = 'T', 'true', 'false') as istdsapplicableonvendor, IF(vd.gtaapplicable = 'T', 'true', 'false') as gtaapplicable, vd.commissionerate, vd.division, vd.rangecode, vd.iecno, vd.minpricevalueforvendor, vd.mappingpaidto, vd.address, vd.email, vd.receivedfrommap, vd.paymentcriteria, vd.defaultnatureofpurchase, vd.manufacturertype, cur.symbol, cur.`name` as currencyname, ct.termdays, ct.termid, gr.name as groupname, acc.deleteflag, acc.taxid, vd.gstvendortype, vd.sezfromdate, vd.seztodate , vd.gstin, vd.gstregistrationtype, IF(vd.considerexemptlimit = 'T', 'true', 'false') as considerexemptlimit "  +
                            "FROM vendor vd " +
                            "INNER JOIN account acc ON vd.account = acc.id " +
                            "INNER JOIN accgroup gr ON acc.groupname = gr.id " +
                            "INNER JOIN currency cur ON vd.currency = cur.currencyid " +
                            "INNER JOIN creditterm ct ON vd.debitTerm = ct.termid " +
                            "LEFT JOIN vendoragentmapping vm ON vd.agent = vm.vendorid " +
                            "LEFT JOIN masteritem vam ON vm.agent = vam.id " +
                            "WHERE vd.company = ? AND ((vam.`user` = '"+ userID +"' OR vam.`user` IS NULL AND vd.vendavailtoagent = 'T') OR (vd.vendavailtoagent = 'F')) " + condition + orderBy;
                    //params.add(userID);   //SDP-12424
                } else {
                    query = "SELECT vd.id, vd.parent, vd.acccode, vd.vattinnumber, vd.csttinnumber, vd.pannumber, vd.vendorbranch, vd.servicetaxnumber, vd.tannumber, vd.eccnumber, vd.residentialstatus, vd.natureOfPayment, vd.deductionreason, '', vd.tdsinterestpayableaccount, vd.`name`, vd.aliasname, vd.rmcdapprovalnumber, vd.account, vd.currency, vd.taxid, vd.selfbilledfromdate, vd.selfbilledtodate, IF(vd.activate = 'T', 'true', 'false') as activate, vd.agent, vd.deducteetype, IF(vd.interstateparty = 'T', 'true', 'false') as interstateparty, IF(vd.cformapplicable = 'T', 'true', 'false') as cformapplicable, IF(vd.istdsapplicableonvendor = 'T', 'true', 'false') as istdsapplicableonvendor, IF(vd.gtaapplicable = 'T', 'true', 'false') as gtaapplicable, vd.commissionerate, vd.division, vd.rangecode, vd.iecno, vd.minpricevalueforvendor, vd.mappingpaidto, vd.address, vd.email, vd.receivedfrommap, vd.paymentcriteria, vd.defaultnatureofpurchase, vd.manufacturertype, cur.symbol, cur.`name` as currencyname, ct.termdays, ct.termid, gr.name as groupname, acc.deleteflag, acc.taxid, vd.gstvendortype, vd.sezfromdate, vd.seztodate , vd.gstin, vd.gstregistrationtype, IF(vd.considerexemptlimit = 'T', 'true', 'false') as considerexemptlimit  " +
                            "FROM vendor vd " +
                            "INNER JOIN account acc ON vd.account = acc.id " +
                            "INNER JOIN accgroup gr ON acc.groupname = gr.id " +
                            "INNER JOIN currency cur ON vd.currency = cur.currencyid " +
                            "INNER JOIN creditterm ct ON vd.debitTerm = ct.termid " +
                            "WHERE vd.company = ? " + condition + orderBy;
                }
            }
            List list = executeSQLQuery(query, params.toArray());

            int totalCount = list.size();
            
            if (pagingFlag && !ismultiselectvendoridsFlag) {
                list = executeSQLQueryPaging(query, params.toArray(), new Integer[]{start, limit});
            }
            
            result = new KwlReturnObject(true, null, null, list, totalCount);
        } catch (Exception ex) {
            result = new KwlReturnObject(false, "accAccountDAOImpl.getAccounts:" + ex.getMessage(), null, null, 0);
        }
        return result;
    }

    public KwlReturnObject getVendorForAgedPayable(HashMap request) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        params.add(request.get("companyid"));
        String condition = "";
        String customerid = (String) request.get("custVendorID");
        String customerIdFinal = "";
        if (customerid != null) {
            if (customerid.equalsIgnoreCase("All") || customerid.equals("")) {       //for giving the functionality to select all 
                customerIdFinal = "";
            } else {
                for (String customeridObj : customerid.split(",")) {
                    customerIdFinal += "'" + customeridObj + "',";
                }
            }
            if (customerIdFinal.contains(",")) {
                customerIdFinal = customerIdFinal.substring(0, customerIdFinal.lastIndexOf(","));
            }
            if (!StringUtil.isNullOrEmpty(customerIdFinal)) {
                condition += " and v.ID in(" + customerIdFinal + ")";
            }
        }
        String query = "select ID from Vendor v where company.companyID= ?" + condition +" Order By name";
        list = executeQuery( query, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    public KwlReturnObject getVendorAndCurrencyDetailsForAgedPayable(HashMap request) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        params.add(request.get("companyid"));
        String condition = "";
        String customerid = (String) request.get("custVendorID");
        String customerIdFinal = "";
        if (customerid != null) {
            if (customerid.equalsIgnoreCase("All") || customerid.equals("")) {       //for giving the functionality to select all 
                customerIdFinal = "";
            } else {
                for (String customeridObj : customerid.split(",")) {
                    customerIdFinal += "'" + customeridObj + "',";
                }
            }
            if (customerIdFinal.contains(",")) {
                customerIdFinal = customerIdFinal.substring(0, customerIdFinal.lastIndexOf(","));
            }
            if (!StringUtil.isNullOrEmpty(customerIdFinal)) {
                condition += " and v.ID in(" + customerIdFinal + ")";
            }
        }
        String query = "select ID,account.currency.currencyID,account.currency.name,account.currency.symbol,v.currency.currencyID from Vendor v where company.companyID= ?" + condition +" Order By name";
        list = executeQuery( query, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    /**
     * 
     * @param request
     * @return
     * @throws ServiceException 
     * @Desc  : Get Vendor List with Parent Check
     */
    public KwlReturnObject getVendorAndCurrencyDetailsForParentAgedPayable(HashMap request) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        params.add(request.get("companyid"));
        String condition = "";
        String customerid = (String) request.get("custVendorID");
        String customerIdFinal = "";
        String parentCondition = "";
        boolean isCurrencyDetails=false;
        if(request.containsKey("isCurrencyDetails")){
            isCurrencyDetails=Boolean.parseBoolean(request.get("isCurrencyDetails").toString());
        }
        if (!StringUtil.isNullOrEmpty(customerid)) {
            /**
             * In case vendor selected from option
             */
            if (customerid.equalsIgnoreCase("All") || customerid.equals("")) {       //for giving the functionality to select all 
                customerIdFinal = "";
            } else {
                for (String customeridObj : customerid.split(",")) {
                    customerIdFinal += "'" + customeridObj + "',";
                }
            }
            if (customerIdFinal.contains(",")) {
                customerIdFinal = customerIdFinal.substring(0, customerIdFinal.lastIndexOf(","));
            }
            if (!StringUtil.isNullOrEmpty(customerIdFinal)) {
                condition += " and v.ID in(" + customerIdFinal + ")";
            } else {
                parentCondition = " v.parent is null ";
                parentCondition = " and (" + parentCondition + ") ";
            }
        } else if(isCurrencyDetails){
            /**
             * Do Nothing i.e. don't append any condition.
             */
        }else{
            parentCondition = " v.parent is null ";
            parentCondition = " and (" + parentCondition + ") ";
        }

        String query = "from Vendor v where company.companyID= ?" + condition + parentCondition + " Order By name";
        list = executeQuery(query, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    public KwlReturnObject deleteVendor(String accountid, String companyid) throws ServiceException {
        String delQuery = "delete from Vendor a where a.ID=? and a.company.companyID=?";
        int numRows = executeUpdate( delQuery, new Object[]{accountid, companyid});
        int numRows1 = deleteVendorCustomData(accountid, companyid);
        return new KwlReturnObject(true, "Vendor has been deleted successfully.", null, null, numRows + numRows1);
    }

    public KwlReturnObject activateDeactivateVendors(HashMap request) throws ServiceException{
        List list = new ArrayList();
        String msg="";
        try {
            JSONArray jArr = new JSONArray((String) request.get("data"));
            boolean vendorActivateDeactivateFlag = (Boolean) request.get("vendorActivateDeactivateFlag");
            for (int i = 0; i < jArr.length(); i++) {
                JSONObject jobj = jArr.getJSONObject(i);
                if (!StringUtil.isNullOrEmpty(jobj.getString("accid"))) {
                    Vendor vendorObj = (Vendor) get(Vendor.class, jobj.getString("accid"));
                    if (vendorObj != null) {
                        vendorObj.setActivate(vendorActivateDeactivateFlag);
                        update(vendorObj);
                        list.add(vendorObj);
                    }
                }
            }
            msg=vendorActivateDeactivateFlag?"Vendors(s) has been deactivated successfully.":"Vendors(s) has been activated successfully.";
        }  catch (JSONException ex) {
            Logger.getLogger(accAccountDAOImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, msg, null, list, list.size());
    }
    public int deleteVendorCustomData(String accountid, String companyid) throws ServiceException {
        String delQueryForCustomData = "delete from VendorCustomData a where a.vendorId=? and a.company.companyID=?";
        int numRows1 = executeUpdate( delQueryForCustomData, new Object[]{accountid, companyid});
        return numRows1;
    }

    public KwlReturnObject getVendor_Dashboard(String companyid, boolean isnull, String orderby, int start, int limit) throws ServiceException {
        List list = new ArrayList();
        String condition = isnull ? "modifiedOn is null" : "modifiedOn is not null";

//        query="from Vendor where company.companyID=? and modifiedOn is null order by createdOn";
//        query="from Vendor where company.companyID=? and modifiedOn is not null order by modifiedOn";

        String query = "from Vendor where company.companyID=? and " + condition + " order by " + orderby + " desc";
        list = executeQueryPaging( query, new Object[]{companyid}, new Integer[]{start, limit});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getVendorList(HashMap<String, Object> requestParams) throws ServiceException {
        String initialQuery = "from Vendor";
        return buildNExecuteQuery( initialQuery, requestParams);
    }

    public KwlReturnObject getCustomerVendorMapping(HashMap<String, Object> requestParams) throws ServiceException {
        String initialQuery = "from CustomerVendorMapping c ";
        return buildNExecuteQuery( initialQuery, requestParams);
    }

    public KwlReturnObject getNewVendorList(HashMap<String, Object> requestParams) throws ServiceException {
        ArrayList params = new ArrayList();
        List listSql = null;
        String conditionSQL = "";
        String categoryid = (String) requestParams.get("categoryid"); // in case of isPricingBandGrouping = true treated as pricing band
        String start = (String) requestParams.get(Constants.start);
        String limit = (String) requestParams.get(Constants.limit);
        String salesPersonAgentId = requestParams.get("salesPersonAgentId")!=null?(String) requestParams.get("salesPersonAgentId"):"";
        boolean isBySalesPersonOrAgent = (requestParams.containsKey("isBySalesPersonOrAgent") && requestParams.get("isBySalesPersonOrAgent")!=null)?Boolean.parseBoolean(requestParams.get("isBySalesPersonOrAgent").toString()):false;
        boolean isPricingBandGrouping = false;
        if (requestParams.containsKey("isPricingBandGrouping")) {
            isPricingBandGrouping = (Boolean) requestParams.get("isPricingBandGrouping");
        }
        
        String query = "";
        if(isBySalesPersonOrAgent){
            params.add((String) requestParams.get("companyid"));
                if (!StringUtil.isNullOrEmpty(salesPersonAgentId)) {
                    params.add(salesPersonAgentId);
                    conditionSQL += " and  am.agent = ? ";
                }
                query = " select v.id,am.agent from vendor v left join vendoragentmapping am on v.id=am.vendorid where v.company= ? " + conditionSQL + " order by am.agent desc";
        }else{
            if (isPricingBandGrouping) {
                params.add((String) requestParams.get("companyid"));

                if (!StringUtil.isNullOrEmpty(categoryid)) {
                    params.add(categoryid);
                    conditionSQL += " and  v.pricingbandmaster = ? ";
                }
                query = " select v.id, v.pricingbandmaster from vendor v where v.company= ? " + conditionSQL + " order by v.pricingbandmaster desc";
            } else {
                params.add((String) requestParams.get("companyid"));

                if (!StringUtil.isNullOrEmpty(categoryid)) {
                    params.add(categoryid);
                    conditionSQL += " and  vm.vendorcategory = ? ";
                }
                query = " select v.id,vm.vendorcategory from vendor v left join vendorcategorymapping vm on v.id=vm.vendorid where v.company= ? " + conditionSQL + " order by vm.vendorcategory desc";
            }
        }
        
        listSql = executeSQLQuery( query, params.toArray());
        int totalCount = listSql.size();
        if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
            listSql = executeSQLQueryPaging( query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
        }
        return new KwlReturnObject(true, "", "", listSql, totalCount);
    }

    public KwlReturnObject getVendorCategoryIDs(String vendorid) throws ServiceException {
        KwlReturnObject result;
        ArrayList params = new ArrayList();
        params.add(vendorid);

        String query = "from VendorCategoryMapping where vendorID.ID =  ? ";
        List list = executeQuery( query, params.toArray());

        result = new KwlReturnObject(true, null, null, list, list.size());
        return result;
    }

    public KwlReturnObject get1099EligibleVendor(String companyid, String ss) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        String condition = "";
        params.add(companyid);
        if (!StringUtil.isNullOrEmpty(ss)) {
            params.add(ss + "%");
            condition += " and  v.name like ? ";
        }
        String query = "from Vendor v where v.taxEligible=true and company.companyID=? " + condition;

        list = executeQuery( query, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getLastTransactionVendor(String id, boolean isBilling) throws ServiceException {
        List list = new ArrayList();
        String query = "select goodsreceipt.tax from goodsreceipt "
                + " inner join journalentry on journalentry.id = goodsreceipt.journalentry "
                + " where goodsreceipt.vendor = ? and goodsreceipt.deleteflag='F' order by journalentry.createdon desc limit 1";
        if (isBilling) {
            query = "select tax from billinggr "
                    + " inner join journalentry on journalentry.id = billinggr.journalentry "
                    + " where billinggr.vendor = ? and billinggr.deleteflag='F' order by journalentry.createdon desc limit 1";
        }
        list = executeSQLQuery( query, id);

        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getQuotationFromAccount(String accountid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from VendorQuotation t where t.vendor.ID=? and t.company.companyID=?";
        list = executeQuery( q, new Object[]{accountid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject saveVendorCategoryMapping(String vendorid, String vendorCategory) throws ServiceException {
        List list = new ArrayList();
        try {
            VendorCategoryMapping vendorMapping = new VendorCategoryMapping();
            if (vendorid != null) {
                vendorMapping.setVendorID((Vendor) get(Vendor.class, vendorid));
            }
            if (vendorCategory != null) {
                vendorMapping.setVendorCategory((MasterItem) get(MasterItem.class, vendorCategory));
            }
            save(vendorMapping);
            list.add(vendorMapping);
        } catch (Exception e) {
            throw ServiceException.FAILURE("accCustomerDAOImpl.saveCustomerCategoryMapping", e);
        }
        return new KwlReturnObject(true, "", "", list, list.size());
    }

    public KwlReturnObject deleteVendorCategoryMappingDtails(String vendorid) throws ServiceException {
        int numRows = 0;
        String delQuery = "delete from VendorCategoryMapping vm where vm.vendorID.ID=?";
        numRows += executeUpdate( delQuery, new Object[]{vendorid});
        return new KwlReturnObject(true, "", null, null, numRows);
    }

    @Override
       public KwlReturnObject updatePreferedVendorinproduct(String vendorid,String companyid) throws ServiceException {
        int numRows = 0;
        String updateQuery = "update Product p set p.vendor=null where p.vendor.ID=? and p.company.companyID=?";
        numRows += executeUpdate( updateQuery, new Object[]{vendorid,companyid});
        return new KwlReturnObject(true, "", null, null, numRows);
    }
    @Override
    public KwlReturnObject deleteIBGReceivingBankDetails(HashMap<String, Object> requestMap) throws ServiceException {

        List params = new ArrayList();
        String condition = "";

        String companyId = (String) requestMap.get("companyId");
        params.add(companyId);

        if (requestMap.containsKey("receivingBankDetailId") && requestMap.get("receivingBankDetailId") != null) {
            condition += " and rbd.id=? ";
            params.add((String) requestMap.get("receivingBankDetailId"));
        }

        if (requestMap.containsKey("vendorId") && requestMap.get("vendorId") != null) {
            condition += " and rbd.vendor.ID=? ";
            params.add((String) requestMap.get("vendorId"));
        }

        String deleteQuery = "DELETE FROM IBGReceivingBankDetails rbd where rbd.company.companyID=? " + condition;
        int numRows = executeUpdate( deleteQuery, params.toArray());
        return new KwlReturnObject(true, "", null, null, numRows);
    }
    
    @Override
    public KwlReturnObject deleteCIMBReceivingBankDetails(HashMap<String, Object> requestMap) throws ServiceException {

        List params = new ArrayList();
        String condition = "";

        String companyId = (String) requestMap.get("companyId");
        params.add(companyId);

        if (requestMap.containsKey("cimbReceivingBankDetailId") && requestMap.get("cimbReceivingBankDetailId") != null) {
            condition += " and rbd.id=? ";
            params.add((String) requestMap.get("cimbReceivingBankDetailId"));
        }

        if (requestMap.containsKey("vendorId") && requestMap.get("vendorId") != null) {
            condition += " and rbd.vendor.ID=? ";
            params.add((String) requestMap.get("vendorId"));
        }

        String deleteQuery = "DELETE FROM CIMBReceivingDetails rbd where rbd.company.companyID=? " + condition;
        int numRows = executeUpdate( deleteQuery, params.toArray());
        return new KwlReturnObject(true, "", null, null, numRows);
    }

    public KwlReturnObject getVendorForTax(String taxid, String companyid) throws ServiceException {
        ArrayList params = new ArrayList();
        params.add(taxid);
        params.add(companyid);
        String query = "Select name from Vendor v where v.taxid=? and v.company.companyID=?";
        List list = executeQuery( query, params.toArray());
        KwlReturnObject result = new KwlReturnObject(true, null, null, list, list.size());
        return result;
    }

    @Override
    public KwlReturnObject deleteVendorAddresses(String vendorID, String companyid) throws ServiceException {
        int numRows = 0;
        String delQuery = "delete from VendorAddresses ca where ca.vendorID=? and ca.company.companyID=?";
        numRows += executeUpdate( delQuery, new Object[]{vendorID,companyid});
        return new KwlReturnObject(true, "", null, null, numRows);
    }
    
    @Override
     public synchronized String updateVendorNumber(Map<String, Object> seqNumberMap) {
        String documnetNumber = "";
        try {
            documnetNumber = seqNumberMap.containsKey(Constants.AUTO_ENTRYNUMBER) ? (String)seqNumberMap.get(Constants.AUTO_ENTRYNUMBER) : "";
            int seqNumber = 0;
            if(seqNumberMap.containsKey(Constants.SEQNUMBER) && !StringUtil.isNullObject(seqNumberMap.get(Constants.SEQNUMBER)) && !StringUtil.isNullOrEmpty(seqNumberMap.get(Constants.SEQNUMBER).toString())){
               seqNumber= Integer.parseInt(seqNumberMap.get(Constants.SEQNUMBER).toString());
            }
            String datePrefix = seqNumberMap.containsKey(Constants.DATEPREFIX) ? (String)seqNumberMap.get(Constants.DATEPREFIX) : "";
            String dateafterPrefix = seqNumberMap.containsKey(Constants.DATEAFTERPREFIX) ? (String) seqNumberMap.get(Constants.DATEAFTERPREFIX) : "";
            String dateSuffix = seqNumberMap.containsKey(Constants.DATESUFFIX) ? (String)seqNumberMap.get(Constants.DATESUFFIX) : "";
            String sequenceFormatID = seqNumberMap.containsKey(Constants.SEQUENCEFORMATID) ? (String)seqNumberMap.get(Constants.SEQUENCEFORMATID) : "";
            String documentID = seqNumberMap.containsKey(Constants.DOCUMENTID) ? (String)seqNumberMap.get(Constants.DOCUMENTID) : "";
            String companyID = seqNumberMap.containsKey(Constants.companyKey) ? (String)seqNumberMap.get(Constants.companyKey) : "";
            String query = "update Vendor set acccode = ?,seqnumber=?,datePreffixValue=?,dateafterpreffixvalue=?, dateSuffixValue=? ,seqformat.ID=? where ID=? and company.companyID=?";
            int numRows = executeUpdate( query, new Object[]{documnetNumber, seqNumber, datePrefix,dateafterPrefix, dateSuffix, sequenceFormatID, documentID, companyID});
        } catch (Exception e) {
            System.out.println(e);
        }
        return documnetNumber;
    }
     @Override
    public KwlReturnObject vendorNumberCount(String venNo, String companyId) throws ServiceException {
        List list = new ArrayList();
        String q = "from Vendor where acccode=? and company.companyID=?";
        if (!StringUtil.isNullOrEmpty(venNo)) {
            list = executeQuery( q, new Object[]{venNo, companyId});
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
     @Override
     public synchronized String updateVendorEntryNumberForNA(String prid, String entrynumber) {
        try {
            String query = "update Vendor set acccode = ? where ID=?";
            int numRows = executeUpdate( query, new Object[]{entrynumber, prid});
        } catch (Exception e) {
            System.out.println(e);
        }
        return entrynumber;
    }

    @Override
    public void saveVendorAgentMapping(Vendor vendor, String[] agents) throws ServiceException {
        Set<VendorAgentMapping> agentMappingSet = new HashSet<VendorAgentMapping>();
        try {

            for (int i = 0; i < agents.length; i++) {
                VendorAgentMapping agentObj = new VendorAgentMapping();
                if (!StringUtil.isNullOrEmpty(agents[i])) {
                    agentObj.setAgent((MasterItem) get(MasterItem.class, agents[i]));
                    agentObj.setVendorID(vendor);
                }
                agentMappingSet.add(agentObj);
            }
            vendor.setAgent(agentMappingSet);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accVendorDAOImpl.saveVendorAgentMapping", ex);
        }
    }

    @Override
    public int deleteVendorAgentMapping(String vendorID) throws ServiceException {
        int numRows = 0;
        try {
            String delQuery = "delete from VendorAgentMapping vm where vm.vendorID.ID=?";
            numRows = executeUpdate( delQuery, new Object[]{vendorID});
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accVendorDAOImpl.deleteVendorAgentMapping", ex);
        }
        return numRows;
    }
  
    @Override
    public KwlReturnObject saveAgentMapping(String vendorid, String agentid) throws ServiceException {
        List list = new ArrayList();
        try {
            VendorAgentMapping vendorAgentMapping = new VendorAgentMapping();
            if (!StringUtil.isNullOrEmpty(vendorid)) {
                vendorAgentMapping.setVendorID((Vendor) get(Vendor.class, vendorid));
            }
            if (!StringUtil.isNullOrEmpty(agentid)) {
                vendorAgentMapping.setAgent((MasterItem) get(MasterItem.class, agentid));
            }
            save(vendorAgentMapping);
            list.add(vendorAgentMapping);
        } catch (Exception e) {
            throw ServiceException.FAILURE("accVendorDAOImpl.saveAgentMapping", e);
        }
        return new KwlReturnObject(true, "", "", list, list.size());
    }
     @Override
    public KwlReturnObject getinvoiceDocuments(HashMap<String, Object> dataMap) throws ServiceException {
        List list = null;
        int count = 0;
        try {
    
            ArrayList params = new ArrayList();

            params.add((String) dataMap.get(Constants.companyKey));

            String conditionSQL = " where invoicedoccompmap.company=?";

            String invoiceId = (String) dataMap.get("invoiceID");
            if (!StringUtil.isNullOrEmpty(invoiceId)) {
                params.add(invoiceId);
                conditionSQL += " and invoicedoccompmap.invoiceid=?";
            }

            String mysqlQuery = "select invoicedocuments.docname  as docname,invoicedocuments.doctypeid as doctypeid,invoicedocuments.docid as docid "
                    + "from invoicedoccompmap inner join invoicedocuments on invoicedoccompmap.documentid=invoicedocuments.id " + conditionSQL;

            list = executeSQLQuery( mysqlQuery, params.toArray());
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accCustomerDAOImpl.getinvoiceDocuments:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    @Override
    public KwlReturnObject getChildVendors(HashMap<String, Object> requestParams) throws ServiceException {

        KwlReturnObject result;
        List cntlist = new ArrayList();
        try {
            ArrayList params = new ArrayList();
            String condition = "";
            String propagatedCustomerID = requestParams.containsKey("parentCompanyVendorID") ? (String) requestParams.get("parentCompanyVendorID") : "";

            condition += "  ct.account.deleted=false ";
            if (!StringUtil.isNullOrEmpty(propagatedCustomerID)) {
                condition += " and ct.propagatedVendorID.ID=? ";
                params.add(propagatedCustomerID);
            }
            String query = "select ct from Vendor ct where  " + condition;
            Long totalCount = 0l;
            cntlist = executeQuery( query, params.toArray());

            result = new KwlReturnObject(true, null, null, cntlist, cntlist.size());
        } catch (Exception ex) {
            result = new KwlReturnObject(false, "accVendorDAOImpl.getChildVendors:" + ex.getMessage(), null, null, 0);
        }
        return result;
    }
    
    @Override
    public KwlReturnObject checkDuplicateVendorForEdit(String entryNumber, String companyid, String vendorid) throws ServiceException {
        try {
            List list = new ArrayList();
            int count = 0;
            String q = "from Vendor where acccode=? and company.companyID=? and ID!=?";
            list = executeQuery( q, new Object[]{entryNumber, companyid, vendorid});
            count = list.size();
            return new KwlReturnObject(true, "", null, list, count);

        } catch (Exception ex) {
            Logger.getLogger(accVendorDAOImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accVendorDAOImpl.checkduplicate:" + ex.getMessage(), ex);
        }
    }
    
    @Override
    public KwlReturnObject getVendorCount(String vendorno, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from Vendor where acccode=? and company.companyID=?";
        if (!StringUtil.isNullOrEmpty(vendorno)) {
            list = executeQuery( q, new Object[]{vendorno, companyid});
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject saveCIMBReceivingBankDetails(HashMap dataMap) throws ServiceException {
        CIMBReceivingDetails receivingBankDetails = createCIMBReceivingBankDetails(dataMap);
        saveOrUpdate(receivingBankDetails);
        List resultlist = new ArrayList();
        resultlist.add(receivingBankDetails);
        KwlReturnObject result = new KwlReturnObject(true, null, null, resultlist, resultlist.size());
        return result;
    }

    public CIMBReceivingDetails createCIMBReceivingBankDetails(HashMap dataMap) {
        CIMBReceivingDetails receivingBankDetails = new CIMBReceivingDetails();

        if (dataMap.containsKey("cimbReceivingBankDetailId") && dataMap.get("cimbReceivingBankDetailId") != null && !StringUtil.isNullOrEmpty((String)dataMap.get("cimbReceivingBankDetailId"))) {
            receivingBankDetails = (CIMBReceivingDetails) get(CIMBReceivingDetails.class, (String) dataMap.get("cimbReceivingBankDetailId"));
        }
        if (dataMap.containsKey("collectionAccName") && dataMap.get("collectionAccName") != null) {
            receivingBankDetails.setCollectionAccountName((String)dataMap.get("collectionAccName"));
        }
        if (dataMap.containsKey("collectionAccNo") && dataMap.get("collectionAccNo") != null) {
            receivingBankDetails.setCollectionAccountNumber((String)dataMap.get("collectionAccNo"));
        }
        if (dataMap.containsKey("giroBICCode") && dataMap.get("giroBICCode") != null) {
            receivingBankDetails.setGiroBICCode((String)dataMap.get("giroBICCode"));
        }
        if (dataMap.containsKey("refNumber") && dataMap.get("refNumber") != null) {
            receivingBankDetails.setReferenceNumber((String)dataMap.get("refNumber"));
        }
        if (dataMap.containsKey("companyId") && dataMap.get("companyId") != null) {
            Company company = (Company) get(Company.class, (String) dataMap.get("companyId"));
            receivingBankDetails.setCompany(company);
        }
        if (dataMap.containsKey("masterItemId") && dataMap.get("masterItemId") != null) {
            MasterItem masterItem = (MasterItem) get(MasterItem.class, (String) dataMap.get("masterItemId"));
            receivingBankDetails.setMasterItem(masterItem);
        }
        if (dataMap.containsKey("vendorId") && dataMap.get("vendorId") != null) {
            Vendor vendor = (Vendor) get(Vendor.class, (String) dataMap.get("vendorId"));
            receivingBankDetails.setVendor(vendor);
        }
        
        if (dataMap.containsKey("emailForGiro") && dataMap.get("emailForGiro") != null) {
            receivingBankDetails.setEmailForGiro((String)dataMap.get("emailForGiro"));
        }
        return receivingBankDetails;
    }
    @Override
    public KwlReturnObject getCIMBReceivingBankDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String condition = "";
        ArrayList params = new ArrayList();
        params.add((String) requestParams.get("companyId"));

        if (requestParams.containsKey("vendorId") && requestParams.get("vendorId") != null) {
            params.add((String) requestParams.get("vendorId"));
            condition += " and rbd.vendor.ID=? ";
        }

        if (requestParams.containsKey("masterItemId") && requestParams.get("masterItemId") != null) {
            params.add((String) requestParams.get("masterItemId"));
            condition += " and rbd.masterItem.ID=? ";
        }

        String query = "From CIMBReceivingDetails rbd where rbd.company.companyID=? " + condition;

        List list = executeQuery( query, params.toArray());

        KwlReturnObject result = new KwlReturnObject(true, null, null, list, list.size());

        return result;
    }
    
    @Override
    public KwlReturnObject saveOCBCReceivingBankDetails(JSONObject paramsObj) throws ServiceException {
        List list = new ArrayList();
        try {

            String ocbcIBGDetailId = paramsObj.optString(Constants.OCBC_IBGDetailId);
            OCBCReceivingDetails receivingDetails = new OCBCReceivingDetails();

            if (!StringUtil.isNullOrEmpty(ocbcIBGDetailId)) {
                receivingDetails = (OCBCReceivingDetails) get(OCBCReceivingDetails.class, ocbcIBGDetailId);
            }
            if (!StringUtil.isNullOrEmpty(paramsObj.optString(Constants.OCBC_BankCode))) {
                receivingDetails.setBankCode(paramsObj.optString(Constants.OCBC_BankCode));
            }
            if (!StringUtil.isNullOrEmpty(paramsObj.optString(Constants.OCBC_VendorAccountNumber))) {
                receivingDetails.setAccountNumber(paramsObj.optString(Constants.OCBC_VendorAccountNumber));
            }
            if (!StringUtil.isNullOrEmpty(paramsObj.optString(Constants.OCBC_UltimateCreditorName))) {
                receivingDetails.setUltimateCreditorName(paramsObj.optString(Constants.OCBC_UltimateCreditorName));
            }
            if (!StringUtil.isNullOrEmpty(paramsObj.optString(Constants.OCBC_UltimateDebtorName))) {
                receivingDetails.setUltimateDebtorName(paramsObj.optString(Constants.OCBC_UltimateDebtorName));
            }
            if (!StringUtil.isNullOrEmpty(paramsObj.optString(Constants.OCBC_SendRemittanceAdviceVia))) {
                receivingDetails.setRemittanceAdviceVia(paramsObj.optString(Constants.OCBC_SendRemittanceAdviceVia));
            }
            if (!StringUtil.isNullOrEmpty(paramsObj.optString(Constants.OCBC_RemittanceAdviceSendDetails))) {
                receivingDetails.setRemittanceAdviceSendDetails(paramsObj.optString(Constants.OCBC_RemittanceAdviceSendDetails));
            }
            if (!StringUtil.isNullOrEmpty(paramsObj.optString("vendor"))) {
                Vendor vendor = (Vendor) get(Vendor.class, paramsObj.optString("vendor"));
                receivingDetails.setVendor(vendor);
            }
            if (!StringUtil.isNullOrEmpty(paramsObj.optString("masterItem"))) {
                MasterItem paidTo = (MasterItem) get(MasterItem.class, paramsObj.optString("masterItem"));
                receivingDetails.setPaidTo(paidTo);
            }
            if (!StringUtil.isNullOrEmpty(paramsObj.optString(Constants.companyKey))) {
                Company company = (Company) get(Company.class, paramsObj.optString(Constants.companyKey));
                receivingDetails.setCompany(company);
            }
            saveOrUpdate(receivingDetails);
            list.add(receivingDetails);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accVendorDAOImpl.saveOCBCReceivingBankDetails:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "OCBC Receiving bank details been saved successfully.", null, list, list.size());
    }
    
    /**
     *
     * @param paramsObj
     * @return
     * @throws ServiceException
     */
    @Override
    public KwlReturnObject getOCBCReceivingBankDetails(JSONObject paramsObj) throws ServiceException {
        List list = null;
        try {
            ArrayList params = new ArrayList();
            String condition = "";
            params.add((paramsObj.optString(Constants.companyKey)));
            if (!StringUtil.isNullOrEmpty(paramsObj.optString("vendor"))) {
                condition += " and rd.vendor.ID = ? ";
                params.add(paramsObj.optString("vendor"));
            }
            if (!StringUtil.isNullOrEmpty(paramsObj.optString("masterItem"))) {
                condition += " and rd.paidTo.ID = ? ";
                params.add(paramsObj.optString("masterItem"));
            }
            String query = " from OCBCReceivingDetails rd where rd.company.companyID = ? " + condition;
            list = executeQuery(query, params.toArray());
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accVendorDAOImpl.getOCBCReceivingBankDetails:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    @Override
    public KwlReturnObject deleteOCBCReceivingBankDetails(JSONObject paramsObj) throws ServiceException {
        int numRows = 0;
        try {
            ArrayList params = new ArrayList();
            String condition = "";
            params.add((paramsObj.optString(Constants.companyKey)));
            if (!StringUtil.isNullOrEmpty(paramsObj.optString("vendor"))) {
                condition += " and rd.vendor.ID = ? ";
                params.add(paramsObj.optString("vendor"));
            }
            if (!StringUtil.isNullOrEmpty(paramsObj.optString("ocbcIBGDetailId"))) {
                condition += " and rd.id = ? ";
                params.add(paramsObj.optString("ocbcIBGDetailId"));
            }

            String deleteQuery = "DELETE FROM OCBCReceivingDetails rd where rd.company.companyID = ? " + condition;
            numRows = executeUpdate(deleteQuery, params.toArray());
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accVendorDAOImpl.getOCBCReceivingBankDetails:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "OCBC Receiving Bank Detail has been deleted successfully.", "", null, numRows);
    }
    
    @Override
    public KwlReturnObject getAllVendorsOfCompany(String companyID) throws ServiceException {
        List list = null;
        ArrayList params = new ArrayList();
        try {
            params.add(companyID);
            String query = "SELECT vendor.id from vendor WHERE vendor.company=? ORDER BY vendor.name";
            list = executeSQLQuery(query, params.toArray());
        } catch (Exception ex) {
            Logger.getLogger(accVendorDAOImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accVendorDAOImpl.getAllVendorsOfCompany:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getPaymentsWithCimb(HashMap<String, Object> requestParams) throws ServiceException {
        String condition = "";
        ArrayList params = new ArrayList();
        params.add((String) requestParams.get("companyid"));
        if (requestParams.containsKey("cimbReceivingBankDetailId") && requestParams.get("cimbReceivingBankDetailId") != null) {
            params.add((String) requestParams.get("cimbReceivingBankDetailId"));
            condition += " and p.cimbreceivingbankdetails.id=? ";
        }
        String query = "Select p.ID from Payment p where p.company.companyID = ? "+condition;
        
        List list = executeQuery(query,params.toArray());
        
        KwlReturnObject result = new KwlReturnObject(true, null, null, list, list.size());

        return result;
    }
    
    @Override
    public KwlReturnObject UpdateCustomerVendorMapping(String vendorid) throws ServiceException{
        List list = null;
        ArrayList params = new ArrayList();
        params.add(vendorid);
        String query = "select customeraccountid from customervendormapping where vendoraccountid=?";
        list = executeSQLQuery(query, params.toArray());
        if(!list.isEmpty()){
            String customerid=(String) list.get(0);
            String updatequery ="update Customer set mapcustomervendor = ? where ID=?";
            executeUpdate( updatequery, new Object[]{false,customerid});
            String deleteQuery = "delete from CustomerVendorMapping where vendoraccountid.ID=?";//Deleting record from customervendormapping table
            executeUpdate(deleteQuery,new Object[]{vendorid});
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getMasterItemFromDefaultMasterItem(String defaultId, String company) throws ServiceException {
        List list = new ArrayList();
        String query = "SELECT mi.id as id FROM masteritem as mi WHERE mi.defaultmasteritem=? AND mi.company=?";
        ArrayList params = new ArrayList();
        params.add(defaultId);
        params.add(company);
        list = executeSQLQuery(query, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getVendorForTDSPayment(String payment,String company) throws ServiceException{
        List list = new ArrayList();
        String query = " select pay.vendor as vendorid "
                     + " from advancedetail advd "
                     + " inner join payment pay on pay.id = advd.payment "
                     + " where ((advd.tdspaidflag = 1 and advd.tdspayment = ? ) || (advd.tdsinterestpaidflag = 1 and advd.tdsinterestpayment = ? ) ) and pay.company = ? "
                     + " union "
                     + " select gr.vendor as vendorid "
                     + " from grdetails grd "
                     + " inner join goodsreceipt gr on grd.goodsreceipt = gr.id "
                     + " where  ((grd.tdspaidflag = 1 and grd.tdspayment = ? ) || (grd.tdsinterestpaidflag = 1 and grd.tdsinterestpayment = ? )) and gr.company = ? "
                     + " union "
                     + " select gr.vendor as vendorid "
                     + " from expenseggrdetails expgrd "
                     + " inner join goodsreceipt gr on expgrd.goodsreceipt = gr.id "
                     + " where  ((expgrd.tdspaidflag = 1 and expgrd.tdspayment = ? ) || (expgrd.tdsinterestpaidflag = 1 and expgrd.tdsinterestpayment = ? )) and gr.company = ? ";
        
        ArrayList params = new ArrayList();
        params.add(payment);
        params.add(payment);
        params.add(company);
        params.add(payment);
        params.add(payment);
        params.add(company);
        params.add(payment);
        params.add(payment);
        params.add(company);
        list = executeSQLQuery(query, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    public Map<String, Double> getVendorGRAmtMap(String isexpensetype, String company) throws ServiceException {
        Map<String, Double> vendorGRAmtMap = new HashMap<String, Double>();
        /**
         * PI fetched without Opening Balance.
         */
        String query = "SELECT vendor, sum(invoiceamountdueinbase) FROM goodsreceipt WHERE isexpensetype = ? AND isconsignment = 'F' AND isMRPJobWorkIN = 'F' AND deleteflag = 'F' AND pendingapproval = 0 AND istemplate != 2 AND isopeningbalenceinvoice = false AND company = ? GROUP BY vendor";
        
        ArrayList params = new ArrayList();
        params.add(isexpensetype);
        params.add(company);
        
        List<Object[]> list = executeSQLQuery(query, params.toArray());
        
        if(!list.isEmpty()) {
            for(Object[] row : list) {
                if(row[0] != null && row[1] != null) {
                    vendorGRAmtMap.put(row[0].toString(), Double.parseDouble(row[1].toString()));
}
            }
        }
        return vendorGRAmtMap;
    }
    
    @Override
    public String[] getMultiAgents(String vendorid) throws ServiceException{
        JSONObject jobj = new JSONObject();
        String[] valuesStr = {"", ""};
        boolean issuccess = false;
        try {
            ArrayList params = new ArrayList();
            params.add(vendorid);
            String query = "from VendorAgentMapping where vendorID.ID =  ? ";
            List list = executeQuery( query, params.toArray());
            if (list!=null && list.size() > 0) {
                Iterator itr = list.iterator();
                while (itr.hasNext()) {
                    VendorAgentMapping row = (VendorAgentMapping) itr.next();
                    MasterItem masterItemObj = row.getAgent();
                    if (itr.hasNext()) {
                        valuesStr[0] += masterItemObj.getID() + ",";
                        valuesStr[1] += masterItemObj.getValue() + ",";
                    } else {
                        valuesStr[0] += masterItemObj.getID();
                        valuesStr[1] += masterItemObj.getValue();
                    }
                }
                issuccess = true;
            }
        } catch (Exception e) {
            try {
                throw ServiceException.FAILURE(e.getMessage(), e);
            } catch (ServiceException ex) {
                Logger.getLogger(accVendorDAOImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, "");
            } catch (JSONException ex) {
                Logger.getLogger(accVendorDAOImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return valuesStr;
    }
    /**
     * Function to save GST Fields history.
     *
     * @param reqMap
     * @return
     * @throws ServiceException
     */
    public KwlReturnObject saveGstVendorHistory(Map<String, Object> reqMap) throws ServiceException {
        List list = new ArrayList();
        try {
            GstVendorHistory gstVendorHistory = null;
            if (reqMap.containsKey("gstvendorhistoryid") && reqMap.get("gstvendorhistoryid") != null) {
                gstVendorHistory = (GstVendorHistory) get(GstVendorHistory.class, (String) reqMap.get("gstvendorhistoryid"));
            } else {
                gstVendorHistory = new GstVendorHistory();
            }
            if (reqMap.containsKey("gstin") && reqMap.get("gstin") != null) {
                gstVendorHistory.setGstin((String) reqMap.get("gstin"));
            }
            if (reqMap.containsKey("GSTINRegistrationTypeId") && reqMap.get("GSTINRegistrationTypeId") != null && !StringUtil.isNullOrEmpty(reqMap.get("GSTINRegistrationTypeId").toString())) {
                gstVendorHistory.setGSTRegistrationType((MasterItem) get(MasterItem.class, (String) reqMap.get("GSTINRegistrationTypeId")));
            }
            if (reqMap.containsKey("CustomerVendorTypeId") && reqMap.get("CustomerVendorTypeId") != null && !StringUtil.isNullOrEmpty(reqMap.get("CustomerVendorTypeId").toString())) {
                gstVendorHistory.setGSTVendorType((MasterItem) get(MasterItem.class, (String) reqMap.get("CustomerVendorTypeId")));
            }
            if (reqMap.containsKey("vendorid") && reqMap.get("vendorid") != null && !StringUtil.isNullOrEmpty(reqMap.get("vendorid").toString())) {
                gstVendorHistory.setVendor((Vendor) get(Vendor.class, (String) reqMap.get("vendorid")));
            }
            if (reqMap.containsKey("applyDate") && reqMap.get("applyDate") != null) {
                gstVendorHistory.setApplyDate((Date) reqMap.get("applyDate"));
            }
            saveOrUpdate(gstVendorHistory);

            list.add(gstVendorHistory);
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    /**
     * Function to get GST fields history
     *
     * @param reqMap
     * @return
     * @throws ServiceException
     */
    public List getGstVendorHistory(Map<String, Object> reqMap) throws ServiceException {
        List params = new ArrayList();
        String selectcol = " select gvh.id from GstVendorHistory gvh ";
        String condition = "";
        if (reqMap.containsKey("returnalldata")&& (Boolean)reqMap.get("returnalldata")==true) {
            selectcol = " From GstVendorHistory gvh ";
        }
        if (reqMap.containsKey("vendorid")) {
            params.add((String) reqMap.get("vendorid"));
            condition += " where gvh.vendor.ID=? ";
        }
        if (reqMap.containsKey("applyDate") && reqMap.get("applyDate") != null) {
            Date applyDate = (Date) reqMap.get("applyDate");
            condition += " and DATE(gvh.applyDate)=DATE(?) ";
            params.add(applyDate);
        }
        if (reqMap.containsKey("isfortransaction") && reqMap.get("isfortransaction") != null) {
            condition += " and gvh.applyDate=(select max(gvh1.applyDate) from GstVendorHistory gvh1 where gvh1.vendor.ID=?"
                    + " and DATE(gvh1.applyDate)<=DATE(?))";
            params.add((String) reqMap.get("vendorid"));
            Date applyDate = (Date) reqMap.get("transactiondate");
            params.add(applyDate);
        }
        String query = selectcol + condition + " order by gvh.applyDate desc ";
        List list = executeQuery(query, params.toArray());
        return list;
    }
    /**
     * * Function to get GST fields used in documents
     *
     * @param reqMap
     * @return
     * @throws ServiceException
     */
    public List getGstVendorUsedHistory(Map<String, Object> reqMap) throws ServiceException {
        List params = new ArrayList();
        String PIselectcol = " select gdh.id,MAX(gr.creationdate) as invmaxdate from gstdocumenthistory gdh ";
        String PIjoinsql = " inner join goodsreceipt gr on gr.id=gdh.refdocid "
                + " inner join vendor v on v.id=gr.vendor ";
        String PIcondition = "";
        if (reqMap.containsKey("vendorid")) {
            params.add((String) reqMap.get("vendorid"));
            PIcondition += " where v.id=? ";
        }
        if (reqMap.containsKey("companyid")) {
            params.add((String) reqMap.get("companyid"));
            PIcondition += " and gr.company=? ";
        }
        if (reqMap.containsKey("applyDate") && reqMap.get("applyDate") != null) {
            Date applyDate = (Date) reqMap.get("applyDate");
            PIcondition += " and DATE(gr.creationdate)>=DATE(?) ";
            params.add(applyDate);
        }
        String having=" having invmaxdate is not null ";
        String PIquery = PIselectcol + PIjoinsql + PIcondition + having;
        String CNselectcol = " select gdh.id,MAX(cn.creationdate) as invmaxdate from gstdocumenthistory gdh ";
        String CNjoinsql = " inner join creditnote cn on cn.id=gdh.refdocid inner join vendor v on v.id=cn.vendor ";
        String CNcondition = "";    
        if (reqMap.containsKey("vendorid")) {
            params.add((String) reqMap.get("vendorid"));
            CNcondition += " where v.id=? ";
        }
        if (reqMap.containsKey("companyid")) {
            params.add((String) reqMap.get("companyid"));
            CNcondition += " and cn.company=? ";
        }
        if (reqMap.containsKey("applyDate") && reqMap.get("applyDate") != null) {
            Date applyDate = (Date) reqMap.get("applyDate");
            CNcondition += " and DATE(cn.creationdate)>=DATE(?) ";
            params.add(applyDate);
        }   
        String CNquery = CNselectcol + CNjoinsql + CNcondition + having;
        String DNselectcol = " select gdh.id,MAX(dn.creationdate) as invmaxdate from gstdocumenthistory gdh ";
        String DNjoinsql = " inner join debitnote dn on dn.id=gdh.refdocid inner join vendor v on v.id=dn.vendor ";
        String DNcondition = "";    
        if (reqMap.containsKey("vendorid")) {
            params.add((String) reqMap.get("vendorid"));
            DNcondition += " where v.id=? ";
        }
        if (reqMap.containsKey("companyid")) {
            params.add((String) reqMap.get("companyid"));
            DNcondition += " and dn.company=? ";
        }
        if (reqMap.containsKey("applyDate") && reqMap.get("applyDate") != null) {
            Date applyDate = (Date) reqMap.get("applyDate");
            DNcondition += " and DATE(dn.creationdate)>=DATE(?) ";
            params.add(applyDate);
        }   
        String DNquery = DNselectcol + DNjoinsql + DNcondition + having;
        String POselectcol = " select gdh.id,MAX(po.orderdate) as invmaxdate from gstdocumenthistory gdh ";
        String POjoinsql = " inner join purchaseorder po on po.id=gdh.refdocid inner join vendor v on v.id=po.vendor ";
        String POcondition = ""; 
        if (reqMap.containsKey("vendorid")) {
            params.add((String) reqMap.get("vendorid"));
            POcondition += " where v.id=? ";
        }
        if (reqMap.containsKey("companyid")) {
            params.add((String) reqMap.get("companyid"));
            POcondition += " and po.company=? ";
        }
        if (reqMap.containsKey("applyDate") && reqMap.get("applyDate") != null) {
            Date applyDate = (Date) reqMap.get("applyDate");
            POcondition += " and DATE(po.orderdate)>=DATE(?) ";
            params.add(applyDate);
        }   
        String POquery = POselectcol + POjoinsql + POcondition + having;
        String MPselectcol = " select gdh.id,MAX(p.creationdate) as invmaxdate from gstdocumenthistory gdh ";
        String MPjoinsql = " inner join payment p on p.id=gdh.refdocid inner join vendor v on v.id=p.vendor ";
        String MPcondition = "";       
        if (reqMap.containsKey("vendorid")) {
            params.add((String) reqMap.get("vendorid"));
            MPcondition += " where v.id=? ";
        }
        if (reqMap.containsKey("companyid")) {
            params.add((String) reqMap.get("companyid"));
            MPcondition += " and p.company=? ";
        }
        if (reqMap.containsKey("applyDate") && reqMap.get("applyDate") != null) {
            Date applyDate = (Date) reqMap.get("applyDate");
            MPcondition += " and DATE(p.creationdate)>=DATE(?) ";
            params.add(applyDate);
        }   
        String MPquery = MPselectcol + MPjoinsql + MPcondition + having;
        String orderby=" order by invmaxdate DESC ";
        String union =" union ";    
        String allModuleQurey= PIquery + union + CNquery + union + DNquery + union + POquery + union + MPquery + orderby; 
        List list = executeSQLQuery(allModuleQurey, params.toArray());
        return list;
    }

    /**
     * Function to delete GST fields history.
     *
     * @param vendorid
     * @return
     * @throws ServiceException
     */
    public KwlReturnObject deleteGstVendorHistory(String vendorid) throws ServiceException {
        String delQuery = "delete from GstVendorHistory p where p.vendor.ID=? ";
        int numRows = executeUpdate(delQuery, new Object[]{vendorid});
        return new KwlReturnObject(true, "GST history has been deleted successfully.", null, null, numRows);
    }
}
