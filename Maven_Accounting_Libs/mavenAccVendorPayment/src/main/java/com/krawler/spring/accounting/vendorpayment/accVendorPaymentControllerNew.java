 
/*
 * Copyright (C) 2012  Krawler Information Systems Pvt Ltd
 * All rights reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package com.krawler.spring.accounting.vendorpayment;

import com.krawler.common.admin.AuditAction;
import com.krawler.common.admin.*;
import com.krawler.common.service.ServiceException;
import com.krawler.common.session.SessionExpiredException;
import com.krawler.common.util.Constants;
import com.krawler.common.util.IndiaComplianceConstants;
import com.krawler.common.util.StringUtil;
import com.krawler.common.util.URLUtil;
import com.krawler.spring.common.fieldDataManager;
import com.krawler.esp.handlers.SendMailHandler;
import static com.krawler.esp.web.resource.Links.loginpageFull;
import com.krawler.hql.accounting.*;
import com.krawler.spring.accounting.account.accAccountDAO;
import com.krawler.spring.authHandler.authHandler;
import com.krawler.spring.accounting.bankreconciliation.accBankReconciliationDAO;
import com.krawler.spring.accounting.companypreferances.CompanyPreferencesCMN;
import com.krawler.spring.accounting.companypreferances.accCompanyPreferencesDAO;
import com.krawler.spring.accounting.costCenter.CCConstants;
import com.krawler.spring.accounting.currency.accCurrencyDAO;
import com.krawler.spring.accounting.goodsreceipt.accGoodsReceiptDAO;
import com.krawler.spring.accounting.handler.AccountingHandlerDAO;
import com.krawler.spring.accounting.handler.AccountingManager;
import com.krawler.spring.accounting.invoice.InvoiceConstants;
import com.krawler.spring.accounting.journalentry.accJournalEntryDAO;
import com.krawler.spring.accounting.payment.accPaymentDAO;
import com.krawler.spring.accounting.tax.accTaxDAO;
import com.krawler.spring.accounting.vendor.accVendorDAO;
import com.krawler.spring.auditTrailModule.auditTrailDAO;
import com.krawler.spring.common.KwlReturnObject;
import com.krawler.spring.exportFunctionality.exportMPXDAOImpl;
import com.krawler.spring.importFunctionality.ImportDAO;
import com.krawler.spring.importFunctionality.ImportHandler;
import com.krawler.spring.sessionHandler.sessionHandlerImpl;
import com.krawler.spring.storageHandler.storageHandlerImpl;
import com.krawler.utils.json.base.JSONArray;
import com.krawler.utils.json.base.JSONException;
import com.krawler.utils.json.base.JSONObject;
import com.krawler.spring.accounting.customDesign.CustomDesignHandler;
import com.krawler.spring.accounting.payment.accPaymentService;
import com.krawler.spring.accounting.receipt.accReceiptController;
import com.krawler.spring.authHandler.authHandlerDAO;
import com.krawler.spring.common.AccCommonTablesDAO;
import java.io.*;
import java.math.BigInteger;
import java.net.URLEncoder;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.context.MessageSource;
import org.springframework.context.MessageSourceAware;
import org.springframework.orm.hibernate3.HibernateTransactionManager;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.DefaultTransactionDefinition;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.multiaction.MultiActionController;
import org.springframework.web.servlet.support.RequestContextUtils;
import com.krawler.spring.accounting.companypreferances.CompanyPreferencesConstants;
import com.krawler.hql.accounting.TdsDetails;
import com.krawler.hql.accounting.journalentry.service.AccJournalEntryModuleService;
import com.krawler.spring.accounting.debitnote.accDebitNoteDAO;
import com.krawler.spring.accounting.invoice.accInvoiceDAO;
import com.krawler.spring.accounting.vendorpayment.service.AccVendorPaymentModuleService;
import org.springframework.util.StringUtils;
import com.krawler.spring.accounting.goodsreceipt.service.accGoodsReceiptModuleService;
import com.krawler.spring.common.CommonFnControllerService;
import com.krawler.spring.common.fieldManagerDAO;
import com.krawler.spring.common.kwlCommonTablesDAO;
/**
 *
 * @author krawler
 */
public class accVendorPaymentControllerNew extends MultiActionController implements MessageSourceAware {

    private HibernateTransactionManager txnManager;
    private accGoodsReceiptDAO accGoodsReceiptobj;
    private accVendorPaymentDAO accVendorPaymentobj;
    private accJournalEntryDAO accJournalEntryobj;
    private accPaymentDAO accPaymentDAOobj;
    private accTaxDAO accTaxObj;
    private accCurrencyDAO accCurrencyDAOobj;
    private auditTrailDAO auditTrailObj;
    private accCompanyPreferencesDAO accCompanyPreferencesObj;
    private AccountingHandlerDAO accountingHandlerDAOobj;
    private accAccountDAO accAccountDAOobj;
    private exportMPXDAOImpl exportDaoObj;
    private fieldDataManager fieldDataManagercntrl;
    private accBankReconciliationDAO accBankReconciliationObj;
    private String successView;
    private MessageSource messageSource;
    private EnglishNumberToWords EnglishNumberToWordsOjb = new EnglishNumberToWords();
    private ImportHandler importHandler;
    private ImportDAO importDao;
    private accPaymentService paymentService;
    private accVendorDAO accVendorDAOObj;
    private authHandlerDAO authHandlerDAOObj;
    private AccCommonTablesDAO accCommonTablesDAO;
    private accInvoiceDAO accInvoiceDAOobj;
    private AccJournalEntryModuleService journalEntryModuleServiceobj;
    private AccVendorPaymentModuleService accVendorPaymentModuleServiceObj;    
    private accDebitNoteDAO accDebitNoteDAO;
    private accGoodsReceiptModuleService accGoodsReceiptModuleService;
    private CommonFnControllerService commonFnControllerService;
    private kwlCommonTablesDAO kwlCommonTablesDAOObj;
    private fieldManagerDAO fieldManagerDAOobj;

    public void setKwlCommonTablesDAOObj(kwlCommonTablesDAO kwlCommonTablesDAOObj) {
        this.kwlCommonTablesDAOObj = kwlCommonTablesDAOObj;
    }
    
    public void setTxnManager(HibernateTransactionManager txManager) {
        this.txnManager = txManager;
    }

    /**
     * @param accVendorPaymentModuleServiceObj the
     * accVendorPaymentModuleServiceObj to set
     */
    public void setAccVendorPaymentModuleServiceObj(AccVendorPaymentModuleService accVendorPaymentModuleServiceObj) {
        this.accVendorPaymentModuleServiceObj = accVendorPaymentModuleServiceObj;
    }
    

    /**
     * @param journalEntryModuleServiceobj the journalEntryModuleServiceobj to set
     */
    public void setJournalEntryModuleServiceobj(AccJournalEntryModuleService journalEntryModuleServiceobj) {
        this.journalEntryModuleServiceobj = journalEntryModuleServiceobj;
    }
    
    public void setAccCommonTablesDAO(AccCommonTablesDAO accCommonTablesDAO) {
        this.accCommonTablesDAO = accCommonTablesDAO;
    }
    public void setAuthHandlerDAOObj(authHandlerDAO authHandlerDAOObj) {
        this.authHandlerDAOObj = authHandlerDAOObj;
    }
    public void setimportHandler(ImportHandler importHandler) {
        this.importHandler = importHandler;
    }

    public void setaccPaymentService(accPaymentService paymentService) {
        this.paymentService = paymentService;
    }

    public void setimportDAO(ImportDAO importDao) {
        this.importDao = importDao;
    }

    public void setAccVendorDAO(accVendorDAO accVendorDAOObj) {
        this.accVendorDAOObj = accVendorDAOObj;
    }

    public void setaccTaxDAO(accTaxDAO accTaxObj) {
        this.accTaxObj = accTaxObj;
    }

    public void setauditTrailDAO(auditTrailDAO auditTrailDAOObj) {
        this.auditTrailObj = auditTrailDAOObj;
    }

    public void setaccGoodsReceiptDAO(accGoodsReceiptDAO accGoodsReceiptobj) {
        this.accGoodsReceiptobj = accGoodsReceiptobj;
    }

    public void setaccVendorPaymentDAO(accVendorPaymentDAO accVendorPaymentobj) {
        this.accVendorPaymentobj = accVendorPaymentobj;
    }

    public void setaccJournalEntryDAO(accJournalEntryDAO accJournalEntryobj) {
        this.accJournalEntryobj = accJournalEntryobj;
    }

    public void setaccPaymentDAO(accPaymentDAO accPaymentDAOobj) {
        this.accPaymentDAOobj = accPaymentDAOobj;
    }

    public void setaccCurrencyDAO(accCurrencyDAO accCurrencyDAOobj) {
        this.accCurrencyDAOobj = accCurrencyDAOobj;
    }

    public void setaccCompanyPreferencesDAO(accCompanyPreferencesDAO accCompanyPreferencesObj) {
        this.accCompanyPreferencesObj = accCompanyPreferencesObj;
    }

    public void setaccountingHandlerDAO(AccountingHandlerDAO accountingHandlerDAOobj) {
        this.accountingHandlerDAOobj = accountingHandlerDAOobj;
    }

    public void setexportMPXDAOImpl(exportMPXDAOImpl exportDaoObj) {
        this.exportDaoObj = exportDaoObj;
    }

    public void setaccBankReconciliationDAO(accBankReconciliationDAO accBankReconciliationObj) {
        this.accBankReconciliationObj = accBankReconciliationObj;
    }

    public void setaccAccountDAO(accAccountDAO accAccountDAOobj) {
        this.accAccountDAOobj = accAccountDAOobj;
    }

    public String getSuccessView() {
        return successView;
    }

    public void setSuccessView(String successView) {
        this.successView = successView;
    }

    public void setFieldDataManager(fieldDataManager fieldDataManagercntrl) {
        this.fieldDataManagercntrl = fieldDataManagercntrl;
    }

    public void setaccInvoiceDAO(accInvoiceDAO accInvoiceDAOobj) {
        this.accInvoiceDAOobj = accInvoiceDAOobj;
    }
    
    public void setAccGoodsReceiptModuleService(accGoodsReceiptModuleService accGoodsReceiptModuleService) {
        this.accGoodsReceiptModuleService = accGoodsReceiptModuleService;
    }

    public void setAccDebitNoteDAO(accDebitNoteDAO accDebitNoteDAO) {
        this.accDebitNoteDAO = accDebitNoteDAO;
    }
    
    public void setFieldManagerDAO(fieldManagerDAO fieldManagerDAOobj) {
        this.fieldManagerDAOobj = fieldManagerDAOobj;
    }
    
    public void setCommonFnControllerService(CommonFnControllerService commonFnControllerService) {
        this.commonFnControllerService = commonFnControllerService;
    }
    public ModelAndView savePayment(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        boolean  isWarn = request.getParameter("isWarn")!=null?Boolean.parseBoolean(request.getParameter("isWarn")):false;
         String msg = "";
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            paramJobj.put("locale", RequestContextUtils.getLocale(request));
            String baseUrl = URLUtil.getPageURL(request, loginpageFull);
            paramJobj.put("baseUrl", baseUrl);
            String userName = sessionHandlerImpl.getUserFullName(request);
            paramJobj.put(Constants.username,userName);
            HashMap<String, Object> hashMap = accVendorPaymentModuleServiceObj.saveVendorPayment(paramJobj);
            jobj=(JSONObject)hashMap.get("jobj");
            jobj.put("isWarn",isWarn);
        }catch (Exception ex) {
            msg = "" + ex.getMessage();
            issuccess = false;
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } 
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    /*--------- Function to Create Bulk Payment--------- */
      public ModelAndView saveBulkPayment(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        boolean isWarn = request.getParameter("isWarn") != null ? Boolean.parseBoolean(request.getParameter("isWarn")) : false;
        String msg = "";
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            paramJobj.put("locale", RequestContextUtils.getLocale(request));
            HashMap<String, Object> hashMap = accVendorPaymentModuleServiceObj.saveBulkVendorPayment(paramJobj);
            jobj = (JSONObject) hashMap.get("jobj");
            jobj.put("isWarn", isWarn);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            issuccess = false;
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    
    public HashMap<String, Object> saveVendorPayment(HttpServletRequest request) {              //repetead method to confirm
        JSONObject jobj = new JSONObject();
        KwlReturnObject result = null;
        String Cardid = null;
        StringBuilder bno = new StringBuilder();
        String amountpayment="";
        String netinword = "";
        HashMap<String, Object> hashMap = new HashMap<String, Object>();
        String billno = "";
        String person = "";
        boolean isEdit=false;
        boolean issuccess = false;
        String msg = "";
        int editCount = 0;
        boolean accexception = false;
        String paymentid="";
        String repeatedid="";
        String intervalType = null;
        int intervalUnit = 0;
        int noOfInvPost = 0;
        int noOfInvRemainPost = 0;
        Date sdate = null, nextdate = null, expdate = null;
        String AuditMsg="",vendorEmailId="";
        String bankChargesAccid="",bankInterestAccid="";
        String bankChargeJeId="",bankInterestJeId="";
        Map<String, Object> oldPaymentPrmt = new HashMap<String, Object>();
        Map<String, Object> NewPaymentPrmt = new HashMap<String, Object>();
        Map<String, Object> newAuditKey = new HashMap<String, Object>();
        String accountName = "";
        String accountaddress = "";
        JSONObject jobjDetails = new JSONObject();
        JSONArray jSONArrayAgainstInvoice = new JSONArray();
        JSONArray jArr = new JSONArray();
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("SP_Tx");
        int flag=0;
        String jeEntryNo="";
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status =null;
        String companyid="";
        String chequeNumber = "";
        String entryNumber="";
        boolean exceptionChequeOrInv=false;
       
        try {
            entryNumber = request.getParameter("no");
            String sequenceformat = request.getParameter("sequenceformat")!=null?request.getParameter("sequenceformat"):"NA";
//            double externalCurrencyRate = StringUtil.getDouble(request.getParameter("externalcurrencyrate"));
            companyid = sessionHandlerImpl.getCompanyid(request);
            
            int countryLanguageId = Constants.OtherCountryLanguageId; // 0
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            if (extraCompanyPreferences.isAmountInIndianWord()) {
                countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
            }
            KwlReturnObject companyResult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) companyResult.getEntityList().get(0);
            String countryID = company != null && company.getCountry() != null ? company.getCountry().getID() : "";
            
            String receiptid = request.getParameter("billid");
            double balaceAmount=0.0;
             if(!StringUtil.isNullOrEmpty(request.getParameter("balaceAmount"))){
                balaceAmount=Double.parseDouble(request.getParameter("balaceAmount"));
            }
            Payment editPaymentObject = null;
            if (!StringUtil.isNullOrEmpty(receiptid)) {// for edit case
                KwlReturnObject receiptObj = accountingHandlerDAOobj.getObject(Payment.class.getName(), receiptid);
                editPaymentObject = (Payment) receiptObj.getEntityList().get(0);
                isEdit=editPaymentObject != null ? true : false;
                }
            
            /*
                Get line detail json array for GL, Invoice, Advance, CN/DN
            */
            String detailsJsonString = request.getParameter("Details");
            JSONArray jSONArray = new JSONArray(detailsJsonString);
            JSONArray jSONArrayAdvance = new JSONArray();
            JSONArray jSONArrayCNDN = new JSONArray();
            JSONArray jSONArrayGL = new JSONArray();
            JSONArray jSONArrayBal = new JSONArray();
            for (int i = 0; i < jSONArray.length(); i++) {
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                if (jSONObject.has("type") && jSONObject.optInt("type", 0) != 0 && jSONObject.has("enteramount") && jSONObject.optDouble("enteramount", 0.0) != 0) {
                    if (jSONObject.getInt("type") == Constants.AdvancePayment) {                        
                        jSONArrayAdvance.put(jSONObject);
                    } else if (jSONObject.getInt("type") == Constants.PaymentAgainstInvoice) {
                        jSONArrayAgainstInvoice.put(jSONObject);
                    } else if (jSONObject.getInt("type") == Constants.PaymentAgainstCNDN) {
                        jSONArrayCNDN.put(jSONObject);
                    } else if (jSONObject.getInt("type") == Constants.GLPayment) {
                        jSONArrayGL.put(jSONObject);
                    }
                }
            }

            /*
                Check Invoice or Cheque number already in process in other thread otherwise save current processing invoice/cheque in temporary table 
            */
            try {
                String invoiceId="";
                
                if (editPaymentObject != null) {//In edit case checks duplicate number
                    result = accVendorPaymentobj.getPaymentEditCount(entryNumber, companyid, receiptid);
                    editCount = result.getRecordTotalCount();
                    if (editCount > 0 && sequenceformat.equals("NA")) {
                        accexception = true;
                        throw new AccountingException(messageSource.getMessage("acc.payment.paymentno", null, RequestContextUtils.getLocale(request)) + entryNumber + messageSource.getMessage("acc.field.alreadyexists.", null, RequestContextUtils.getLocale(request)));
                    }
                } else {//In add case check duplicate number
                    result = accVendorPaymentobj.getPaymentFromNo(entryNumber, companyid);
                    if (result.getRecordTotalCount() > 0 && sequenceformat.equals("NA")) {
                        accexception = true;
                        throw new AccountingException(messageSource.getMessage("acc.payment.paymentno", null, RequestContextUtils.getLocale(request)) + entryNumber + messageSource.getMessage("acc.field.alreadyexists.", null, RequestContextUtils.getLocale(request)));
                    }
                }
                synchronized (this) {
                    status = txnManager.getTransaction(def);
                    KwlReturnObject resultPay = accCommonTablesDAO.getTransactionInTemp(entryNumber, companyid, Constants.Acc_Make_Payment_ModuleId);
                    if (resultPay.getRecordTotalCount() > 0 && sequenceformat.equals("NA")) {
                        accexception = true;
                        throw new AccountingException(messageSource.getMessage("acc.PO.selectedPamentNo", null, RequestContextUtils.getLocale(request)) + entryNumber + messageSource.getMessage("acc.field.alreadyinprocess.", null, RequestContextUtils.getLocale(request)));
                    } else {
                        accCommonTablesDAO.insertTransactionInTemp(entryNumber, companyid, Constants.Acc_Make_Payment_ModuleId);
                    }
                    for (int i = 0; i < jSONArrayAgainstInvoice.length(); i++) {
                        JSONObject invoiceJobj = jSONArrayAgainstInvoice.getJSONObject(i);
                        invoiceId = invoiceJobj.getString("documentid");
                        KwlReturnObject resultInv1 = accPaymentDAOobj.getInvoiceInTemp(invoiceId, companyid, Constants.Acc_Invoice_ModuleId);
                        if (resultInv1.getRecordTotalCount() > 0) {
                            throw new AccountingException("Selected invoice is already in process, please try after sometime.");
                        } else {
                            accPaymentDAOobj.insertInvoiceOrCheque(invoiceId, companyid, Constants.Acc_Invoice_ModuleId, "");
                        }
                    }
                    /*
                     * Check for invalid cheque number
                     */
                     
                    KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
                    CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);

                    if (preferences.getChequeNoDuplicate()!= Constants.ChequeNoIgnore) {// Ignore case 
                        checkForInvalidChequeNumber(request, editPaymentObject);
                    }
                    if (!StringUtil.isNullOrEmpty(request.getParameter("paydetail"))) {
                        JSONObject obj = new JSONObject(request.getParameter("paydetail"));
                        chequeNumber = obj.optString("chequenumber");
                        String methodid = request.getParameter("pmtmethod");
                        KwlReturnObject result1 = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), methodid);
                        PaymentMethod payMethod = (PaymentMethod) result1.getEntityList().get(0);
                        String bankId = payMethod.getAccount().getID();

                        KwlReturnObject resultInv = accPaymentDAOobj.getSearchChequeNoTemp(chequeNumber, companyid, Constants.Cheque_ModuleId,bankId);
                        if (resultInv.getRecordTotalCount() > 0) {
                            throw new AccountingException("Cheque Number : <b>" + chequeNumber + "</b> is already exist, Please enter different one");
                        } else {
                            accPaymentDAOobj.insertInvoiceOrCheque(chequeNumber, companyid, Constants.Cheque_ModuleId, bankId);
                        }
                    }
//                    accPaymentDAOobj.updateChequeNoInTemp(chequeNumber, companyid,invoiceId);
                    txnManager.commit(status);
                }
            } catch (Exception ex) {
                exceptionChequeOrInv=true;
                if (status != null) {
                    txnManager.rollback(status);
                }
                throw new AccountingException(ex.getMessage(), ex);
            }

            status = txnManager.getTransaction(def);
            if (!isEdit) {
                for (int i = 0; i < jSONArrayAgainstInvoice.length(); i++) {
                    JSONObject invoiceJobj = jSONArrayAgainstInvoice.getJSONObject(i);
                    KwlReturnObject objItr = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), invoiceJobj.getString("documentid"));
                    GoodsReceipt invoice = (GoodsReceipt) objItr.getEntityList().get(0);
                    if (invoice != null) {
                        double invoiceAmoutDue = 0;
                        boolean isInvoiceIsClaimed = (invoice.getBadDebtType() == Constants.Invoice_Claimed || invoice.getBadDebtType() == Constants.Invoice_Recovered);
                        if (isInvoiceIsClaimed) {
                            invoiceAmoutDue = invoice.getClaimAmountDue();
                        } else {
                            if (invoice.isIsOpeningBalenceInvoice() && !invoice.isNormalInvoice()) {
                                invoiceAmoutDue = invoice.getOpeningBalanceAmountDue();
                            } else {
                                invoiceAmoutDue = invoice.getInvoiceamountdue();
                            }
                        }
                        double amountReceived = invoiceJobj.getDouble("enteramount");           //amount of Invoice
                        double adjustedRate = 1;
                        if (!StringUtil.isNullOrEmpty(invoiceJobj.optString("exchangeratefortransaction", "").toString())) {
                            adjustedRate = Double.parseDouble(invoiceJobj.get("exchangeratefortransaction").toString());
                        }
                        double paymentAmountReceivedTemp = invoiceAmoutDue * adjustedRate;
                        paymentAmountReceivedTemp = authHandler.round(paymentAmountReceivedTemp, companyid);
                        boolean isFullPayment = (paymentAmountReceivedTemp == amountReceived);
                        if (!isFullPayment) {                                               // Changes made for ERP-16382
                            double amountReceivedConverted = invoiceJobj.getDouble("enteramount");
                            if (!StringUtil.isNullOrEmpty(invoiceJobj.optString("exchangeratefortransaction", "").toString())) {
                                adjustedRate = Double.parseDouble(invoiceJobj.get("exchangeratefortransaction").toString());
                                amountReceivedConverted = amountReceived / adjustedRate;
                                amountReceivedConverted = authHandler.round(amountReceivedConverted, companyid);
                            } else {
                                amountReceivedConverted = authHandler.round(amountReceived, companyid);
                            }
                            amountReceivedConverted = authHandler.round(amountReceivedConverted, companyid);
                            invoiceAmoutDue = authHandler.round(invoiceAmoutDue, companyid);
                            if (invoiceAmoutDue < amountReceivedConverted) {
                                flag = 1;
                                TransactionStatus tempStatus = txnManager.getTransaction(def);
                                throw new AccountingException("Amount entered for invoice cannot be greater than it's amount due. Please reload the invoices.");
                            }
                        }
                    }
                }
            }

            if (isEdit) {
                setValuesForAuditTrialMessage(editPaymentObject, oldPaymentPrmt, newAuditKey);
            }
            
            JournalEntry oldBankChargeJE = editPaymentObject != null ? editPaymentObject.getJournalEntryForBankCharges()!=null?editPaymentObject.getJournalEntryForBankCharges():null: null;
            JournalEntry oldBankInterestJE = editPaymentObject != null ? editPaymentObject.getJournalEntryForBankInterest()!=null?editPaymentObject.getJournalEntryForBankInterest():null: null;
            if(editPaymentObject!=null){
                editPaymentObject.setBankChargesAccount(null);
                editPaymentObject.setBankChargesAmount(0);
                editPaymentObject.setBankInterestAccount(null);
                editPaymentObject.setBankInterestAmount(0);
            }
            int beforeEditApprovalStatus=editPaymentObject.getApprovestatuslevel();       //getting current approval status before updating
            /*
             * Create Payment Object 
             */
           
            Payment payment = createPaymentObject(request, editPaymentObject);
            List mailParams=Collections.EMPTY_LIST;
            int approvalStatusLevel = 11;
            Double totalAmount=Double.parseDouble(request.getParameter("amount"));
            HashMap<String, Object> paymentApproveMap = new HashMap<String, Object>();
            List approvedlevel = null;
            paymentApproveMap.put("companyid", sessionHandlerImpl.getCompanyid(request));
            paymentApproveMap.put("level", 0);//Initialy it will be 0
            paymentApproveMap.put("totalAmount", String.valueOf(authHandler.round(totalAmount, companyid)));
            paymentApproveMap.put("currentUser", payment.getCreatedby());
            paymentApproveMap.put("fromCreate", true);
            paymentApproveMap.put("moduleid", Constants.Acc_Make_Payment_ModuleId);
            boolean isMailApplicable = false;
            List list=new ArrayList();
            list.add(payment.getID());
            approvedlevel = paymentService.approveMakePayment(list, paymentApproveMap, isMailApplicable);
            approvalStatusLevel = (Integer) approvedlevel.get(0);
            mailParams = (List) approvedlevel.get(1);
            payment.setApprovestatuslevel(approvalStatusLevel);
//            paymenthm.put("mailParams", mailParams);
            
            if (payment != null && isEdit) {
                NewPaymentPrmt.put(Constants.PaymentNumber, payment.getPaymentNumber());
                NewPaymentPrmt.put(Constants.PaidTo, payment.getPaidTo() != null? payment.getPaidTo().getValue():"");
//                NewPaymentPrmt.put(Constants.CreationDate, payment.isIsOpeningBalencePayment() ? payment.getCreationDate() : payment.getJournalEntry().getEntryDate());
                NewPaymentPrmt.put(Constants.CreationDate, payment.getCreationDate());
                NewPaymentPrmt.put(Constants.Memo, payment.getMemo());
                if (payment.getPayDetail() != null && payment.getPayDetail() != null) {
                    int oldPaymentMethodType = payment.getPayDetail().getPaymentMethod().getDetailType();
                    String oldPaymentMethodTypeName = payment.getPayDetail().getPaymentMethod().getMethodName();
                    NewPaymentPrmt.put(Constants.PaymentMethodType, oldPaymentMethodTypeName);
                    if (oldPaymentMethodType == PaymentMethod.TYPE_BANK) {
                        Cheque oldCheck = payment.getPayDetail().getCheque();
                        NewPaymentPrmt.put(Constants.Cheque, oldCheck);
                        NewPaymentPrmt.put(Constants.ChequeNumber, oldCheck.getChequeNo());
                        NewPaymentPrmt.put(Constants.BankName, oldCheck.getBankName());
                        NewPaymentPrmt.put(Constants.CheckDate, oldCheck.getDueDate());
                    } else if (oldPaymentMethodType == PaymentMethod.TYPE_CARD) {
                        NewPaymentPrmt.put(Constants.Card, payment.getPayDetail().getCard());
                    }
                }
                AuditMsg = AccountingManager.BuildAuditTrialMessage(NewPaymentPrmt, oldPaymentPrmt, Constants.Acc_Make_Payment_ModuleId, newAuditKey);
            }

            /*
             * Create Journal Entry Object
             */
            JournalEntry journalEntry = journalEntryObject(request, editPaymentObject);
            JournalEntry oldJE = editPaymentObject != null ? editPaymentObject.getJournalEntry() : null;
            String oldReevalJE = editPaymentObject != null ? editPaymentObject.getRevalJeId() : null;
            PayDetail oldPayDetail = editPaymentObject != null ? editPaymentObject.getPayDetail() : null;
            if(oldJE!=null){
                request.setAttribute("oldjeid", oldJE.getID());
            }
            if (approvalStatusLevel == 11) {
                journalEntry.setPendingapproval(0);
            } else {
                journalEntry.setPendingapproval(1);
            }
            
            payment.setJournalEntry(journalEntry);
            List<Payment> payments = new ArrayList<Payment>();
            payments.add(payment);
           
            /*
             * Save Journal Entry Object
             */
            accJournalEntryobj.saveJournalEntryByObject(journalEntry);
           
            if (!StringUtil.isNullOrEmpty(request.getParameter("customfield"))) {
                JSONArray jcustomarray = new JSONArray(request.getParameter("customfield"));
                HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                customrequestParams.put("customarray", jcustomarray);
                customrequestParams.put("modulename", Constants.Acc_JE_modulename);
                customrequestParams.put("moduleprimarykey", Constants.Acc_JEid);
                customrequestParams.put("modulerecid", journalEntry.getID());
                customrequestParams.put("moduleid", Constants.Acc_Make_Payment_ModuleId);
                customrequestParams.put("companyid", companyid);
                customrequestParams.put("customdataclasspath", Constants.Acc_BillInv_custom_data_classpath);
                KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                    KwlReturnObject receiptAccJECustomData = accountingHandlerDAOobj.getObject(AccJECustomData.class.getName(), journalEntry.getID());
                    AccJECustomData accJECustomData = (AccJECustomData) receiptAccJECustomData.getEntityList().get(0);
                    journalEntry.setAccBillInvCustomData(accJECustomData);
                }
            }
            Set<JournalEntryDetail> details = null;
           
            //Save Payment Object
            accVendorPaymentobj.savePaymentObject(payments);
            String paymentID = payments.get(0).getID();
            
            //Get Recurring Details
            RepeatedPayment rpay = (RepeatedPayment)payment.getRepeatedPayment();
            if(rpay!= null && isEdit){
                repeatedid = rpay.getId();
                intervalUnit = rpay.getIntervalUnit();
                intervalType = rpay.getIntervalType();
                noOfInvPost = rpay.getNoOfpaymentspost();
                noOfInvRemainPost = rpay.getNoOfRemainpaymentspost();
                jobj.put("startdate", rpay.getStartDate());
                jobj.put("nextdate", rpay.getNextDate());
                jobj.put("expdate", rpay.getExpireDate());
            }
           
            /*
             * Edit Case - Deleting previous line level entried for payment
             * 1. Delete Advance Type Details
             * 2. Delete Against Vendor Invoice Details and Update respective Invoice's amount due
             * 3. Delete Against GL Details
             * 4. Delete payment against CN/DN
             */
            
            //Delete TDSDetails
            if (extraCompanyPreferences.isTDSapplicable() && isEdit) {
                HashMap<String, String> hmData = new HashMap<String, String>();
                String res = "";
                ArrayList<String> resList = new ArrayList<String>();
                hmData.put("companyid", payment.getCompany().getCompanyID());
                if (payment.getAdvanceDetails().size() > 0) {
                    Set<AdvanceDetail> rowObj = payment.getAdvanceDetails();
                    for (AdvanceDetail advDetail : rowObj) {
                        resList.add("'" + advDetail.getId() + "'");
                    }
                    res = StringUtils.collectionToCommaDelimitedString(resList);
                    hmData.put("documentid", res);
                    hmData.put("documenttype", Constants.AdvancePayment + "");
                    accVendorPaymentobj.deleteTDSDetails(hmData);
                }
                if (payment.getRows().size() > 0) {
                    Set<PaymentDetail> rowObj = payment.getRows();
                    for (PaymentDetail advDetail : rowObj) {
                        resList.add("'" + advDetail.getID() + "'");
                    }
                    res = StringUtils.collectionToCommaDelimitedString(resList);
                    hmData.put("documentid", res);
                    hmData.put("documenttype", Constants.PaymentAgainstInvoice + "");
                    accVendorPaymentobj.deleteTDSDetails(hmData);
                }
                if (payment.getPaymentDetailOtherwises().size() > 0) {
                    Set<PaymentDetailOtherwise> rowObj = payment.getPaymentDetailOtherwises();
                    for (PaymentDetailOtherwise advDetail : rowObj) {
                        resList.add("'" + advDetail.getID() + "'");
                    }
                    res = StringUtils.collectionToCommaDelimitedString(resList);
                    hmData.put("documentid", res);
                    hmData.put("documenttype", Constants.GLPayment + "");
                    accVendorPaymentobj.deleteTDSDetails(hmData);
                }
                if (payment.getCreditNotePaymentDetails().size() > 0) {
                        Set<CreditNotePaymentDetails> rowObj = payment.getCreditNotePaymentDetails();
                        for (CreditNotePaymentDetails advDetail : rowObj) {
                            resList.add("'" + advDetail.getID() + "'");
                        }
                        res = StringUtils.collectionToCommaDelimitedString(resList);
                        hmData.put("documentid", res);
                        hmData.put("documenttype", Constants.PaymentAgainstCNDN + "");
                        accVendorPaymentobj.deleteTDSDetails(hmData);
                    }
            }
           
            //Delete Advance Type Details
            Set<AdvanceDetail> advanceDetails = payment.getAdvanceDetails();
            if (payment.getAdvanceDetails() != null && !advanceDetails.isEmpty()) {
                accVendorPaymentModuleServiceObj.updateReceiptAdvancePaymentAmountDue(payment, companyid, countryID);
                accVendorPaymentobj.deleteAdvancePaymentsDetails(payment.getID(),payment.getCompany().getCompanyID());
            }
           
            // Delete Against Vendor Invoice Details and Update respective Invoice's amount due
            accVendorPaymentobj.deletePaymentsDetailsAndUpdateAmountDue(payment.getID(), payment.getCompany().getCompanyID(),beforeEditApprovalStatus);
           
            // Delete Against GL Details
            Set<PaymentDetailOtherwise> paymentDetailOtherwises = payment.getPaymentDetailOtherwises();
            if (payment.getPaymentDetailOtherwises() != null && !paymentDetailOtherwises.isEmpty()) {
                accVendorPaymentobj.deletePaymentsDetailsOtherwise(payment.getID());
            }
            //Delete payment against CN/DN
            accVendorPaymentobj.deletePaymentsAgainstCNDN(payment.getID(), payment.getCompany().getCompanyID(),beforeEditApprovalStatus);
            
            /* Deleting Linking information of Make Payment while editing Make Payment*/
            if (isEdit) {
                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                requestParams.put("paymentid", payment.getID());
                accVendorPaymentobj.deleteLinkingInformationOfMP(requestParams);
                
                /*
                 * Deleting the mapping entries posted for recovering the
                 * invoices
                 */
                HashMap<String, Object> requestParamsForMapping = new HashMap();
                requestParamsForMapping.put(Constants.companyid, payment.getCompany().getCompanyID());
                requestParamsForMapping.put("paymentid", payment.getID());
                accGoodsReceiptobj.deleteBadDebtPurchaseInvoiceMapping(requestParamsForMapping);
            }            
             
            /*
                Adding Details
            */
            
            /*
                Invoice Details Object
            */
            if (jSONArrayAgainstInvoice.length() > 0) {
                if (details == null) {
                    details = journalEntryDetailObject(request, jSONArrayAgainstInvoice, journalEntry, payment, Constants.PaymentAgainstInvoice);
                } else {
                    details.addAll(journalEntryDetailObject(request, jSONArrayAgainstInvoice, journalEntry, payment, Constants.PaymentAgainstInvoice));
                }
                //Save Invoice Details selected in payment
                HashSet paymentDetails = paymentDetailObject(request, jSONArrayAgainstInvoice, payment, Constants.PaymentAgainstInvoice);
                payment.setRows(paymentDetails);
            }

//            status = txnManager.getTransaction(def);
            
            /*
                Advance Details Object
            */
            if (jSONArrayAdvance.length() > 0) {
                if (details == null) {
                    details = journalEntryDetailObject(request, jSONArrayAdvance, journalEntry, payment, Constants.AdvancePayment);
                } else {
                    details.addAll(journalEntryDetailObject(request, jSONArrayAdvance, journalEntry, payment, Constants.AdvancePayment));
                }

                //Save Advance Details selected in payment
                advanceDetails = advanceDetailObject(request, jSONArrayAdvance, payment, Constants.AdvancePayment);
                payment.setAdvanceDetails(advanceDetails);
            }

            // Against Invoice Details Object
//            if (jSONArrayAgainstInvoice.length() > 0) {
//                if (details == null) {
//                    details = journalEntryDetailObject(request, jSONArrayAgainstInvoice, journalEntry, payment, Constants.PaymentAgainstInvoice);
//                } else {
//                    details.addAll(journalEntryDetailObject(request, jSONArrayAgainstInvoice, journalEntry, payment, Constants.PaymentAgainstInvoice));
//                }
//                //Save Invoice Details selected in payment
//                HashSet paymentDetails = paymentDetailObject(request, jSONArrayAgainstInvoice, payment, Constants.PaymentAgainstInvoice);
//                payment.setRows(paymentDetails);
//            }
           
            /*
                Against CN/DN Object
            */
            int sequencecounter = 0;
            Map<String,Object> counterMap=new HashMap<>();
            counterMap.put("counter", sequencecounter);
            if (jSONArrayCNDN.length() > 0) {
                if (details == null) {
                    details = journalEntryDetailObject(request, jSONArrayCNDN, journalEntry, payment, Constants.PaymentAgainstCNDN);
                } else {
                    details.addAll(journalEntryDetailObject(request, jSONArrayCNDN, journalEntry, payment, Constants.PaymentAgainstCNDN));
                }
                //Save CN / DN details selected in payment
                saveCNDNDetailObject(request, jSONArrayCNDN, payment, Constants.PaymentAgainstCNDN,counterMap);
            }
           
            /*
                Against GL Object
            */
            if (jSONArrayGL.length() > 0) {
                if (details == null) {
                    details = journalEntryDetailObject(request, jSONArrayGL, journalEntry, payment, Constants.GLPayment);
                } else {
                    details.addAll(journalEntryDetailObject(request, jSONArrayGL, journalEntry, payment, Constants.GLPayment));
                }
            }
           /*
            * If Balace Amount is greater than Zero
            */
            if (balaceAmount > 0) {
                if (details == null) {
                    details = journalEntryDetailObject(request, jSONArrayBal, journalEntry, payment, Constants.BALACEAMOUNT);
                } else {
                    details.addAll(journalEntryDetailObject(request, jSONArrayBal, journalEntry, payment, Constants.BALACEAMOUNT));
                }
            }
            
            /*
             *  Create Journal-Entry-Detail object for following cases
             * 1. For Bank Changes
             * 2. For Bank Interest
             * 3. Total Payment Amount
             */
            if (editPaymentObject != null) {
                editPaymentObject.setJournalEntryForBankCharges(null);
                editPaymentObject.setJournalEntryForBankInterest(null);
            }
            
            sequencecounter= (Integer) counterMap.get("counter");
            if (details != null) {
                bankChargesAccid = request.getParameter("bankChargesCmb");
                if (!StringUtil.isNullOrEmpty(bankChargesAccid)) {      // Create JE for Bank charges
//                    sequencecounter++;
                    boolean paymentWithoutJe = false;
                    if (editPaymentObject != null) {
                        paymentWithoutJe = oldBankChargeJE != null ? false : true;
                    }
                    if(editPaymentObject==null || (editPaymentObject!=null?oldBankChargeJE!=null:true)){
                    JournalEntry bankChargesJournalEntry = journalEntryObjectBankCharges(request, editPaymentObject, sequencecounter, true,paymentWithoutJe,oldBankChargeJE,oldBankInterestJE);
                    bankChargeJeId=bankChargesJournalEntry.getID();
                    payment.setJournalEntryForBankCharges(bankChargesJournalEntry);
                    payments.add(payment);
                    if (editPaymentObject != null) {
                        jeEntryNo = ", " + bankChargesJournalEntry.getEntryNumber();
                    }
                    //ERP-18778
                    bankChargesJournalEntry.setIsmulticurrencypaymentje(journalEntry.isIsmulticurrencypaymentje());
                    bankChargesJournalEntry.setPaymentcurrencytopaymentmethodcurrencyrate(journalEntry.getPaymentcurrencytopaymentmethodcurrencyrate());     
                    bankChargesJournalEntry.setTransactionId(paymentID);
                    bankChargesJournalEntry.setTransactionModuleid(Constants.Acc_Make_Payment_ModuleId);
                    if (approvalStatusLevel == 11) {
                            bankChargesJournalEntry.setPendingapproval(0);
                        } else {
                            bankChargesJournalEntry.setPendingapproval(1);
                    }
                    accJournalEntryobj.saveJournalEntryByObject(bankChargesJournalEntry);
                    Set<JournalEntryDetail> detail = null;
                    detail = (journalEntryDetailCommonObjectsForBankCharges(request, bankChargesJournalEntry, payment, true));
//                detail.addAll(journalEntryDetailCommonObjectsForBankCharges(request, bankChargesJournalEntry, receipt));
                    bankChargesJournalEntry.setDetails(detail);
                    accJournalEntryobj.saveJournalEntryDetailsSet(detail);
                    sequencecounter++;
                }
                }
                bankInterestAccid = request.getParameter("bankInterestCmb");
                if (!StringUtil.isNullOrEmpty(bankInterestAccid)) {     //Create JE for bank interest
//                    sequencecounter++;
                    boolean paymentWithoutJe = false;
                    if (editPaymentObject != null) {
                        paymentWithoutJe = oldBankInterestJE != null ? false : true;
                    }
                    if(editPaymentObject==null || (editPaymentObject!=null?oldBankInterestJE!=null:true)){
                    JournalEntry bankInterestJournalEntry = journalEntryObjectBankCharges(request, editPaymentObject, sequencecounter, false,paymentWithoutJe,oldBankChargeJE,oldBankInterestJE);
                    payment.setJournalEntryForBankInterest(bankInterestJournalEntry);
                    payments.add(payment);
                    if (editPaymentObject != null) {
                        jeEntryNo+=", " + bankInterestJournalEntry.getEntryNumber();
                    }
                    //ERP-18778
                    bankInterestJournalEntry.setIsmulticurrencypaymentje(journalEntry.isIsmulticurrencypaymentje());
                    bankInterestJournalEntry.setPaymentcurrencytopaymentmethodcurrencyrate(journalEntry.getPaymentcurrencytopaymentmethodcurrencyrate());
                    bankInterestJournalEntry.setTransactionId(paymentID);
                    bankInterestJournalEntry.setTransactionModuleid(Constants.Acc_Make_Payment_ModuleId);
                    accJournalEntryobj.saveJournalEntryByObject(bankInterestJournalEntry);
                    if (approvalStatusLevel == 11) {
                            bankInterestJournalEntry.setPendingapproval(0);
                        } else {
                            bankInterestJournalEntry.setPendingapproval(1);
                    }
                    
                    Set<JournalEntryDetail> detail = null;
                    detail = (journalEntryDetailCommonObjectsForBankCharges(request, bankInterestJournalEntry, payment, false));
//                detail.addAll(journalEntryDetailCommonObjectsForBankCharges(request, bankChargesJournalEntry, receipt));
                    bankInterestJournalEntry.setDetails(detail);
                    accJournalEntryobj.saveJournalEntryDetailsSet(detail);
                }
                }
                details.addAll(journalEntryDetailCommonObjects(request, jSONArrayCNDN, journalEntry, payment, Constants.PaymentAgainstCNDN,editPaymentObject,oldBankChargeJE,oldBankInterestJE));
            }
           
            // Save JEDetail Object
            journalEntry.setDetails(details);
            journalEntry.setTransactionId(paymentID);
            journalEntry.setTransactionModuleid(Constants.Acc_Make_Payment_ModuleId);
            accJournalEntryobj.saveJournalEntryDetailsSet(details);
           
            /*
             * Create PayDetail Object for -
             * 1. Cheque Details
             */
            PayDetail payDetail = getPayDetailObject(request,editPaymentObject,payment);
            payment.setPayDetail(payDetail);

            /*
             * Revaluation JE Entry - If Payment Against Invoice which are revaluated
             * ***Parameter -
             * oldReevalJE - Revaluation Journal Entry ID
             * 1. Revaluation Agianst invoice
             */          
            counterMap.put("counter", sequencecounter);
            saveReevalJournalEntryObjects(request, jSONArrayAgainstInvoice, payment, Constants.PaymentAgainstInvoice,oldReevalJE,counterMap);
                     
            // Get Vendor Name and Vendor Address
            if (!StringUtil.isNullOrEmpty(request.getParameter("accid"))) {
                KwlReturnObject accresult = accountingHandlerDAOobj.getObject(Account.class.getName(), request.getParameter("accid"));
                Account account = (Account) accresult.getEntityList().get(0);
                if (account != null) {
                    String accountid = account.getID();
                    result = accVendorPaymentobj.getaccountdetailsPayment(accountid);
                    if (result.getRecordTotalCount() > 0) {
                        Vendor vendor = (Vendor) result.getEntityList().get(0);
                        accountaddress = vendor.getAddress();
                    }
                    accountName = account.getName();
                    KwlReturnObject accresultVen = accountingHandlerDAOobj.getObject(Vendor.class.getName(), account.getID());
                    String vendorName = "";
                    if (!accresultVen.getEntityList().isEmpty()) {
                        Vendor vendor = (Vendor) accresultVen.getEntityList().get(0);
                        if (vendor != null) {
                            vendorName = vendor.getName();
                        }
                    }
                }
            }
           
            // Get Vendor or Customer Name/ Paid To value
            String payee = payment.getPayee();
            if (payment.getPaymentWindowType() == Constants.Make_Payment_to_Vendor && StringUtil.isNullOrEmpty(payee)) { // Against Vendor
                payee = payment.getVendor().getName();
                payee = StringUtil.DecodeText(payee);
            } else if (payment.getPaymentWindowType() == Constants.Make_Payment_to_Customer && StringUtil.isNullOrEmpty(payee)) {  // Against Customer
                payee = payment.getCustomer();
                KwlReturnObject resultCVAccount = accountingHandlerDAOobj.getObject(Customer.class.getName(),payee);
                Customer customer= (Customer)resultCVAccount.getEntityList().get(0);
                if(customer !=null)
                    payee = StringUtil.DecodeText(customer.getName());
            } else {  // Against GL
                if (payment.getPaidTo() != null && StringUtil.isNullOrEmpty(payee)) {
                    payee = payment.getPaidTo().getValue();
                    //payee = StringUtil.DecodeText(payee);// Comment Because  ERP-9738
                }
            }
           
            //To get the Vendor/Customer Billing Address 
            
            if (!StringUtil.isNullOrEmpty(request.getParameter("accid"))) {
                //params to send to get billing address
                HashMap<String, Object> addressParams = new HashMap<String, Object>();
                addressParams.put("companyid", companyid);
                addressParams.put("isDefaultAddress", true);
                addressParams.put("isBillingAddress", true);
                if (payment.getPaymentWindowType() == Constants.Make_Payment_to_Vendor) {
                    addressParams.put("vendorid", request.getParameter("accid"));
                    VendorAddressDetails vendorAddressDetail = accountingHandlerDAOobj.getVendorAddressObj(addressParams);
                    vendorEmailId = vendorAddressDetail != null ? vendorAddressDetail.getEmailID() : "";

                } else if (payment.getPaymentWindowType() == Constants.Make_Payment_to_Customer) {
                    addressParams.put("customerid", request.getParameter("accid"));
                    CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                    vendorEmailId = customerAddressDetails != null ? customerAddressDetails.getEmailID() : "";
                }
            }
                        
            // Start of Print cheque
            // Below code used to Format Amount for Print Cheque Case
            DecimalFormat df = new DecimalFormat("#,###,###,##0.00");
            String basecurrency=request.getParameter("currencyid");
            KwlReturnObject resultCurrency = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), basecurrency);
            KWLCurrency currency = (KWLCurrency) resultCurrency.getEntityList().get(0);
            String amt = df.format(payment.getDepositAmount());
            netinword = EnglishNumberToWordsOjb.convert(Double.parseDouble(String.valueOf(payment.getDepositAmount())), currency,countryLanguageId);
            hashMap.put("decimalFormat", df);
            hashMap.put("payment", payment);
            hashMap.put("paymentId", payment.getID());
            hashMap.put("accountaddress", accountaddress);
            hashMap.put("accountName", accountName);
            String[] tempArray = new String[]{"amountinword", netinword};
            hashMap.put("netinword", tempArray);
            String[] tempArray1 = new String[]{"accountName", payee};
            hashMap.put("payee", tempArray1);

            String action = "made";
            if (isEdit) {
                action = "updated";
            }
            paymentid = payment.getID();
            amountpayment = payment.getDepositAmount() + "";
            billno = payment.getPaymentNumber();
            String JENumBer="";
            if (payment.getJournalEntry() != null) {
                JENumBer = payment.getJournalEntry().getEntryNumber();
            }
            boolean isChequePrint=false;
            issuccess = true;
            if (!StringUtil.isNullOrEmpty(request.getParameter("isChequePrint"))) {
                isChequePrint = Boolean.parseBoolean(request.getParameter("isChequePrint"));
            }
            if (isChequePrint) {
                KwlReturnObject resultPayMethod = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), request.getParameter("pmtmethod"));
                PaymentMethod payMethod = (PaymentMethod) resultPayMethod.getEntityList().get(0);

                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                if (!StringUtil.isNullOrEmpty(payMethod.getID())) {
                    requestParams.put("bankid", payMethod.getID());
                }
                KwlReturnObject result1 = accPaymentDAOobj.getChequeLayout(requestParams);
                List listCheque = result1.getEntityList();
                Iterator itr = listCheque.iterator();
                JSONObject chequeobj=new JSONObject();
                while (itr.hasNext()) {
                    ChequeLayout chequeLayout = (ChequeLayout) itr.next();
                    chequeobj = new JSONObject(chequeLayout.getCoordinateinfo());
                    jobjDetails.put("dateLeft", chequeobj.optString("dateLeft","0"));
                    jobjDetails.put("nameLeft", chequeobj.optString("nameLeft","0"));
                    jobjDetails.put("amtinwordLeft", chequeobj.optString("amtinwordLeft","0"));
                    jobjDetails.put("amtinwordLeftLine2", chequeobj.optString("amtinwordLeftLine2","0"));
                    jobjDetails.put("amtLeft", chequeobj.optString("amtLeft","0"));
                    jobjDetails.put("dateTop", chequeobj.optString("dateTop","0"));
                    jobjDetails.put("nameTop", chequeobj.optString("nameTop","0"));
                    jobjDetails.put("amtinwordTop", chequeobj.optString("amtinwordTop","0"));
                    jobjDetails.put("amtinwordTopLine2", chequeobj.optString("amtinwordTopLine2","0"));
                    jobjDetails.put("amtTop", chequeobj.optString("amtTop","0"));
                }
                SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("ddMMyy");
                //DATE_FORMAT.setTimeZone(TimeZone.getTimeZone("GMT" + sessionHandlerImpl.getTimeZoneDifference(request)));
                //     Date creationDate = new Date(request.getParameter("creationdate"));
                //  Date creationDate = payment.getChequeDate();
                
                //ERROR PRONE CODE
                String date = DATE_FORMAT.format(payment.getPayDetail().getCheque().getDueDate());
                String formatted_date_with_spaces = "";
                for (int i = 0; i < date.length(); i++) {
                    formatted_date_with_spaces += date.charAt(i);
                    formatted_date_with_spaces += "&nbsp&nbsp&nbsp&nbsp&nbsp";
                }
                String[] amount1 = hashMap.get("netinword") != null ? (String[]) hashMap.get("netinword") : null;
                String[] accName = hashMap.get("payee") != null ? (String[]) hashMap.get("payee") : null;
                jobjDetails.put("amount", amt);
                String amount_first_line = "";
                String amount_second_line = "";
                String payAction=" Only.";
                if (amount1[1].length() > 34 && amount1[1].charAt(34) == ' ') {
                    amount_first_line = amount1[1].substring(0, 34);
                    amount_second_line = amount1[1].substring(34, amount1[1].length());
                    jobjDetails.put(amount1[0], amount_first_line );
                    jobjDetails.put("amountinword1", amount_second_line+payAction);
                } else if (amount1[1].length() > 34) {
                    amount_first_line = amount1[1].substring(0, 34);
                    amount_first_line = amount1[1].substring(0, amount_first_line.lastIndexOf(" "));
                    amount_second_line = amount1[1].substring(amount_first_line.length(), amount1[1].length());
                    jobjDetails.put(amount1[0], amount_first_line );
                    jobjDetails.put("amountinword1", amount_second_line+payAction);
                } else {
                    if(amount1[1].length()<27){
                      jobjDetails.put(amount1[0], amount1[1]+payAction);
                        jobjDetails.put("amountinword1", "");
                    }
                    else{
                        jobjDetails.put(amount1[0], amount1[1]);
                        jobjDetails.put("amountinword1", payAction);
                    }
                }
                jobjDetails.put(accName[0], accName[1]);
                jobjDetails.put("date", formatted_date_with_spaces);               
                
            boolean isFontStylePresent = chequeobj.has("fontStyle") && !StringUtil.isNullOrEmpty(chequeobj.getString("fontStyle")) ? true : false;
            String accNameForAudit=accName[1];
            String fontStyle = chequeobj.has("fontStyle") && !StringUtil.isNullOrEmpty(chequeobj.getString("fontStyle")) ? chequeobj.getString("fontStyle") : "";
            char fontStyleChar;
            if (fontStyle.equals("1")) {
                fontStyleChar = 'b';
            } else if (fontStyle.equals("2")) {
                fontStyleChar = 'i';
            } else {
                fontStyleChar = 'p';
            }
                      
            //for name
            if (chequeobj.has("dateFontSize") || isFontStylePresent) {
                if (isFontStylePresent && !StringUtil.isNullOrEmpty(chequeobj.getString("dateFontSize"))) {
                    formatted_date_with_spaces = "<font size=" + chequeobj.getString("dateFontSize") + "><" + fontStyleChar + ">" + formatted_date_with_spaces + "</" + fontStyleChar + "></font> ";
                    jobjDetails.put("date", formatted_date_with_spaces);
                } else if (!StringUtil.isNullOrEmpty(chequeobj.getString("dateFontSize"))) {
                   formatted_date_with_spaces = "<font size=" + chequeobj.getString("dateFontSize") + ">" + formatted_date_with_spaces + "</font> ";
                    jobjDetails.put("date", formatted_date_with_spaces);
                } else {
                    formatted_date_with_spaces = "<" + fontStyleChar + ">" + formatted_date_with_spaces + "</" + fontStyleChar + ">";
                    jobjDetails.put("date", formatted_date_with_spaces);

                }
            }
            //for name
            if (chequeobj.has("nameFontSize") || isFontStylePresent) {
                if (isFontStylePresent && !StringUtil.isNullOrEmpty(chequeobj.getString("nameFontSize"))) {
                    accName[1] = "<font size=" + chequeobj.getString("nameFontSize") + "><" + fontStyleChar + ">" + accName[1] + "</" + fontStyleChar + "></font> ";
                    jobjDetails.put(accName[0], accName[1]);
                } else if (!StringUtil.isNullOrEmpty(chequeobj.getString("nameFontSize"))) {
                    accName[1] = "<font size=" + chequeobj.getString("nameFontSize") + ">" + accName[1] + "</font> ";
                    jobjDetails.put(accName[0], accName[1]);
                } else {
                    accName[1] = "<" + fontStyleChar + ">" + accName[1] + "</" + fontStyleChar + ">";
                    jobjDetails.put(accName[0], accName[1]);

                }
            }
           
            //for amount in words
            if (chequeobj.has("amountInWordsFontSize") || isFontStylePresent) {
                if (isFontStylePresent && !StringUtil.isNullOrEmpty(chequeobj.getString("amountInWordsFontSize"))) {
                    amount_first_line = "<font size=" + chequeobj.getString("amountInWordsFontSize") + "><" + fontStyleChar + ">" + amount_first_line + "</" + fontStyleChar + "></font> ";
                    amount_second_line = "<font size=" + chequeobj.getString("amountInWordsFontSize") + "><" + fontStyleChar + ">" + amount_second_line +" "+payAction+ "</" + fontStyleChar + "></font> ";
                     if (amount1[1].length() > 34) {
                        jobjDetails.put(amount1[0], amount_first_line);
                        jobjDetails.put("amountinword1", amount_second_line);
                    } else if (amount1[1].length() < 27) {
                        amount1[1] = "<font size=" + chequeobj.getString("amountInWordsFontSize") + "><" + fontStyleChar + ">" + amount1[1] +" "+payAction+ "</" + fontStyleChar + "></font> ";
                        jobjDetails.put(amount1[0], amount1[1]);
                        jobjDetails.put("amountinword1", "");
                    }
                } else if (!StringUtil.isNullOrEmpty(chequeobj.getString("amountInWordsFontSize"))) {
                    amount_first_line = "<font size=" + chequeobj.getString("amountInWordsFontSize") + ">" + amount_first_line + "</font> ";
                    amount_second_line = "<font size=" + chequeobj.getString("amountInWordsFontSize") + ">" + amount_second_line +" "+payAction+ "</font> ";
                    if (amount1[1].length() > 34) {
                        jobjDetails.put(amount1[0], amount_first_line);
                        jobjDetails.put("amountinword1", amount_second_line);
                    } else if (amount1[1].length() < 27) {
                        amount1[1] = "<font size=" + chequeobj.getString("amountInWordsFontSize") + ">" + amount1[1] +" "+payAction+ "</font> ";
                        jobjDetails.put(amount1[0], amount1[1]);
                        jobjDetails.put("amountinword1", "");
                    }
                } else {
                    amount_first_line = "<" + fontStyleChar + ">" + amount_first_line + "</" + fontStyleChar + ">";
                    amount_second_line = "<" + fontStyleChar + ">" + amount_second_line +" "+payAction+ "</" + fontStyleChar + ">";
                     if (amount1[1].length() > 34) {
                        jobjDetails.put(amount1[0], amount_first_line);
                        jobjDetails.put("amountinword1", amount_second_line);
                    } else if (amount1[1].length() < 27) {
                         amount1[1] = "<" + fontStyleChar + ">" + amount1[1] +" "+payAction+ "</" + fontStyleChar + ">";
                        jobjDetails.put(amount1[0], amount1[1]);
                        jobjDetails.put("amountinword1", "");
                    }
                }
            }
           
            //for amount in number
            if (chequeobj.has("amountFontSize") || isFontStylePresent) {
                if (isFontStylePresent && !StringUtil.isNullOrEmpty(chequeobj.getString("amountFontSize"))) {
                    amt = "<font size=" + chequeobj.getString("amountFontSize") + "><" + fontStyleChar + ">" + amt + "</" + fontStyleChar + "></font> ";
                    jobjDetails.put("amount", amt);
                } else if (!StringUtil.isNullOrEmpty(chequeobj.getString("amountFontSize"))) {
                    amt = "<font size=" + chequeobj.getString("amountFontSize") + ">" + amt + "</font> ";
                    jobjDetails.put("amount", amt);
                } else {
                    amt = "<" + fontStyleChar + ">" + amt + "</" + fontStyleChar + ">";
                    jobjDetails.put("amount", amt);

                }
            }              
               
                jArr.put(jobjDetails);
                String chqno = "";
                if (payDetail.getCheque().getChequeNo()!= null) {
                    chqno = payDetail.getCheque().getChequeNo();
                }
                KwlReturnObject result2 = accPaymentDAOobj.updateChequePrint(paymentid,companyid);
                auditTrailObj.insertAuditLog(AuditAction.MAKE_PAYMENT, "User " + sessionHandlerImpl.getUserFullName(request) + " has printed a cheque "+chqno+" for "+accNameForAudit+" in payment " + billno, request, paymentid);
            }
            
             String moduleName =Constants.PAYMENT_MADE;
            //Send Mail when Purchase Requisition is generated or modified.
            DocumentEmailSettings documentEmailSettings = null;
            KwlReturnObject documentEmailresult = accountingHandlerDAOobj.getObject(DocumentEmailSettings.class.getName(), sessionHandlerImpl.getCompanyid(request));
            documentEmailSettings = documentEmailresult != null ? (DocumentEmailSettings) documentEmailresult.getEntityList().get(0) : null;
            if (documentEmailSettings != null) {
                boolean sendmail = false;
                boolean isEditMail = false;
                if (StringUtil.isNullOrEmpty(receiptid)) { 
                    if (documentEmailSettings.isVendorPaymentGenerationMail()) { ////Create New Case
                        sendmail = true;
                    }
                } else {
                    isEditMail = true;
                    if (documentEmailSettings.isVendorPaymentUpdationMail()) { // edit case  
                         sendmail = true;
                    }
                }
                if (sendmail) {
                    String userMailId="",userName="",currentUserid="";
                    String createdByEmail = "";
                    String createdById = "";
                    HashMap<String, Object> requestParams= AccountingManager.getEmailNotificationParams(request);
                    if(requestParams.containsKey("userfullName")&& requestParams.get("userfullName")!=null){
                        userName=(String)requestParams.get("userfullName");
                    }
                    if(requestParams.containsKey("usermailid")&& requestParams.get("usermailid")!=null){
                        userMailId=(String)requestParams.get("usermailid");
                    }
                    if(requestParams.containsKey(Constants.useridKey)&& requestParams.get(Constants.useridKey)!=null){
                        currentUserid=(String)requestParams.get(Constants.useridKey);
                    }
                    List<String> mailIds = new ArrayList();
                    if (!StringUtil.isNullOrEmpty(userMailId)) {
                        mailIds.add(userMailId);
                    }
                    /*
                     if Edit mail option is true then get userid and Email id of document creator.
                    */
                    if (isEditMail) {
                        if (editPaymentObject != null && editPaymentObject.getCreatedby() != null) {
                            createdByEmail = editPaymentObject.getCreatedby().getEmailID();
                            createdById = editPaymentObject.getCreatedby().getUserID();
                        }
                        /*
                         if current user userid == document creator userid then don't add creator email ID in List.
                         */
                        if (!StringUtil.isNullOrEmpty(createdByEmail) && !(currentUserid.equalsIgnoreCase(createdById))) {
                            mailIds.add(createdByEmail);
                        }
                    }
                    String[] temp = new String[mailIds.size()];
                    String[] tomailids = mailIds.toArray(temp);
                    String paymentNumber = entryNumber;
                    accountingHandlerDAOobj.sendSaveTransactionEmails(paymentNumber, moduleName, tomailids, userName, isEditMail, companyid);
                }
            }
            if (oldPayDetail != null) {
                accPaymentDAOobj.deletePayDetail(oldPayDetail.getID(), oldPayDetail.getCompany().getCompanyID());
                if (oldPayDetail.getCard() != null) {
                    Cardid = oldPayDetail.getCard().getID();
                }
                if (oldPayDetail.getCheque() != null) {
                    Cardid = oldPayDetail.getCheque().getID();
                }
                deleteChequeOrCard(Cardid, oldJE.getCompany().getCompanyID());// method used inside savePayment
            }
            if (oldJE != null) {
                deleteJEArray(oldJE.getID(), oldJE.getCompany().getCompanyID());
            }
            if (oldBankChargeJE != null) {          // delete bank charge JE.
                //Delete the Bank reconcialtion details linked to this JE
                Map<String,Object> bankReconMap = new HashMap<>();
                bankReconMap.put("oldjeid", oldBankChargeJE.getID());
                bankReconMap.put("companyId",oldBankChargeJE.getCompany().getCompanyID());
                deleteBankReconcilation(bankReconMap);
                deleteJEArray(oldBankChargeJE.getID(), oldBankChargeJE.getCompany().getCompanyID());
            }
            if (oldBankInterestJE != null) {          // delete bank Interest JE.
                Map<String,Object> bankReconMap = new HashMap<>();
                bankReconMap.put("oldjeid", oldBankInterestJE.getID());
                bankReconMap.put("companyId",oldBankInterestJE.getCompany().getCompanyID());
                deleteBankReconcilation(bankReconMap);
                deleteJEArray(oldBankInterestJE.getID(), oldBankInterestJE.getCompany().getCompanyID());
            }
            deleteTemporaryInvoicesEntries(jSONArrayAgainstInvoice, companyid);
            accCommonTablesDAO.deleteTransactionInTemp(entryNumber, companyid,Constants.Acc_Make_Payment_ModuleId);
            accPaymentDAOobj.deleteUsedInvoiceOrCheque(chequeNumber, companyid);
            txnManager.commit(status);
            
            TransactionStatus AutoNoPayStatus = null;
            String bankChargeJeNo="",bankInterestJeNo="";
            String linkedDocuments = "";
            String fromLinkCombo = "";
            try {
                synchronized (this) {
                    DefaultTransactionDefinition def2 = new DefaultTransactionDefinition();
                    def2.setName("AutoNum_Tx");
                    def2.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
                    AutoNoPayStatus = txnManager.getTransaction(def2);
                    // Get JE Number
                    if (editPaymentObject == null) {
                        String jeentryNumber = "";
                        int jeIntegerPart = 0;
                        String jeDatePrefix = "";
                        String jeDateAfterPrefix = "";
                        String jeDateSuffix = "";
                        String jeSeqFormatId = "";

                        HashMap<String, Object> JEFormatParams = new HashMap<String, Object>();
                        JEFormatParams.put("moduleid", Constants.Acc_GENERAL_LEDGER_ModuleId);
                        JEFormatParams.put("modulename", "autojournalentry");
                        JEFormatParams.put("companyid", companyid);
                        JEFormatParams.put("isdefaultFormat", true);

                        KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(JEFormatParams);
                        SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
                        Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                        seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_JOURNALENTRY, format.getID(), false, journalEntry.getEntryDate());
                        jeentryNumber = (String)seqNumberMap.get(Constants.AUTO_ENTRYNUMBER);  //next auto generated number
                        jeIntegerPart = Integer.parseInt((String)seqNumberMap.get(Constants.SEQNUMBER));
                        jeDatePrefix = (String)seqNumberMap.get(Constants.DATEPREFIX);//Date Prefix Part
                        jeDateAfterPrefix = (String)seqNumberMap.get(Constants.DATEAFTERPREFIX);  //Date After Prefix Part
                        jeDateSuffix = (String)seqNumberMap.get(Constants.DATESUFFIX);//Date Suffix Part
                        jeSeqFormatId = format.getID();

                        seqNumberMap.put(Constants.DOCUMENTID, journalEntry.getID());
                        seqNumberMap.put(Constants.companyKey, companyid);
                        seqNumberMap.put(Constants.SEQUENCEFORMATID, jeSeqFormatId);
                         if (approvalStatusLevel == 11) {
                            JENumBer = accJournalEntryobj.UpdateJournalEntry(seqNumberMap);
                            journalEntry.setEntryNumber(jeentryNumber);
                            journalEntry.setSeqnumber(jeIntegerPart);
                            journalEntry.setDatePreffixValue(jeDatePrefix);
                            journalEntry.setDateAfterPreffixValue(jeDateAfterPrefix);
                            journalEntry.setDateSuffixValue(jeDateSuffix);
                            payment.setJournalEntry(journalEntry);
                        }
                    }
                    // Get Payment Number
                    if (!sequenceformat.equals("NA") && editPaymentObject == null) {
                        boolean seqformat_oldflag = StringUtil.getBoolean(request.getParameter("seqformat_oldflag"));
                        String nextAutoNo = "";
                        int nextAutoNoInt = 0;
                        String datePrefix = "";
                        String dateafterPrefix = "";
                        String dateSuffix = "";
                        Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                        if (seqformat_oldflag) {
                            nextAutoNo = accCompanyPreferencesObj.getNextAutoNumber(companyid, StaticValues.AUTONUM_PAYMENT, sequenceformat);
                            seqNumberMap.put(Constants.AUTO_ENTRYNUMBER, nextAutoNo);
                        } else {
//                            seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_PAYMENT, sequenceformat, seqformat_oldflag,payment.getJournalEntry().getEntryDate());
                            seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_PAYMENT, sequenceformat, seqformat_oldflag,payment.getCreationDate());
                            nextAutoNo = (String)seqNumberMap.get(Constants.AUTO_ENTRYNUMBER);  //next auto generated number
                            nextAutoNoInt = Integer.parseInt((String)seqNumberMap.get(Constants.SEQNUMBER));
                            datePrefix = (String)seqNumberMap.get(Constants.DATEPREFIX);//Date Prefix Part
                            dateafterPrefix = (String)seqNumberMap.get(Constants.DATEAFTERPREFIX);  //Date After Prefix Part
                            dateSuffix = (String)seqNumberMap.get(Constants.DATESUFFIX);//Date Suffix Part
                        }

                        seqNumberMap.put(Constants.DOCUMENTID, payment.getID());
                        seqNumberMap.put(Constants.companyKey, companyid);
                        seqNumberMap.put(Constants.SEQUENCEFORMATID, sequenceformat);
                            billno = accVendorPaymentobj.UpdatePaymentEntry(seqNumberMap);
                            payment.setPaymentNumber(nextAutoNo);
                            payment.setSeqnumber(nextAutoNoInt);
                            payment.setDatePreffixValue(datePrefix);
                            payment.setDateAfterPreffixValue(dateafterPrefix);
                            payment.setDateSuffixValue(dateSuffix);
                    }
                    
                    /* saving linking information in Make Payment & Credit Note If Payment is made with Credit Note*/
                    if (jSONArrayCNDN.length() > 0) {
                        JSONArray drAccArr = jSONArrayCNDN;
                        for (int i = 0; i < drAccArr.length(); i++) {

                            JSONObject jobj1 = drAccArr.getJSONObject(i);
                            String cnnoteid = jobj1.getString("documentid");

                            KwlReturnObject cnResult = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), cnnoteid);
                            CreditNote creditNote = (CreditNote) cnResult.getEntityList().get(0);

                            /*Method is used to save linking informatio of  Make Payment 
                     
                             when linking with Credit Note */
                            String creditNoteNo = creditNote.getCreditNoteNumber();
                            saveLinkingInformationOfPaymentWithCN(creditNote, payment, billno);
                            linkedDocuments += creditNoteNo + " ,";

                        }
                        linkedDocuments = linkedDocuments.substring(0, linkedDocuments.length() - 1);
                        fromLinkCombo="Credit Note";
                    }
                    
                    /* saving linking information in Make Payment & Purchase Invoice If Payment is made against Invoice*/
                    if (jSONArrayAgainstInvoice.length() > 0) {
                        JSONArray drAccArr = jSONArrayAgainstInvoice;
                        for (int i = 0; i < drAccArr.length(); i++) {

                            JSONObject jobj1 = drAccArr.getJSONObject(i);
                            String invoiceid = jobj1.getString("documentid");

                            KwlReturnObject grResult = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), invoiceid);
                            GoodsReceipt invoice = (GoodsReceipt) grResult.getEntityList().get(0);

                            /*Method is used to save linking informatio of  Make Payment 
                     
                             when linking with Purchase Invoice */
                            String invoiceNo = invoice.getGoodsReceiptNumber();
                            saveLinkingInformationOfPaymentWithInvoice(invoice, payment, billno);
                            linkedDocuments += invoiceNo + " ,";

                        }
                        linkedDocuments = linkedDocuments.substring(0, linkedDocuments.length() - 1);
                        fromLinkCombo="Purchase Invoice";
                    }

//                    if (sequenceformat.equals("NA") && editPaymentObject == null) {
//                        KwlReturnObject count = accVendorPaymentobj.getPaymentFromNo(entryNumber, companyid);
//                        while (count.getRecordTotalCount() > 0) {
//                            entryNumber = entryNumber + "-1";
//                            count = accVendorPaymentobj.getPaymentFromNo(entryNumber, companyid);
//                        }
//                        billno = accVendorPaymentobj.UpdatePaymentEntryForNA(payment.getID(), entryNumber);
//                        payment.setPaymentNumber(entryNumber);
//                    }
                     if (!StringUtil.isNullOrEmpty(bankChargesAccid)) {
                          if (editPaymentObject == null) {
                             String jeentryNumber = "";
                             int jeIntegerPart = 0;
                             String jeSeqFormatId = "";

                             HashMap<String, Object> JEFormatParams = new HashMap<String, Object>();
                             JEFormatParams.put("moduleid", Constants.Acc_GENERAL_LEDGER_ModuleId);
                             JEFormatParams.put("modulename", "autojournalentry");
                             JEFormatParams.put("companyid", companyid);
                             JEFormatParams.put("isdefaultFormat", true);

                             KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(JEFormatParams);
                             SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
                             Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                             seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_JOURNALENTRY, format.getID(), false, payment.getJournalEntryForBankCharges().getEntryDate());
//                             jeentryNumber = nextAutoNoTemp[0];  //next auto generated number
//                             jeIntegerPart = Integer.parseInt(nextAutoNoTemp[1]);
                              jeSeqFormatId = format.getID();
                              seqNumberMap.put(Constants.DOCUMENTID, payment.getJournalEntryForBankCharges().getID());
                              seqNumberMap.put(Constants.companyKey, companyid);
                              seqNumberMap.put(Constants.SEQUENCEFORMATID, jeSeqFormatId);

                             bankChargeJeNo = accJournalEntryobj.UpdateJournalEntry(seqNumberMap);
                             jeEntryNo+=", " + bankChargeJeNo;
                         }                         
                     }
                     if (!StringUtil.isNullOrEmpty(bankInterestAccid)) {
                        if (editPaymentObject == null) {
                            String jeentryNumber = "";
                            int jeIntegerPart = 0;
                            String jeSeqFormatId = "";

                            HashMap<String, Object> JEFormatParams = new HashMap<String, Object>();
                            JEFormatParams.put("moduleid", Constants.Acc_GENERAL_LEDGER_ModuleId);
                            JEFormatParams.put("modulename", "autojournalentry");
                            JEFormatParams.put("companyid", companyid);
                            JEFormatParams.put("isdefaultFormat", true);

                            KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(JEFormatParams);
                            SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
                            Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                            seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_JOURNALENTRY, format.getID(), false, payment.getJournalEntryForBankInterest().getEntryDate());
//                            jeentryNumber = nextAutoNoTemp[0];  //next auto generated number
//                            jeIntegerPart = Integer.parseInt(nextAutoNoTemp[1]);
                            jeSeqFormatId = format.getID();
                            seqNumberMap.put(Constants.DOCUMENTID, payment.getJournalEntryForBankInterest().getID());
                            seqNumberMap.put(Constants.companyKey, companyid);
                            seqNumberMap.put(Constants.SEQUENCEFORMATID, jeSeqFormatId);
                            bankInterestJeNo = accJournalEntryobj.UpdateJournalEntry(seqNumberMap);
                             jeEntryNo+=", " + bankInterestJeNo;
                            }
                        }
                    txnManager.commit(AutoNoPayStatus);
                }
            } catch (Exception ex) {
                if (AutoNoPayStatus != null) {
                    txnManager.rollback(AutoNoPayStatus);
                }
                deleteTemporaryInvoicesEntries(jSONArrayAgainstInvoice, companyid);
                accPaymentDAOobj.deleteUsedInvoiceOrCheque(chequeNumber, companyid);
                 accCommonTablesDAO.deleteTransactionInTemp(entryNumber, companyid,Constants.Acc_Make_Payment_ModuleId);
                Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
            }
            // End of Print cheque

            /*
             * Edit Case -
             * 1. Deleted Old PayDetails - Delete Old Cheque and Card details
             */
             /* Preparing Audit trial message if document is linking at the time of creating */
            String linkingMessages = "";
            if (!StringUtil.isNullOrEmpty(linkedDocuments)) {
                linkingMessages = " by Linking to " + fromLinkCombo + " " + linkedDocuments;
            }
            if (approvalStatusLevel != 11) {
                String pendingforApproval= " "+messageSource.getMessage("acc.field.whichispendingforApproval", null, RequestContextUtils.getLocale(request));
                       auditTrailObj.insertAuditLog("75", "User " + sessionHandlerImpl.getUserFullName(request) + " has " + action + " a Payment " + payment.getPaymentNumber()+linkingMessages + person + AuditMsg + pendingforApproval, request, payment.getID());
            }else{
                auditTrailObj.insertAuditLog("75", "User " + sessionHandlerImpl.getUserFullName(request) + " has " + action + " a Payment " + payment.getPaymentNumber()+linkingMessages + person + AuditMsg, request, payment.getID());
            }
            if (approvalStatusLevel != 11) {//pending for approval case
                String paymentNoteSaved = messageSource.getMessage("acc.pay.save", null, RequestContextUtils.getLocale(request));
                String butPendingForApproval = " " + messageSource.getMessage("acc.field.butpendingforApproval", null, RequestContextUtils.getLocale(request));
                msg = paymentNoteSaved + butPendingForApproval + "<br/>" + messageSource.getMessage("acc.field.DocumentNo", null, RequestContextUtils.getLocale(request)) + ": <b>" + billno + "</b>.";
            } else {
                msg = messageSource.getMessage("acc.pay.save", null, RequestContextUtils.getLocale(request)) + "<br/>" + messageSource.getMessage("acc.field.DocumentNo", null, RequestContextUtils.getLocale(request)) + ": <b>" + billno + ",</b> " + messageSource.getMessage("acc.field.JENo", null, RequestContextUtils.getLocale(request)) + ": <b>" + JENumBer + "" + jeEntryNo + "</b>";   //"Payment information has been saved successfully";
            }
            bno = new StringBuilder(billno);

        } catch (SessionExpiredException ex) {
            if (status != null) {
                txnManager.rollback(status);
            }
            deleteTemporaryInvoicesEntries(jSONArrayAgainstInvoice, companyid);
            try {
                accCommonTablesDAO.deleteTransactionInTemp(entryNumber, companyid, Constants.Acc_Make_Payment_ModuleId);
                accPaymentDAOobj.deleteUsedInvoiceOrCheque(chequeNumber, companyid);

            } catch (Exception ee) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ee);
            }
            msg = ex.getMessage();
            issuccess = false;
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (AccountingException AE) {
            if (status != null && !exceptionChequeOrInv) {
                txnManager.rollback(status);
            }
            deleteTemporaryInvoicesEntries(jSONArrayAgainstInvoice, companyid);
            try {
                status=txnManager.getTransaction(def);
                accCommonTablesDAO.deleteTransactionInTemp(entryNumber, companyid, Constants.Acc_Make_Payment_ModuleId);
                txnManager.commit(status);
                accPaymentDAOobj.deleteUsedInvoiceOrCheque(chequeNumber, companyid);

            } catch (Exception ee) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ee);
            }
            msg = "" + AE.getMessage();
            if (AE.getMessage() == null) {
                msg = AE.getCause().getMessage();
            }
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, AE);
        } catch (Exception ex) {
            if (status != null) {
                txnManager.rollback(status);
            }
            deleteTemporaryInvoicesEntries(jSONArrayAgainstInvoice, companyid);
            try {
                accCommonTablesDAO.deleteTransactionInTemp(entryNumber, companyid, Constants.Acc_Make_Payment_ModuleId);
                accPaymentDAOobj.deleteUsedInvoiceOrCheque(chequeNumber, companyid);

            } catch (Exception ee) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            }
            msg = "" + ex.getMessage();
            if (ex.getMessage() == null) {
                msg = ex.getCause().getMessage();
            }
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
                jobj.put("paymentid", paymentid);
                jobj.put("repeatedid", repeatedid);
                jobj.put("intervalUnit", intervalUnit);
                jobj.put("intervalType", intervalType);
                jobj.put("noOfInvPost", noOfInvPost);
                jobj.put("noOfInvRemainPost", noOfInvRemainPost);
                jobj.put("sdate", sdate);
                jobj.put("nextdate", nextdate);
                jobj.put("expdate", expdate);
                jobj.put("data", jArr);
                jobj.put("isAccountingExe", accexception);
                jobj.put("billno", billno.lastIndexOf(",")>=0?bno.deleteCharAt(bno.lastIndexOf(",")):"");
                jobj.put("amount", amountpayment);
                jobj.put("address", accountaddress);
                jobj.put("accountName", accountName);
                jobj.put("billingEmail", vendorEmailId);
                hashMap.put("jobj", jobj);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return hashMap;
    }
    
    
    /**
     * Description : Below Method is used to update the some fields in Payment Document i.e Memo,Paid To,Payee,Custom fields
     * Line level description and Custom fields. 
     * @param <request> used to get request Params
       @param <response> used to send client side
     * @return :JSONObject
     */
    public ModelAndView updatePayment(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            HashMap<String, Object> hashMap = updateVendorPaymentDetails(request);
            jobj = (JSONObject) hashMap.get("jobj");
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            issuccess = false;
            Logger.getLogger(accReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public HashMap<String, Object> updateVendorPaymentDetails(HttpServletRequest request) {
        JSONObject jobj = new JSONObject();
        KwlReturnObject result = null;
        StringBuilder bno = new StringBuilder();
        String amountpayment = "";
        HashMap<String, Object> hashMap = new HashMap<String, Object>();
        String billno = "";
        String person = "";
        boolean isEdit = false;
        boolean issuccess = false;
        String msg = "";
        boolean accexception = false;
        String paymentid = "";
        String repeatedid = "";
        String intervalType = null;
        int intervalUnit = 0;
        int noOfInvPost = 0;
        int noOfInvRemainPost = 0;
        Date sdate = null, nextdate = null, expdate = null;
        String AuditMsg = "", vendorEmailId = "";
        String accountName = "";
        String accountaddress = "";
        JSONArray jSONArrayAgainstInvoice = new JSONArray();
        JSONArray jArr = new JSONArray();
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("SP_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = null;
        String companyid = "";
        String JENumBer = "";
        Map<String, Object> commonPaymentMap = new HashMap<String, Object>();
        try {
            status = txnManager.getTransaction(def);
            companyid = sessionHandlerImpl.getCompanyid(request);
            commonPaymentMap.put("companyid", companyid);
            Payment editPaymentObject = null;

            if (request.getParameter("memo") != null) {
                commonPaymentMap.put("memo", (String) request.getParameter("memo"));
            }
            if (request.getParameter("paidToCmb") != null) {
                commonPaymentMap.put("paidTo", (String) request.getParameter("paidToCmb"));
            }
            if (request.getParameter("payee") != null) {
                commonPaymentMap.put("payee", (String) request.getParameter("payee"));
            }
            if (request.getParameter("billid") != null) {
                commonPaymentMap.put("billid", (String) request.getParameter("billid"));
            }
            if (request.getParameter("customfield") != null) {
                commonPaymentMap.put("customfield", (String) request.getParameter("customfield"));
            }

            /* Update Payment */
            editPaymentObject = updatePayment(commonPaymentMap);

            if (editPaymentObject != null) {// for edit case
                isEdit = true;
                billno = editPaymentObject.getPaymentNumber();
                JENumBer = editPaymentObject.getJournalEntry().getEntryNumber();
                /*
                 Get line detail json array for GL, Invoice, Advance, CN/DN
                 */
                String detailsJsonString = request.getParameter("Details");
                JSONArray jSONArray = new JSONArray(detailsJsonString);
                JSONArray jSONArrayAdvance = new JSONArray();
                JSONArray jSONArrayCNDN = new JSONArray();
                JSONArray jSONArrayGL = new JSONArray();
                JSONArray jSONArrayBal = new JSONArray();
                for (int i = 0; i < jSONArray.length(); i++) {
                    JSONObject jSONObject = jSONArray.getJSONObject(i);
                    if (jSONObject.has("type") && jSONObject.optInt("type", 0) != 0 && jSONObject.has("enteramount") && jSONObject.optDouble("enteramount", 0.0) != 0) {
                        if (jSONObject.getInt("type") == Constants.AdvancePayment) {
                            jSONArrayAdvance.put(jSONObject);
                        } else if (jSONObject.getInt("type") == Constants.PaymentAgainstInvoice) {
                            jSONArrayAgainstInvoice.put(jSONObject);
                        } else if (jSONObject.getInt("type") == Constants.PaymentAgainstCNDN) {
                            jSONArrayCNDN.put(jSONObject);
                        } else if (jSONObject.getInt("type") == Constants.GLPayment) {
                            jSONArrayGL.put(jSONObject);
                        }
                    }
                }

                /* Update  Payment Advance details */
                if (jSONArrayAdvance.length() > 0) {
                    updatePaymentAdvanceDetails(jSONArrayAdvance, editPaymentObject, commonPaymentMap);
                }

                /* Update  Invoice details */
                if (jSONArrayAgainstInvoice.length() > 0) {
                    updateInvoiceDetails(jSONArrayAgainstInvoice, editPaymentObject, commonPaymentMap);
                }
                /* Update  Credit Note  details */
                if (jSONArrayCNDN.length() > 0) {
                    updateCreditNoteDetails(jSONArrayCNDN, editPaymentObject, commonPaymentMap);
                }

                /* Update  GL  details */
                if (jSONArrayGL.length() > 0) {
                    updateGLDetails(jSONArrayGL, editPaymentObject, commonPaymentMap);
                }

                String action = "made";
                if (isEdit) {
                    action = "updated";
                }
                txnManager.commit(status);
                issuccess = true;
                auditTrailObj.insertAuditLog("75", "User " + sessionHandlerImpl.getUserFullName(request) + " has " + action + " a Payment " + editPaymentObject.getPaymentNumber() + person + AuditMsg, request, editPaymentObject.getID());
                msg = messageSource.getMessage("acc.pay.save", null, RequestContextUtils.getLocale(request)) + "<br/>" + messageSource.getMessage("acc.field.DocumentNo", null, RequestContextUtils.getLocale(request)) + ": <b>" + billno + ",</b> " + messageSource.getMessage("acc.field.JENo", null, RequestContextUtils.getLocale(request)) + ": <b>" + JENumBer + "" + "</b>";   //"Payment information has been saved successfully";
                bno = new StringBuilder(billno);
            }
        } catch (SessionExpiredException ex) {
            if (status != null) {
                txnManager.rollback(status);
            }
            msg = ex.getMessage();
            issuccess = false;
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            if (status != null) {
                txnManager.rollback(status);
            }
            msg = "" + ex.getMessage();
            if (ex.getMessage() == null) {
                msg = ex.getCause().getMessage();
            }
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
                jobj.put("paymentid", paymentid);
                jobj.put("repeatedid", repeatedid);
                jobj.put("intervalUnit", intervalUnit);
                jobj.put("intervalType", intervalType);
                jobj.put("noOfInvPost", noOfInvPost);
                jobj.put("noOfInvRemainPost", noOfInvRemainPost);
                jobj.put("sdate", sdate);
                jobj.put("nextdate", nextdate);
                jobj.put("expdate", expdate);
                jobj.put("data", jArr);
                jobj.put("isAccountingExe", accexception);
                jobj.put("billno", billno.lastIndexOf(",") >= 0 ? bno.deleteCharAt(bno.lastIndexOf(",")) : "");
                jobj.put("amount", amountpayment);
                jobj.put("address", accountaddress);
                jobj.put("accountName", accountName);
                jobj.put("billingEmail", vendorEmailId);
                hashMap.put("jobj", jobj);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return hashMap;
    }

    /**
     * Description : Below Method is used to Update Payment
     * @param <commonPaymentMap> used to get common Payment params
     * @return :Receipt
     */
    public Payment updatePayment(Map<String, Object> commonPaymentMap) throws ServiceException, JSONException {

        String companyid = "", memo = "", paidTo = "", payee = "", customfield = "";
        String paymentid = "";
        Payment editPaymentObject = null;
        KwlReturnObject result = null;

        if (commonPaymentMap.containsKey("companyid") && commonPaymentMap.get("companyid") != null) {
            companyid = (String) commonPaymentMap.get("companyid");
        }
        if (commonPaymentMap.containsKey("billid") && commonPaymentMap.get("billid") != null) {
            paymentid = (String) commonPaymentMap.get("billid");
        }
        if (commonPaymentMap.containsKey("memo") && commonPaymentMap.get("memo") != null) {
            memo = (String) commonPaymentMap.get("memo");
        }
        if (commonPaymentMap.containsKey("paidTo") && commonPaymentMap.get("paidTo") != null) {
            paidTo = (String) commonPaymentMap.get("paidTo");
        }
        if (commonPaymentMap.containsKey("payee") && commonPaymentMap.get("payee") != null) {
            payee = (String) commonPaymentMap.get("payee");
        }
        if (commonPaymentMap.containsKey("customfield") && commonPaymentMap.get("customfield") != null) {
            customfield = (String) commonPaymentMap.get("customfield");
        }

        /* Creat Receipt Object */
        if (!StringUtil.isNullOrEmpty(paymentid)) {
            KwlReturnObject paymentidObj = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentid);
            editPaymentObject = (Payment) paymentidObj.getEntityList().get(0);
        }

        if (editPaymentObject != null) {
            editPaymentObject.setMemo(memo);
            editPaymentObject.setPayee(payee);
            MasterItem masterItem = null;
            if (!StringUtil.isNullOrEmpty(paidTo)) {
                result = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), paidTo);
                masterItem = (MasterItem) result.getEntityList().get(0);
                if (masterItem != null) {
                    editPaymentObject.setPaidTo(masterItem);
                }
            }

            JournalEntry journalEntry = editPaymentObject.getJournalEntry();

            if (!StringUtil.isNullOrEmpty(customfield)) {
                JSONArray jcustomarray = new JSONArray(customfield);
                HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                customrequestParams.put("customarray", jcustomarray);
                customrequestParams.put("modulename", Constants.Acc_JE_modulename);
                customrequestParams.put("moduleprimarykey", Constants.Acc_JEid);
                customrequestParams.put("modulerecid", journalEntry.getID());
                customrequestParams.put("moduleid", Constants.Acc_Make_Payment_ModuleId);
                customrequestParams.put("companyid", companyid);
                customrequestParams.put("customdataclasspath", Constants.Acc_BillInv_custom_data_classpath);
                KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                    KwlReturnObject receiptAccJECustomData = accountingHandlerDAOobj.getObject(AccJECustomData.class.getName(), journalEntry.getID());
                    AccJECustomData accJECustomData = (AccJECustomData) receiptAccJECustomData.getEntityList().get(0);
                    journalEntry.setAccBillInvCustomData(accJECustomData);
                }
            }
        }
        return editPaymentObject;
    }

    /**
     * Description : Below Method is used to update Payment Advance Details
     *
     * @param <jSONArrayAdvance> used to get Receipt Advance Details
     * @param <editPaymentObject> used to update editPaymentObject
     * @param <commonPaymentMap> used to get common receipt params
     * @return :void
     */
    public void updatePaymentAdvanceDetails(JSONArray jSONArrayAdvance, Payment editPaymentObject, Map<String, Object> commonPaymentMap) throws JSONException, ServiceException {

        JSONObject advancejobj = null;
        String companyid = "";
        if (commonPaymentMap.containsKey("companyid")) {
            companyid = (String) commonPaymentMap.get("companyid");
        }
        for (int i = 0; i < jSONArrayAdvance.length(); i++) {
            advancejobj = jSONArrayAdvance.getJSONObject(i);
            AdvanceDetail row = null;
            if (advancejobj.has("rowdetailid")) {
                KwlReturnObject paymentAdvanceDetail = accountingHandlerDAOobj.getObject(AdvanceDetail.class.getName(), advancejobj.getString("rowdetailid"));
                row = (AdvanceDetail) paymentAdvanceDetail.getEntityList().get(0);
            }

            if (row != null) {

                if (!StringUtil.isNullOrEmpty(advancejobj.optString("description"))) {
                    try {
                        row.setDescription(StringUtil.DecodeText(advancejobj.optString("description")));
                    } catch (Exception ex) {
                        row.setDescription(advancejobj.optString("description"));
                    }
                }
                HashMap<String, JSONArray> jcustomarrayMap = new HashMap();

                if (!StringUtil.isNullOrEmpty(advancejobj.optString("customfield", ""))) {
                    JSONArray jcustomarray = new JSONArray(advancejobj.optString("customfield", "[]"));
                    jcustomarrayMap.put(row.getTotalJED().getID(), jcustomarray);
                }
                editPaymentObject.setJcustomarrayMap(jcustomarrayMap);
                HashMap<String, JSONArray> jcustomarrayMap1 = editPaymentObject.getJcustomarrayMap();
                JSONArray jcustomarray = jcustomarrayMap1.get(row.getTotalJED().getID());
                HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                customrequestParams.put("customarray", jcustomarray);
                customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
                customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);// Constants.Acc_JEDetail_recdetailId
                customrequestParams.put("modulerecid", row.getTotalJED().getID());
                customrequestParams.put("recdetailId", row.getId());
                customrequestParams.put("moduleid", Constants.Acc_Make_Payment_ModuleId);
                customrequestParams.put("companyid", companyid);
                customrequestParams.put("customdataclasspath", Constants.Acc_BillInvDetail_custom_data_classpath);
                KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                    KwlReturnObject receiptAccJEDCustomData = accountingHandlerDAOobj.getObject(AccJEDetailCustomData.class.getName(), row.getTotalJED().getID());
                    AccJEDetailCustomData accJEDetailCustomData = (AccJEDetailCustomData) receiptAccJEDCustomData.getEntityList().get(0);
                    KwlReturnObject receiptJED = accountingHandlerDAOobj.getObject(JournalEntryDetail.class.getName(), row.getTotalJED().getID());
                    JournalEntryDetail journalEntryDetail = (JournalEntryDetail) receiptJED.getEntityList().get(0);
                    journalEntryDetail.setAccJEDetailCustomData(accJEDetailCustomData);
                }
            }
        }

    }

    /**
     * Description : Below Method is used to update Payment Invoice Details
     *
     * @param <jSONArrayAdvance> used to get Receipt Invoice Details
     * @param <editPaymentObject> used to update receipt
     * @param <commonPaymentMap> used to get common receipt params
     * @return :void
     */
    public void updateInvoiceDetails(JSONArray jSONArrayAgainstInvoice, Payment editPaymentObject, Map<String, Object> commonPaymentMap) throws JSONException, ServiceException {
        JSONObject againstInvoicejobj = null;
        String companyid = "";
        if (commonPaymentMap.containsKey("companyid")) {
            companyid = (String) commonPaymentMap.get("companyid");
        }

        for (int i = 0; i < jSONArrayAgainstInvoice.length(); i++) {
            againstInvoicejobj = jSONArrayAgainstInvoice.getJSONObject(i);
            PaymentDetail row = null;
            if (againstInvoicejobj.has("rowdetailid")) {
                KwlReturnObject paymentAdvanceDetail = accountingHandlerDAOobj.getObject(PaymentDetail.class.getName(), againstInvoicejobj.getString("rowdetailid"));
                row = (PaymentDetail) paymentAdvanceDetail.getEntityList().get(0);
            }
            if (row != null) {
                try {
                    row.setDescription(StringUtil.DecodeText(againstInvoicejobj.optString("description","")));
                } catch (Exception ex) {
                    row.setDescription(againstInvoicejobj.optString("description",""));
                }
                HashMap<String, JSONArray> jcustomarrayMap = new HashMap();

                if (!StringUtil.isNullOrEmpty(againstInvoicejobj.optString("customfield", ""))) {
                    JSONArray jcustomarray = new JSONArray(againstInvoicejobj.optString("customfield", "[]"));
                    if (row.getTotalJED() != null) {
                        jcustomarrayMap.put(row.getTotalJED().getID(), jcustomarray);
                    }
                }
                if (row.getTotalJED() != null) {
                    editPaymentObject.setJcustomarrayMap(jcustomarrayMap);
                    HashMap<String, JSONArray> jcustomarrayMap1 = editPaymentObject.getJcustomarrayMap();
                    JSONArray jcustomarray = jcustomarrayMap1.get(row.getTotalJED().getID());
                    HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                    customrequestParams.put("customarray", jcustomarray);
                    customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
                    customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);// Constants.Acc_JEDetail_recdetailId
                    customrequestParams.put("modulerecid", row.getTotalJED().getID());
                    customrequestParams.put("recdetailId", row.getID());
                    customrequestParams.put("moduleid", Constants.Acc_Make_Payment_ModuleId);
                    customrequestParams.put("companyid", companyid);
                    customrequestParams.put("customdataclasspath", Constants.Acc_BillInvDetail_custom_data_classpath);
                    KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                    if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                        KwlReturnObject receiptAccJEDCustomData = accountingHandlerDAOobj.getObject(AccJEDetailCustomData.class.getName(), row.getTotalJED().getID());
                        AccJEDetailCustomData accJEDetailCustomData = (AccJEDetailCustomData) receiptAccJEDCustomData.getEntityList().get(0);
                        KwlReturnObject receiptJED = accountingHandlerDAOobj.getObject(JournalEntryDetail.class.getName(), row.getTotalJED().getID());
                        JournalEntryDetail journalEntryDetail = (JournalEntryDetail) receiptJED.getEntityList().get(0);
                        journalEntryDetail.setAccJEDetailCustomData(accJEDetailCustomData);
                    }
                }
            }
        }

    }

    /**
     * Description : Below Method is used to update Credit Note Details
     *
     * @param <jSONArrayAdvance> used to get Receipt Advance Details
     * @param <editPaymentObject> used to update receipt
     * @param <commonPaymentMap> used to get common receipt params
     * @return :void
     */
    public void updateCreditNoteDetails(JSONArray jSONArrayCNDN, Payment editPaymentObject, Map<String, Object> commonPaymentMap) throws JSONException, ServiceException {
        JSONObject againstDebitNotejobj = null;
        String companyid = "";
        if (commonPaymentMap.containsKey("companyid")) {
            companyid = (String) commonPaymentMap.get("companyid");
        }

        for (int i = 0; i < jSONArrayCNDN.length(); i++) {
            againstDebitNotejobj = jSONArrayCNDN.getJSONObject(i);
            CreditNotePaymentDetails row = null;
            if (againstDebitNotejobj.has("rowdetailid")) {

                KwlReturnObject cnPaymentDetail = accountingHandlerDAOobj.getObject(CreditNotePaymentDetails.class.getName(), againstDebitNotejobj.getString("rowdetailid"));
                row = (CreditNotePaymentDetails) cnPaymentDetail.getEntityList().get(0);
            }

            if (row != null) {

                if (!StringUtil.isNullOrEmpty(againstDebitNotejobj.optString("description"))) {
                    try {
                        row.setDescription(StringUtil.DecodeText(againstDebitNotejobj.optString("description")));
                    } catch (Exception ex) {
                        row.setDescription(againstDebitNotejobj.optString("description"));
                    }
                }
                HashMap<String, JSONArray> jcustomarrayMap = new HashMap();

                if (!StringUtil.isNullOrEmpty(againstDebitNotejobj.optString("customfield", ""))) {
                    JSONArray jcustomarray = new JSONArray(againstDebitNotejobj.optString("customfield", "[]"));
                    jcustomarrayMap.put(row.getTotalJED().getID(), jcustomarray);
                }
                editPaymentObject.setJcustomarrayMap(jcustomarrayMap);
                HashMap<String, JSONArray> jcustomarrayMap1 = editPaymentObject.getJcustomarrayMap();
                JSONArray jcustomarray = jcustomarrayMap1.get(row.getTotalJED().getID());
                HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                customrequestParams.put("customarray", jcustomarray);
                customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
                customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);// Constants.Acc_JEDetail_recdetailId
                customrequestParams.put("modulerecid", row.getTotalJED().getID());
                customrequestParams.put("recdetailId", row.getID());
                customrequestParams.put("moduleid", Constants.Acc_Make_Payment_ModuleId);
                customrequestParams.put("companyid", companyid);
                customrequestParams.put("customdataclasspath", Constants.Acc_BillInvDetail_custom_data_classpath);
                KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                    KwlReturnObject receiptAccJEDCustomData = accountingHandlerDAOobj.getObject(AccJEDetailCustomData.class.getName(), row.getTotalJED().getID());
                    AccJEDetailCustomData accJEDetailCustomData = (AccJEDetailCustomData) receiptAccJEDCustomData.getEntityList().get(0);
                    KwlReturnObject receiptJED = accountingHandlerDAOobj.getObject(JournalEntryDetail.class.getName(), row.getTotalJED().getID());
                    JournalEntryDetail journalEntryDetail = (JournalEntryDetail) receiptJED.getEntityList().get(0);
                    journalEntryDetail.setAccJEDetailCustomData(accJEDetailCustomData);
                }
            }
        }
    }

    /**
     * Description : Below Method is used to update GL Details
     *
     * @param <jSONArrayAdvance> used to get GL Details
     * @param <editPaymentObject> used to update receipt
     * @param <commonPaymentMap> used to get common receipt params
     * @return :void
     */
    public void updateGLDetails(JSONArray jSONArrayGL, Payment editPaymentObject, Map<String, Object> commonPaymentMap) throws JSONException, ServiceException {
        JSONObject againstGLjobj = null;
        String companyid = "";
        if (commonPaymentMap.containsKey("companyid")) {
            companyid = (String) commonPaymentMap.get("companyid");
        }
        for (int i = 0; i < jSONArrayGL.length(); i++) {
            againstGLjobj = jSONArrayGL.getJSONObject(i);
            PaymentDetailOtherwise row = null;
            if (againstGLjobj.has("rowdetailid")) {

                KwlReturnObject paymentGLDetail = accountingHandlerDAOobj.getObject(PaymentDetailOtherwise.class.getName(), againstGLjobj.getString("rowdetailid"));
                row = (PaymentDetailOtherwise) paymentGLDetail.getEntityList().get(0);
            }

            if (row != null) {

                if (!StringUtil.isNullOrEmpty(againstGLjobj.optString("description"))) {
                    try {
                        row.setDescription(StringUtil.DecodeText(againstGLjobj.optString("description")));
                    } catch (Exception ex) {
                        row.setDescription(againstGLjobj.optString("description"));
                    }
                }
                HashMap<String, JSONArray> jcustomarrayMap = new HashMap();

                if (!StringUtil.isNullOrEmpty(againstGLjobj.optString("customfield", ""))) {
                    JSONArray jcustomarray = new JSONArray(againstGLjobj.optString("customfield", "[]"));
                    jcustomarrayMap.put(row.getTotalJED().getID(), jcustomarray);
                }
                editPaymentObject.setJcustomarrayMap(jcustomarrayMap);
                HashMap<String, JSONArray> jcustomarrayMap1 = editPaymentObject.getJcustomarrayMap();
                JSONArray jcustomarray = jcustomarrayMap1.get(row.getTotalJED().getID());
                HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                customrequestParams.put("customarray", jcustomarray);
                customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
                customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);// Constants.Acc_JEDetail_recdetailId
                customrequestParams.put("modulerecid", row.getTotalJED().getID());
                customrequestParams.put("recdetailId", row.getID());
                customrequestParams.put("moduleid", Constants.Acc_Make_Payment_ModuleId);
                customrequestParams.put("companyid", companyid);
                customrequestParams.put("customdataclasspath", Constants.Acc_BillInvDetail_custom_data_classpath);
                KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                    KwlReturnObject receiptAccJECustomData = accountingHandlerDAOobj.getObject(AccJEDetailCustomData.class.getName(), row.getTotalJED().getID());
                    AccJEDetailCustomData accJEDetailCustomData = (AccJEDetailCustomData) receiptAccJECustomData.getEntityList().get(0);
                    KwlReturnObject paymentJED = accountingHandlerDAOobj.getObject(JournalEntryDetail.class.getName(), row.getTotalJED().getID());
                    JournalEntryDetail journalEntryDetail = (JournalEntryDetail) paymentJED.getEntityList().get(0);
                    journalEntryDetail.setAccJEDetailCustomData(accJEDetailCustomData);

                }
            }
        }

    }
    
    //If Exception occured or payment completed  then delete entry from temporary table
    public void deleteTemporaryInvoicesEntries(JSONArray jSONArrayAgainstInvoice,String companyid) {
        try {
            for (int i = 0; i < jSONArrayAgainstInvoice.length(); i++) {
                JSONObject invoiceJobj = jSONArrayAgainstInvoice.getJSONObject(i);
                String invoiceId = invoiceJobj.getString("documentid");
                accPaymentDAOobj.deleteUsedInvoiceOrCheque(invoiceId, companyid);
            }
        } catch (Exception ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
        public void setValuesForAuditTrialMessage(Payment oldgrd,Map<String,Object> oldgreceipt, Map<String, Object>newAuditKey) throws SessionExpiredException {
        try {
            if (oldgrd != null) {
                //Receipt Number Change
                oldgreceipt.put(Constants.PaymentNumber, oldgrd.getPaymentNumber());
                newAuditKey.put(Constants.PaymentNumber, "Payment Number");
                //Received From Change
                oldgreceipt.put(Constants.PaidTo, oldgrd.getPaidTo() != null? oldgrd.getPaidTo().getValue():"");
                newAuditKey.put(Constants.PaidTo, "Paid To");
                //Creation Date
//                oldgreceipt.put(Constants.CreationDate, oldgrd.isIsOpeningBalencePayment() ? oldgrd.getCreationDate() : oldgrd.getJournalEntry().getEntryDate());
                oldgreceipt.put(Constants.CreationDate, oldgrd.isIsOpeningBalencePayment() ? oldgrd.getCreationDate() : oldgrd.getCreationDate());
                newAuditKey.put(Constants.CreationDate, "Creation Date");
                //Memo
                oldgreceipt.put(Constants.Memo, oldgrd.getMemo());
                newAuditKey.put(Constants.Memo, "Memo");
                if (oldgrd.getPayDetail() != null && oldgrd.getPayDetail() != null) {
                    int oldPaymentMethodType = oldgrd.getPayDetail().getPaymentMethod().getDetailType();
                    String oldPaymentMethodTypeName = oldgrd.getPayDetail().getPaymentMethod().getMethodName();
                    //PaymentMethodType
                    oldgreceipt.put(Constants.PaymentMethodType, oldPaymentMethodTypeName);
                    newAuditKey.put(Constants.PaymentMethodType, "Payment Method Type");
                    if (oldPaymentMethodType == PaymentMethod.TYPE_BANK) {
                        //Cheque
                        Cheque oldCheck = oldgrd.getPayDetail().getCheque();
                        oldgreceipt.put(Constants.Cheque, oldCheck);
                        newAuditKey.put(Constants.Cheque, "Cheque");
                        //Check Number
                        oldgreceipt.put(Constants.ChequeNumber, oldCheck.getChequeNo());
                        newAuditKey.put(Constants.ChequeNumber, "Cheque Number");
                        //Bank Name
                        oldgreceipt.put(Constants.BankName, oldCheck.getBankName());
                        newAuditKey.put(Constants.BankName, "Bank Name");
                        //Check Date
                        oldgreceipt.put(Constants.CheckDate, oldCheck.getDueDate());
                        newAuditKey.put(Constants.CheckDate, "Check Date");
                    } else if (oldPaymentMethodType == PaymentMethod.TYPE_CARD) {
                        // Card
                        oldgreceipt.put(Constants.Card, oldgrd.getPayDetail().getCard());
                        newAuditKey.put(Constants.Card, "Card");
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public ModelAndView importOpeningBalancePayments(HttpServletRequest request, HttpServletResponse response) throws ServiceException {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            String doAction = request.getParameter("do");
            System.out.println("A(( " + doAction + " start : " + new Date());

            JSONObject datajobj = new JSONObject();

            if (doAction.compareToIgnoreCase("getMapCSV") == 0) {
                datajobj = importHandler.getMappingCSVHeader(request);
                JSONArray jSONArray = datajobj.getJSONArray("Header");
                validateHeaders(jSONArray);

                jobj = importOeningTransactionsRecords(request, datajobj);
//                msg = "All records are imported successfully.";
                issuccess = true;
            }
        } catch (Exception ex) {
            issuccess = false;
            msg = "" + ex.getMessage();

            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException e) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, e.getMessage(), e);
            }

            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return new ModelAndView("jsonView_ex", "model", jobj.toString());
    }

    public void validateHeaders(JSONArray validateJArray) throws AccountingException, ServiceException {
        try {

            List<String> list = new ArrayList<String>();
            list.add("Transaction Number");
            list.add("Transaction Date");
            list.add("Amount");
//            list.add("Due Date");
            list.add("Vendor Code");
//            list.add("Exchange Rate");
            list.add("Currency");



            List<String> fileHeaderList = new ArrayList<String>();

            for (int i = 0; i < validateJArray.length(); i++) {
                String header = validateJArray.getJSONObject(i).getString("header").trim();
                fileHeaderList.add(header);
            }

            // iterating for manadatory columns

            for (String manadatoryField : list) {
                if (!fileHeaderList.contains(manadatoryField)) {
                    throw new AccountingException(manadatoryField + " column is not availabe in file");
                }
            }

        } catch (JSONException ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
    }
   
    /*
     * Method to save Opening Balance Payments For customer.
     */
    public ModelAndView saveOpeningBalancePayment(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONObject jobjDetails = new JSONObject();
        JSONArray jArr = new JSONArray();
        boolean issuccess = false;
        String msg = "";
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("BR_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = null;
        boolean isAccountingExe = false;
        boolean isEdit = false;
        String paymentNumber = null;
        String companyid = "";
        String chequeNumber="";
        boolean  isWarn = request.getParameter("isWarn")!=null?Boolean.parseBoolean(request.getParameter("isWarn")):false;
        try {
            paymentNumber = request.getParameter("number");
            String paymentId = request.getParameter("transactionId");
            companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject cncount = null;
            Payment payment=null;
            if (StringUtil.isNullOrEmpty(paymentId)) {
                /*
                 * Checks duplicate number while creating new record
                 */
                cncount = accVendorPaymentobj.getPaymentFromNo(paymentNumber, companyid);
                if (cncount.getRecordTotalCount() > 0) {
                    isAccountingExe = true;
                    throw new AccountingException(messageSource.getMessage("acc.payment.paymentno", null, RequestContextUtils.getLocale(request)) + paymentNumber + messageSource.getMessage("acc.field.alreadyexists.", null, RequestContextUtils.getLocale(request)));
                }
                /*
                 * code for checking wheather entered number can be generated by
                 * sequence format or not
                 */
                List resultList = accCompanyPreferencesObj.checksEntryNumberForSequenceNumber(Constants.Acc_Make_Payment_ModuleId, paymentNumber, companyid);
                if (!resultList.isEmpty()) {
                    boolean isvalidEntryNumber = (Boolean) resultList.get(0);
                    String formatName = (String) resultList.get(1);
                    if (!isvalidEntryNumber) {
                        isAccountingExe = true;
                        throw new AccountingException(messageSource.getMessage("acc.common.enterdocumentnumber", null, RequestContextUtils.getLocale(request)) + " <b>" + paymentNumber + "</b> " + messageSource.getMessage("acc.common.belongsto", null, RequestContextUtils.getLocale(request)) + " <b>" + formatName + "</b>. " + messageSource.getMessage("acc.common.pleaseentersomeothernumber", null, RequestContextUtils.getLocale(request)));
                    }
                }
            }else{
                KwlReturnObject result1 = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentId);
                payment = (Payment) result1.getEntityList().get(0);
                isEdit = true;
            }
            synchronized (this) {
                /*
                 * Checks duplicate number for simultaneous transactions
                 */
                status = txnManager.getTransaction(def);
                KwlReturnObject resultInv = accCommonTablesDAO.getTransactionInTemp(paymentNumber, companyid, Constants.Acc_Make_Payment_ModuleId);//Get entry from temporary table
                if (resultInv.getRecordTotalCount() > 0) {
                    isAccountingExe = true;
                    throw new AccountingException(messageSource.getMessage("acc.PO.selectedPamentNo", null, RequestContextUtils.getLocale(request)) + paymentNumber + messageSource.getMessage("acc.field.alreadyinprocess.", null, RequestContextUtils.getLocale(request)));
                } else {
                    accCommonTablesDAO.insertTransactionInTemp(paymentNumber, companyid, Constants.Acc_Make_Payment_ModuleId);//Insert entry in temporary table
                }


                /*
                 * Check for invalid cheque number
                 */

                KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
                CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);

                if (preferences.getChequeNoDuplicate() != Constants.ChequeNoIgnore) {// Ignore case 
                    checkForInvalidChequeNumber(request, payment);
                }
                if (!StringUtil.isNullOrEmpty(request.getParameter("paydetail"))) {
                    JSONObject obj = new JSONObject(request.getParameter("paydetail"));
                    chequeNumber = obj.optString("chequenumber");
                    String methodid = request.getParameter("paymentMethodID");
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), methodid);
                    PaymentMethod payMethod = (PaymentMethod) result1.getEntityList().get(0);
                    String bankId = payMethod.getAccount().getID();

                    KwlReturnObject resultInv1 = accPaymentDAOobj.getSearchChequeNoTemp(chequeNumber, companyid, Constants.Cheque_ModuleId, bankId);
                    if (resultInv1.getRecordTotalCount() > 0 && !isEdit) {
                        throw new AccountingException("Cheque Number : <b>" + chequeNumber + "</b> is already exist, Please enter different one");
                    } else {
                        accPaymentDAOobj.insertInvoiceOrCheque(chequeNumber, companyid, Constants.Cheque_ModuleId, bankId);
                    }
                }
                txnManager.commit(status);
            }
            status = txnManager.getTransaction(def);
            List li = saveOpeningBalancePayment(request);
            boolean isEditInv = false;
            String succMsg = messageSource.getMessage("acc.field.saved", null, RequestContextUtils.getLocale(request));
            if (!li.isEmpty()) {
                paymentNumber = li.get(0).toString();
                isEditInv = (Boolean) li.get(1);
            }
            if (isEditInv) {
                succMsg = messageSource.getMessage("acc.field.updated", null, RequestContextUtils.getLocale(request));
            }
            issuccess = true;
            msg = messageSource.getMessage("acc.receipt.2", null, RequestContextUtils.getLocale(request)) + " " + paymentNumber + " " + messageSource.getMessage("acc.field.hasbeen", null, RequestContextUtils.getLocale(request)) + " " + succMsg + " " + messageSource.getMessage("acc.field.successfully", null, RequestContextUtils.getLocale(request));
            accCommonTablesDAO.deleteTransactionInTemp(paymentNumber, companyid, Constants.Acc_Make_Payment_ModuleId);//Delete entry in temporary table
            accPaymentDAOobj.deleteUsedInvoiceOrCheque(chequeNumber, companyid);
            txnManager.commit(status);

        } catch (SessionExpiredException ex) {
            if (status != null) {
                txnManager.rollback(status);
            }
            try {
                accCommonTablesDAO.deleteTransactionInTemp(paymentNumber, companyid, Constants.Acc_Make_Payment_ModuleId);//Delete entry in temporary table
                 accPaymentDAOobj.deleteUsedInvoiceOrCheque(chequeNumber, companyid);
            } catch (ServiceException ex1) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex1);
            }
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            msg = ex.getMessage();
        } catch (ServiceException ex) {
            if (status != null) {
                txnManager.rollback(status);
            }
            try {
                accCommonTablesDAO.deleteTransactionInTemp(paymentNumber, companyid, Constants.Acc_Make_Payment_ModuleId);//Delete entry in temporary table
                 accPaymentDAOobj.deleteUsedInvoiceOrCheque(chequeNumber, companyid);
            } catch (ServiceException ex1) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex1);
            }
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            msg = ex.getMessage();
        } catch (Exception ex) {
            if (status != null) {
                txnManager.rollback(status);
            }
            try {
                accCommonTablesDAO.deleteTransactionInTemp(paymentNumber, companyid, Constants.Acc_Make_Payment_ModuleId);//Delete entry in temporary table
                 accPaymentDAOobj.deleteUsedInvoiceOrCheque(chequeNumber, companyid);
            } catch (ServiceException ex1) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex1);
            }
            msg = "" + ex.getMessage();
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
                jobj.put("data", jArr);
                jobj.put("isWarn", isWarn);
                jobj.put("accException", isAccountingExe);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public List saveOpeningBalancePayment(HttpServletRequest request) throws SessionExpiredException, AccountingException, ServiceException, UnsupportedEncodingException {
        List returnList = new ArrayList();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            DateFormat df = authHandler.getDateOnlyFormat(request);
            KwlReturnObject result;
            boolean isEditInvoice = false;
            String auditMsg = "", auditID = "", memo = "";
            auditMsg = "added";
            auditID = AuditAction.OPENING_BALANCE_CREATED;
            // Fetching request parameters

            String paymentNumber = request.getParameter("number");
            String transactionDateStr = request.getParameter("billdate");
            String chequeDateStr = request.getParameter("chequeDate");
            String currencyid = (request.getParameter("currencyid") == null ? sessionHandlerImpl.getCurrencyID(request) : request.getParameter("currencyid"));
            String transactionAmountStr = request.getParameter("transactionAmount");
            String paymentId = request.getParameter("transactionId");
            String chequeNumber = request.getParameter("chequenumber");
            String drawnOn = request.getParameter("drawnon");
            String vendorId = request.getParameter("accountId");
            double externalCurrencyRate = StringUtil.getDouble(request.getParameter("externalcurrencyrate"));
            boolean conversionRateFromCurrencyToBase = true;
            if (request.getParameter("CurrencyToBaseExchangeRate") != null) {
                conversionRateFromCurrencyToBase = Boolean.parseBoolean(request.getParameter("CurrencyToBaseExchangeRate"));
            }

            double exchangeRateForOpeningTransaction = 1;
            if (!StringUtil.isNullOrEmpty(request.getParameter("exchangeRateForOpeningTransaction"))) {
                exchangeRateForOpeningTransaction = Double.parseDouble(request.getParameter("exchangeRateForOpeningTransaction"));
            }

            String accountId = "";

            if (!StringUtil.isNullOrEmpty(vendorId)) {
                KwlReturnObject venresult = accountingHandlerDAOobj.getObject(Vendor.class.getName(), vendorId);
                Vendor vendor = (Vendor) venresult.getEntityList().get(0);
                accountId = vendor.getAccount().getID();
            }

            Date transactionDate = df.parse(df.format(new Date()));
            Date chequeDate = df.parse(df.format(new Date()));

            if (!StringUtil.isNullOrEmpty(transactionDateStr)) {
                transactionDate = df.parse(transactionDateStr);
            }

            if (!StringUtil.isNullOrEmpty(chequeDateStr)) {
                chequeDate = df.parse(chequeDateStr);
            }

            double transactionAmount = 0d;
            if (!StringUtil.isNullOrEmpty(transactionAmountStr)) {
                transactionAmount = Double.parseDouble(transactionAmountStr);
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("memo"))) {
                memo = request.getParameter("memo").toString();
            }

            HashMap paymenthm = new HashMap();

            /*
             * as user can not chnaged entered number in edit so we have not
             * cheked duplicate entry in edit. if this logic change we need to
             * change here as well
             */
            if (StringUtil.isNullOrEmpty(paymentId)) {
//                result = accVendorPaymentobj.getPaymentFromNo(paymentNumber, companyid);
//                int count = result.getRecordTotalCount();
//                if (count > 0) {
//                    throw new AccountingException("Payment number '" + paymentNumber + "' already exists.");
//                }
                paymenthm.put("entrynumber", paymentNumber);
                paymenthm.put("autogenerated", false);

                /*
                 * code for checking wheather entered number can be generated by
                 * sequence format or not
                 */

            }
            Payment editPaymentObject = null;
            if (!StringUtil.isNullOrEmpty(paymentId)) {// for edit case
                KwlReturnObject receiptObj = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentId);
                editPaymentObject = (Payment) receiptObj.getEntityList().get(0);

            }

            if (!StringUtil.isNullOrEmpty(paymentId)) {
                isEditInvoice = true;
                auditMsg = "updated";
                auditID = AuditAction.OPENING_BALANCE_UPDATED;
                boolean isPaymentUsedInOtherTransactions = isPaymentUsedInOtherTransactions(paymentId, companyid);

                if (isPaymentUsedInOtherTransactions) {
                    throw new AccountingException(messageSource.getMessage("acc.nee.73", null, RequestContextUtils.getLocale(request)));
                }

                paymenthm.put("paymentid", paymentId);
            }

            paymenthm.put("depositamount", transactionAmount);//
            paymenthm.put("currencyid", currencyid);//
            paymenthm.put("externalCurrencyRate", externalCurrencyRate);//
            paymenthm.put("memo", memo);//
            paymenthm.put("companyid", companyid);//
            paymenthm.put("chequeNumber", chequeNumber);
            paymenthm.put("drawnOn", drawnOn);
            paymenthm.put("creationDate", transactionDate);
            paymenthm.put("chequeDate", chequeDate);
            paymenthm.put("vendorId", vendorId);
            paymenthm.put("accountId", accountId);
            paymenthm.put("isOpeningBalencePayment", true);
            paymenthm.put("normalPayment", false);
            paymenthm.put("openingBalanceAmountDue", transactionAmount);
            // Store Payment amount in base currency
            if (conversionRateFromCurrencyToBase) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                paymenthm.put(Constants.originalOpeningBalanceBaseAmount, authHandler.round(transactionAmount * exchangeRateForOpeningTransaction, companyid));
                paymenthm.put(Constants.openingBalanceBaseAmountDue, authHandler.round(transactionAmount * exchangeRateForOpeningTransaction, companyid));
            } else {
                paymenthm.put(Constants.originalOpeningBalanceBaseAmount, authHandler.round(transactionAmount / exchangeRateForOpeningTransaction, companyid));
                paymenthm.put(Constants.openingBalanceBaseAmountDue, authHandler.round(transactionAmount / exchangeRateForOpeningTransaction, companyid));
            }
            paymenthm.put("isadvancepayment", true);
//            paymenthm.put("contraentry", false);
            paymenthm.put("exchangeRateForOpeningTransaction", exchangeRateForOpeningTransaction);
            paymenthm.put("conversionRateFromCurrencyToBase", conversionRateFromCurrencyToBase);

            String createdby = sessionHandlerImpl.getUserid(request);
            String modifiedby = sessionHandlerImpl.getUserid(request);
            long createdon = System.currentTimeMillis();
            long updatedon = System.currentTimeMillis();

            paymenthm.put("createdby", createdby);
            paymenthm.put("modifiedby", modifiedby);
            paymenthm.put("createdon", createdon);
            paymenthm.put("updatedon", updatedon);
            
            String oldChequeNo = "";
            if (!StringUtil.isNullOrEmpty(paymentId)) {// for edit case
                KwlReturnObject receiptObj = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentId);
                Payment payment = (Payment) receiptObj.getEntityList().get(0);
                
                if (payment.getPayDetail() != null) {
                    if (payment.getPayDetail().getCheque() != null) {
                        oldChequeNo = payment.getPayDetail().getCheque().getChequeNo();
                    }
                }
            }

            boolean bankReconsilationEntry = false;
            String payDetailID = null;
            Map<String, Object> bankReconsilationMap = new HashMap<String, Object>();

            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
            
            KwlReturnObject extcapresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extcapresult.getEntityList().get(0);

            result = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), request.getParameter("paymentMethodID"));
            PaymentMethod payMethod = (PaymentMethod) result.getEntityList().get(0);
            Account depositTo = payMethod.getAccount();
            HashMap pdetailhm = new HashMap();
            pdetailhm.put("paymethodid", payMethod.getID());
            pdetailhm.put("companyid", companyid);
            JSONObject obj = null  ;
            if(!StringUtil.isNullOrEmpty(request.getParameter("paydetail"))){
                obj = new JSONObject(request.getParameter("paydetail"));
            }
            
            Date startDate = preferences.getFinancialYearFrom();
            Calendar startCal = Calendar.getInstance();
            startCal.setTime(startDate);
            startCal.add(Calendar.YEAR, 1);
            startCal.add(Calendar.DAY_OF_YEAR, -1);
            Date endDate = startCal.getTime();

            if (payMethod.getDetailType() != PaymentMethod.TYPE_CASH) {
                if (payMethod.getDetailType() == PaymentMethod.TYPE_BANK) {
                    bankReconsilationEntry = obj.getString("paymentstatus") != null ? obj.getString("paymentstatus").equals("Cleared") : false;

                    HashMap chequehm = new HashMap();
                    BigInteger nextSeqNumber = new BigInteger("0");
                    boolean checkForNextSequenceNumberAlso = true;
                    boolean isChequeNumberInString = false;
                    if (extraCompanyPreferences != null && extraCompanyPreferences.isShowAutoGeneratedChequeNumber()) {
                        try {// USER can enter String values also in such case exception will come

                            nextSeqNumber = new BigInteger(obj.getString("chequenumber"));
                            // cheque whether Cheque Number exist or not if already exist then don't let it save
                        } catch (Exception ex) {
                            checkForNextSequenceNumberAlso = false;
                            isChequeNumberInString = true;
                        }
                    } else {
                        checkForNextSequenceNumberAlso = false;
                    }

                    boolean isChequeNumberAvailable = false;

                    boolean isEditCaseButChqNoChanged = false;
                    if (!StringUtil.isNullOrEmpty(obj.optString("chequenumber")) && extraCompanyPreferences != null && extraCompanyPreferences.isShowAutoGeneratedChequeNumber()) {
                        try {// OLD CHQ NO. can be String value also in such case exception will come

                            HashMap chequeNohm = new HashMap();
                            chequeNohm.put("companyId", companyid);
                            chequeNohm.put("sequenceNumber", nextSeqNumber);
                            chequeNohm.put("checkForNextSequenceNumberAlso", checkForNextSequenceNumberAlso);
                            chequeNohm.put("nextChequeNumber", obj.optString("chequenumber"));
                            chequeNohm.put("bankAccountId", payMethod.getAccount().getID());
                            isChequeNumberAvailable = paymentService.isChequeNumberAvailable(chequeNohm);

                            BigInteger oldChqNoIntValue = new BigInteger("0");
                            if (!StringUtil.isNullOrEmpty(oldChequeNo)) {
                                oldChqNoIntValue = new BigInteger(oldChequeNo);
                            }


                            if (!oldChqNoIntValue.equals(nextSeqNumber) && !StringUtil.isNullOrEmpty(oldChequeNo)) {
                                isEditCaseButChqNoChanged = true;
                            }

                            if (isChequeNumberInString) {
                                if (!oldChequeNo.equals(obj.optString("chequenumber"))) {
                                    isEditCaseButChqNoChanged = true;
                                }
                            }

                        } catch (Exception ex) {
                            if (!oldChequeNo.equals(obj.optString("chequenumber"))) {
                                isEditCaseButChqNoChanged = true;
                            }
                        }
                    } else {
                        if (!oldChequeNo.equals(obj.optString("chequenumber"))) {
                            isEditCaseButChqNoChanged = true;
                        }
                    }
                    

//                    if (!StringUtil.isNullOrEmpty(obj.optString("chequenumber")) && isChequeNumberAvailable && isEditCaseButChqNoChanged) {
//                        throw new AccountingException("Cheque Number : <b>" + obj.getString("chequenumber") + "</b> is already exist, Please enter different one");
//                    }

                    chequehm.put("chequeno", obj.optString("chequenumber"));
                    chequehm.put("companyId", companyid);
                    chequehm.put("createdFrom", 1);
                    chequehm.put("sequenceNumber", nextSeqNumber);
                    Map<String, Object> seqchequehm = new HashMap<>();
                    obj.put(Constants.companyKey, companyid);
                    String chequesequenceformat =  obj.optString("sequenceformat");
                    /**
                     * getNextChequeNumber method to generate next sequence number using
                     * sequence format,also saving the dateprefix and datesuffix in cheque table.
                     */
                    if (!StringUtil.isNullOrEmpty(chequesequenceformat) && !chequesequenceformat.equals("NA")) {
                        seqchequehm = accCompanyPreferencesObj.getNextChequeNumber(obj);
                    }
                    if (seqchequehm.containsKey(Constants.AUTO_ENTRYNUMBER)) {
                        chequehm.put("chequeno", (String) seqchequehm.get(Constants.AUTO_ENTRYNUMBER));
                    }
                    if (seqchequehm.containsKey(Constants.SEQNUMBER)) {
                        chequehm.put("sequenceNumber", (String) seqchequehm.get(Constants.SEQNUMBER));
                    }
                    if (seqchequehm.containsKey(Constants.DATEPREFIX)) {
                        chequehm.put(Constants.DATEPREFIX, (String) seqchequehm.get(Constants.DATEPREFIX));
                    }
                    if (seqchequehm.containsKey(Constants.DATEAFTERPREFIX)) {
                        chequehm.put(Constants.DATEAFTERPREFIX, (String) seqchequehm.get(Constants.DATEAFTERPREFIX));
                    }
                    if (seqchequehm.containsKey(Constants.DATESUFFIX)) {
                        chequehm.put(Constants.DATESUFFIX, (String) seqchequehm.get(Constants.DATESUFFIX));
                    }

                    String autoGenNextChqNo = paymentService.getNextChequeNumber(request, payMethod.getAccount().getID());
                    if (!StringUtil.isNullOrEmpty(obj.optString("chequenumber")) && (autoGenNextChqNo.equals(obj.optString("chequenumber")) || oldChequeNo.equals(obj.optString("chequenumber")))) {// if cheque Number is auto Generated OR for edit case if old cheque no. == coming chequenumber
                        chequehm.put("isAutoGeneratedChequeNumber", true);
                    }
                    if (editPaymentObject != null) {
                        chequehm.put("chequeID", editPaymentObject.getPayDetail()!= null ? editPaymentObject.getPayDetail().getCheque() !=null? editPaymentObject.getPayDetail().getCheque().getID():"": "");
                    }
                    chequehm.put("bankAccount", (payMethod.getAccount() != null) ? payMethod.getAccount().getID() : "");
                    chequehm.put("description", StringUtil.DecodeText(obj.optString("description")));
                    chequehm.put("bankname", StringUtil.DecodeText(obj.optString("paymentthrough")));
                    chequehm.put("duedate", df.parse(obj.getString("postdate")));
                    KwlReturnObject cqresult = accPaymentDAOobj.addCheque(chequehm);
                    Cheque cheque = (Cheque) cqresult.getEntityList().get(0);
                    pdetailhm.put("chequeid", cheque.getID());
                } else if (payMethod.getDetailType() == PaymentMethod.TYPE_CARD) {
                    HashMap cardhm = new HashMap();
                    cardhm.put("cardno", obj.getString("CardNo"));
                    cardhm.put("nameoncard", obj.getString("nameoncard"));
                    //cardhm.put("expirydate", obj.getString("expirydate"));
                    cardhm.put("expirydate", df.parse(obj.getString("expirydate")));
                    cardhm.put("cardtype", obj.getString("cardtype"));
                    cardhm.put("refno", obj.getString("refno"));
                    KwlReturnObject cdresult = accPaymentDAOobj.addCard(cardhm);
                    Card card = (Card) cdresult.getEntityList().get(0);
                    pdetailhm.put("cardid", card.getID());
                }
            }
            KwlReturnObject pdresult = null;
            if (!StringUtil.isNullOrEmpty(paymentId) && !StringUtil.isNullOrEmpty(payDetailID)) {
                pdetailhm.put("paydetailid", payDetailID);
            }
            if(editPaymentObject != null){
               pdetailhm.put("paydetailid", editPaymentObject.getPayDetail().getID()!=null?editPaymentObject.getPayDetail().getID():""); 
            }
            pdresult = accPaymentDAOobj.addPayDetail(pdetailhm);

            PayDetail pdetail = (PayDetail) pdresult.getEntityList().get(0);
            paymenthm.put("paydetailsid", pdetail.getID());

            result = accVendorPaymentobj.savePayment(paymenthm);

            Payment payment = (Payment) result.getEntityList().get(0);
            returnList.add(payment.getPaymentNumber());
            returnList.add(isEditInvoice);

            if (bankReconsilationEntry) {

                String bankAccountId = payMethod.getAccount().getID();
                Date clearanceDate = df.parse(obj.getString("clearancedate"));

                bankReconsilationMap.put("isOpeningPayment", true);
                bankReconsilationMap.put("bankAccountId", bankAccountId);
                bankReconsilationMap.put("startDate", startDate); //Financial Year Start Date
                bankReconsilationMap.put("endDate", endDate); //Financial Year End Date
                bankReconsilationMap.put("clearanceDate", clearanceDate);
                bankReconsilationMap.put("endingAmount", 0.0);
                bankReconsilationMap.put("companyId", companyid);
                bankReconsilationMap.put("clearingamount", payment.getDepositAmount());
                bankReconsilationMap.put("currencyid", currencyid);
                bankReconsilationMap.put("details", "");
                bankReconsilationMap.put("payment", payment);
                bankReconsilationMap.put("ismultidebit", true);
                bankReconsilationMap.put("createdby", sessionHandlerImpl.getUserid(request));
                bankReconsilationMap.put("checkCount", 1);      //As the discussion with Mayur B. and Sagar A. sir MP relates to check count
                bankReconsilationMap.put("depositeCount", 0);

                HashMap<String, Object> globalParams = AccountingManager.getGlobalParams(request);
                saveBankReconsilation(bankReconsilationMap, globalParams);
                auditTrailObj.insertAuditLog(AuditAction.BANK_RECONCILIATION_ADDED, "User " + sessionHandlerImpl.getUserFullName(request) + " has reconciled " + payment.getPaymentNumber(), request, companyid);
            }

            String customfield = request.getParameter("customfield");
            if (!StringUtil.isNullOrEmpty(customfield)) {
                JSONArray jcustomarray = new JSONArray(customfield);
                HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                customrequestParams.put("customarray", jcustomarray);
                customrequestParams.put("modulename", Constants.Acc_OpeningBalanceMakePayment_modulename);
                customrequestParams.put("moduleprimarykey", Constants.Acc_OpeningBalanceMakePaymentid);
                customrequestParams.put("modulerecid", payment.getID());
                customrequestParams.put("moduleid", Constants.Acc_Make_Payment_ModuleId);
                customrequestParams.put("companyid", companyid);
                customrequestParams.put("customdataclasspath", Constants.Acc_OpeningBalanceMakePayment_custom_data_classpath);
                KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                    paymenthm.put("paymentid", payment.getID());
                    paymenthm.put("openingBalanceMakePaymentCustomData", payment.getID());
                    result = accVendorPaymentobj.savePayment(paymenthm);
                }
            }
            auditTrailObj.insertAuditLog(auditID, "User " + sessionHandlerImpl.getUserFullName(request) + " has  " + auditMsg + " an Opening Balance Make Payment " + paymentNumber, request, paymentNumber);
        } catch (JSONException | ParseException ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return returnList;
    }

    private boolean isPaymentUsedInOtherTransactions(String paymentId, String companyId) throws ServiceException {
        boolean isPaymentUsedInOtherTransactions = false;

        KwlReturnObject result;
        if (!StringUtil.isNullOrEmpty(paymentId)) {
            KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentId);
            Payment payment = (Payment) objItr.getEntityList().get(0);

            if (payment != null) {
                Set<PaymentDetail> paymentDetailSet = payment.getRows();
                if (paymentDetailSet != null) {
                    Iterator itr = paymentDetailSet.iterator();
                    while (itr.hasNext()) {
                        PaymentDetail row = (PaymentDetail) itr.next();
                        if (row.getGoodsReceipt() != null) {
                            isPaymentUsedInOtherTransactions = true;
                        }
                    }
                }
            }

        }
        return isPaymentUsedInOtherTransactions;
    }

    public HashMap getCurrencyMap() throws ServiceException {
        HashMap currencyMap = new HashMap();
        KwlReturnObject returnObject = accCurrencyDAOobj.getCurrencies(currencyMap);
        List currencyList = returnObject.getEntityList();

        if (currencyList != null && !currencyList.isEmpty()) {
            Iterator iterator = currencyList.iterator();
            while (iterator.hasNext()) {
                KWLCurrency currency = (KWLCurrency) iterator.next();
                currencyMap.put(currency.getName(), currency.getCurrencyID());
            }
        }
        return currencyMap;
    }

    private String getCurrencyId(String currencyName, HashMap currencyMap) {
        String currencyId = "";
        if (currencyMap != null && currencyMap.containsKey(currencyName)) {
            currencyId = currencyMap.get(currencyName).toString();
        }
        return currencyId;
    }

    private Vendor getVendorByCode(String vendorCode, String companyID) throws AccountingException {
        Vendor vendor = null;
        try {
            if (!StringUtil.isNullOrEmpty(vendorCode) && !StringUtil.isNullOrEmpty(companyID)) {
                KwlReturnObject retObj = accVendorDAOObj.getVendorByCode(vendorCode, companyID);
                if (retObj != null && !retObj.getEntityList().isEmpty()) {
                    vendor = (Vendor) retObj.getEntityList().get(0);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while fetching Vendor");
        }
        return vendor;
    }

    public JSONObject importOeningTransactionsRecords(HttpServletRequest request, JSONObject jobj) throws AccountingException, IOException, SessionExpiredException, JSONException {

        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("import_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        boolean commitedEx = false;
        boolean issuccess = true;
        String msg = "";
        FileInputStream fileInputStream = null;
        BufferedReader br = null;
        int total = 0, failed = 0;
        String companyid = sessionHandlerImpl.getCompanyid(request);
        String gcurrencyId = sessionHandlerImpl.getCurrencyID(request);
        String userId = sessionHandlerImpl.getUserid(request);
        String fileName = jobj.getString("name");
        DateFormat datef=authHandler.getDateOnlyFormat();
        JSONObject returnObj = new JSONObject();

        try {

            String dateFormat = null, dateFormatId = request.getParameter("dateFormat");
            if (!StringUtil.isNullOrEmpty(dateFormatId)) {

                KwlReturnObject kdfObj = accountingHandlerDAOobj.getObject(KWLDateFormat.class.getName(), dateFormatId);
                KWLDateFormat kdf = (KWLDateFormat) kdfObj.getEntityList().get(0);

                dateFormat = kdf != null ? kdf.getJavaForm() : null;
            }

            DateFormat df = new SimpleDateFormat(dateFormat);

            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);

            fileInputStream = new FileInputStream(jobj.getString("FilePath"));
            br = new BufferedReader(new InputStreamReader(fileInputStream));
            String record = "";
            int cnt = 0;

            double externalCurrencyRate = 0d;//StringUtil.getDouble(request.getParameter("externalcurrencyrate"));

            StringBuilder failedRecords = new StringBuilder();

            JSONArray jSONArray = jobj.getJSONArray("Header");
            List headArrayList = new ArrayList();
            for (int i = 0; i < jSONArray.length(); i++) {
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                headArrayList.add(jSONObject.get("header"));
            }

            failedRecords.append(createCSVrecord(headArrayList.toArray()) + "\"Error Message\"");//failedRecords.append("\"Row No.\","+createCSVrecord(fileData)+"\"Error Message\"");

            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);

            while ((record = br.readLine()) != null) {
                if (cnt != 0) {

                    String[] recarr = record.split(",");
                    try {
                        double exchangeRateForOpeningTransaction = 1;

                        int vendorCodeIndex = headArrayList.indexOf("Vendor Code");

                        String vendorCode = recarr[vendorCodeIndex].trim();
                        if (!StringUtil.isNullOrEmpty(vendorCode)) {
                            vendorCode = vendorCode.replaceAll("\"", "");
                        } else {
                            throw new AccountingException("Vendor Code is not available");
                        }

                        String accountId = "";
                        String vendorId = "";
                        Vendor vendor = getVendorByCode(vendorCode, companyid);
                        if (vendor != null) {
                            accountId = vendor.getAccount().getID();
                            vendorId = vendor.getID();
                        } else {
                            throw new AccountingException("Vendor is not found for Vendor Code " + vendorCode);
                        }

                        HashMap currencyMap = getCurrencyMap();

                        int invoiceNumberIndex = headArrayList.indexOf("Transaction Number");

                        String invoiceNumber = recarr[invoiceNumberIndex].trim();
                        if (!StringUtil.isNullOrEmpty(invoiceNumber)) {
                            invoiceNumber = invoiceNumber.replaceAll("\"", "");
                        } else {
                            throw new AccountingException("Transaction Number is not available");
                        }


                        int transactionDateIndex = headArrayList.indexOf("Transaction Date");

                        String transactionDateStr = recarr[transactionDateIndex].trim();
                        if (!StringUtil.isNullOrEmpty(transactionDateStr)) {
                            transactionDateStr = transactionDateStr.replaceAll("\"", "");
                        } else {
                            throw new AccountingException("Transaction Date is not available");
                        }


                        int transactionAmountIndex = headArrayList.indexOf("Amount");

                        String transactionAmountStr = recarr[transactionAmountIndex].trim();
                        if (!StringUtil.isNullOrEmpty(transactionAmountStr)) {
                            transactionAmountStr = transactionAmountStr.replaceAll("\"", "");
                        } else {
                            throw new AccountingException("Transaction Amount is not available");
                        }


                        int exchangeRateIndex = headArrayList.indexOf("Exchange Rate");

                        String exchangeRateForOpeningTransactionStr = "";
                        if (exchangeRateIndex > 0) {
                            exchangeRateForOpeningTransactionStr = recarr[exchangeRateIndex].trim();

                            if (!StringUtil.isNullOrEmpty(exchangeRateForOpeningTransactionStr)) {
                                exchangeRateForOpeningTransactionStr = exchangeRateForOpeningTransactionStr.replaceAll("\"", "");
                            }
                        }


                        int currencyIndex = headArrayList.indexOf("Currency");

                        String currencyStr = recarr[currencyIndex].trim();
                        if (!StringUtil.isNullOrEmpty(currencyStr)) {
                            currencyStr = currencyStr.replaceAll("\"", "");
                        } else {
                            throw new AccountingException("Currency is not available");
                        }

                        String currencyId = getCurrencyId(currencyStr, currencyMap);

                        if (StringUtil.isNullOrEmpty(currencyId)) {
                            throw new AccountingException("Currency format you entered is not correct. it should be like \"SG Dollar (SGD)\"");
                        }


                        int chequeNumberIndex = headArrayList.indexOf("Cheque Number");

                        String chequeNumber = "";

                        if (chequeNumberIndex > 0) {
                            String chequeNumberStr = recarr[chequeNumberIndex].trim();
                            if (!StringUtil.isNullOrEmpty(chequeNumberStr)) {
                                chequeNumber = chequeNumberStr.replaceAll("\"", "");
                            }
                        }

                        int drawnOnIndex = headArrayList.indexOf("Drawn On");

                        String drawnOn = "";

                        if (drawnOnIndex > 0) {
                            String drawnOnStr = recarr[drawnOnIndex].trim();
                            if (!StringUtil.isNullOrEmpty(drawnOnStr)) {
                                drawnOn = drawnOnStr.replaceAll("\"", "");
                            }
                        }

                        int chequeDateIndex = headArrayList.indexOf("Cheque Date");

                        Date chequeDate = null;

                        if (chequeDateIndex > 0) {
                            String chequeDateStr = recarr[chequeDateIndex].trim();
                            if (!StringUtil.isNullOrEmpty(chequeDateStr)) {
                                chequeDate = df.parse(chequeDateStr);
                            }
                        }



                        Date transactionDate = null, bookbeginningdate = null;
                        Date dueDate = null;


                        if (!StringUtil.isNullOrEmpty(transactionDateStr)) {
                            transactionDate = df.parse(transactionDateStr);
                            
                            //ERROR PRONE CODE. VERIFY IT CAREFULLY - Book Begining Date & Transaction Date.
                            transactionDate = CompanyPreferencesCMN.removeTimefromDate(transactionDate);
                            bookbeginningdate = CompanyPreferencesCMN.removeTimefromDate(preferences.getBookBeginningFrom());
                            if (transactionDate.after(bookbeginningdate) || transactionDate.equals(bookbeginningdate)) {
                                throw new AccountingException(messageSource.getMessage("acc.transactiondate.beforebbdate", null, RequestContextUtils.getLocale(request)));
                            }
                            CompanyPreferencesCMN.checkLockPeriod(accCompanyPreferencesObj, requestParams, transactionDate, true);
                        }

                        if (!StringUtil.isNullOrEmpty(exchangeRateForOpeningTransactionStr)) {
                            exchangeRateForOpeningTransaction = Double.parseDouble(exchangeRateForOpeningTransactionStr);
                        } else {
                            Map<String, Object> currMap = new HashMap<String, Object>();
                            Date finYrStartDate = preferences.getFinancialYearFrom();
                            Calendar cal = Calendar.getInstance();
                            cal.setTime(finYrStartDate);
                            cal.add(Calendar.DATE, -1);     //ERROR PRONE CODE. VERIFY IT.

                            Date applyDate = cal.getTime();
                            String adate=datef.format(applyDate);
                            try{
                                applyDate=datef.parse(adate);
                            }catch(ParseException ex){
                                applyDate=cal.getTime();
                            }
                            currMap.put("applydate", applyDate);
                            currMap.put("gcurrencyid", gcurrencyId);
                            currMap.put("companyid", companyid);
                            KwlReturnObject retObj = accCurrencyDAOobj.getExcDetailID(currMap, currencyId, applyDate, null);
                            if (retObj != null) {
                                List li = retObj.getEntityList();
                                if (!li.isEmpty()) {
                                    Iterator itr = li.iterator();
                                    ExchangeRateDetails erd = (ExchangeRateDetails) itr.next();
                                    if (erd != null) {
                                        exchangeRateForOpeningTransaction = erd.getExchangeRate();
                                    }
                                }
                            }
                        }

                        if (exchangeRateForOpeningTransaction <= 0) {
                            throw new AccountingException(messageSource.getMessage("acc.field.ExchangeRateCannotbezeroornegative", null, RequestContextUtils.getLocale(request)));
                        }

                        double transactionAmount = 0d;
                        if (!StringUtil.isNullOrEmpty(transactionAmountStr)) {
                            transactionAmount = Double.parseDouble(transactionAmountStr);
                        }

                        // creating payment data

                        HashMap paymenthm = new HashMap();

                        KwlReturnObject result = accVendorPaymentobj.getPaymentFromNo(invoiceNumber, companyid);
                        int count = result.getRecordTotalCount();
                        if (count > 0) {
                            throw new AccountingException(messageSource.getMessage("acc.field.Paymentnumber", null, RequestContextUtils.getLocale(request)) + invoiceNumber + messageSource.getMessage("acc.field.alreadyexists.", null, RequestContextUtils.getLocale(request)));
                        }
                        paymenthm.put("entrynumber", invoiceNumber);
                        paymenthm.put("autogenerated", false);


                        paymenthm.put("depositamount", transactionAmount);//
                        paymenthm.put("currencyid", currencyId);//
                        paymenthm.put("externalCurrencyRate", externalCurrencyRate);//
                        paymenthm.put("memo", "");//
                        paymenthm.put("companyid", companyid);//
                        paymenthm.put("chequeNumber", chequeNumber);
                        paymenthm.put("drawnOn", drawnOn);
                        paymenthm.put("creationDate", transactionDate);
                        paymenthm.put("chequeDate", chequeDate);
                        paymenthm.put("vendorId", vendorId);
                        paymenthm.put("accountId", accountId);
                        paymenthm.put("isOpeningBalencePayment", true);
                        paymenthm.put("normalPayment", false);
                        paymenthm.put("openingBalanceAmountDue", transactionAmount);
                        // Store Payment amount in base currency
                        paymenthm.put(Constants.openingBalanceBaseAmountDue, authHandler.round(transactionAmount*exchangeRateForOpeningTransaction, companyid));
                        paymenthm.put(Constants.originalOpeningBalanceBaseAmount, authHandler.round(transactionAmount*exchangeRateForOpeningTransaction, companyid));
                        paymenthm.put("isadvancepayment", true);
                        //            paymenthm.put("contraentry", false);
                        paymenthm.put("exchangeRateForOpeningTransaction", exchangeRateForOpeningTransaction);
                        paymenthm.put("conversionRateFromCurrencyToBase", true);
                        String createdby = sessionHandlerImpl.getUserid(request);
                        String modifiedby = sessionHandlerImpl.getUserid(request);
                        long createdon = System.currentTimeMillis();
                        long updatedon = System.currentTimeMillis();

                        paymenthm.put("createdby", createdby);
                        paymenthm.put("modifiedby", modifiedby);
                        paymenthm.put("createdon", createdon);
                        paymenthm.put("updatedon", updatedon);

                        accVendorPaymentobj.savePayment(paymenthm);


                    } catch (Exception ex) {
                        failed++;
                        String errorMsg = ex.getMessage(), invalidColumns = "";
                        try {
                            JSONObject errorLog = new JSONObject(errorMsg);
                            errorMsg = errorLog.getString("errorMsg");
                            invalidColumns = errorLog.getString("invalidColumns");
                        } catch (JSONException jex) {
                        }
                        failedRecords.append("\n" + createCSVrecord(recarr) + "\"" + errorMsg.replaceAll("\"", "") + "\"");
                    }
                    total++;
                }
                cnt++;
            }

            if (failed > 0) {
                createFailureFiles(fileName, failedRecords, ".csv");
            }

            int success = total - failed;
            if (total == 0) {
                msg = messageSource.getMessage("acc.field.Emptyfile", null, RequestContextUtils.getLocale(request));
            } else if (success == 0) {
//                issuccess = false;
                msg = messageSource.getMessage("acc.rem.169", null, RequestContextUtils.getLocale(request));
            } else if (success == total) {
                msg = messageSource.getMessage("acc.rem.168", null, RequestContextUtils.getLocale(request));
            } else {
                msg = messageSource.getMessage("acc.field.Imported", null, RequestContextUtils.getLocale(request)) + success + messageSource.getMessage("acc.field.record", null, RequestContextUtils.getLocale(request)) + (success > 1 ? "s" : "") + messageSource.getMessage("acc.field.successfully", null, RequestContextUtils.getLocale(request));
                msg += (failed == 0 ? "." : messageSource.getMessage("acc.field.andfailedtoimport", null, RequestContextUtils.getLocale(request)) + failed + messageSource.getMessage("acc.field.record", null, RequestContextUtils.getLocale(request)) + (failed > 1 ? "s" : "") + ".");
            }

            try {
                txnManager.commit(status);
            } catch (Exception ex) {
                commitedEx = true;
                throw ex;
            }
        } catch (Exception ex) {
            if (!commitedEx) { //if exception occurs during commit then dont call rollback
                txnManager.rollback(status);
            }
            issuccess = false;
            msg = "" + ex.getMessage();

            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException(messageSource.getMessage("acc.import.msg9", null, RequestContextUtils.getLocale(request)));
        } finally {
            fileInputStream.close();
            br.close();

            DefaultTransactionDefinition ldef = new DefaultTransactionDefinition();
            ldef.setName("import_Tx");
            ldef.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
            TransactionStatus lstatus = txnManager.getTransaction(ldef);
            try {
                //Insert Integration log
                HashMap<String, Object> logDataMap = new HashMap<String, Object>();
                logDataMap.put("FileName", getActualFileName(fileName));
                logDataMap.put("StorageName", fileName);
                logDataMap.put("Log", msg);
                logDataMap.put("Type", "csv");
                logDataMap.put("FailureFileType", failed>0?"csv":"");
                logDataMap.put("TotalRecs", total);
                logDataMap.put("Rejected", failed);
                logDataMap.put("Module", Constants.Acc_Make_Payment_ModuleId);
                logDataMap.put("ImportDate", new Date());
                logDataMap.put("User", userId);
                logDataMap.put("Company", companyid);
                importDao.saveImportLog(logDataMap);
                txnManager.commit(lstatus);
            } catch (Exception ex) {
                txnManager.rollback(lstatus);
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            }

            try {
                returnObj.put("success", issuccess);
                returnObj.put("msg", msg);
                returnObj.put("totalrecords", total);
                returnObj.put("successrecords", total - failed);
                returnObj.put("failedrecords", failed);
                returnObj.put("filename", getActualFileName(fileName));
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        return returnObj;
    }

    public static String getActualFileName(String storageName) {
        String ext = storageName.substring(storageName.lastIndexOf("."));
        String actualName = storageName.substring(0, storageName.lastIndexOf("_"));
        actualName = actualName + ext;
        return actualName;
    }

    public String createCSVrecord(Object[] listArray) {
        String rec = "";
        for (int i = 0; i < listArray.length; i++) {    //Discard columns id at index 0 and isvalid,invalidColumns, validationlog at last 3 indexes.
//            String s = (listArray[i]==null)?"":listArray[i].toString();
            rec += "\"" + (listArray[i] == null ? "" : listArray[i].toString().replaceAll("\"", "")) + "\",";
        }
        return rec;
    }

    public void createFailureFiles(String filename, StringBuilder failedRecords, String ext) {
        String destinationDirectory;
        try {
            destinationDirectory = storageHandlerImpl.GetDocStorePath() + "importplans";

            if (!StringUtil.isNullOrEmpty(filename.substring(filename.lastIndexOf(".")))) {
                ext = filename.substring(filename.lastIndexOf("."));
            }

//            if (StringUtil.isNullOrEmpty(ext)) {
//                ext = filename.substring(filename.lastIndexOf("."));
//            }
            filename = filename.substring(0, filename.lastIndexOf("."));

            java.io.FileOutputStream failurefileOut = new java.io.FileOutputStream(destinationDirectory + "/" + filename + ImportLog.failureTag + ext);
            failurefileOut.write(failedRecords.toString().getBytes());
            failurefileOut.flush();
            failurefileOut.close();
        } catch (Exception ex) {
            System.out.println("\nError file write [success/failed] " + ex);
        }
    }

    public List savePayment(HttpServletRequest request) throws SessionExpiredException, ServiceException, AccountingException {
        KwlReturnObject result = null;
        List list = new ArrayList();
        Payment payment = null;
        String oldjeid = null;
        String taxjedid = null;
        String Cardid = null;
        String oldChequeNo = "";
        double amount = 0;
        String netinword = "";
        List ll = new ArrayList();
        Invoice invoice = null;
        Customer cust = null;
        Vendor vend = null;
        StringBuffer billno = new StringBuffer();
        String person = "";
        String accountName = "";
        String accountaddress = "";
        String accountid = request.getParameter("accid");
        boolean isCNDN;
        try {
            Account dipositTo = null;

            double amountDiff = 0;
            boolean rateDecreased = false;
            String sequenceformat = request.getParameter("sequenceformat");
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject companyResult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) companyResult.getEntityList().get(0);
            String countryID = company != null && company.getCountry() != null ? company.getCountry().getID() : "";
            double externalCurrencyRate = StringUtil.getDouble(request.getParameter("externalcurrencyrate"));
            DateFormat df = authHandler.getDateOnlyFormat(request);
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            String drAccDetails = request.getParameter("detail");
            String customfield = request.getParameter("customfield");
            String advancePaymentIdForCnDn = request.getParameter("advancePaymentIdForCnDn");
            String mainPaymentForCNDNId = request.getParameter("mainPaymentForCNDNId");
            String invoiceadvcndntype = request.getParameter("invoiceadvcndntype");
            int receiptType = StringUtil.getInteger(request.getParameter("receipttype"));
            int actualReceiptType = StringUtil.getInteger(request.getParameter("actualReceiptType") != null ? request.getParameter("actualReceiptType") : "0");
            boolean isMultiDebit = StringUtil.getBoolean(request.getParameter("ismultidebit"));
            isCNDN = StringUtil.getBoolean(request.getParameter("isCNDN"));
            boolean isAgainstDN = StringUtil.getBoolean(request.getParameter("isAgainstDN"));
            boolean isAdvancePayment = StringUtil.getBoolean(request.getParameter("isadvpayment"));
            boolean ignoreDuplicateChk = StringUtil.getBoolean(request.getParameter("ignoreDuplicateChk"));
            String entryNumber = request.getParameter("no");
            String receiptid = request.getParameter("billid");
            boolean isVendorPaymentEdit = (Boolean.parseBoolean((String) request.getParameter("isReceiptEdit")));
            String methodid = request.getParameter("pmtmethod");
            sessionHandlerImpl.updatePaymentMethodID(request, methodid);

            boolean isIBGTypeTransaction = StringUtil.getBoolean(request.getParameter("isIBGTypeTransaction"));
            String ibgDetailsID = request.getParameter("ibgDetailsID");
            String ibgCode = request.getParameter("ibgCode");
            Date creationDate = df.parse(request.getParameter("creationdate"));

            String jeid = null;
            String payDetailID = null;
            HashMap<String, JSONArray> Map1 = new HashMap();
            String jeentryNumber = null;
            boolean jeautogenflag = false;
            String jeIntegerPart = "";
            String jeDatePrefix = "";
            String jeDateAfterPrefix = "";
            String jeDateSuffix = "";
            String jeSeqFormatId = "";

            HashMap paymenthm = new HashMap();
            boolean ismanydbcr = StringUtil.getBoolean(request.getParameter("ismanydbcr"));
            paymenthm.put("ismanydbcr", ismanydbcr);
            paymenthm.put("isadvancepayment", isAdvancePayment);
            if (!StringUtil.isNullOrEmpty(advancePaymentIdForCnDn)) {
                paymenthm.put("advancePaymentIdForCnDn", advancePaymentIdForCnDn);
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("isEdit"))) {
                paymenthm.put("isEdit", Boolean.parseBoolean(request.getParameter("isEdit")));
            }
            if (!StringUtil.isNullOrEmpty(mainPaymentForCNDNId)) {
                paymenthm.put("mainPaymentForCNDNId", mainPaymentForCNDNId);
            }
            if (!StringUtil.isNullOrEmpty(invoiceadvcndntype) && (actualReceiptType == 0 || actualReceiptType == 1)) {
                paymenthm.put("invoiceadvcndntype", Integer.parseInt(invoiceadvcndntype));
            }

            HashMap<Integer, String> paymentHashMap = new HashMap<Integer, String>();
            if (!StringUtil.isNullOrEmpty(request.getParameter("datainvoiceadvcndn"))) {
                JSONArray jSONArray = new JSONArray(request.getParameter("datainvoiceadvcndn"));
                String paymentid = "";
                for (int i = 0; i < jSONArray.length(); i++) {
                    JSONObject jObject = jSONArray.getJSONObject(i);
                    paymentid = StringUtil.DecodeText(jObject.optString("paymentID"));
                    int invoiceadvcndntypejson = !StringUtil.isNullOrEmpty(jObject.getString("invoiceadvcndntype")) ? Integer.parseInt(jObject.getString("invoiceadvcndntype")) : 0;
                    paymentHashMap.put(invoiceadvcndntypejson, paymentid);
                }
                paymenthm.put("paymentHashMap", paymentHashMap);
            }
            paymenthm.put("receipttype", receiptType);
            paymenthm.put("actualReceiptType", actualReceiptType);

            if (isIBGTypeTransaction) {
                paymenthm.put("isIBGTypeTransaction", isIBGTypeTransaction);
                paymenthm.put("ibgDetailsID", ibgDetailsID);
                paymenthm.put("ibgCode", ibgCode);
            }

            double bankCharges = 0;
            double bankInterest = 0;
            boolean onlyAdvance = StringUtil.getBoolean(request.getParameter("onlyAdvance"));
            String bankChargesAccid = request.getParameter("bankChargesCmb");
            String bankInterestAccid = request.getParameter("bankInterestCmb");
            if (!StringUtil.isNullOrEmpty(request.getParameter("bankCharges")) && !StringUtil.isNullOrEmpty(bankChargesAccid)) {
                bankCharges = Double.parseDouble(request.getParameter("bankCharges"));
                paymenthm.put("bankCharges", bankCharges);
                paymenthm.put("bankChargesCmb", bankChargesAccid);
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("bankInterest")) && !StringUtil.isNullOrEmpty(bankInterestAccid)) {
                bankInterest = Double.parseDouble(request.getParameter("bankInterest"));
                paymenthm.put("bankInterest", bankInterest);
                paymenthm.put("bankInterestCmb", bankInterestAccid);
            }
            String paidToid = request.getParameter("paidToCmb");
            if (!StringUtil.isNullOrEmpty(request.getParameter("paidToCmb")) && !StringUtil.isNullOrEmpty(paidToid)) {
                paymenthm.put("paidToCmb", paidToid);
            }
            if (receiptType == 6) {
                paymenthm.put("customer", request.getParameter("accid"));
            } else {
                boolean isCustomer = false;
                KwlReturnObject custObj = accountingHandlerDAOobj.getObject(Customer.class.getName(), request.getParameter("accid"));
                if (custObj.getEntityList().get(0) != null) {
                    cust = (Customer) custObj.getEntityList().get(0);
                }
                if (cust != null) {
                    isCustomer = true;
                }

                boolean isVendor = false;
                KwlReturnObject vendObj = accountingHandlerDAOobj.getObject(Vendor.class.getName(), request.getParameter("accid"));
                if (vendObj.getEntityList().get(0) != null) {
                    vend = (Vendor) vendObj.getEntityList().get(0);
                }
                if (vend != null) {
                    isVendor = true;
                }

                if (isCustomer) {
                    paymenthm.put("customer", request.getParameter("accid"));
                } else if (isVendor) {
                    paymenthm.put("vendorId", request.getParameter("accid"));
                }
            }
            String createdby = sessionHandlerImpl.getUserid(request);
            String modifiedby = sessionHandlerImpl.getUserid(request);
            long createdon = System.currentTimeMillis();
            long updatedon = System.currentTimeMillis();
            boolean bankReconsilationEntry = false, bankPayment = false;
            Date clearanceDate = null, startDate = null, endDate = null;
            String bankAccountId = "";
            Map<String, Object> bankReconsilationMap = new HashMap<String, Object>();

            boolean editAdvance = false;

            if (!StringUtil.isNullOrEmpty(receiptid)) {// for edit case
                KwlReturnObject receiptObj = accountingHandlerDAOobj.getObject(Payment.class.getName(), receiptid);
                payment = (Payment) receiptObj.getEntityList().get(0);
                oldjeid = payment.getJournalEntry().getID();
                JournalEntry jetemp = payment.getJournalEntry();
                if (jetemp != null) {
                    jeentryNumber = jetemp.getEntryNumber(); //preserving these data to generate same JE number in edit case                    
                    jeautogenflag = jetemp.isAutoGenerated();
                    jeSeqFormatId = jetemp.getSeqformat() == null ? "" : jetemp.getSeqformat().getID();
                    jeIntegerPart = String.valueOf(jetemp.getSeqnumber());
                    jeDatePrefix = jetemp.getDatePreffixValue();
                    jeDateAfterPrefix = jetemp.getDateAfterPreffixValue();
                    jeDateSuffix = jetemp.getDateSuffixValue();
                }

                if (payment.getPayDetail() != null) {
                    payDetailID = payment.getPayDetail().getID();
                    if (payment.getPayDetail().getCard() != null) {
                        Cardid = payment.getPayDetail().getCard().getID();
                    }
                    if (payment.getPayDetail().getCheque() != null) {
                        Cardid = payment.getPayDetail().getCheque().getID();
                        oldChequeNo = payment.getPayDetail().getCheque().getChequeNo();
                    }
                }
                if (payment != null) {
                    accVendorPaymentModuleServiceObj.updateOpeningBalance(payment, companyid);
                    accVendorPaymentModuleServiceObj.updateReceiptAdvancePaymentAmountDue(payment, companyid, countryID);
                }
                result = accVendorPaymentobj.deletePaymentsDetails(receiptid, companyid);
                result = accVendorPaymentobj.deletePaymentsDetailsOtherwise(receiptid);
                if (payment != null && payment.getRevalJeId() != null) {
                    result = accJournalEntryobj.deleteJEDtails(payment.getRevalJeId(), companyid);
                    result = accJournalEntryobj.deleteJE(payment.getRevalJeId(), companyid);
                }

                paymenthm.put("deposittojedetailid", null);
                paymenthm.put("depositamount", 0.0);
                //Delete old entries and insert new entries again from optimized table in edit case.
                accJournalEntryobj.deleteOnEditAccountJEs_optimized(oldjeid);
            }

            synchronized (this) { //this block is used to generate auto sequence number if number is not duplicate
                SequenceFormat prevSeqFormat = null;
                String prevseqnumber = "";
                String nextAutoNo = "";
                String nextAutoNoInt = "";
                String datePrefix = "";
                String dateafterPrefix = "";
                String dateSuffix = "";

                if (!StringUtil.isNullOrEmpty(receiptid)) {// for edit case
                    String advanceId = payment.getAdvanceid() != null ? payment.getAdvanceid().getID() : "";
                    result = accVendorPaymentobj.getDuplicatePNforNormal(entryNumber, companyid, receiptid, advanceId, payment);
                    int count = result.getRecordTotalCount();
                    if (count > 0 && sequenceformat.equals("NA")) {
                        throw new AccountingException(messageSource.getMessage("acc.field.Paymentnumber", null, RequestContextUtils.getLocale(request)) + entryNumber + messageSource.getMessage("acc.field.alreadyexists.", null, RequestContextUtils.getLocale(request)));
                    } else if (payment != null && payment.getSeqformat() != null) {
                        prevSeqFormat = payment.getSeqformat();
                        prevseqnumber = payment.getSeqnumber() + "";
                        paymenthm.put(Constants.SEQFORMAT, prevSeqFormat.getID());
                        paymenthm.put(Constants.SEQNUMBER, prevseqnumber);
                        paymenthm.put(Constants.DATEPREFIX, payment.getDatePreffixValue());
                        paymenthm.put(Constants.DATEAFTERPREFIX, dateafterPrefix);
                        paymenthm.put(Constants.DATESUFFIX, payment.getDateSuffixValue());
                        nextAutoNo = entryNumber;
                    }
                } else if (paymentHashMap.containsKey(3) && !paymentHashMap.containsKey(1)) {
                    String cndnId = paymentHashMap.get(3);
                    KwlReturnObject cndnresult = accountingHandlerDAOobj.getObject(Payment.class.getName(), cndnId);
                    Payment paymentCnDn = null;
                    int count = 0;
                    if (!cndnresult.getEntityList().isEmpty() && cndnresult.getEntityList().get(0) != null) {
                        paymentCnDn = (Payment) cndnresult.getEntityList().get(0);
                        result = accVendorPaymentobj.getDuplicatePNforNormal(entryNumber, companyid, receiptid, cndnId, paymentCnDn);
                        count = result.getRecordTotalCount();
                    }
                    if (count > 0 && sequenceformat.equals("NA")) {
                        throw new AccountingException(messageSource.getMessage("acc.field.Paymentnumber", null, RequestContextUtils.getLocale(request)) + entryNumber + messageSource.getMessage("acc.field.alreadyexists.", null, RequestContextUtils.getLocale(request)));
                    } else if (paymentCnDn != null && paymentCnDn.getSeqformat() != null) {
                        prevSeqFormat = paymentCnDn.getSeqformat();
                        prevseqnumber = paymentCnDn.getSeqnumber() + "";
                        paymenthm.put(Constants.SEQFORMAT, prevSeqFormat.getID());
                        paymenthm.put(Constants.SEQNUMBER, prevseqnumber);
                        paymenthm.put(Constants.DATEPREFIX, paymentCnDn.getDatePreffixValue());
                        paymenthm.put(Constants.DATEAFTERPREFIX, paymentCnDn.getDateAfterPreffixValue());
                        paymenthm.put(Constants.DATESUFFIX, paymentCnDn.getDateSuffixValue());
                        nextAutoNo = entryNumber;
                    }
                } else if (!ignoreDuplicateChk && (actualReceiptType != 0 || (actualReceiptType == 0 && isAdvancePayment))) {   //true when advance created along with payment against invoice
                    if (actualReceiptType == 0 && isAdvancePayment && request.getParameter("data") != null) {
                        JSONArray jSONArray = new JSONArray(request.getParameter("data"));
                        JSONObject jSONObject = jSONArray.getJSONObject(0);
                        String advanceReceiptId = jSONObject.optString("billid", "");
                        if (!StringUtil.isNullOrEmpty(advanceReceiptId)) {
                            KwlReturnObject receiptObj = accountingHandlerDAOobj.getObject(Payment.class.getName(), advanceReceiptId);
                            Payment advpayment = (Payment) receiptObj.getEntityList().get(0);
                            if (advpayment != null && advpayment.getSeqformat() != null) {
                                prevSeqFormat = advpayment.getSeqformat();
                                prevseqnumber = advpayment.getSeqnumber() + "";
                                paymenthm.put(Constants.SEQFORMAT, prevSeqFormat.getID());
                                paymenthm.put(Constants.SEQNUMBER, prevseqnumber);
                                paymenthm.put(Constants.DATEPREFIX, advpayment.getDatePreffixValue());
                                paymenthm.put(Constants.DATEAFTERPREFIX, advpayment.getDateAfterPreffixValue());
                                paymenthm.put(Constants.DATESUFFIX, advpayment.getDateSuffixValue());
                                nextAutoNo = entryNumber;

                                JournalEntry entry = advpayment.getJournalEntry();
                                jeentryNumber = entry.getEntryNumber(); //preserving these data to generate same JE number in edit case                    
                                jeautogenflag = entry.isAutoGenerated();
                                jeSeqFormatId = entry.getSeqformat() == null ? "" : entry.getSeqformat().getID();
                                jeIntegerPart = String.valueOf(entry.getSeqnumber());
                                jeDatePrefix = entry.getDatePreffixValue();
                                jeDateAfterPrefix = entry.getDateAfterPreffixValue();
                                jeDateSuffix = entry.getDateSuffixValue();
                                editAdvance = true;
                            }
                            result = accVendorPaymentobj.getDuplicatePNforNormal(entryNumber, companyid, advanceReceiptId, "", advpayment);
                        }
                    } else {
                        result = accVendorPaymentobj.getPaymentFromNo(entryNumber, companyid);
                    }
                    int count = result.getRecordTotalCount();
                    if (count > 0 && sequenceformat.equals("NA")) {
                        throw new AccountingException(messageSource.getMessage("acc.field.Paymentnumber", null, RequestContextUtils.getLocale(request)) + entryNumber + messageSource.getMessage("acc.field.alreadyexists.", null, RequestContextUtils.getLocale(request)));
                    }
                }

                if (!sequenceformat.equals("NA") && prevSeqFormat == null && !ignoreDuplicateChk) { //to generate sequence number
                    boolean seqformat_oldflag = StringUtil.getBoolean(request.getParameter("seqformat_oldflag"));
                    if (seqformat_oldflag) {
                        nextAutoNo = accCompanyPreferencesObj.getNextAutoNumber(companyid, StaticValues.AUTONUM_PAYMENT, sequenceformat);
                    } else {
                        Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                        seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_PAYMENT, sequenceformat, seqformat_oldflag, creationDate);
                        nextAutoNo = (String)seqNumberMap.get(Constants.AUTO_ENTRYNUMBER);  //next auto generated number
                        nextAutoNoInt = (String)seqNumberMap.get(Constants.SEQNUMBER);//integer Part
                        datePrefix = (String)seqNumberMap.get(Constants.DATEPREFIX);//Date Prefix Part
                        dateafterPrefix = (String)seqNumberMap.get(Constants.DATEAFTERPREFIX);  //Date After Prefix Part
                        dateSuffix = (String)seqNumberMap.get(Constants.DATESUFFIX);//Date Suffix Part
                        
                        paymenthm.put(Constants.SEQFORMAT, sequenceformat);
                        paymenthm.put(Constants.SEQNUMBER, nextAutoNoInt);
                        paymenthm.put(Constants.DATEPREFIX, datePrefix);
                        paymenthm.put(Constants.DATEAFTERPREFIX, dateafterPrefix);
                        paymenthm.put(Constants.DATESUFFIX, dateSuffix);
                    }
                    entryNumber = nextAutoNo;
                }
                if (!sequenceformat.equals("NA") && ignoreDuplicateChk) {//case of creating advance with normal
                    result = accVendorPaymentobj.getCurrentSeqNumberForAdvance(sequenceformat, companyid);
                    nextAutoNoInt = !(result.getEntityList().isEmpty()) ? (result.getEntityList().get(0) + "") : "0";
                    paymenthm.put(Constants.SEQNUMBER, nextAutoNoInt);
                    paymenthm.put(Constants.SEQFORMAT, sequenceformat);
                    nextAutoNo = entryNumber;
                }
                paymenthm.put("entrynumber", entryNumber);
                paymenthm.put("autogenerated", entryNumber.equals(nextAutoNo));
            }

//
//            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
//            Company company = (Company) cmpresult.getEntityList().get(0);

            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            currencyid = (request.getParameter("currencyid") == null ? currency.getCurrencyID() : request.getParameter("currencyid"));

            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);

            KwlReturnObject extracapresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracapresult.getEntityList().get(0);
            
            int countryLanguageId = Constants.OtherCountryLanguageId; // 0
            if (extraCompanyPreferences.isAmountInIndianWord()) {
                countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
            }

            paymenthm.put("currencyid", currencyid);
            paymenthm.put("externalCurrencyRate", externalCurrencyRate);
            result = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), request.getParameter("pmtmethod"));
            PaymentMethod payMethod = (PaymentMethod) result.getEntityList().get(0);

            dipositTo = payMethod.getAccount();
            HashMap pdetailhm = new HashMap();
            pdetailhm.put("paymethodid", payMethod.getID());
            pdetailhm.put("companyid", companyid);
            if (payMethod.getDetailType() != PaymentMethod.TYPE_CASH) {

                JSONObject obj = new JSONObject(request.getParameter("paydetail"));
                if (payMethod.getDetailType() == PaymentMethod.TYPE_BANK) {
                    bankPayment = true;
                    bankReconsilationEntry = obj.getString("paymentStatus") != null ? obj.getString("paymentStatus").equals("Cleared") : false;
                    if (bankReconsilationEntry) {
                        bankAccountId = request.getParameter("bankaccid");
                        startDate = df.parse(request.getParameter("startdate"));
                        endDate = df.parse(request.getParameter("enddate"));
                        clearanceDate = df.parse(obj.getString("clearanceDate"));
                        bankReconsilationMap.put("bankAccountId", bankAccountId);
                        bankReconsilationMap.put("startDate", startDate);
                        bankReconsilationMap.put("endDate", endDate);
                        bankReconsilationMap.put("clearanceDate", clearanceDate);
                        bankReconsilationMap.put("endingAmount", 0.0);
                        bankReconsilationMap.put("companyId", companyid);
                    }
                    HashMap chequehm = new HashMap();

                    BigInteger nextSeqNumber = new BigInteger("0");
                    boolean checkForNextSequenceNumberAlso = true;
                    boolean isChequeNumberInString = false;
                    if (extraCompanyPreferences != null && extraCompanyPreferences.isShowAutoGeneratedChequeNumber()) {
                        try {// USER can enter String values also in such case exception will come

                            nextSeqNumber = new BigInteger(obj.getString("chequeno"));
                            // cheque whether Cheque Number exist or not if already exist then don't let it save

//                            if (extraCompanyPreferences.isShowAutoGeneratedChequeNumber() && nextSeqNumber.equals(0)) {
//                                throw new AccountingException("Cheque Number can not be zero");
//                            }
                        } catch (Exception ex) {
                            checkForNextSequenceNumberAlso = false;
                            isChequeNumberInString = true;
                        }
                    } else {
                        checkForNextSequenceNumberAlso = false;
                    }

                    boolean isChequeNumberAvailable = false;

                    boolean isEditCaseButChqNoChanged = false;
                    if (!StringUtil.isNullOrEmpty(obj.optString("chequeno")) && extraCompanyPreferences != null && extraCompanyPreferences.isShowAutoGeneratedChequeNumber()) {
                        try {// OLD CHQ NO. can be String value also in such case exception will come

                            HashMap chequeNohm = new HashMap();
                            chequeNohm.put("companyId", companyid);
                            chequeNohm.put("sequenceNumber", nextSeqNumber);
                            chequeNohm.put("checkForNextSequenceNumberAlso", checkForNextSequenceNumberAlso);
                            chequeNohm.put("nextChequeNumber", obj.optString("chequeno"));
                            chequeNohm.put("bankAccountId", payMethod.getAccount().getID());
                            isChequeNumberAvailable = paymentService.isChequeNumberAvailable(chequeNohm);

                            BigInteger oldChqNoIntValue = new BigInteger("0");
                            if (!StringUtil.isNullOrEmpty(oldChequeNo)) {
                                oldChqNoIntValue = new BigInteger(oldChequeNo);
                            }


                            if (!oldChqNoIntValue.equals(nextSeqNumber) && !StringUtil.isNullOrEmpty(oldChequeNo)) {
                                isEditCaseButChqNoChanged = true;
                            }

                            if (isChequeNumberInString) {
                                if (!oldChequeNo.equals(obj.optString("chequeno"))) {
                                    isEditCaseButChqNoChanged = true;
                                }
                            }

                        } catch (Exception ex) {
                            if (!oldChequeNo.equals(obj.optString("chequeno"))) {
                                isEditCaseButChqNoChanged = true;
                            }
                        }
                    } else {
                        if (!oldChequeNo.equals(obj.optString("chequeno"))) {
                            isEditCaseButChqNoChanged = true;
                        }
                    }


                    if (!StringUtil.isNullOrEmpty(obj.optString("chequeno")) && isChequeNumberAvailable && isEditCaseButChqNoChanged) {
                        throw new AccountingException("Cheque Number : <b>" + obj.getString("chequeno") + "</b> is already exist, Please enter different one");
                    }
                    
                    chequehm.put("chequeno", obj.optString("chequeno"));
                    chequehm.put("companyId", companyid);
                    chequehm.put("createdFrom", 1);
                    chequehm.put("sequenceNumber", nextSeqNumber);
                    Map<String, Object> seqchequehm = new HashMap<>();
                    obj.put(Constants.companyKey, companyid);
                    String chequesequenceformat =  obj.optString("sequenceformat");
                    /**
                     * getNextChequeNumber method to generate next sequence number using
                     * sequence format,also saving the dateprefix and datesuffix in cheque table.
                     */
                    if (!StringUtil.isNullOrEmpty(chequesequenceformat) && !chequesequenceformat.equals("NA")) {
                        seqchequehm = accCompanyPreferencesObj.getNextChequeNumber(obj);
                    }
                    if (seqchequehm.containsKey(Constants.AUTO_ENTRYNUMBER)) {
                        chequehm.put("chequeno", (String) seqchequehm.get(Constants.AUTO_ENTRYNUMBER));
                    }
                    if (seqchequehm.containsKey(Constants.SEQNUMBER)) {
                        chequehm.put("sequenceNumber", (String) seqchequehm.get(Constants.SEQNUMBER));
                    }
                    if (seqchequehm.containsKey(Constants.DATEPREFIX)) {
                        chequehm.put(Constants.DATEPREFIX, (String) seqchequehm.get(Constants.DATEPREFIX));
                    }
                    if (seqchequehm.containsKey(Constants.DATEAFTERPREFIX)) {
                        chequehm.put(Constants.DATEAFTERPREFIX, (String) seqchequehm.get(Constants.DATEAFTERPREFIX));
                    }
                    if (seqchequehm.containsKey(Constants.DATESUFFIX)) {
                        chequehm.put(Constants.DATESUFFIX, (String) seqchequehm.get(Constants.DATESUFFIX));
                    }

                    String autoGenNextChqNo = paymentService.getNextChequeNumber(request, payMethod.getAccount().getID());
                    if (!StringUtil.isNullOrEmpty(obj.optString("chequeno")) && (autoGenNextChqNo.equals(obj.optString("chequeno")) || oldChequeNo.equals(obj.optString("chequeno")))) {// if cheque Number is auto Generated OR for edit case if old cheque no. == coming chequenumber
                        chequehm.put("isAutoGeneratedChequeNumber", true);
                    }

                    chequehm.put("bankAccount", (payMethod.getAccount() != null) ? payMethod.getAccount().getID() : "");
                    chequehm.put("description", StringUtil.DecodeText(obj.optString("description")));
                    chequehm.put("bankname", StringUtil.DecodeText(obj.optString("bankname")));
                    chequehm.put("duedate", df.parse(obj.getString("payDate")));
                    KwlReturnObject cqresult = accPaymentDAOobj.addCheque(chequehm);
                    Cheque cheque = (Cheque) cqresult.getEntityList().get(0);
                    pdetailhm.put("chequeid", cheque.getID());
                } else if (payMethod.getDetailType() == PaymentMethod.TYPE_CARD) {
                    HashMap cardhm = new HashMap();
                    cardhm.put("cardno", obj.getString("cardno"));
                    cardhm.put("nameoncard", obj.getString("nameoncard"));
                    //cardhm.put("expirydate", obj.getString("expirydate"));
                    cardhm.put("expirydate", df.parse(obj.getString("expirydate")));
                    cardhm.put("cardtype", obj.getString("cardtype"));
                    cardhm.put("refno", obj.getString("refno"));
                    KwlReturnObject cdresult = accPaymentDAOobj.addCard(cardhm);
                    Card card = (Card) cdresult.getEntityList().get(0);
                    pdetailhm.put("cardid", card.getID());
                }
            }
            KwlReturnObject pdresult = null;
            if (!StringUtil.isNullOrEmpty(receiptid) && !StringUtil.isNullOrEmpty(payDetailID)) {
                pdetailhm.put("paydetailid", payDetailID);
            }
            pdresult = accPaymentDAOobj.addPayDetail(pdetailhm);

            PayDetail pdetail = (PayDetail) pdresult.getEntityList().get(0);
            paymenthm.put("paydetailsid", pdetail.getID());
            paymenthm.put("memo", request.getParameter("memo"));
            paymenthm.put("companyid", companyid);

            if (StringUtil.isNullOrEmpty(oldjeid) && !editAdvance) {
                synchronized (this) {
                    HashMap<String, Object> JEFormatParams = new HashMap<String, Object>();
                    JEFormatParams.put("moduleid", Constants.Acc_GENERAL_LEDGER_ModuleId);
                    JEFormatParams.put("modulename", "autojournalentry");
                    JEFormatParams.put("companyid", companyid);
                    JEFormatParams.put("isdefaultFormat", true);

                    KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(JEFormatParams);
                    SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
                    Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                    seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_JOURNALENTRY, format.getID(), false, creationDate);
                    jeentryNumber = (String)seqNumberMap.get(Constants.AUTO_ENTRYNUMBER);  //next auto generated number
                    jeIntegerPart = (String)seqNumberMap.get(Constants.SEQNUMBER);//integer Part
                    jeDatePrefix = (String)seqNumberMap.get(Constants.DATEPREFIX);//Date Prefix Part
                    jeDateAfterPrefix = (String)seqNumberMap.get(Constants.DATEAFTERPREFIX);  //Date After Prefix Part
                    jeDateSuffix = (String)seqNumberMap.get(Constants.DATESUFFIX);//Date Suffix Part
                    jeSeqFormatId = format.getID();
                    jeautogenflag = true;
                }
            }
            Map<String, Object> jeDataMap = AccountingManager.getGlobalParams(request);
            jeDataMap.put("entrynumber", jeentryNumber);
            jeDataMap.put("autogenerated", jeautogenflag);
            jeDataMap.put(Constants.SEQFORMAT, jeSeqFormatId);
            jeDataMap.put(Constants.SEQNUMBER, jeIntegerPart);
            jeDataMap.put(Constants.DATEPREFIX, jeDatePrefix);
            jeDataMap.put(Constants.DATEAFTERPREFIX, jeDateAfterPrefix);
            jeDataMap.put(Constants.DATESUFFIX, jeDateSuffix);
            jeDataMap.put("entrydate", creationDate);
            jeDataMap.put("companyid", company.getCompanyID());
            jeDataMap.put("memo", request.getParameter("memo"));
            jeDataMap.put("currencyid", currencyid);
            Set jedetails = new HashSet();
            KwlReturnObject jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Create Journal entry without JEdetails
            JournalEntry journalEntry = (JournalEntry) jeresult.getEntityList().get(0);
            jeid = journalEntry.getID();
            jeDataMap.put("jeid", jeid);
            String detail = request.getParameter("detail");
            JSONArray jArr = new JSONArray();
            if (!StringUtil.isNullOrEmpty(detail)) {
                jArr = new JSONArray(detail);
            }
            if (jArr.length() > 0 && !isMultiDebit) {
                amount = 0;

                for (int i = 0; i < jArr.length(); i++) { // Changed for New Customer/Vendor Removed account dependency
                    JSONObject jobj = jArr.getJSONObject(i);
                    JSONArray jArray = new JSONArray();
                    jArray.put(jobj);
                    double amountDiffforInv = oldPaymentRowsAmount(request, jArray, currencyid, externalCurrencyRate);
                    rateDecreased = false;
                    if (amountDiffforInv < 0) {
                        rateDecreased = true;
                    }
                    amount += jobj.getDouble("payment");
                    JSONObject jedjson = new JSONObject();
                    jedjson.put("srno", jedetails.size() + 1);
                    jedjson.put("companyid", companyid);
//                    jedjson.put("amount", rateDecreased?(jobj.getDouble("payment") - amountDiffforInv):(jobj.getDouble("payment") + amountDiffforInv));
                    jedjson.put("amount", jobj.getDouble("payment") - amountDiffforInv);
                    jedjson.put("accountid", jobj.get("accountid"));
                    jedjson.put("debit", true);
                    jedjson.put("jeid", jeid);
                    KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                    JournalEntryDetail jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                    jedetails.add(jed);
                    if ((!jobj.getString("billno").equalsIgnoreCase("undefined")) && (!jobj.getString("billno").equalsIgnoreCase(""))) {
                        billno.append(jobj.getString("billno") + ",");
                    }
                    jArr.getJSONObject(i).put("rowjedid", jed.getID());

                    if (!StringUtil.isNullOrEmpty(jobj.optString("customfield", ""))) {
                        JSONArray jcustomarray = new JSONArray(jobj.optString("customfield", "[]"));
                        Map1.put(jed.getID(), jcustomarray);
                    }
                }
                amountDiff = oldPaymentRowsAmount(request, jArr, currencyid, externalCurrencyRate);
                if (preferences.getForeignexchange() == null) {
                    throw new AccountingException(messageSource.getMessage("acc.common.forex", null, RequestContextUtils.getLocale(request)));
                }
                if (amountDiff != 0 && preferences.getForeignexchange() != null && Math.abs(amountDiff) >= 0.000001) {//Math.abs(amountDiff) < .0000001 Added this because in case of revaluation the diff in the rates was less than .0000001 and the amount calculation was going in Exachange rate account. 
                    rateDecreased = false;
                    if (amountDiff < 0) {
                        rateDecreased = true;
                    }
                    JSONObject jedjson = new JSONObject();
                    jedjson.put("srno", jedetails.size() + 1);
                    jedjson.put("companyid", companyid);
                    jedjson.put("amount", rateDecreased ? (-1 * amountDiff) : amountDiff);
                    jedjson.put("accountid", preferences.getForeignexchange().getID());
                    jedjson.put("debit", rateDecreased ? false : true);
                    jedjson.put("jeid", jeid);
                    KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                    JournalEntryDetail jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                    jedetails.add(jed);
                }

            } else {
                amount = Double.parseDouble(request.getParameter("amount"));
            }
            JSONObject jedjson = null;
            KwlReturnObject jedresult = null;
            JournalEntryDetail jed = null;
            JournalEntryDetail JEdeatilId = null;
            boolean otherwiseFlag = false;
            boolean taxExist = false;
            List payentOtherwiseList = new ArrayList();
            HashMap paymentdetailotherwise = new HashMap();
            if (isMultiDebit) {
                JSONArray drAccArr = new JSONArray(drAccDetails);
                for (int i = 0; i < drAccArr.length(); i++) {
                    JSONObject jobj = drAccArr.getJSONObject(i);
                    boolean isdebit = jobj.has("isdebit") ? Boolean.parseBoolean(jobj.getString("isdebit")) : true;
                    jedjson = new JSONObject();
                    jedjson.put("srno", jedetails.size() + 1);
                    jedjson.put("companyid", companyid);
                    jedjson.put("amount", Double.parseDouble(jobj.getString("dramount")));
                    jedjson.put("accountid", jobj.getString("accountid"));
                    jedjson.put("debit", isdebit);//true);
                    jedjson.put("jeid", jeid);
                    jedjson.put("description", jobj.optString("description"));
                    jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                    JEdeatilId = (JournalEntryDetail) jedresult.getEntityList().get(0);
                    jedetails.add(JEdeatilId);
                    if ((!jobj.getString("billno").equalsIgnoreCase("undefined")) && (!jobj.getString("billno").equalsIgnoreCase(""))) {
                        billno.append(jobj.getString("billno") + ",");
                    }
                    double rowtaxamount = 0;
                    //taxExist=StringUtil.isNullOrEmpty(rowtaxid)?false:true;
                    if (receiptType == 2 || (!isVendorPaymentEdit && receiptType == 9) || (isVendorPaymentEdit && (receiptType == 1 || receiptType == 9) && (actualReceiptType == 9 || actualReceiptType == 2))) {
                        PaymentDetailOtherwise paymentDetailOtherwise = null;
                        String rowtaxid = jobj.getString("prtaxid");
                        KwlReturnObject txresult = accountingHandlerDAOobj.getObject(Tax.class.getName(), rowtaxid); // (Tax)session.get(Tax.class, taxid);
                        Tax rowtax = (Tax) txresult.getEntityList().get(0);
                        if (rowtax == null || rowtaxid.equalsIgnoreCase("-1")) {
                            paymentdetailotherwise.put("amount", Double.parseDouble(jobj.getString("dramount")));
                            paymentdetailotherwise.put("taxjedid", "");
                            paymentdetailotherwise.put("tax", rowtaxid.equalsIgnoreCase("-1") ? "None" : "");
                            paymentdetailotherwise.put("accountid", jobj.getString("accountid"));
                            paymentdetailotherwise.put("isdebit", isdebit);
                            paymentdetailotherwise.put("taxamount", rowtaxamount);
                            paymentdetailotherwise.put("description", jobj.optString("description"));
                            result = accVendorPaymentobj.savePaymentDetailOtherwise(paymentdetailotherwise);
                            paymentdetailotherwise.clear();
                            paymentDetailOtherwise = (PaymentDetailOtherwise) result.getEntityList().get(0);
                            payentOtherwiseList.add(paymentDetailOtherwise.getID());
                        } else {
                            rowtaxamount = Double.parseDouble(jobj.getString("taxamount"));
                            jedjson = new JSONObject();
                            jedjson.put("srno", jedetails.size() + 1);
                            jedjson.put("companyid", company.getCompanyID());
                            jedjson.put("amount", authHandler.formattedAmount(rowtaxamount, companyid));
                            jedjson.put("accountid", rowtax.getAccount().getID());
                            jedjson.put("debit", isdebit);//true);
                            jedjson.put("jeid", jeid);
                            jedjson.put("description", jobj.optString("description"));
                            jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                            jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                            jedetails.add(jed);

                            paymentdetailotherwise.put("amount", Double.parseDouble(jobj.getString("dramount")));
                            paymentdetailotherwise.put("taxjedid", jed.getID());
                            paymentdetailotherwise.put("tax", rowtax.getID());
                            paymentdetailotherwise.put("accountid", jobj.getString("accountid"));
                            paymentdetailotherwise.put("isdebit", isdebit);
                            paymentdetailotherwise.put("taxamount", rowtaxamount);
                            paymentdetailotherwise.put("description", jobj.optString("description"));
                            result = accVendorPaymentobj.savePaymentDetailOtherwise(paymentdetailotherwise);
                            paymentdetailotherwise.clear();
                            paymentDetailOtherwise = (PaymentDetailOtherwise) result.getEntityList().get(0);
                            payentOtherwiseList.add(paymentDetailOtherwise.getID());
                            HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                            if (!StringUtil.isNullOrEmpty(jobj.optString("customfield", ""))) {
                                JSONArray jcustomarray = new JSONArray(jobj.optString("customfield", "[]"));
                                customrequestParams.put("customarray", jcustomarray);
                                customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
                                customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);// Constants.Acc_JEDetail_recdetailId
                                customrequestParams.put("modulerecid", jed.getID());
                                customrequestParams.put("recdetailId", paymentDetailOtherwise.getID());
                                customrequestParams.put("moduleid", Constants.Acc_Make_Payment_ModuleId);
                                customrequestParams.put("companyid", companyid);
                                customrequestParams.put("customdataclasspath", Constants.Acc_BillInvDetail_custom_data_classpath);
                                KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                                if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                                    JSONObject tempJobj = new JSONObject();
                                    tempJobj.put("accjedetailcustomdata", jed.getID());
                                    tempJobj.put("jedid", jed.getID());
                                    jedresult = accJournalEntryobj.updateJournalEntryDetails(tempJobj);

                                }
                            }

                        }

                        HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                        if (!StringUtil.isNullOrEmpty(jobj.optString("customfield", ""))) {
                            JSONArray jcustomarray = new JSONArray(jobj.optString("customfield", "[]"));
                            customrequestParams.put("customarray", jcustomarray);
                            customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
                            customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);// Constants.Acc_JEDetail_recdetailId
                            customrequestParams.put("modulerecid", JEdeatilId.getID());
                            customrequestParams.put("recdetailId", paymentDetailOtherwise.getID());
                            customrequestParams.put("moduleid", Constants.Acc_Make_Payment_ModuleId);
                            customrequestParams.put("companyid", companyid);
                            customrequestParams.put("customdataclasspath", Constants.Acc_BillInvDetail_custom_data_classpath);
                            KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                            if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                                JSONObject tempJobj = new JSONObject();
                                tempJobj.put("accjedetailcustomdata", JEdeatilId.getID());
                                tempJobj.put("jedid", JEdeatilId.getID());
                                jedresult = accJournalEntryobj.updateJournalEntryDetails(tempJobj);

                            }
                        }

                    }

                }

            }

            if (bankCharges != 0) {
                if (!isAdvancePayment || (isAdvancePayment && onlyAdvance)) {
                    amount += bankCharges;
                    jedjson = new JSONObject();
                    jedjson.put("srno", jedetails.size() + 1);
                    jedjson.put("companyid", companyid);
                    //(If currency USD and base currency SGD, inv rate 0.81 n pay rate 0.80 then amount = 1234.57, amountDiff = -15.24, depositAmt = 1250 SGD)
                    jedjson.put("amount", bankCharges);
                    jedjson.put("accountid", bankChargesAccid);
                    jedjson.put("debit", true);
                    jedjson.put("jeid", jeid);
                    jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                    jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                    jedetails.add(jed);
                }
            }

            if (bankInterest != 0) {
                if (!isAdvancePayment || (isAdvancePayment && onlyAdvance)) {
                    amount += bankInterest;
                    jedjson = new JSONObject();
                    jedjson.put("srno", jedetails.size() + 1);
                    jedjson.put("companyid", companyid);
                    //(If currency USD and base currency SGD, inv rate 0.81 n pay rate 0.80 then amount = 1234.57, amountDiff = -15.24, depositAmt = 1250 SGD)
                    jedjson.put("amount", bankInterest);
                    jedjson.put("accountid", bankInterestAccid);
                    jedjson.put("debit", true);
                    jedjson.put("jeid", jeid);
                    jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                    jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                    jedetails.add(jed);
                }
            }

            if (amount != 0) {
                jedjson = new JSONObject();
                jedjson.put("srno", jedetails.size() + 1);
                jedjson.put("companyid", companyid);
                //(If currency USD and base currency SGD, inv rate 0.81 n pay rate 0.80 then amount = 1234.57, amountDiff = -15.24, depositAmt = 1250 SGD)
                jedjson.put("amount", amount);
                jedjson.put("accountid", dipositTo.getID());
                jedjson.put("debit", false);
                jedjson.put("jeid", jeid);
                jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);

                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                jedetails.add(jed);

                paymenthm.put("deposittojedetailid", jed.getID());
                paymenthm.put("depositamount", amount);
            }
            jeDataMap.put("jedetails", jedetails);
            jeDataMap.put("externalCurrencyRate", externalCurrencyRate);
            jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Add Journal entry details
            journalEntry = (JournalEntry) jeresult.getEntityList().get(0);
            paymenthm.put("journalentryid", journalEntry.getID());
            paymenthm.put("createdby", createdby);
            paymenthm.put("modifiedby", modifiedby);
            paymenthm.put("createdon", createdon);
            paymenthm.put("updatedon", updatedon);
            if (payment != null) {
                paymenthm.put("paymentid", payment.getID());
            }

            result = accVendorPaymentobj.savePayment(paymenthm);
            payment = (Payment) result.getEntityList().get(0);
            if (receiptType == 2 || (isVendorPaymentEdit && receiptType == 1 || receiptType == 9)) {//otherwise case and GL Code Case 
                for (int i = 0; i < payentOtherwiseList.size(); i++) {
                    paymentdetailotherwise.put("payment", payment.getID());
                    paymentdetailotherwise.put("paymentotherwise", payentOtherwiseList.get(i));
                    result = accVendorPaymentobj.savePaymentDetailOtherwise(paymentdetailotherwise);
                    paymentdetailotherwise.clear();
                }
            }

            if (!StringUtil.isNullOrEmpty(customfield)) {
                JSONArray jcustomarray = new JSONArray(customfield);
                HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                customrequestParams.put("customarray", jcustomarray);
                customrequestParams.put("modulename", Constants.Acc_JE_modulename);
                customrequestParams.put("moduleprimarykey", Constants.Acc_JEid);
                customrequestParams.put("modulerecid", journalEntry.getID());
                customrequestParams.put("moduleid", Constants.Acc_Make_Payment_ModuleId);
                customrequestParams.put("companyid", companyid);
                customrequestParams.put("customdataclasspath", Constants.Acc_BillInv_custom_data_classpath);
                KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                    jeDataMap.put("accjecustomdataref", journalEntry.getID());
                    jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);
                }
            }

            //Save Payment Details

            HashSet payDetails = savePaymentRows(payment, company, jArr, isMultiDebit, invoice);
            paymenthm.put("paymentid", payment.getID());
            paymenthm.put("pdetails", payDetails);

            result = accVendorPaymentobj.savePayment(paymenthm);
            Iterator itr1 = payment.getRows().iterator();
            while (itr1.hasNext()) {
                PaymentDetail payd = (PaymentDetail) itr1.next();

                JSONArray jcustomarray = Map1.get(payd.getROWJEDID());
                HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                customrequestParams.put("customarray", jcustomarray);
                customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
                customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);// Constants.Acc_JEDetail_recdetailId
                customrequestParams.put("modulerecid", payd.getROWJEDID());
                customrequestParams.put("recdetailId", payd.getID());
                customrequestParams.put("moduleid", Constants.Acc_Make_Payment_ModuleId);
                customrequestParams.put("companyid", companyid);
                customrequestParams.put("customdataclasspath", Constants.Acc_BillInvDetail_custom_data_classpath);
                KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                    JSONObject tempJobj = new JSONObject();
                    tempJobj.put("accjedetailcustomdata", payd.getROWJEDID());
                    tempJobj.put("jedid", payd.getROWJEDID());
                    jedresult = accJournalEntryobj.updateJournalEntryDetails(tempJobj);

                }
            }
            payment = (Payment) result.getEntityList().get(0);
            if (bankReconsilationEntry) {
                bankReconsilationMap.put("clearingamount", amount);
                bankReconsilationMap.put("currencyid", currencyid);
                bankReconsilationMap.put("details", jArr);
                bankReconsilationMap.put("payment", payment);
                bankReconsilationMap.put("ismultidebit", isMultiDebit);
                if (!StringUtil.isNullOrEmpty(oldjeid)) {
                    bankReconsilationMap.put("oldjeid", oldjeid);
                }
                HashMap<String, Object> globalParams = AccountingManager.getGlobalParams(request);
                saveBankReconsilation(bankReconsilationMap, globalParams);
            }
            if (bankPayment && !bankReconsilationEntry && !StringUtil.isNullOrEmpty(oldjeid)) {
                bankReconsilationMap.put("oldjeid", oldjeid);
                bankReconsilationMap.put("companyId", companyid);
                deleteBankReconcilation(bankReconsilationMap);
            }

            if (isAdvancePayment && !StringUtil.isNullOrEmpty(request.getParameter("mainpaymentid"))) {//Link advance payments id with main payment id
                paymenthm.clear();
                paymenthm.put("paymentid", request.getParameter("mainpaymentid"));
                paymenthm.put("advanceid", payment.getID());
                paymenthm.put("advanceamount", request.getParameter("advanceamt") != null ? Double.parseDouble(request.getParameter("advanceamt")) : 0);
                result = accVendorPaymentobj.savePayment(paymenthm);
            }

            if (isCNDN) {
                String AccDetailsarrStr = request.getParameter("detailForCNDN");
                JSONArray drAccArr = new JSONArray(AccDetailsarrStr);
                if (!isAgainstDN) {
                    String paymentId = payment.getID();
                    KwlReturnObject cnhistoryresult = accVendorPaymentobj.getVendorCnPaymenyHistory("", 0.0, 0.0, paymentId);
                    List<CreditNotePaymentDetails> cnHistoryList = cnhistoryresult.getEntityList();
                    for (CreditNotePaymentDetails cnpd:cnHistoryList) {
                        String cnnoteid = cnpd.getCreditnote().getID()!=null?cnpd.getCreditnote().getID():"";
                        Double cnpaidamount = cnpd.getAmountPaid();
                        KwlReturnObject cnjedresult = accPaymentDAOobj.updateCnAmount(cnnoteid, -cnpaidamount);
                        KwlReturnObject opencnjedresult = accPaymentDAOobj.updateCnOpeningAmountDue(cnnoteid, -cnpaidamount);
                    }
                }

                for (int i = 0; i < drAccArr.length(); i++) {
                    JSONObject jobj = drAccArr.getJSONObject(i);
                    jedjson = new JSONObject();
                    double paidncamount = Double.parseDouble(jobj.getString("payment"));
                    double amountdue = Double.parseDouble(jobj.getString("amountdue"));
                    String cnnoteid = jobj.getString("noteid");
                    String paymentId = payment.getID();
                    if ((!jobj.getString("noteno").equalsIgnoreCase("undefined")) && (!jobj.getString("noteno").equalsIgnoreCase(""))) {
                        billno.append(jobj.getString("noteno") + ",");
                    }
                    person=" Against credit note ";
                    if (isAgainstDN) {
                        KwlReturnObject cnjedresult = accPaymentDAOobj.updateDnAmount(cnnoteid, paidncamount);
                        KwlReturnObject opencnjedresult = accPaymentDAOobj.updateDnOpeningAmountDue(cnnoteid, paidncamount);
                        cnjedresult = accVendorPaymentobj.saveVendorDnPaymenyHistory(cnnoteid, paidncamount, amountdue, paymentId);
                    } else {// make payment against vendor credit note and also customer credit note.
                        KwlReturnObject cnjedresult = accPaymentDAOobj.updateCnAmount(cnnoteid, paidncamount);
                        KwlReturnObject opencnjedresult = accPaymentDAOobj.updateCnOpeningAmountDue(cnnoteid, paidncamount);
                        cnjedresult = accVendorPaymentobj.saveVendorCnPaymenyHistory(cnnoteid, paidncamount, amountdue, paymentId);
                    }
                }
            }

            if (jArr.length() > 0 && !isMultiDebit) {
                double finalAmountReval = 0;
                String basecurrency = sessionHandlerImpl.getCurrencyID(request);
                for (int i = 0; i < jArr.length(); i++) {
                    JSONObject jobj = jArr.getJSONObject(i);
                    double ratio = 0;
                    double amountReval = 0;
                    double amountdue = jobj.getDouble("payment");
                    Date tranDate = null;
                    double exchangeRate = 0.0;
                    double exchangeRateReval = 0.0;
                    double exchangeratefortransaction = jobj.optDouble("exchangeratefortransaction", 1.00);
                    HashMap<String, Object> GlobalParams = new HashMap<String, Object>();
                    GlobalParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
                    GlobalParams.put("gcurrencyid", basecurrency);
                    GlobalParams.put("dateformat", authHandler.getDateOnlyFormat(request));
                    result = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), jobj.getString("billid"));
                    GoodsReceipt gr = (GoodsReceipt) result.getEntityList().get(0);
                    boolean isopeningBalanceInvoice = gr.isIsOpeningBalenceInvoice();
                    tranDate = gr.getCreationDate();
                    if (!gr.isNormalInvoice()) {
                        exchangeRate = gr.getExchangeRateForOpeningTransaction();
                        exchangeRateReval = exchangeRate;
                    } else {
                        exchangeRate = gr.getJournalEntry().getExternalCurrencyRate();
                        exchangeRateReval = exchangeRate;
//                        tranDate = gr.getJournalEntry().getEntryDate();
                    }

                    HashMap<String, Object> invoiceId = new HashMap<String, Object>();
                    invoiceId.put("invoiceid", gr.getID());
                    invoiceId.put("companyid", sessionHandlerImpl.getCompanyid(request));
                    invoiceId.put("isRealised", false);//false for geting only non realised invoice id.
                    //Checking the document entery in revalution history if any for current rate
                    result = accJournalEntryobj.getRevalInvoiceId(invoiceId);
                    RevaluationHistory revalueationHistory = (result.getEntityList().size()) != 0 ? (RevaluationHistory) result.getEntityList().get(0) : null;
                    if (revalueationHistory != null) {
                        exchangeRateReval = revalueationHistory.getEvalrate();
                    }

                    result = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), basecurrency);
                    currency = (KWLCurrency) result.getEntityList().get(0);
                    String currid = currency.getCurrencyID();
                    if (gr.getCurrency() != null) {
                        currid = gr.getCurrency().getCurrencyID();
                    }
                    //            double oldrate = CompanyHandler.getCurrencyToBaseAmount(session, request, 1.0, currid, gr.getJournalEntry().getEntryDate());
                    KwlReturnObject bAmt = null;
                    if (isopeningBalanceInvoice && gr.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(GlobalParams, 1.0, currid, tranDate, exchangeRate);
                    } else {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(GlobalParams, 1.0, currid, tranDate, exchangeRate);
                    }
                    double oldrate = (Double) bAmt.getEntityList().get(0);
                    //            double newrate = CompanyHandler.getCurrencyToBaseAmount(session, request, 1.0, currid, AuthHandler.getDateOnlyFormatter(request).parse(request.getParameter("creationdate")));
                    if (revalueationHistory == null && isopeningBalanceInvoice && gr.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(GlobalParams, 1.0, currid, creationDate, exchangeRateReval);
                    } else {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(GlobalParams, 1.0, currid, creationDate, exchangeRateReval);
                    }
                    double newrate = (Double) bAmt.getEntityList().get(0);
                    ratio = oldrate - newrate;
                    if (Math.abs(exchangeratefortransaction - newrate) <= 0.000001) {
                        exchangeratefortransaction = newrate;
                    }

                    double amountdueNew = amountdue / exchangeratefortransaction;
                    amountdueNew = Math.round(amountdueNew * 1000) / 1000d;
                    amountReval = ratio * amountdueNew;
                    finalAmountReval = finalAmountReval + amountReval;
                }
                if (finalAmountReval != 0) {
                    Map<String,Object> counterMap=new HashMap<>();
                    counterMap.put("counter", 0);
                    /**
                     * added transactionID and transactionModuleID to Realised
                     * JE.
                     */
                    counterMap.put("transactionModuleid", payment.isIsOpeningBalencePayment() ? Constants.Acc_opening_Payment : Constants.Acc_Make_Payment_ModuleId);
                    counterMap.put("transactionId", payment.getID());
                    String revaljeid = PostJEFORReevaluation(request, finalAmountReval, companyid, preferences, basecurrency,null,counterMap);
                    paymenthm.clear();
                    paymenthm.put("paymentid", payment.getID());
                    paymenthm.put("revalJeId", revaljeid);
                    result = accVendorPaymentobj.savePayment(paymenthm);

                }
            }

            //Insert new entries again in optimized table.
            accJournalEntryobj.saveAccountJEs_optimized(jeid);
            if (receiptType == 1) {
                person = " Against Vendor Invoice ";
            }
            list.add(payment);
            netinword = EnglishNumberToWordsOjb.convert(Double.parseDouble(String.valueOf(amount)), currency,countryLanguageId);
        } catch (UnsupportedEncodingException ex) {
            throw ServiceException.FAILURE(messageSource.getMessage("acc.common.excp", null, RequestContextUtils.getLocale(request)), ex);
        } catch (ParseException ex) {
            throw ServiceException.FAILURE("savePayment : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("savePayment : " + ex.getMessage(), ex);
        }
        KwlReturnObject accresult = accountingHandlerDAOobj.getObject(Account.class.getName(), request.getParameter("accid"));
        Account account = (Account) accresult.getEntityList().get(0);
        
        result = accVendorPaymentobj.getaccountdetailsPayment(accountid);
        if (result.getRecordTotalCount() > 0) {
            Vendor vendor = (Vendor) result.getEntityList().get(0);
            accountaddress = vendor.getAddress();
        }

        if (account != null) {
            accountName = account.getName();
        }

        KwlReturnObject accresultVen = accountingHandlerDAOobj.getObject(Vendor.class.getName(), request.getParameter("accid"));
        String vendorName = "";
        Vendor vendor = null;
        if (!accresultVen.getEntityList().isEmpty()) {
            vendor = (Vendor) accresultVen.getEntityList().get(0);

            if (vendor != null) {
                vendorName = vendor.getName();
            }
        }
        String customername = "";
        KwlReturnObject custObj = accountingHandlerDAOobj.getObject(Customer.class.getName(), request.getParameter("accid"));
        if (custObj.getEntityList().get(0) != null) {
            cust = (Customer) custObj.getEntityList().get(0);
            if (cust != null) {
                customername = cust.getName();
            }
        }

        String name = "";
        if (payment.getReceipttype() == 0 || payment.getReceipttype() == 1) {
            name = vendorName;
        } else if (payment.getReceipttype() == 6) {
            name = customername;
        } else if (payment.getReceipttype() == 7 || isCNDN) {
            name = payment.getVendor().getName();
        } else if (payment.getReceipttype() == 9) {
            if (payment.getPaidTo() != null) {
                name = payment.getPaidTo().getValue();

            }
        }
        String payee="";
        if(payment.getPaidTo()!=null){
            payee=payment.getPaidTo().getValue();
            payee=StringUtil.DecodeText(payee);
        }
        name=StringUtil.DecodeText(name);
        DecimalFormat df=new DecimalFormat("#,###,###,##0.00");
               
        String amt=df.format(amount);
        ll.add(new String[]{oldjeid, Cardid});
        ll.add(new String[]{"amount", amt});
        ll.add(new String[]{"amountinword", netinword});
        ll.add(new String[]{"accountName", name});
        ll.add(payment.getID());
        ll.add(payment.getPaymentNumber());
        ll.add(String.valueOf(payment.getAdvanceamount()));
        ll.add(accountaddress);
        ll.add(accountName);
        ll.add(payment.getJournalEntry().getEntryNumber());
        ll.add(payment.getReceipttype());
        String action = "made";
        boolean isEdit = StringUtil.isNullOrEmpty(request.getParameter("isEdit")) ? false : Boolean.parseBoolean(request.getParameter("isEdit"));
        boolean isCopy = StringUtil.isNullOrEmpty(request.getParameter("isCopyReceipt")) ? false : Boolean.parseBoolean(request.getParameter("isCopyReceipt"));
        if (isEdit == true && isCopy == false) {
            action = "updated";
        }
        if (billno.length() > 0) {
            billno.deleteCharAt(billno.length() - 1);
        }
        auditTrailObj.insertAuditLog("75", "User " + sessionHandlerImpl.getUserFullName(request) + " has " + action + " a Payment " + payment.getPaymentNumber() + person + billno, request, payment.getID());
        return (ArrayList) ll;
    }
    
    public void saveCNDNDetailObject(HttpServletRequest request, JSONArray jSONArrayAgainstCNDN, Payment payment, int type,Map<String,Object> counterMap) throws SessionExpiredException, ServiceException, AccountingException {
        try {
            boolean isAgainstDN = StringUtil.getBoolean(request.getParameter("isAgainstDN"));
            String methodid = request.getParameter("pmtmethod");
            sessionHandlerImpl.updatePaymentMethodID(request, methodid);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject companyResult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company)companyResult.getEntityList().get(0);
            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
            String person = "";
            StringBuffer billno = new StringBuffer();
            if (type == Constants.PaymentAgainstCNDN) {
                JSONArray drAccArr = jSONArrayAgainstCNDN;
                for (int i = 0; i < drAccArr.length(); i++) {
                    JSONObject jobj = drAccArr.getJSONObject(i);
                    double paidncamount = Double.parseDouble(jobj.getString("enteramount"));
                    double tdsamt = jobj.optDouble("tdsamount", 0.0);
                    double amountdue = Double.parseDouble(jobj.getString("amountdue"));
                    String cnnoteid = jobj.getString("documentid");
                    String paymentId = payment.getID();
                    int srNoForRow = StringUtil.isNullOrEmpty("srNoForRow") ? 0 : Integer.parseInt(jobj.getString("srNoForRow"));
                    if ((!jobj.getString("documentno").equalsIgnoreCase("undefined")) && (!jobj.getString("documentno").equalsIgnoreCase(""))) {
                        billno.append(jobj.getString("documentno") + ",");
                    }
                    KwlReturnObject cnResult = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), cnnoteid);
                    CreditNote creditNote = (CreditNote) cnResult.getEntityList().get(0);
                    String tocurrency = payment.getCurrency().getCurrencyID();
                    String fromcurrency = payment.getCurrency().getCurrencyID();
                    double exchangeratefortransaction = 1;
                    double amountinpaymentcurrency = amountdue;
                    double paidamountinpaymentcurrency = paidncamount;
                    if (!StringUtil.isNullOrEmpty(jobj.optString("exchangeratefortransaction", "").toString()) && !StringUtil.isNullOrEmpty(jobj.optString("currencyidtransaction", "")) && !jobj.optString("currencyidtransaction", "").equals(payment.getCurrency().getCurrencyID())) {
                        tocurrency = jobj.optString("currencyidtransaction", "");
                        fromcurrency = payment.getCurrency().getCurrencyID();
                        exchangeratefortransaction = Double.parseDouble(jobj.optString("exchangeratefortransaction", "1"));
                        amountdue = amountinpaymentcurrency / Double.parseDouble(jobj.get("exchangeratefortransaction").toString());
                        amountdue = authHandler.round(amountdue, companyid);
                        paidncamount = paidamountinpaymentcurrency / Double.parseDouble(jobj.get("exchangeratefortransaction").toString());
                        paidncamount = authHandler.round(paidncamount, companyid);
                    }
                    /*
                     * Amount paid against CN will be converted to base currency as per spot rate of CN 
                     */
                    double cnExternalCurrencyRate=0d;
                    Date cnCreationDate = null;
                    cnCreationDate = creditNote.getCreationDate();
                    if(creditNote.isIsOpeningBalenceCN()){
                        cnExternalCurrencyRate = creditNote.getExchangeRateForOpeningTransaction();
                    } else {
                        cnExternalCurrencyRate = creditNote.getJournalEntry().getExternalCurrencyRate();
//                        cnCreationDate = creditNote.getJournalEntry().getEntryDate();
                    }
                    if (creditNote.isIsOpeningBalenceCN()) {
                        if (creditNote.isConversionRateFromCurrencyToBase()) {
                            cnExternalCurrencyRate = 1 / cnExternalCurrencyRate;
                        }
                    }
                    double amountPaidAgainstCNInPaymentCurrency=Double.parseDouble(jobj.getString("enteramount"));;
                    double amountPaidAgainstCNInBaseCurrency=amountPaidAgainstCNInPaymentCurrency;                    
                    KwlReturnObject bAmt = null;
                    HashMap<String, Object> requestParams = new HashMap();
                    requestParams.put(Constants.companyid, companyid);
                    requestParams.put("gcurrencyid", company.getCurrency().getCurrencyID());
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, paidncamount, creditNote.getCurrency().getCurrencyID(), cnCreationDate, cnExternalCurrencyRate);
                    amountPaidAgainstCNInBaseCurrency= (Double)bAmt.getEntityList().get(0);
                    amountPaidAgainstCNInBaseCurrency=authHandler.round(amountPaidAgainstCNInBaseCurrency, companyid);
                    //Revalution Journal Entrey for Receipt to Customer for debit notes
                    ReevalJournalEntryCNDN(request, creditNote, preferences,exchangeratefortransaction, amountPaidAgainstCNInPaymentCurrency,counterMap);
                    
                    person = " Against credit note ";
                    if (isAgainstDN) {
                        KwlReturnObject cnjedresult = accPaymentDAOobj.updateDnAmount(cnnoteid, paidncamount);
                        KwlReturnObject opencnjedresult = accPaymentDAOobj.updateDnOpeningAmountDue(cnnoteid, paidncamount);
                        cnjedresult = accVendorPaymentobj.saveVendorDnPaymenyHistory(cnnoteid, paidncamount, amountdue, paymentId);
                    } else {// make payment against vendor credit note and also customer credit note.
                        KwlReturnObject cnjedresult=null;
                        if (payment.getApprovestatuslevel()==Constants.APPROVED_STATUS_LEVEL) {
                         cnjedresult = accPaymentDAOobj.updateCnAmount(cnnoteid, paidncamount);
                        }
                        KwlReturnObject opencnjedresult = accPaymentDAOobj.updateCnOpeningAmountDue(cnnoteid, paidncamount);
                        KwlReturnObject openingCnBaseAmtDueResult = accPaymentDAOobj.updateCnOpeningBaseAmountDue(cnnoteid, amountPaidAgainstCNInBaseCurrency);
                        HashMap<String, String> hashMapCnPayment = new HashMap<String, String>();
                        hashMapCnPayment.put("cnnoteid", cnnoteid);
                        hashMapCnPayment.put("paymentId", paymentId);
                        hashMapCnPayment.put("tdsamount", tdsamt + "");
                        hashMapCnPayment.put("originalamountdue", amountdue + "");
                        hashMapCnPayment.put("paidncamount", paidncamount + "");
                        hashMapCnPayment.put("tocurrency", tocurrency);
                        hashMapCnPayment.put("fromcurrency", fromcurrency);
                        hashMapCnPayment.put("exchangeratefortransaction", exchangeratefortransaction + "");
                        hashMapCnPayment.put("amountinpaymentcurrency", amountinpaymentcurrency + "");
                        hashMapCnPayment.put("paidamountinpaymentcurrency", paidamountinpaymentcurrency + "");
                        hashMapCnPayment.put("amountinbasecurrency", amountPaidAgainstCNInBaseCurrency+"");
                        hashMapCnPayment.put("description", jobj.optString("description"));
                        hashMapCnPayment.put("gstCurrencyRate", jobj.optString("gstCurrencyRate","0.0"));
                        hashMapCnPayment.put("srNoForRow", "" + srNoForRow);
                        if (jobj.has("jedetail") && jobj.get("jedetail") != null) {
                            hashMapCnPayment.put("jedetail", (String)jobj.get("jedetail"));
                        }else{
                            hashMapCnPayment.put("jedetail", "");
                        }
                            cnjedresult = accVendorPaymentobj.saveVendorCnPaymenyHistory(hashMapCnPayment);
                        
                        CreditNotePaymentDetails creditNotePaymentDetails=null;
                        List list=cnjedresult.getEntityList();
                        if(list!=null && !list.isEmpty()){
                            String uuid = (String) cnjedresult.getEntityList().get(0);
                            KwlReturnObject cnPaymentDetails = accountingHandlerDAOobj.getObject(CreditNotePaymentDetails.class.getName(), uuid);
                            creditNotePaymentDetails = (CreditNotePaymentDetails) cnPaymentDetails.getEntityList().get(0);
                        }
                        
                        KwlReturnObject kwlTDSDetails=null; 
                        if (jobj.has("appliedTDS") && !StringUtil.isNullOrEmpty(jobj.getString("appliedTDS"))) {   // TDS Applicable Flow Start in Credit Note
                            JSONArray jsonArray = new JSONArray(jobj.getString("appliedTDS"));
                            JSONObject tdsDetails = new JSONObject();
                            tdsDetails.put("appliedTDS", jsonArray);
                            tdsDetails.put("documenttype", jobj.getString("type"));
                            
                            HashMap<String, Object> tdsRequestParams = new HashMap();
                            tdsRequestParams.put("tdsDetailsJsonObj", tdsDetails);
                            tdsRequestParams.put("creditNotePaymentDetailsObj", creditNotePaymentDetails);
                            tdsRequestParams.put("companyObj", payment.getCompany());
                            kwlTDSDetails=accVendorPaymentobj.saveTDSdetailsRow(tdsRequestParams);
                        }
                    }
                    String rowJeId = rowJeId = jobj.optString("rowjedid");
                    KwlReturnObject returnObject = accVendorPaymentobj.getVendorCnPayment(paymentId, cnnoteid);
                    List<CreditNotePaymentDetails> list = returnObject.getEntityList();
                    for (CreditNotePaymentDetails cnpd : list) {
                        String id = cnpd.getID();
                        HashMap<String, JSONArray> jcustomarrayMap = payment.getJcustomarrayMap();
                        JSONArray jcustomarray = jcustomarrayMap.get(rowJeId);
                        HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                        customrequestParams.put("customarray", jcustomarray);
                        customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
                        customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);// Constants.Acc_JEDetail_recdetailId
                        customrequestParams.put("modulerecid", rowJeId);
                        customrequestParams.put("recdetailId", id);
                        customrequestParams.put("moduleid", Constants.Acc_Make_Payment_ModuleId);
                        customrequestParams.put("companyid", companyid);
                        customrequestParams.put("customdataclasspath", Constants.Acc_BillInvDetail_custom_data_classpath);
                        KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                        if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                            KwlReturnObject receiptAccJEDCustomData = accountingHandlerDAOobj.getObject(AccJEDetailCustomData.class.getName(), rowJeId);
                            AccJEDetailCustomData accJEDetailCustomData = (AccJEDetailCustomData) receiptAccJEDCustomData.getEntityList().get(0);
                            KwlReturnObject receiptJED = accountingHandlerDAOobj.getObject(JournalEntryDetail.class.getName(), rowJeId);
                            JournalEntryDetail journalEntryDetail = (JournalEntryDetail) receiptJED.getEntityList().get(0);
                            journalEntryDetail.setAccJEDetailCustomData(accJEDetailCustomData);
                        }
                    }
                }
            }
        } catch (Exception e) {
            throw ServiceException.FAILURE("savePayment : " + e.getMessage(), e);
        }
    }
    public JournalEntry journalEntryObject(HttpServletRequest request, Payment editPaymentObject) throws SessionExpiredException, ServiceException, AccountingException {
        JournalEntry journalEntry = null;
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            DateFormat df = authHandler.getDateOnlyFormat(request);
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            currencyid = (request.getParameter("currencyid") == null ? currency.getCurrencyID() : request.getParameter("currencyid"));
            String methodid = request.getParameter("pmtmethod");
            sessionHandlerImpl.updatePaymentMethodID(request, methodid);
            String createdby = sessionHandlerImpl.getUserid(request);
            String jeid = null;
            String jeentryNumber = null;
            boolean jeautogenflag = false;
            String jeIntegerPart = "";
            String jeSeqFormatId = "";
            double externalCurrencyRate = StringUtil.getDouble(request.getParameter("externalcurrencyrate"));
            double PaymentCurrencyToPaymentMethodCurrencyRate = StringUtil.getDouble(request.getParameter("paymentCurrencyToPaymentMethodCurrencyExchangeRate"));
            boolean ismulticurrencypaymentje= StringUtil.getBoolean(request.getParameter("ismulticurrencypaymentje"));
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            Map<String, Object> jeDataMap = AccountingManager.getGlobalParams(request);

            Date entryDate = df.parse(request.getParameter("creationdate"));
            if (editPaymentObject == null) {
                synchronized (this) {
                    HashMap<String, Object> JEFormatParams = new HashMap<String, Object>();
                    JEFormatParams.put("moduleid", Constants.Acc_GENERAL_LEDGER_ModuleId);
                    JEFormatParams.put("modulename", "autojournalentry");
                    JEFormatParams.put("companyid", companyid);
                    JEFormatParams.put("isdefaultFormat", true);

                    KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(JEFormatParams);
                    SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
                    Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                    seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_JOURNALENTRY, format.getID(), false, entryDate);
                    jeentryNumber = (String)seqNumberMap.get(Constants.AUTO_ENTRYNUMBER);  //next auto generated number
                    jeIntegerPart = (String)seqNumberMap.get(Constants.SEQNUMBER);//integer Part
                    jeSeqFormatId = format.getID();
                    jeautogenflag = true;

                    jeDataMap.put("entrynumber", "");
                    jeDataMap.put("autogenerated", jeautogenflag);
                    jeDataMap.put(Constants.SEQFORMAT, jeSeqFormatId);
//                    jeDataMap.put(Constants.SEQNUMBER, jeIntegerPart);
                }
            } else if (editPaymentObject != null && editPaymentObject.getJournalEntry() != null) {
                JournalEntry entry = editPaymentObject.getJournalEntry();
                jeid = editPaymentObject.getJournalEntry().getID();
//                jeDataMap.put("jeid", jeid);
                jeDataMap.put("entrynumber", entry.getEntryNumber());
                jeDataMap.put("autogenerated", entry.isAutoGenerated());
                jeDataMap.put(Constants.SEQFORMAT, entry.getSeqformat().getID());
                jeDataMap.put(Constants.SEQNUMBER, entry.getSeqnumber());
                jeDataMap.put(Constants.DATEPREFIX, entry.getDatePreffixValue());
                jeDataMap.put(Constants.DATEAFTERPREFIX, entry.getDateAfterPreffixValue());
                jeDataMap.put(Constants.DATESUFFIX, entry.getDateSuffixValue());
            }
            jeDataMap.put("PaymentCurrencyToPaymentMethodCurrencyRate", PaymentCurrencyToPaymentMethodCurrencyRate);
            jeDataMap.put("entrydate", entryDate);
            jeDataMap.put("companyid", company.getCompanyID());
            jeDataMap.put("memo", request.getParameter("memo"));
            jeDataMap.put("currencyid", currencyid);
            jeDataMap.put("externalCurrencyRate", externalCurrencyRate);
            jeDataMap.put("ismulticurrencypaymentje", ismulticurrencypaymentje);
            jeDataMap.put("createdby", createdby);
            journalEntry = accJournalEntryobj.getJournalEntry(jeDataMap);

        } catch (Exception e) {
            throw ServiceException.FAILURE("savePayment : " + e.getMessage(), e);
        }
        return journalEntry;
    }
    
    public JournalEntry journalEntryObjectBankCharges(HttpServletRequest request, Payment editPaymentObject,int counter,boolean isBankCharge,boolean paymentWithoutJe,JournalEntry oldBankChargeJE,JournalEntry oldBankInterestJE) throws SessionExpiredException, ServiceException, AccountingException {
        JournalEntry journalEntry = null;
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            DateFormat df = authHandler.getDateOnlyFormat(request);
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            currencyid = (request.getParameter("currencyid") == null ? currency.getCurrencyID() : request.getParameter("currencyid"));
            String methodid = request.getParameter("pmtmethod");
            sessionHandlerImpl.updatePaymentMethodID(request, methodid);
            String jeid = null;
            String jeentryNumber = null;
            boolean jeautogenflag = false;
            String jeIntegerPart = "";
            String jeSeqFormatId = "";
             double externalCurrencyRate = StringUtil.getDouble(request.getParameter("externalcurrencyrate"));
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            Map<String, Object> jeDataMap = AccountingManager.getGlobalParams(request);
            if (paymentWithoutJe) {
                counter--;
            }
            if (editPaymentObject == null || paymentWithoutJe) {
//                synchronized (this) {
//                    HashMap<String, Object> JEFormatParams = new HashMap<String, Object>();
//                    JEFormatParams.put("moduleid", Constants.Acc_GENERAL_LEDGER_ModuleId);
//                    JEFormatParams.put("modulename", "autojournalentry");
//                    JEFormatParams.put("companyid", companyid);
//                    JEFormatParams.put("isdefaultFormat", true);
//
//                    KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(JEFormatParams);
//                    SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
//                    String[] nextAutoNoTemp = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_JOURNALENTRY, format.getID(), false);
//                    int sequence = Integer.parseInt(nextAutoNoTemp[1]);
//                    sequence = sequence + counter;
//                    String number = "" + sequence;
//                    String action = "" + (sequence - counter);
//                    nextAutoNoTemp[0].replaceAll(action, number);
//                    jeentryNumber = nextAutoNoTemp[0].replaceAll(action, number);  //next auto generated number
////                    jeentryNumber = nextAutoNoTemp[0];
//                    jeIntegerPart = nextAutoNoTemp[1];
//                    jeSeqFormatId = format.getID();
//                    jeautogenflag = true;

                    jeDataMap.put("entrynumber", "");
                    jeDataMap.put("autogenerated", true);
//                    jeDataMap.put(Constants.SEQFORMAT, jeSeqFormatId);
//                    jeDataMap.put(Constants.SEQNUMBER, number);
//                }
            } else if (editPaymentObject != null && oldBankChargeJE != null && isBankCharge) {
                JournalEntry entry = oldBankChargeJE;
                jeDataMap.put("entrynumber", entry.getEntryNumber());
                jeDataMap.put("autogenerated", entry.isAutoGenerated());
                jeDataMap.put(Constants.SEQFORMAT, entry.getSeqformat().getID());
                jeDataMap.put(Constants.SEQNUMBER, entry.getSeqnumber());
                jeDataMap.put(Constants.DATEPREFIX, entry.getDatePreffixValue());
                jeDataMap.put(Constants.DATEAFTERPREFIX, entry.getDateAfterPreffixValue());
                jeDataMap.put(Constants.DATESUFFIX, entry.getDateSuffixValue());
            } else if (editPaymentObject != null && oldBankInterestJE != null && !isBankCharge) {
                JournalEntry entry = oldBankInterestJE;
                jeDataMap.put("entrynumber", entry.getEntryNumber());
                jeDataMap.put("autogenerated", entry.isAutoGenerated());
                jeDataMap.put(Constants.SEQFORMAT, entry.getSeqformat().getID());
                jeDataMap.put(Constants.SEQNUMBER, entry.getSeqnumber());
                jeDataMap.put(Constants.DATEPREFIX, entry.getDatePreffixValue());
                jeDataMap.put(Constants.DATEAFTERPREFIX, entry.getDateAfterPreffixValue());
                jeDataMap.put(Constants.DATESUFFIX, entry.getDateSuffixValue());
            }
            jeDataMap.put("entrydate", df.parse(request.getParameter("creationdate")));
            jeDataMap.put("companyid", company.getCompanyID());
            jeDataMap.put("memo", request.getParameter("memo"));
            jeDataMap.put("currencyid", currencyid);
            jeDataMap.put("externalCurrencyRate", externalCurrencyRate);
            journalEntry = accJournalEntryobj.getJournalEntry(jeDataMap);
        } catch (Exception e) {
            throw ServiceException.FAILURE("savePayment : " + e.getMessage(), e);
        }
        return journalEntry;
    }
    
    public HashSet paymentDetailObject(HttpServletRequest request, JSONArray jSONArrayAgainstInvoice, Payment editPaymentObject, int type) throws SessionExpiredException, ServiceException, AccountingException {
        HashSet payDetails = null;
        Invoice invoice = null;
        try {

            String companyid = sessionHandlerImpl.getCompanyid(request);
            boolean isMultiDebit = StringUtil.getBoolean(request.getParameter("ismultidebit"));
            String methodid = request.getParameter("pmtmethod");
            sessionHandlerImpl.updatePaymentMethodID(request, methodid);
            HashMap<String, JSONArray> Map1 = new HashMap();

            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            JSONArray jArr = new JSONArray();
            if (jSONArrayAgainstInvoice != null) {
                jArr = jSONArrayAgainstInvoice;
            }
            payDetails = savePaymentRows(request,editPaymentObject, company, jArr, isMultiDebit, invoice, type);
        } catch (Exception e) {
            throw ServiceException.FAILURE("savePayment : " + e.getMessage(), e);
        }
        return payDetails;
    }
    
    public HashSet<AdvanceDetail> advanceDetailObject(HttpServletRequest request, JSONArray jSONArrayAdvance, Payment payment, int type) throws SessionExpiredException, ServiceException, AccountingException {
        HashSet advanceDetails = null;
        try {
            advanceDetails= new HashSet<AdvanceDetail>();
            String companyid = sessionHandlerImpl.getCompanyid(request);
            Map<String,Object> counterMap = new HashMap<>();
            counterMap.put("counter", 0);//this is used to avoid JE Sequence Number
            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
            for (int i = 0; i < jSONArrayAdvance.length(); i++) {
                JSONObject jobj = jSONArrayAdvance.getJSONObject(i);
                double amountReceived = jobj.getDouble("enteramount");
                double tdsamt = jobj.optDouble("tdsamount",0.0);
//                KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
//                Company company = (Company) cmpresult.getEntityList().get(0);
                AdvanceDetail advanceDetail = new AdvanceDetail();
                advanceDetail.setId(StringUtil.generateUUID());
                advanceDetail.setCompany(payment.getCompany());
                advanceDetail.setPayment(payment);
                advanceDetail.setAmount(amountReceived);
                advanceDetail.setExchangeratefortransaction(1.0d);
                advanceDetail.setTdsamount(tdsamt);
                /*
                    If Make Payment against Customer and used advance receipt against it then need to maintain receipt object for reference 
                */
                if(!StringUtil.isNullOrEmpty(jobj.optString("documentid",""))) {
                    KwlReturnObject result = accountingHandlerDAOobj.getObject(ReceiptAdvanceDetail.class.getName(), jobj.getString("documentid"));
                    ReceiptAdvanceDetail receiptadvancedetail = (ReceiptAdvanceDetail) result.getEntityList().get(0);
                    advanceDetail.setReceiptAdvanceDetails(receiptadvancedetail);
                    double amountReceivedConverted = jobj.getDouble("enteramount");
                    if (!StringUtil.isNullOrEmpty(jobj.optString("exchangeratefortransaction", "").toString()) && !StringUtil.isNullOrEmpty(receiptadvancedetail.getReceipt().getCurrency().getCurrencyID()) && !receiptadvancedetail.getReceipt().getCurrency().getCurrencyID().equals(payment.getCurrency().getCurrencyID())) {
                        double adjustedRate=Double.parseDouble(jobj.optString("exchangeratefortransaction", "1.0").toString());//jobj.optDouble("amountdue",0)/jobj.optDouble("amountDueOriginal",0);
    //                    amountReceivedConverted = amountReceived / Double.parseDouble(jobj.get("exchangeratefortransaction").toString());
                        amountReceivedConverted = amountReceived / adjustedRate;
                        amountReceivedConverted = authHandler.round(amountReceivedConverted, companyid);
                        advanceDetail.setExchangeratefortransaction(adjustedRate);
                    }
                    //JE For Receipt which is of Opening Type
                        if (receiptadvancedetail != null) {
                            double exchangeratefortransaction = Double.parseDouble(jobj.optString("exchangeratefortransaction", "1"));
                            String basecurrency = sessionHandlerImpl.getCurrencyID(request);
                            double finalAmountReval = ReevalJournalEntryForAdvanceReceipt(request, receiptadvancedetail.getReceipt(), amountReceived, exchangeratefortransaction);
                            if (finalAmountReval != 0) {
                                /**
                                 * added transactionID and transactionModuleID
                                 * to Realised JE.
                                 */
                                counterMap.put("transactionModuleid", receiptadvancedetail.getReceipt().isIsOpeningBalenceReceipt() ? Constants.Acc_opening_Receipt : Constants.Acc_Make_Payment_ModuleId);
                                counterMap.put("transactionId", receiptadvancedetail.getReceipt().getID());
                                String revaljeid = PostJEFORReevaluation(request,finalAmountReval, companyid, preferences, basecurrency, advanceDetail.getRevalJeId(),counterMap);
                                advanceDetail.setRevalJeId(revaljeid);
                            }
                        }                    
                    receiptadvancedetail.setAmountDue(receiptadvancedetail.getAmountDue()-amountReceivedConverted);
                }               
                
                /*
                 * Make Payment against vendor - amountdue is same as paid amount. User can link this advance amount aginst invoice
                 * Make Payment against customer - deposite/refund amount will no be used for other transactions. so need to set amountdue as 0
                 */
                if(payment.getVendor()!=null) {
                    advanceDetail.setAmountDue(amountReceived);
                } else if (payment.getCustomer() != null && advanceDetail.getReceiptAdvanceDetails() == null) { // set amount due to refund payment as entrered amount if no document is linked to refund payment while creating
                    advanceDetail.setAmountDue(amountReceived);
                } else if (payment.getCustomer() != null) {
                    advanceDetail.setAmountDue(0);
                } 
                if (jobj.has("jedetail") && jobj.get("jedetail") != null) {
                    KwlReturnObject resJED = accountingHandlerDAOobj.getObject(JournalEntryDetail.class.getName(), (String)jobj.get("jedetail"));
                    JournalEntryDetail jedObj = (JournalEntryDetail) resJED.getEntityList().get(0);
                    advanceDetail.setTotalJED(jedObj);
                }
                advanceDetails.add(advanceDetail);
                advanceDetail.setDescription(StringUtil.DecodeText(jobj.optString("description")));
                if (jobj.has("rowjedid")) {
                    advanceDetail.setROWJEDID(jobj.getString("rowjedid"));
                }
                if (jobj.has("srNoForRow")) {
                    int srNoForRow=StringUtil.isNullOrEmpty("srNoForRow")?0:Integer.parseInt(jobj.getString("srNoForRow"));
                    advanceDetail.setSrNoForRow(srNoForRow);
                }
                HashMap<String, JSONArray> jcustomarrayMap = payment.getJcustomarrayMap();
                JSONArray jcustomarray = jcustomarrayMap.get(advanceDetail.getROWJEDID());
                HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                customrequestParams.put("customarray", jcustomarray);
                customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
                customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);// Constants.Acc_JEDetail_recdetailId
                customrequestParams.put("modulerecid", advanceDetail.getROWJEDID());
                customrequestParams.put("recdetailId", advanceDetail.getId());
                customrequestParams.put("moduleid", Constants.Acc_Make_Payment_ModuleId);
                customrequestParams.put("companyid", companyid);
                customrequestParams.put("customdataclasspath", Constants.Acc_BillInvDetail_custom_data_classpath);
                KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                    KwlReturnObject receiptAccJEDCustomData = accountingHandlerDAOobj.getObject(AccJEDetailCustomData.class.getName(), advanceDetail.getROWJEDID());
                    AccJEDetailCustomData accJEDetailCustomData = (AccJEDetailCustomData) receiptAccJEDCustomData.getEntityList().get(0);
                    KwlReturnObject receiptJED = accountingHandlerDAOobj.getObject(JournalEntryDetail.class.getName(), advanceDetail.getROWJEDID());
                    JournalEntryDetail journalEntryDetail = (JournalEntryDetail) receiptJED.getEntityList().get(0);
                    journalEntryDetail.setAccJEDetailCustomData(accJEDetailCustomData);
                }    
                
                if (jobj.has("appliedTDS") && !StringUtil.isNullOrEmpty(jobj.getString("appliedTDS"))) {   // TDS Applicable Flow Start in Advance Details...
                    JSONArray jsonArray = new JSONArray(jobj.getString("appliedTDS"));
                    JSONObject tdsDetails = new JSONObject();
                    tdsDetails.put("appliedTDS", jsonArray);
                    tdsDetails.put("documenttype", jobj.getString("type"));
                    
                    HashMap<String, Object> tdsRequestParams = new HashMap();
                    tdsRequestParams.put("tdsDetailsJsonObj", tdsDetails);
                    tdsRequestParams.put("advanceDetailObj", advanceDetail);
                    tdsRequestParams.put("companyObj", payment.getCompany());
                    HashSet tdsdetails = saveTDSdetailsRow(tdsRequestParams);
                    if (!tdsdetails.isEmpty() || tdsdetails.size() > 0) {
                        advanceDetail.setTdsdetails(tdsdetails);
                    }
                }
            }
        } catch (Exception e) {
            throw ServiceException.FAILURE("savePayment : " + e.getMessage(), e);
        }
        return advanceDetails;
    }
    
    public Set<JournalEntryDetail> journalEntryDetailObject(HttpServletRequest request, JSONArray detailsJSONArray, JournalEntry journalEntry, Payment payment, int type) throws SessionExpiredException, ServiceException, AccountingException {
        double amount = 0;
        StringBuffer billno = new StringBuffer();
        Set jedetails = new HashSet();

        try {
            Account dipositTo = null;
            double amountDiff = 0;
            boolean rateDecreased = false;
            String companyid = sessionHandlerImpl.getCompanyid(request);
            /*
             * Spot Rate - externalCurrencyRate
             * Values -
             * 0 - If not entered
             */
            double externalCurrencyRate = StringUtil.getDouble(request.getParameter("externalcurrencyrate"));
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            String methodid = request.getParameter("pmtmethod");
            sessionHandlerImpl.updatePaymentMethodID(request, methodid);

            String jeid = null;
            if (journalEntry != null) {
                jeid = journalEntry.getID();
            }
            HashMap<String, JSONArray> jcustomarrayMap = new HashMap();
            payment.setJcustomarrayMap(jcustomarrayMap);
            double balaceAmount=0.0;
            String accountIdComPreAdjPay="";
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);

            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            currencyid = (request.getParameter("currencyid") == null ? currency.getCurrencyID() : request.getParameter("currencyid"));

            KwlReturnObject extracapresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracapresult.getEntityList().get(0);
            
            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);

            KwlReturnObject result = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), request.getParameter("pmtmethod"));
            PaymentMethod payMethod = (PaymentMethod) result.getEntityList().get(0);

            dipositTo = payMethod.getAccount();

            if(!StringUtil.isNullOrEmpty(request.getParameter("balaceAmount"))){
                balaceAmount=Double.parseDouble(request.getParameter("balaceAmount"));
            }
            if(!StringUtil.isNullOrEmpty(request.getParameter("accountIdComPreAdjPay"))){
                accountIdComPreAdjPay=request.getParameter("accountIdComPreAdjPay");
            }
            String accountId = "";
            /*
             * Check if Customer/Vendor and set PaymentWindow type accordingly
             */
            boolean isCustomer = Boolean.parseBoolean(request.getParameter("iscustomer"));
            if(!StringUtil.isNullOrEmpty(request.getParameter("accid"))){
                if (isCustomer) {
                    KwlReturnObject resultCVAccount = accountingHandlerDAOobj.getObject(Customer.class.getName(), request.getParameter("accid"));
                    if (!resultCVAccount.getEntityList().isEmpty()) {
                        Customer customer = (Customer) resultCVAccount.getEntityList().get(0);
                        accountId = customer.getAccount().getID();
                        payment.setPaymentWindowType(2);
                    }
                } else {
                    KwlReturnObject resultCVAccount = accountingHandlerDAOobj.getObject(Vendor.class.getName(), request.getParameter("accid"));
                    if (!resultCVAccount.getEntityList().isEmpty()) {
                        Vendor vendor = (Vendor) resultCVAccount.getEntityList().get(0);
                        accountId = vendor.getAccount().getID();
                        payment.setPaymentWindowType(1);
                    }
                }
            }else{
                 payment.setPaymentWindowType(3);
            }
            
            JSONArray jArr = new JSONArray();
            if (detailsJSONArray != null) {
                jArr = detailsJSONArray;
            }
            
            /*
            * Below block handled for 
            * 1. Against Invoice
            * 
            */
            if (jArr.length() > 0 && type == Constants.PaymentAgainstInvoice) {
                amount = 0;

                for (int i = 0; i < jArr.length(); i++) { // Changed for New Customer/Vendor Removed account dependency
                    JSONObject jobj = jArr.getJSONObject(i);
                    JSONArray jArray = new JSONArray();
                    jArray.put(jobj);
                    double amountReceived = jobj.getDouble("enteramount");// amount in receipt currency
                    double amountReceivedConverted = jobj.getDouble("enteramount"); // amount in invoice currency
                    /*
                     * 
                     * Calculate Forex Gain/Loss Amount Diff and Generate JE Details with amount = Total Enterted Amount - Forex Amount.
                     * 
                     */
                    KwlReturnObject resultGoodsReceipt = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), jobj.getString("documentid"));
                    GoodsReceipt goodsReceipt = (GoodsReceipt) resultGoodsReceipt.getEntityList().get(0);
                    double amountDiffforInv = authHandler.round(oldPaymentRowsAmount(request, jArray, currencyid, externalCurrencyRate), companyid);
                    double adjustedRate=1.0;
                    if (!StringUtil.isNullOrEmpty(jobj.optString("exchangeratefortransaction", "").toString()) && !StringUtil.isNullOrEmpty(goodsReceipt.getCurrency().getCurrencyID()) && !goodsReceipt.getCurrency().getCurrencyID().equals(payment.getCurrency().getCurrencyID())) {
                        adjustedRate = jobj.optDouble("amountdue", 0) / jobj.optDouble("amountDueOriginal", 0);
                        amountReceivedConverted = amountReceived / adjustedRate;;
                        amountReceivedConverted = authHandler.round(amountReceivedConverted, companyid);
                    }
                    boolean isInvoiceIsClaimed = false;
                    isInvoiceIsClaimed = goodsReceipt.getBadDebtType() == Constants.Invoice_Claimed || goodsReceipt.getBadDebtType() == Constants.Invoice_Recovered;
//                    boolean rateDecreasedReeval = false;
//                    double finalAmountReval=getReevalJournalEntryAmount(request, jArray, payment, type);
//                    if (finalAmountReval < 0) {
//                        rateDecreasedReeval = true;
//                    }
                    double enterAmount=authHandler.round(jobj.getDouble("enteramount"), companyid);
                    amount += authHandler.round(jobj.getDouble("enteramount"), companyid);
                    boolean isTDSApplied = extraCompanyPreferences.isTDSapplicable();
                    if (isTDSApplied && !StringUtil.isNullOrEmpty(jobj.get("appliedTDS").toString())) {
                        JSONArray jedTdsJsonArray = jobj.has("appliedTDS") &&  !jobj.get("appliedTDS").equals("") ?(JSONArray)jobj.getJSONArray("appliedTDS") : new JSONArray();
                        if (jedTdsJsonArray.length() > 0) {
                            for (int iTds = 0; iTds < jedTdsJsonArray.length(); iTds++) {
                                JSONObject jedTdsJson = jedTdsJsonArray.getJSONObject(iTds);
                                if (jedTdsJson.has("tdsaccountid") && !StringUtil.isNullOrEmpty(jedTdsJson.getString("tdsaccountid"))) {                                    
                                    JSONObject jedTds = new JSONObject();
                                    jedTds.put("srno", jedetails.size() + 1);
                                    jedTds.put("companyid", companyid);
                                    jedTds.put("amount", authHandler.round(jedTdsJson.getDouble("tdsamount"), companyid));
                                    jedTds.put("accountid", jedTdsJson.getString("tdsaccountid"));//Changed account Id                        
                                    jedTds.put("debit", false);
                                    jedTds.put("jeid", jeid);
                                    jedTds.put("description", "TDS Amount is Deducted");
                                    KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedTds);
                                    JournalEntryDetail jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                                    jedetails.add(jed);
                                    jedTdsJson.put("tdsjedid", jed.getID());
                                }
                            }
                        }
                    }
                    
                    if (!isInvoiceIsClaimed) {
                        JSONObject jedjson = new JSONObject();
                        jedjson.put("srno", jedetails.size() + 1);
                        jedjson.put("companyid", companyid);
//                    jedjson.put("amount", jobj.getDouble("enteramount") - (amountDiffforInv-(rateDecreasedReeval ? (-1 * (finalAmountReval)):finalAmountReval)));
                        jedjson.put("amount", authHandler.round((enterAmount - amountDiffforInv), companyid));
                        jedjson.put("accountid", goodsReceipt.getAccount() != null ? goodsReceipt.getAccount().getID() : accountId);//Changed account Id
                        if (jobj.optDouble("gstCurrencyRate", 0.0) != 0.0) {
                            jedjson.put("gstCurrencyRate", jobj.optDouble("gstCurrencyRate", 0.0));
                            journalEntry.setGstCurrencyRate(jobj.optDouble("gstCurrencyRate", 0.0));
                            jedjson.put("paymentType", type);
                        }
                        jedjson.put("forexGainLoss", amountDiffforInv);
                        jedjson.put("debit", true);
                        jedjson.put("jeid", jeid);
                        jedjson.put("description", jobj.optString("description"));
                        JournalEntryDetail jed = accJournalEntryobj.getJournalEntryDetails(jedjson);
                        jedetails.add(jed);
//                        accJournalEntryobj.saveJournalEntryDetailsSet(jedetails);
                        if ((!jobj.getString("documentno").equalsIgnoreCase("undefined")) && (!jobj.getString("documentno").equalsIgnoreCase(""))) {
                            billno.append(jobj.getString("documentno") + ",");
                        }
                        jArr.getJSONObject(i).put("rowjedid", jed.getID());

                        if (!StringUtil.isNullOrEmpty(jobj.optString("customfield", ""))) {
                            JSONArray jcustomarray = new JSONArray(jobj.optString("customfield", "[]"));
                            jcustomarrayMap.put(jed.getID(), jcustomarray);
                        }
                        jArr.getJSONObject(i).put("jedetail", jed.getID());
                    } else {
                        // Logic of posting JE for claimed invoices
                        String badDebtRecoveredAccountId = extraCompanyPreferences.getGstBadDebtsRecoverPurchaseAccount();
                        KwlReturnObject accObj = accountingHandlerDAOobj.getObject(Account.class.getName(), badDebtRecoveredAccountId);
                        Account account = (Account) accObj.getEntityList().get(0);
                        if (account == null) {
                            throw new AccountingException("GST Bad Debt Recover Account is not available in database");
                        }
                        double amountPaidForInvoice = jobj.getDouble("enteramount") - amountDiffforInv;
                        boolean isGlobalLevelTax = false;
                        boolean isOpeningBalanceInvoice= goodsReceipt.isIsOpeningBalenceInvoice();
                        if (isOpeningBalanceInvoice) {
                            isGlobalLevelTax = true;
                        } else {
                            if (goodsReceipt.getTaxEntry() != null && goodsReceipt.getTaxEntry().getAmount() > 0) {
                                isGlobalLevelTax = true;
                            }
                        }
                        
                        double taxAmountInInvoiceCurrency = 0d;
                        double taxAmountPaidInPaymentCurrency = 0d;
                        double taxAmountReceivedInInvoiceCurrency = 0d;
                        double totalTaxAmountReceivedInInvoiceCurrency = 0d;
                        double invoiceTotalAmountInInvoiceCurrency = isOpeningBalanceInvoice ? goodsReceipt.getOriginalOpeningBalanceAmount():authHandler.round(goodsReceipt.getVendorEntry().getAmount(), companyid);
                        double invoiceAmountExcludingTaxInPaymentCurrency = 0.0;
                        double invoiceAmountReceivedExcludingTaxInInvoiceCurrency = 0.0;
                        amountPaidForInvoice = authHandler.round(amountPaidForInvoice, companyid);
                        if (isGlobalLevelTax) {
                            Tax gloabLevelTax = goodsReceipt.getTax();
                            taxAmountInInvoiceCurrency = authHandler.round(isOpeningBalanceInvoice?goodsReceipt.getTaxamount():goodsReceipt.getTaxEntry().getAmount(), companyid);
                            taxAmountPaidInPaymentCurrency = (taxAmountInInvoiceCurrency * amountPaidForInvoice) / invoiceTotalAmountInInvoiceCurrency;
                            taxAmountPaidInPaymentCurrency = authHandler.round(taxAmountPaidInPaymentCurrency, companyid);
                            taxAmountReceivedInInvoiceCurrency = (taxAmountInInvoiceCurrency * amountReceivedConverted) / invoiceTotalAmountInInvoiceCurrency;
                            taxAmountReceivedInInvoiceCurrency = authHandler.round(taxAmountReceivedInInvoiceCurrency, companyid);
                            totalTaxAmountReceivedInInvoiceCurrency += taxAmountReceivedInInvoiceCurrency;
                            invoiceAmountExcludingTaxInPaymentCurrency = amountPaidForInvoice - taxAmountPaidInPaymentCurrency;

                            JSONObject jedjson = new JSONObject();
                            jedjson.put("srno", jedetails.size() + 1);
                            jedjson.put("companyid", companyid);
                            jedjson.put("accountid", badDebtRecoveredAccountId);
                            jedjson.put("amount", invoiceAmountExcludingTaxInPaymentCurrency);
                            jedjson.put("debit", true);
                            jedjson.put("jeid", jeid);
                            KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                            JournalEntryDetail jedForRecoverJe = (JournalEntryDetail) jedresult.getEntityList().get(0);
                            jedetails.add(jedForRecoverJe);

                            jedjson = new JSONObject();
                            jedjson.put("srno", jedetails.size() + 1);
                            jedjson.put("companyid", companyid);
                            jedjson.put("accountid", gloabLevelTax.getAccount().getID());
                            jedjson.put("amount", taxAmountPaidInPaymentCurrency);
                            jedjson.put("debit", true);
                            jedjson.put("jeid", jeid);
                            jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                            JournalEntryDetail jedForTax = (JournalEntryDetail) jedresult.getEntityList().get(0);
                            jedetails.add(jedForTax);

//                            accJournalEntryobj.saveJournalEntryDetailsSet(jedetails);

                            jArr.getJSONObject(i).put("rowjedid", jedForRecoverJe.getID());

                            if (!StringUtil.isNullOrEmpty(jobj.optString("customfield", ""))) {
                                JSONArray jcustomarray = new JSONArray(jobj.optString("customfield", "[]"));
                                jcustomarrayMap.put(jedForRecoverJe.getID(), jcustomarray);
                            }
                            jArr.getJSONObject(i).put("jedetail", jedForRecoverJe.getID());
                        } else {
                            JSONObject jedjson = new JSONObject();
                            invoiceAmountExcludingTaxInPaymentCurrency = amountPaidForInvoice;
                            for (GoodsReceiptDetail details : goodsReceipt.getRows()) {
                                taxAmountInInvoiceCurrency = details.getRowTaxAmount() + details.getRowTermTaxAmount();
                                taxAmountPaidInPaymentCurrency = (taxAmountInInvoiceCurrency * amountPaidForInvoice) / invoiceTotalAmountInInvoiceCurrency;
                                taxAmountPaidInPaymentCurrency = authHandler.round(taxAmountPaidInPaymentCurrency, companyid);
                                taxAmountReceivedInInvoiceCurrency = (taxAmountInInvoiceCurrency * amountReceivedConverted) / invoiceTotalAmountInInvoiceCurrency;
                                taxAmountReceivedInInvoiceCurrency = authHandler.round(taxAmountReceivedInInvoiceCurrency, companyid);
                                totalTaxAmountReceivedInInvoiceCurrency += taxAmountReceivedInInvoiceCurrency;
                                invoiceAmountExcludingTaxInPaymentCurrency -= taxAmountInInvoiceCurrency;

                                jedjson = new JSONObject();
                                jedjson.put("srno", jedetails.size() + 1);
                                jedjson.put("companyid", companyid);
                                jedjson.put("accountid", details.getTax().getAccount().getID());
                                jedjson.put("amount", taxAmountPaidInPaymentCurrency);
                                jedjson.put("debit", true);
                                jedjson.put("jeid", jeid);
                                KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                                JournalEntryDetail jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                                jedetails.add(jed);
                            }
                            jedjson = new JSONObject();
                            jedjson.put("srno", jedetails.size() + 1);
                            jedjson.put("companyid", companyid);
                            jedjson.put("accountid", badDebtRecoveredAccountId);
                            jedjson.put("amount", invoiceAmountExcludingTaxInPaymentCurrency);
                            jedjson.put("debit", true);
                            jedjson.put("jeid", jeid);
                            KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                            JournalEntryDetail jedForRecoveryJe = (JournalEntryDetail) jedresult.getEntityList().get(0);
                            jedetails.add(jedForRecoveryJe);

//                            accJournalEntryobj.saveJournalEntryDetailsSet(jedetails);

                            if (!StringUtil.isNullOrEmpty(jobj.optString("customfield", ""))) {
                                JSONArray jcustomarray = new JSONArray(jobj.optString("customfield", "[]"));
                                jcustomarrayMap.put(jedForRecoveryJe.getID(), jcustomarray);
                            }
                            jArr.getJSONObject(i).put("jedetail", jedForRecoveryJe.getID());

                        }
                        invoiceAmountReceivedExcludingTaxInInvoiceCurrency = amountReceivedConverted - totalTaxAmountReceivedInInvoiceCurrency;
                        HashMap<String, Object> mappingObj = new HashMap<String, Object>();
                        mappingObj.put("companyId", companyid);
                        mappingObj.put("invoiceId", goodsReceipt.getID());
                        mappingObj.put("invoiceReceivedAmt", invoiceAmountReceivedExcludingTaxInInvoiceCurrency);
                        mappingObj.put("gstToRecover", totalTaxAmountReceivedInInvoiceCurrency);
//                        mappingObj.put("recoveredDate", payment.getJournalEntry().getEntryDate());
                        mappingObj.put("recoveredDate", payment.getCreationDate());
                        mappingObj.put("badDebtType", 1);
                        mappingObj.put("paymentid", payment.getID());

                        KwlReturnObject mapResult = accGoodsReceiptobj.saveBadDebtInvoiceMapping(mappingObj);
                    }
                }
                /*
                 * Calculate Forex Gain/Loss Amount
                 * oldPaymentRowsAmount() function used only to calculated ForexExchange Gain/Loss Amount
                 * Add Single JEDetail entry with Forex amount for All Invoices only
                 */
                amountDiff = authHandler.round(oldPaymentRowsAmount(request, jArr, currencyid, externalCurrencyRate), companyid);
//                double finalAmountReval=getReevalJournalEntryAmount(request, jArr, payment, type);
                if (preferences.getForeignexchange() == null) {
                    throw new AccountingException(messageSource.getMessage("acc.common.forex", null, RequestContextUtils.getLocale(request)));
                }
                if (amountDiff != 0 && preferences.getForeignexchange() != null && Math.abs(amountDiff) >= 0.000001) {//Math.abs(amountDiff) < .0000001 Added this because in case of revaluation the diff in the rates was less than .0000001 and the amount calculation was going in Exachange rate account. 
                    rateDecreased = false;
                    if (amountDiff < 0) {
                        rateDecreased = true;
                    }
//                    boolean rateDecreasedReeval = false;
//                    if (finalAmountReval < 0) {
//                        rateDecreasedReeval = true;
//                    }
                    JSONObject jedjson = new JSONObject();
                    jedjson.put("srno", jedetails.size() + 1);
                    jedjson.put("companyid", companyid);
//                    jedjson.put("amount", (rateDecreased ? (-1 * (amountDiff)) : amountDiff)-(rateDecreasedReeval ? (-1 * (finalAmountReval)):finalAmountReval));
                    jedjson.put("amount", rateDecreased ? (-1 * amountDiff) : amountDiff);
                    if(journalEntry.getGstCurrencyRate()!=0.0){
                        jedjson.put("forexGainLoss",rateDecreased ? (-1 * amountDiff) : amountDiff);
                        jedjson.put("paymentType",type);
                    }
                    /*
                     * preferences.getForeignexchange().getID() - Set ForexExchange Account at company level
                     */
                     jedjson.put("accountid", preferences.getForeignexchange().getID());
                    jedjson.put("debit", rateDecreased ? false : true);
                    jedjson.put("jeid", jeid);
                    KwlReturnObject jedaddresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                    JournalEntryDetail jed = (JournalEntryDetail) jedaddresult.getEntityList().get(0);
                    jedetails.add(jed);
//                    accJournalEntryobj.saveJournalEntryDetailsSet(jedetails);
                }
            } else {
                amount = authHandler.round(Double.parseDouble(request.getParameter("amount")), companyid);
            }
            JSONObject jedjson = null;
            KwlReturnObject jedresult = null;
            JournalEntryDetail jed = null;
            JournalEntryDetail JEdeatilId = null;
            List payentOtherwiseList = new ArrayList();
            HashMap paymentdetailotherwise = new HashMap();
            
            /*
             * Below block handled for 
             * 1. Advance Payment
             * 2. Against GL 
             * 3. Against CN/DN
             * 
             */
            
            if (type == Constants.AdvancePayment || type == Constants.GLPayment || type == Constants.PaymentAgainstCNDN) {//advance,GL,Cn
                JSONArray drAccArr = detailsJSONArray;
                for (int i = 0; i < drAccArr.length(); i++) {
                    JSONObject jobj = drAccArr.getJSONObject(i);
                    double forexgainloss = 0;
                    
                    // ForexGainLoss if Payment Against CN/DN
                    if (type == Constants.PaymentAgainstCNDN) {
                        String transactionCurrencyId = jobj.getString("currencyidtransaction");
                        if (!StringUtil.isNullOrEmpty(transactionCurrencyId) && !transactionCurrencyId.equals(payment.getCurrency().getCurrencyID())) {
                            forexgainloss = cndnPaymentForexGailLossAmount(request, jobj, payment, transactionCurrencyId, currencyid, externalCurrencyRate);
                        } else if (transactionCurrencyId.equals(payment.getCurrency().getCurrencyID())) {
                            forexgainloss = cndnPaymentForexGailLossAmountForSameCurrency(request, jobj, payment, transactionCurrencyId, currencyid, externalCurrencyRate);
                        }
                    }
                    if(type == Constants.AdvancePayment && payment.getCustomer()!=null && !StringUtil.isNullOrEmpty(jobj.getString("documentid"))){   // Refund type payment with Advance payment linked as reference
                        String transactionCurrencyId = jobj.getString("currencyidtransaction");
                        forexgainloss = RefundPaymentForexGailLossAmount(request, jobj, payment, transactionCurrencyId, currencyid, externalCurrencyRate);
                    }
                    boolean isdebit = jobj.has("isdebit") ? Boolean.parseBoolean(jobj.getString("isdebit")) : true;
                    if(type==Constants.GLPayment){
                       isdebit=jobj.has("debit") ? Boolean.parseBoolean(jobj.getString("debit")) : true;
                    }
                    jedjson = new JSONObject();
                    jedjson.put("srno", jedetails.size() + 1);
                    jedjson.put("companyid", companyid);
                    /*
                     * Calculate Forex Gain/Loss Amount Diff and Generate JE Details with amount = Total Enterted Amount - Forex Amount.
                     */
                    
                    // If TDS is Applicable then adjust amount for JE Post
                    double enterAmount=authHandler.round(jobj.getDouble("enteramount"), companyid);
                    boolean isTDSApplied = extraCompanyPreferences.isTDSapplicable();
                    if (isTDSApplied && jobj.has("appliedTDS") && !StringUtil.isNullOrEmpty(jobj.get("appliedTDS").toString())) {
                        JSONArray jedTdsJsonArray = jobj.has("appliedTDS") &&  !jobj.get("appliedTDS").equals("") ? jobj.getJSONArray("appliedTDS") : new JSONArray();
                        if (jedTdsJsonArray.length() > 0) {
                            for (int iTds = 0; iTds < jedTdsJsonArray.length(); iTds++) {
                                JSONObject jedTdsJson = jedTdsJsonArray.getJSONObject(iTds);
                                if(jedTdsJson.has("tdsaccountid") && !StringUtil.isNullOrEmpty(jedTdsJson.getString("tdsaccountid"))){
                                    JSONObject jedTds = new JSONObject();
                                    jedTds.put("srno", jedetails.size() + 1);
                                    jedTds.put("companyid", companyid);
                                    jedTds.put("amount", authHandler.round(jedTdsJson.getDouble("tdsamount"),  companyid));
                                    jedTds.put("accountid", jedTdsJson.getString("tdsaccountid"));//Changed account Id                        
                                    jedTds.put("debit", false);
                                    jedTds.put("jeid", jeid);
                                    jedTds.put("description", "TDS Amount is Deducted");
                                    KwlReturnObject jedresult2 = accJournalEntryobj.addJournalEntryDetails(jedTds);
                                    JournalEntryDetail jed2 = (JournalEntryDetail) jedresult2.getEntityList().get(0);
                                    jedetails.add(jed2);
                                    jedTdsJson.put("tdsjedid", jed2.getID());
                                }
                            }
                        }
                    }
                    
                    jedjson.put("amount", authHandler.round((enterAmount - forexgainloss), companyid));
                    if(type == Constants.PaymentAgainstCNDN&&jobj.optDouble("gstCurrencyRate",0.0)!=0.0){
                        jedjson.put("gstCurrencyRate",jobj.optDouble("gstCurrencyRate",0.0));
                        journalEntry.setGstCurrencyRate(jobj.optDouble("gstCurrencyRate",0.0));
                        jedjson.put("paymentType",type);
                        jedjson.put("forexGainLoss",forexgainloss);
                    }
//                    jedjson.put("accountid", jobj.getString("accountid"));
                    if(type==Constants.GLPayment){
                        jedjson.put("accountid", jobj.getString("documentid"));//Changed account Id 
                    }else if (type==Constants.AdvancePayment){
                        jedjson.put("accountid", accountId);//Changed account Id
                    }else if(type==Constants.PaymentAgainstCNDN){
                        KwlReturnObject creditNoteResult=accountingHandlerDAOobj.getObject(CreditNote.class.getName(), jobj.getString("documentid"));
                        CreditNote creditMemo = (CreditNote)creditNoteResult.getEntityList().get(0);
                        jedjson.put("accountid", creditMemo.getAccount()!=null?creditMemo.getAccount().getID():accountId);//Changed account Id
                    }
                    jedjson.put("debit", isdebit);//true);
                    jedjson.put("jeid", jeid);
                    jedjson.put("description", jobj.optString("description"));
//                    JEdeatilId = accJournalEntryobj.getJournalEntryDetails(jedjson);
//                    jedetails.add(JEdeatilId);
                    KwlReturnObject JEdeatilIdresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                    JEdeatilId = (JournalEntryDetail) JEdeatilIdresult.getEntityList().get(0);
                    jedetails.add(JEdeatilId);
//                    accJournalEntryobj.saveJournalEntryDetailsSet(jedetails);
                    if ((!jobj.getString("documentno").equalsIgnoreCase("undefined")) && (!jobj.getString("documentno").equalsIgnoreCase(""))) {
                        billno.append(jobj.getString("documentno") + ",");
                    }
                    drAccArr.getJSONObject(i).put("rowjedid", JEdeatilId.getID());
                    if (!StringUtil.isNullOrEmpty(jobj.optString("customfield", ""))) {
                        JSONArray jcustomarray = new JSONArray(jobj.optString("customfield", "[]"));
                        jcustomarrayMap.put(JEdeatilId.getID(), jcustomarray);
                    }
                    drAccArr.getJSONObject(i).put("jedetail", JEdeatilId.getID());
                    if (preferences.getForeignexchange() == null) {
                        throw new AccountingException(messageSource.getMessage("acc.common.forex", null, RequestContextUtils.getLocale(request)));
                    }
                    
                    /*
                     * Add Single JEDetail entry with Forex amount for All CN/DN only
                     */
                    if (forexgainloss != 0 && preferences.getForeignexchange() != null && Math.abs(forexgainloss) >= 0.000001) {//Math.abs(forexgainloss) < .0000001 Added this because in case of revaluation the diff in the rates was less than .0000001 and the amount calculation was going in Exachange rate account. 
                        rateDecreased = false;
                        if (forexgainloss < 0) {
                            rateDecreased = true;
                        }
                        jedjson.put("srno", jedetails.size() + 1);
                        jedjson.put("companyid", companyid);
                        jedjson.put("amount", rateDecreased ? (-1 * forexgainloss) : forexgainloss);
                        if (type == Constants.PaymentAgainstCNDN&&journalEntry.getGstCurrencyRate() != 0.0) {
                            jedjson.put("forexGainLoss", rateDecreased ? (-1 * forexgainloss) : forexgainloss);
                            jedjson.put("paymentType", type);
                        }
                        jedjson.put("accountid", preferences.getForeignexchange().getID());
                        jedjson.put("debit", rateDecreased ? false : true);
                        jedjson.put("jeid", jeid);
                        KwlReturnObject jedForexResult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                        jed = (JournalEntryDetail) jedForexResult.getEntityList().get(0);
//                        jed = accJournalEntryobj.getJournalEntryDetails(jedjson);
                        jedetails.add(jed);
//                        accJournalEntryobj.saveJournalEntryDetailsSet(jedetails);
                    }

                    double rowtaxamount = 0;
                    if (type == Constants.GLPayment) {
                        PaymentDetailOtherwise paymentDetailOtherwise = null;
                        String rowtaxid = jobj.getString("prtaxid");
                        KwlReturnObject txresult = accountingHandlerDAOobj.getObject(Tax.class.getName(), rowtaxid); // (Tax)session.get(Tax.class, taxid);
                        Tax rowtax = (Tax) txresult.getEntityList().get(0);
                        String appliedGst = jobj.optString("appliedGst","");
                        KwlReturnObject gstresult = accountingHandlerDAOobj.getObject(Tax.class.getName(), appliedGst);                         
                        if (rowtax == null || rowtaxid.equalsIgnoreCase("-1")) {
                            paymentdetailotherwise.put("amount", Double.parseDouble(jobj.getString("enteramount")));
                            paymentdetailotherwise.put("taxjedid", "");
                            paymentdetailotherwise.put("tax", rowtaxid.equalsIgnoreCase("-1") ? "None" : "");
                            paymentdetailotherwise.put("accountid", jobj.getString("documentid"));
                            paymentdetailotherwise.put("isdebit", isdebit);
                            paymentdetailotherwise.put("taxamount", rowtaxamount);
                            paymentdetailotherwise.put("tdsamount", jobj.optDouble("tdsamount", 0.0));
                            paymentdetailotherwise.put("description", jobj.optString("description"));
                            paymentdetailotherwise.put("payment", payment.getID());
                            if (jobj.has("srNoForRow")) {
                                int srNoForRow = StringUtil.isNullOrEmpty("srNoForRow") ? 0 : Integer.parseInt(jobj.getString("srNoForRow"));
                                paymentdetailotherwise.put("srNoForRow", srNoForRow);
                            }
                            if (gstresult.getEntityList().get(0) != null) {
                                Tax gstAppliedObj = (Tax) gstresult.getEntityList().get(0);
                                if (gstAppliedObj != null) {
                                    paymentdetailotherwise.put("gstApplied", gstAppliedObj);
                                }
                            }
                            if(jobj.has("jedetail") && jobj.get("jedetail")!=null){
                                paymentdetailotherwise.put("jedetail", (String)jobj.get("jedetail"));
                            }else{
                                paymentdetailotherwise.put("jedetail", "");
                            }
                            result = accVendorPaymentobj.savePaymentDetailOtherwise(paymentdetailotherwise);
                            paymentdetailotherwise.clear();
                            paymentDetailOtherwise = (PaymentDetailOtherwise) result.getEntityList().get(0);
                            payentOtherwiseList.add(paymentDetailOtherwise.getID());
                            
                            if (jobj.has("appliedTDS") && !StringUtil.isNullOrEmpty(jobj.getString("appliedTDS"))) {   // TDS Applicable Flow Start with GL
                                JSONArray jsonArray = new JSONArray(jobj.getString("appliedTDS"));
                                JSONObject tdsDetails = new JSONObject();
                                tdsDetails.put("appliedTDS", jsonArray);
                                tdsDetails.put("documenttype", jobj.getString("type"));

                                HashMap<String, Object> tdsRequestParams = new HashMap();
                                tdsRequestParams.put("tdsDetailsJsonObj", tdsDetails);
                                tdsRequestParams.put("paymentDetailOtherwiseObj", paymentDetailOtherwise);
                                tdsRequestParams.put("companyObj", payment.getCompany());
                                HashSet tdsdetails = saveTDSdetailsRow(tdsRequestParams);
                                if (!tdsdetails.isEmpty() || tdsdetails.size() > 0) {
                                    paymentDetailOtherwise.setTdsdetails(tdsdetails);
                                }
                            }
                            
                        } else {
                            rowtaxamount = Double.parseDouble(jobj.getString("taxamount"));
                            jedjson = new JSONObject();
                            jedjson.put("srno", jedetails.size() + 1);
                            jedjson.put("companyid", company.getCompanyID());
                            jedjson.put("amount", authHandler.formattedAmount(rowtaxamount, companyid));
                            jedjson.put("accountid", rowtax.getAccount().getID());
                            jedjson.put("debit", isdebit);//true);
                            jedjson.put("jeid", jeid);
                            jedjson.put("description", jobj.optString("description"));
                            jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                            jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                            jedetails.add(jed);
//                            accJournalEntryobj.saveJournalEntryDetailsSet(jedetails);
                            paymentdetailotherwise.put("amount", Double.parseDouble(jobj.getString("enteramount")));
                            paymentdetailotherwise.put("tdsamount", jobj.optDouble("tdsamount",0.0));
                            paymentdetailotherwise.put("taxjedid", jed.getID());
                            paymentdetailotherwise.put("tax", rowtax.getID());
                            paymentdetailotherwise.put("accountid", jobj.getString("documentid"));
                            paymentdetailotherwise.put("isdebit", isdebit);
                            paymentdetailotherwise.put("taxamount", rowtaxamount);
                            paymentdetailotherwise.put("description", jobj.optString("description"));
                            paymentdetailotherwise.put("payment", payment.getID());
                            if (jobj.has("srNoForRow")) {
                                int srNoForRow = StringUtil.isNullOrEmpty("srNoForRow") ? 0 : Integer.parseInt(jobj.getString("srNoForRow"));
                                paymentdetailotherwise.put("srNoForRow", srNoForRow);
                            }
                            Tax gstAppliedObj=null;
                            if (gstresult.getEntityList().get(0) != null) {
                                gstAppliedObj = (Tax) gstresult.getEntityList().get(0);
                            } 
                            if(gstAppliedObj!=null){
                                paymentdetailotherwise.put("gstApplied", gstAppliedObj);
                            } else {
                                paymentdetailotherwise.put("gstApplied", rowtax);
                            }
                            if(jobj.has("jedetail") && jobj.get("jedetail")!=null){
                                paymentdetailotherwise.put("jedetail", (String)jobj.get("jedetail"));
                            }else{
                                paymentdetailotherwise.put("jedetail", "");
                            }
                            paymentdetailotherwise.put("taxjedetail", jed.getID());
                            result = accVendorPaymentobj.savePaymentDetailOtherwise(paymentdetailotherwise);
                            paymentdetailotherwise.clear();
                            paymentDetailOtherwise = (PaymentDetailOtherwise) result.getEntityList().get(0);
                            payentOtherwiseList.add(paymentDetailOtherwise.getID());
                            HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                            if (!StringUtil.isNullOrEmpty(jobj.optString("customfield", ""))) {
                                JSONArray jcustomarray = new JSONArray(jobj.optString("customfield", "[]"));
                                customrequestParams.put("customarray", jcustomarray);
                                customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
                                customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);// Constants.Acc_JEDetail_recdetailId
                                customrequestParams.put("modulerecid", jed.getID());
                                customrequestParams.put("recdetailId", paymentDetailOtherwise.getID());
                                customrequestParams.put("moduleid", Constants.Acc_Make_Payment_ModuleId);
                                customrequestParams.put("companyid", companyid);
                                customrequestParams.put("customdataclasspath", Constants.Acc_BillInvDetail_custom_data_classpath);
                                KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                                if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                                    KwlReturnObject receiptAccJECustomData = accountingHandlerDAOobj.getObject(AccJEDetailCustomData.class.getName(), jed.getID());
                                    AccJEDetailCustomData accJEDetailCustomData = (AccJEDetailCustomData) receiptAccJECustomData.getEntityList().get(0);
                                    jed.setAccJEDetailCustomData(accJEDetailCustomData);
                                }
                            }

                        }
                        HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                        if (!StringUtil.isNullOrEmpty(jobj.optString("customfield", ""))) {
                            JSONArray jcustomarray = new JSONArray(jobj.optString("customfield", "[]"));
                            customrequestParams.put("customarray", jcustomarray);
                            customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
                            customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);// Constants.Acc_JEDetail_recdetailId
                            customrequestParams.put("modulerecid", JEdeatilId.getID());
                            customrequestParams.put("recdetailId", paymentDetailOtherwise.getID());
                            customrequestParams.put("moduleid", Constants.Acc_Make_Payment_ModuleId);
                            customrequestParams.put("companyid", companyid);
                            customrequestParams.put("customdataclasspath", Constants.Acc_BillInvDetail_custom_data_classpath);
                            KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                            if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                                 KwlReturnObject receiptAccJECustomData = accountingHandlerDAOobj.getObject(AccJEDetailCustomData.class.getName(), JEdeatilId.getID());
                                    AccJEDetailCustomData accJEDetailCustomData = (AccJEDetailCustomData) receiptAccJECustomData.getEntityList().get(0);
                                    JEdeatilId.setAccJEDetailCustomData(accJEDetailCustomData);
                            }
                        }
                    }
                }
            }
            
            /*
             * If balace Amount is Greater than Zero then balace amount is save in respective selected account in company preferance. 
             */
             if (type == Constants.BALACEAMOUNT) {
                jedjson = new JSONObject();
                jedjson.put("srno", jedetails.size() + 1);
                jedjson.put("companyid", company.getCompanyID());
                jedjson.put("amount", balaceAmount);
                jedjson.put("accountid", accountIdComPreAdjPay);
                jedjson.put("debit", true);//true);
                jedjson.put("jeid", jeid);
                jedjson.put("description", "");
                jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                jedetails.add(jed);
//                accJournalEntryobj.saveJournalEntryDetailsSet(jedetails);
            }           
        } catch (Exception e) {
            throw ServiceException.FAILURE("savePayment : " + e.getMessage(), e);
        }
        return jedetails;
    }
    
    public Set<JournalEntryDetail> journalEntryDetailCommonObjects(HttpServletRequest request, JSONArray detailsJSONArray, JournalEntry journalEntry, Payment payment, int type,Payment editPaymentObject,JournalEntry oldBankChargeJE,JournalEntry oldBankInterestJE) throws SessionExpiredException, ServiceException, AccountingException {
        double amount = 0;
        double amountIncludingBankCharges=0;
        Set jedetails = new HashSet();
        try {
            JSONObject jedjson = null;
            JournalEntryDetail jed = null;
            Account dipositTo = null;
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            double bankCharges = 0;
            double bankInterest = 0;
            HashMap<String, Object> GlobalParams = new HashMap<String, Object>();
            GlobalParams.put("companyid", companyid);
            GlobalParams.put("gcurrencyid", currencyid);
            String bankChargesAccid = request.getParameter("bankChargesCmb");
            String bankInterestAccid = request.getParameter("bankInterestCmb");
            HashMap<String, JSONArray> Map1 = new HashMap();

            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            currencyid = (request.getParameter("currencyid") == null ? currency.getCurrencyID() : request.getParameter("currencyid"));

            KwlReturnObject result = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), request.getParameter("pmtmethod"));
            PaymentMethod payMethod = (PaymentMethod) result.getEntityList().get(0);

            dipositTo = payMethod.getAccount();

            String jeid = null;
            if (journalEntry != null) {
                jeid = journalEntry.getID();
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("bankCharges")) && !StringUtil.isNullOrEmpty(bankChargesAccid)) {
                bankCharges = Double.parseDouble(request.getParameter("bankCharges"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("bankInterest")) && !StringUtil.isNullOrEmpty(bankInterestAccid)) {
                bankInterest = Double.parseDouble(request.getParameter("bankInterest"));
            }
            amount = Double.parseDouble(request.getParameter("amount"));
            amountIncludingBankCharges=amount;
            //All Fore
            if (bankCharges != 0 && (editPaymentObject!=null && oldBankChargeJE==null)) {
                amountIncludingBankCharges += bankCharges;
                jedjson = new JSONObject();
                jedjson.put("srno", jedetails.size() + 1);
                jedjson.put("companyid", companyid);
                //(If currency USD and base currency SGD, inv rate 0.81 n pay rate 0.80 then amount = 1234.57, amountDiff = -15.24, depositAmt = 1250 SGD)
                jedjson.put("amount", bankCharges);
                jedjson.put("accountid", bankChargesAccid);
                jedjson.put("debit", true);
                jedjson.put("jeid", jeid);
                jed = accJournalEntryobj.getJournalEntryDetails(jedjson);
                jedetails.add(jed);
            }
            if (bankInterest != 0 && (editPaymentObject!=null && oldBankInterestJE==null)) {
                amountIncludingBankCharges += bankInterest;
                jedjson = new JSONObject();
                jedjson.put("srno", jedetails.size() + 1);
                jedjson.put("companyid", companyid);
                //(If currency USD and base currency SGD, inv rate 0.81 n pay rate 0.80 then amount = 1234.57, amountDiff = -15.24, depositAmt = 1250 SGD)
                jedjson.put("amount", bankInterest);
                jedjson.put("accountid", bankInterestAccid);
                jedjson.put("debit", true);
                jedjson.put("jeid", jeid);
                jed = accJournalEntryobj.getJournalEntryDetails(jedjson);
                jedetails.add(jed);
            }
            if (amount != 0) {
                jedjson = new JSONObject();
                jedjson.put("srno", jedetails.size() + 1);
                jedjson.put("companyid", companyid);
                //(If currency USD and base currency SGD, inv rate 0.81 n pay rate 0.80 then amount = 1234.57, amountDiff = -15.24, depositAmt = 1250 SGD)
                jedjson.put("amount", amountIncludingBankCharges);
                jedjson.put("accountid", dipositTo.getID());
                jedjson.put("debit", false);
                jedjson.put("jeid", jeid);
                jed = accJournalEntryobj.getJournalEntryDetails(jedjson);
                jedetails.add(jed);
                payment.setDeposittoJEDetail(jed);
                payment.setDepositAmount(amountIncludingBankCharges);       // put amount excluding bank charges
                try {
                    String transactionCurrency = payment.getCurrency() != null ? payment.getCurrency().getCurrencyID() : payment.getCompany().getCurrency().getCurrencyID();
//                    KwlReturnObject baseAmount = accCurrencyDAOobj.getCurrencyToBaseAmount(GlobalParams, amountIncludingBankCharges, transactionCurrency, journalEntry.getEntryDate(), journalEntry.getExternalCurrencyRate());
                    KwlReturnObject baseAmount = accCurrencyDAOobj.getCurrencyToBaseAmount(GlobalParams, amountIncludingBankCharges, transactionCurrency, payment.getCreationDate(), journalEntry.getExternalCurrencyRate());
                    double depositamountinbase = (Double) baseAmount.getEntityList().get(0);
                    depositamountinbase = authHandler.round(depositamountinbase, companyid);
                    payment.setDepositamountinbase(depositamountinbase);
                } catch (Exception ex) {
                    System.out.println(ex.getMessage());
                }
            }
        } catch (Exception e) {
            throw ServiceException.FAILURE("savePayment : " + e.getMessage(), e);
        }
        return jedetails;
    }
    
    public void saveReevalJournalEntryObjects(HttpServletRequest request, JSONArray detailsJSONArray, Payment payment, int type,String oldRevaluationJE,Map<String,Object> counterMap) throws SessionExpiredException, ServiceException, AccountingException {
        try {
            if (detailsJSONArray.length() > 0) {
                double finalAmountReval = 0;
                String basecurrency = sessionHandlerImpl.getCurrencyID(request);
                KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), payment.getCompany().getCompanyID());
                CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
              
                finalAmountReval = getReevalJournalEntryAmount(request, detailsJSONArray, payment, type);
                if (finalAmountReval != 0) {
                    /**
                     * added transactionID and transactionModuleID to Realised
                     * JE.
                     */
                    counterMap.put("transactionModuleid", payment.isIsOpeningBalencePayment() ? Constants.Acc_opening_Payment : Constants.Acc_Make_Payment_ModuleId);
                    counterMap.put("transactionId", payment.getID());
                    String revaljeid = PostJEFORReevaluation(request, finalAmountReval, payment.getCompany().getCompanyID(), preferences, basecurrency, oldRevaluationJE,counterMap);
                    payment.setRevalJeId(revaljeid);
                }
            }
        } catch (Exception e) {
            throw ServiceException.FAILURE("savePayment : " + e.getMessage(), e);
        }
    }
    
    public double getReevalJournalEntryAmount(HttpServletRequest request, JSONArray detailsJSONArray, Payment payment, int type) throws SessionExpiredException, ServiceException, AccountingException {
        double finalAmountReval = 0;
        try {
            if (detailsJSONArray.length() > 0) {
                String basecurrency = sessionHandlerImpl.getCurrencyID(request);

                for (int i = 0; i < detailsJSONArray.length(); i++) {
                    JSONObject jobj = detailsJSONArray.getJSONObject(i);
                    double ratio = 0;
                    double amountReval = 0;
                    double amountdue = jobj.getDouble("enteramount");
                    Date tranDate = null;
                    double exchangeRate = 0.0;
                    double exchangeRateReval = 0.0;
                    double exchangeratefortransaction = jobj.optDouble("exchangeratefortransaction", 1.00);
                    HashMap<String, Object> GlobalParams = new HashMap<String, Object>();
                    GlobalParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
                    GlobalParams.put("gcurrencyid", basecurrency);
                    GlobalParams.put("dateformat", authHandler.getDateOnlyFormat(request));
                    Date creationDate = authHandler.getDateOnlyFormat(request).parse(request.getParameter("creationdate"));
                    KwlReturnObject result = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), jobj.getString("documentid"));
                    GoodsReceipt gr = (GoodsReceipt) result.getEntityList().get(0);
                    boolean isopeningBalanceInvoice = gr.isIsOpeningBalenceInvoice();
                    tranDate = gr.getCreationDate();
                    if (!gr.isNormalInvoice()) {
                        exchangeRate = gr.getExchangeRateForOpeningTransaction();
                        exchangeRateReval = exchangeRate;
                    } else {
                        exchangeRate = gr.getJournalEntry().getExternalCurrencyRate();
                        exchangeRateReval = exchangeRate;
//                        tranDate = gr.getJournalEntry().getEntryDate();
                    }

                    HashMap<String, Object> invoiceId = new HashMap<String, Object>();
                    invoiceId.put("invoiceid", gr.getID());
                    invoiceId.put("companyid", sessionHandlerImpl.getCompanyid(request));
                    invoiceId.put("isRealised", false);//false for geting only non realised invoice id.
                    //Checking the document entery in revalution history if any for current rate
                    result = accJournalEntryobj.getRevalInvoiceId(invoiceId);
                    RevaluationHistory revalueationHistory = (result.getEntityList().size()) != 0 ? (RevaluationHistory) result.getEntityList().get(0) : null;
                    if (revalueationHistory != null) {
                        exchangeRateReval = revalueationHistory.getEvalrate();
                    }

                    result = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), basecurrency);
                    KWLCurrency currency = (KWLCurrency) result.getEntityList().get(0);
                    String currid = currency.getCurrencyID();
                    if (gr.getCurrency() != null) {
                        currid = gr.getCurrency().getCurrencyID();
                    }
                    //            double oldrate = CompanyHandler.getCurrencyToBaseAmount(session, request, 1.0, currid, gr.getJournalEntry().getEntryDate());
                    KwlReturnObject bAmt = null;
                    if (isopeningBalanceInvoice && gr.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(GlobalParams, 1.0, currid, tranDate, exchangeRate);
                    } else {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(GlobalParams, 1.0, currid, tranDate, exchangeRate);
                    }
                    double oldrate = (Double) bAmt.getEntityList().get(0);
                    //            double newrate = CompanyHandler.getCurrencyToBaseAmount(session, request, 1.0, currid, AuthHandler.getDateFormatter(request).parse(request.getParameter("creationdate")));
                    if (revalueationHistory == null && isopeningBalanceInvoice && gr.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(GlobalParams, 1.0, currid, creationDate, exchangeRateReval);
                    } else {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(GlobalParams, 1.0, currid, creationDate, exchangeRateReval);
                    }
                    double newrate = (Double) bAmt.getEntityList().get(0);
                    ratio = oldrate - newrate;
                    if (Math.abs(exchangeratefortransaction - newrate) <= 0.000001) {
                        exchangeratefortransaction = newrate;
                    }

                    double amountdueNew = amountdue / exchangeratefortransaction;
                    amountdueNew = Math.round(amountdueNew * 1000) / 1000d;
                    amountReval = ratio * amountdueNew;
                    finalAmountReval = finalAmountReval + amountReval;
                }
            }
        } catch (Exception e) {
            throw ServiceException.FAILURE("savePayment : " + e.getMessage(), e);
        }
        return finalAmountReval;
    }
    
    public double ReevalJournalEntryForPayment(HttpServletRequest request, Payment payment, double linkReceiptAmount, double exchangeratefortransaction) throws SessionExpiredException, ServiceException, AccountingException {
        double finalAmountReval = 0;
        try {
            String basecurrency = sessionHandlerImpl.getCurrencyID(request);
            double ratio = 0;
            double amountReval = 0;
            Date tranDate = null;
            double exchangeRate = 0.0;
            double exchangeRateReval = 0.0;
            double amountdue = linkReceiptAmount;
            HashMap<String, Object> GlobalParams = new HashMap<String, Object>();
            GlobalParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
            GlobalParams.put("gcurrencyid", basecurrency);
            GlobalParams.put("dateformat", authHandler.getDateOnlyFormat(request));
//            Date creationDate = payment.getCreationDate();
            boolean isopeningBalanceInvoice = payment.isIsOpeningBalencePayment();
            tranDate = payment.getCreationDate();
            if (!payment.isNormalPayment()) {
                exchangeRate = payment.getExchangeRateForOpeningTransaction();
                exchangeRateReval = exchangeRate;
            } else {
                exchangeRate = payment.getJournalEntry().getExternalCurrencyRate();
                exchangeRateReval = exchangeRate;
//                tranDate = payment.getJournalEntry().getEntryDate();
            }
            HashMap<String, Object> invoiceId = new HashMap<String, Object>();
            invoiceId.put("invoiceid", payment.getID());
            invoiceId.put("companyid", sessionHandlerImpl.getCompanyid(request));
            invoiceId.put("isRealised", false);//false for geting only non realised invoice id.
            //Checking the document entery in revalution history if any for current rate
            KwlReturnObject result = accJournalEntryobj.getRevalInvoiceId(invoiceId);
            RevaluationHistory revalueationHistory = (result.getEntityList().size()) != 0 ? (RevaluationHistory) result.getEntityList().get(0) : null;
            if (revalueationHistory != null) {
                exchangeRateReval = revalueationHistory.getEvalrate();
            }

            result = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), basecurrency);
            KWLCurrency currency = (KWLCurrency) result.getEntityList().get(0);
            String currid = currency.getCurrencyID();
            if (payment.getCurrency() != null) {
                currid = payment.getCurrency().getCurrencyID();
            }
            //            double oldrate = CompanyHandler.getCurrencyToBaseAmount(session, request, 1.0, currid, gr.getJournalEntry().getEntryDate());
            KwlReturnObject bAmt = null;
            if (isopeningBalanceInvoice && payment.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(GlobalParams, 1.0, currid, tranDate, exchangeRate);
            } else {
                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(GlobalParams, 1.0, currid, tranDate, exchangeRate);
            }

            double oldrate = (Double) bAmt.getEntityList().get(0);
            //            double newrate = CompanyHandler.getCurrencyToBaseAmount(session, request, 1.0, currid, AuthHandler.getDateFormatter(request).parse(request.getParameter("creationdate")));
            if (revalueationHistory == null && isopeningBalanceInvoice && payment.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(GlobalParams, 1.0, currid, tranDate, exchangeRateReval);
            } else {
                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(GlobalParams, 1.0, currid, tranDate, exchangeRateReval);
            }

            double newrate = (Double) bAmt.getEntityList().get(0);
            ratio = oldrate - newrate;
            if (Math.abs(exchangeratefortransaction - newrate) <= 0.000001) {
                exchangeratefortransaction = newrate;
            }
            double amountdueNew = amountdue / exchangeratefortransaction;
            amountdueNew = Math.round(amountdueNew * 1000) / 1000d;
            amountReval = ratio * amountdueNew;
            finalAmountReval = finalAmountReval + amountReval;
        } catch (SessionExpiredException | ServiceException e) {
            throw ServiceException.FAILURE("savePayment : " + e.getMessage(), e);
        }
        return finalAmountReval;
    }
    
    public double ReevalJournalEntryForAdvanceReceipt(HttpServletRequest request, Receipt receipt, double linkReceiptAmount, double exchangeratefortransaction) throws SessionExpiredException, ServiceException, AccountingException {
        double finalAmountReval = 0;
        try {
            String basecurrency = sessionHandlerImpl.getCurrencyID(request);
            double ratio = 0;
            double amountReval = 0;
            Date tranDate = null;
            double exchangeRate = 0.0;
            double exchangeRateReval = 0.0;
            double amountdue = linkReceiptAmount;
            Map<String, Object> GlobalParams = new HashMap<>();
            GlobalParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
            GlobalParams.put("gcurrencyid", basecurrency);
            GlobalParams.put("dateformat", authHandler.getDateOnlyFormat(request));
            exchangeRate = receipt.getJournalEntry().getExternalCurrencyRate();
            exchangeRateReval = exchangeRate;
//            tranDate = receipt.getJournalEntry().getEntryDate();
            tranDate = receipt.getCreationDate();
            HashMap<String, Object> invoiceId = new HashMap<>();
            invoiceId.put("invoiceid", receipt.getID());
            invoiceId.put("companyid", sessionHandlerImpl.getCompanyid(request));
            invoiceId.put("isRealised", false);//false for geting only non realised invoice id.
            //Checking the document entery in revalution history if any for current rate
            KwlReturnObject result = accJournalEntryobj.getRevalInvoiceId(invoiceId);
            RevaluationHistory revalueationHistory = (result.getEntityList().size()) != 0 ? (RevaluationHistory) result.getEntityList().get(0) : null;
            if (revalueationHistory != null) {
                exchangeRateReval = revalueationHistory.getEvalrate();
            }
            result = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), basecurrency);
            KWLCurrency currency = (KWLCurrency) result.getEntityList().get(0);
            String currid = currency.getCurrencyID();
            if (receipt.getCurrency() != null) {
                currid = receipt.getCurrency().getCurrencyID();
            }
            KwlReturnObject  bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(GlobalParams, 1.0, currid, tranDate, exchangeRate);
            double oldrate = (Double) bAmt.getEntityList().get(0);
            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(GlobalParams, 1.0, currid, tranDate, exchangeRateReval);
            double newrate = (Double) bAmt.getEntityList().get(0);
            ratio = oldrate - newrate;
            if (Math.abs(exchangeratefortransaction - newrate) <= 0.000001) {
                exchangeratefortransaction = newrate;
            }
            double amountdueNew = amountdue / exchangeratefortransaction;
            amountdueNew = Math.round(amountdueNew * 1000) / 1000d;
            amountReval = ratio * amountdueNew;
            finalAmountReval = finalAmountReval + amountReval;

        } catch (SessionExpiredException | ServiceException e) {
            throw ServiceException.FAILURE("ReevalJournalEntryForAdvanceReceipt : " + e.getMessage(), e);
        }
        return finalAmountReval;
    }
    
    public double ReevalJournalEntryForGoodsReceipt(HttpServletRequest request, GoodsReceipt goodsReceipt, double linkInvoiceAmount, double exchangeratefortransaction) throws SessionExpiredException, ServiceException, AccountingException {
        double finalAmountReval = 0;
        try {
            String basecurrency = sessionHandlerImpl.getCurrencyID(request);
            double ratio = 0;
            double amountReval = 0;
            Date tranDate = null;
            double exchangeRate = 0.0;
            double exchangeRateReval = 0.0;
            double amountdue = linkInvoiceAmount;
            HashMap<String, Object> GlobalParams = new HashMap<String, Object>();
            GlobalParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
            GlobalParams.put("gcurrencyid", basecurrency);
            GlobalParams.put("dateformat", authHandler.getDateOnlyFormat(request));
            Date creationDate = goodsReceipt.getCreationDate();
            boolean isopeningBalanceInvoice = goodsReceipt.isIsOpeningBalenceInvoice();
            tranDate = goodsReceipt.getCreationDate();
            if (!goodsReceipt.isNormalInvoice()) {
                exchangeRate = goodsReceipt.getExchangeRateForOpeningTransaction();
                exchangeRateReval = exchangeRate;
            } else {
                exchangeRate = goodsReceipt.getJournalEntry().getExternalCurrencyRate();
                exchangeRateReval = exchangeRate;
//                tranDate = goodsReceipt.getJournalEntry().getEntryDate();
            }
            HashMap<String, Object> invoiceId = new HashMap<>();
            invoiceId.put("invoiceid", goodsReceipt.getID());
            invoiceId.put("companyid", sessionHandlerImpl.getCompanyid(request));
            invoiceId.put("isRealised", false);//false for geting only non realised invoice id.
            //Checking the document entery in revalution history if any for current rate
            KwlReturnObject result = accJournalEntryobj.getRevalInvoiceId(invoiceId);
            RevaluationHistory revalueationHistory = (result.getEntityList().size()) != 0 ? (RevaluationHistory) result.getEntityList().get(0) : null;
            if (revalueationHistory != null) {
                exchangeRateReval = revalueationHistory.getEvalrate();
            }

            result = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), basecurrency);
            KWLCurrency currency = (KWLCurrency) result.getEntityList().get(0);
            String currid = currency.getCurrencyID();
            if (goodsReceipt.getCurrency() != null) {
                currid = goodsReceipt.getCurrency().getCurrencyID();
            }
            //            double oldrate = CompanyHandler.getCurrencyToBaseAmount(session, request, 1.0, currid, gr.getJournalEntry().getEntryDate());
            KwlReturnObject bAmt = null;
            if (isopeningBalanceInvoice && goodsReceipt.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(GlobalParams, 1.0, currid, tranDate, exchangeRate);
            } else {
                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(GlobalParams, 1.0, currid, tranDate, exchangeRate);
            }

            double oldrate = (Double) bAmt.getEntityList().get(0);
            //            double newrate = CompanyHandler.getCurrencyToBaseAmount(session, request, 1.0, currid, AuthHandler.getDateFormatter(request).parse(request.getParameter("creationdate")));
            if (revalueationHistory == null && isopeningBalanceInvoice && goodsReceipt.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(GlobalParams, 1.0, currid, creationDate, exchangeRateReval);
            } else {
                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(GlobalParams, 1.0, currid, creationDate, exchangeRateReval);
            }

            double newrate = (Double) bAmt.getEntityList().get(0);
            ratio = oldrate - newrate;
            if (Math.abs(exchangeratefortransaction - newrate) <= 0.000001) {
                exchangeratefortransaction = newrate;
            }
            double amountdueNew = amountdue / exchangeratefortransaction;
            amountdueNew = Math.round(amountdueNew * 1000) / 1000d;
            amountReval = ratio * amountdueNew;
            finalAmountReval = finalAmountReval + amountReval;

        } catch (SessionExpiredException | ServiceException e) {
            throw ServiceException.FAILURE("savePayment : " + e.getMessage(), e);
        }
        return finalAmountReval;
    }
    
    public double ReevalJournalEntryForCrediteNote(HttpServletRequest request, CreditNote creditNote, double linkInvoiceAmount, double exchangeratefortransaction) throws SessionExpiredException, ServiceException, AccountingException {
         double finalAmountReval = 0;
        try {
                String basecurrency = sessionHandlerImpl.getCurrencyID(request); 
                    double ratio = 0;
                    double amountReval = 0;
                    String revalId = null;
                    Date tranDate = null;
                    double exchangeRate = 0.0;
                    double exchangeRateReval = 0.0;
                    double amountdue = linkInvoiceAmount;
                    Map<String, Object> GlobalParams = new HashMap<>();
                    GlobalParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
                    GlobalParams.put("gcurrencyid", basecurrency);
                    GlobalParams.put("dateformat", authHandler.getDateOnlyFormat(request));
                    Date creationDate = creditNote.getCreationDate();
                    boolean isopeningBalanceInvoice = creditNote.isIsOpeningBalenceCN();
                    tranDate = creditNote.getCreationDate();
                    if (!creditNote.isNormalCN()) {
                        exchangeRate = creditNote.getExchangeRateForOpeningTransaction();
                        exchangeRateReval = exchangeRate;
                    }  else {
                        exchangeRate = creditNote.getJournalEntry().getExternalCurrencyRate();
                        exchangeRateReval = exchangeRate;
//                        tranDate = creditNote.getJournalEntry().getEntryDate();
                    }
                    HashMap<String, Object> invoiceId = new HashMap<>();
                    invoiceId.put("invoiceid", creditNote.getID());
                    invoiceId.put("companyid", sessionHandlerImpl.getCompanyid(request));
                    invoiceId.put("isRealised", false);//false for geting only non realised invoice id.
                    //Checking the document entery in revalution history if any for current rate
                    KwlReturnObject result = accJournalEntryobj.getRevalInvoiceId(invoiceId);
                    RevaluationHistory revalueationHistory = (result.getEntityList().size()) != 0 ? (RevaluationHistory) result.getEntityList().get(0) : null;
                    if (revalueationHistory != null) {
                        exchangeRateReval = revalueationHistory.getEvalrate();
                    }

                    result = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), basecurrency);
                    KWLCurrency currency = (KWLCurrency) result.getEntityList().get(0);
                    String currid = currency.getCurrencyID();
                    if (creditNote.getCurrency() != null) {
                        currid = creditNote.getCurrency().getCurrencyID();
                    }
                    //            double oldrate = CompanyHandler.getCurrencyToBaseAmount(session, request, 1.0, currid, gr.getJournalEntry().getEntryDate());
                    KwlReturnObject bAmt = null;
                    if (isopeningBalanceInvoice && creditNote.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(GlobalParams, 1.0, currid, tranDate, exchangeRate);
                    } else {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(GlobalParams, 1.0, currid, tranDate, exchangeRate);
                    }

                    double oldrate = (Double) bAmt.getEntityList().get(0);
                    //            double newrate = CompanyHandler.getCurrencyToBaseAmount(session, request, 1.0, currid, AuthHandler.getDateFormatter(request).parse(request.getParameter("creationdate")));
                    if (revalueationHistory == null && isopeningBalanceInvoice && creditNote.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(GlobalParams, 1.0, currid, creationDate, exchangeRateReval);
                    } else {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(GlobalParams, 1.0, currid, creationDate, exchangeRateReval);
                    }

                    double newrate = (Double) bAmt.getEntityList().get(0);
                    ratio = oldrate - newrate;
                    if (Math.abs(exchangeratefortransaction - newrate) <= 0.000001) {
                        exchangeratefortransaction = newrate;
                    }
                    double amountdueNew = amountdue / exchangeratefortransaction;
                    amountdueNew = Math.round(amountdueNew * 1000) / 1000d;
                    amountReval = ratio * amountdueNew;
                    finalAmountReval = finalAmountReval + amountReval;
                    
        } catch (SessionExpiredException | ServiceException e) {
            throw ServiceException.FAILURE("savePayment : " + e.getMessage(), e);
        }
        return finalAmountReval;
    }
    
    public double ReevalJournalEntryCNDN(HttpServletRequest request, CreditNote creditNote,CompanyAccountPreferences preferences, double exchangeratefortransaction,double amountdue, Map<String,Object> counterMap) throws SessionExpiredException, ServiceException, AccountingException {
       double finalAmountReval = 0;
        try {
             String basecurrency = sessionHandlerImpl.getCurrencyID(request);
             double ratio = 0;
             double amountReval = 0;
             Date tranDate = null;
             double exchangeRate = 0.0;
             double exchangeRateReval = 0.0;
             Map<String, Object> GlobalParams = new HashMap<>();
             GlobalParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
             GlobalParams.put("gcurrencyid", basecurrency);
             GlobalParams.put("dateformat", authHandler.getDateFormatter(request));
             boolean isopeningBalanceInvoice = creditNote.isIsOpeningBalenceCN();
             tranDate = creditNote.getCreationDate();
             if (!creditNote.isNormalCN()) {
                 exchangeRate = creditNote.getExchangeRateForOpeningTransaction();
                 exchangeRateReval = exchangeRate;
             } else {
                 exchangeRate = creditNote.getJournalEntry().getExternalCurrencyRate();
                 exchangeRateReval = exchangeRate;
//                 tranDate = creditNote.getJournalEntry().getEntryDate();
             }

             Map<String, Object> invoiceId = new HashMap<>();
             invoiceId.put("invoiceid", creditNote.getID());
             invoiceId.put("companyid", sessionHandlerImpl.getCompanyid(request));
             invoiceId.put("isRealised", false);//false for geting only non realised invoice id.
             //Checking the document entery in revalution history if any for current rate
             KwlReturnObject result = accJournalEntryobj.getRevalInvoiceId(invoiceId);
             RevaluationHistory revalueationHistory = (result.getEntityList().size()) != 0 ? (RevaluationHistory) result.getEntityList().get(0) : null;
             if (revalueationHistory != null) {
                 exchangeRateReval = revalueationHistory.getEvalrate();
             }
             result = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), basecurrency);
             KWLCurrency currency = (KWLCurrency) result.getEntityList().get(0);
             String currid = currency.getCurrencyID();
             if (creditNote.getCurrency() != null) {
                 currid = creditNote.getCurrency().getCurrencyID();
             }
             //            double oldrate = CompanyHandler.getCurrencyToBaseAmount(session, request, 1.0, currid, gr.getJournalEntry().getEntryDate());
             KwlReturnObject bAmt = null;
             if (isopeningBalanceInvoice && creditNote.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                 bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(GlobalParams, 1.0, currid, tranDate, exchangeRate);
             } else {
                 bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(GlobalParams, 1.0, currid, tranDate, exchangeRate);
             }
             double oldrate = (Double) bAmt.getEntityList().get(0);
             //            double newrate = CompanyHandler.getCurrencyToBaseAmount(session, request, 1.0, currid, AuthHandler.getDateFormatter(request).parse(request.getParameter("creationdate")));
             if (revalueationHistory == null && isopeningBalanceInvoice && creditNote.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                 bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(GlobalParams, 1.0, currid, tranDate, exchangeRateReval);
             } else {
                 bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(GlobalParams, 1.0, currid, tranDate, exchangeRateReval);
             }
             double newrate = (Double) bAmt.getEntityList().get(0);
             ratio = oldrate - newrate;
             if (Math.abs(exchangeratefortransaction - newrate) <= 0.000001) {
                 exchangeratefortransaction = newrate;
             }

             double amountdueNew = amountdue / exchangeratefortransaction;
             amountdueNew = Math.round(amountdueNew * 1000) / 1000d;
             amountReval = ratio * amountdueNew;
             finalAmountReval = amountReval;
             if (finalAmountReval != 0) {
                 String oldRevaluationJE = creditNote.getRevalJeId();
                 /**
                  * added transactionID and transactionModuleID to Realised JE.
                  */
                 counterMap.put("transactionModuleid", creditNote.isIsOpeningBalenceCN() ? (creditNote.iscNForCustomer() ? Constants.Acc_opening_Customer_CreditNote : Constants.Acc_opening_Vendor_CreditNote) : Constants.Acc_Credit_Note_ModuleId);
                 counterMap.put("transactionId", creditNote.getID());
                 String revaljeid = PostJEFORReevaluation(request, finalAmountReval, preferences.getCompany().getCompanyID(), preferences, basecurrency, oldRevaluationJE, counterMap);
                 creditNote.setRevalJeId(revaljeid);
                 finalAmountReval = 0;
             }

         } catch (SessionExpiredException | ServiceException e) {
             throw ServiceException.FAILURE("saveReceipt : " + e.getMessage(), e);
         }
         return finalAmountReval;
    }
    
    public void paymentDetailOtherwiseObject(HttpServletRequest request, JSONArray jSONArrayAgainstInvoice, JournalEntry journalEntry, Payment payment) throws SessionExpiredException, ServiceException, AccountingException {
        double amount = 0;
        Set jedetails = new HashSet();
        try {
            Account dipositTo = null;
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            String drAccDetails = request.getParameter("detail");
            boolean isMultiDebit = StringUtil.getBoolean(request.getParameter("ismultidebit"));
            String methodid = request.getParameter("pmtmethod");
            sessionHandlerImpl.updatePaymentMethodID(request, methodid);
            String jeid = null;
            if (journalEntry != null) {
                jeid = journalEntry.getID();
            }
            HashMap<String, JSONArray> Map1 = new HashMap();
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);

            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            currencyid = (request.getParameter("currencyid") == null ? currency.getCurrencyID() : request.getParameter("currencyid"));

            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);

            KwlReturnObject extracapresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracapresult.getEntityList().get(0);

            KwlReturnObject result = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), request.getParameter("pmtmethod"));
            PaymentMethod payMethod = (PaymentMethod) result.getEntityList().get(0);

            dipositTo = payMethod.getAccount();

            //Vendor Invoice
            String detail = request.getParameter("detail");
            amount = Double.parseDouble(request.getParameter("amount"));

            double bankCharges = 0;
            double bankInterest = 0;
            boolean onlyAdvance = StringUtil.getBoolean(request.getParameter("onlyAdvance"));
            String bankChargesAccid = request.getParameter("bankChargesCmb");
            String bankInterestAccid = request.getParameter("bankInterestCmb");
            if (!StringUtil.isNullOrEmpty(request.getParameter("bankCharges")) && !StringUtil.isNullOrEmpty(bankChargesAccid)) {
                bankCharges = Double.parseDouble(request.getParameter("bankCharges"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("bankInterest")) && !StringUtil.isNullOrEmpty(bankInterestAccid)) {
                bankInterest = Double.parseDouble(request.getParameter("bankInterest"));
            }
            JSONObject jedjson = null;
            KwlReturnObject jedresult = null;
            JournalEntryDetail jed = null;
            JournalEntryDetail JEdeatilId = null;
            List payentOtherwiseList = new ArrayList();
            HashMap paymentdetailotherwise = new HashMap();
            if (isMultiDebit) {//C||D||A
                JSONArray drAccArr = new JSONArray(drAccDetails);
                for (int i = 0; i < drAccArr.length(); i++) {
                    JSONObject jobj = drAccArr.getJSONObject(i);
                    boolean isdebit = jobj.has("isdebit") ? Boolean.parseBoolean(jobj.getString("isdebit")) : true;
                    double rowtaxamount = 0;
//                    if (receiptType == 2 || (!isVendorPaymentEdit && receiptType == 9) || (isVendorPaymentEdit && (receiptType == 1 || receiptType == 9) && (actualReceiptType == 9 || actualReceiptType == 2))) {
                    PaymentDetailOtherwise paymentDetailOtherwise = null;
                    String rowtaxid = jobj.getString("prtaxid");
                    KwlReturnObject txresult = accountingHandlerDAOobj.getObject(Tax.class.getName(), rowtaxid); // (Tax)session.get(Tax.class, taxid);
                    Tax rowtax = (Tax) txresult.getEntityList().get(0);
                    if (rowtax == null || rowtaxid.equalsIgnoreCase("-1")) {
                        paymentdetailotherwise.put("amount", Double.parseDouble(jobj.getString("dramount")));
                        paymentdetailotherwise.put("taxjedid", "");
                        paymentdetailotherwise.put("tax", rowtaxid.equalsIgnoreCase("-1") ? "None" : "");
                        paymentdetailotherwise.put("accountid", jobj.getString("accountid"));
                        paymentdetailotherwise.put("isdebit", isdebit);
                        paymentdetailotherwise.put("taxamount", rowtaxamount);
                        paymentdetailotherwise.put("description", jobj.optString("description"));
                        paymentdetailotherwise.put("payment", payment.getID());
                        result = accVendorPaymentobj.savePaymentDetailOtherwise(paymentdetailotherwise);
                        paymentdetailotherwise.clear();
                        paymentDetailOtherwise = (PaymentDetailOtherwise) result.getEntityList().get(0);
                        payentOtherwiseList.add(paymentDetailOtherwise.getID());
                    } else {
                        rowtaxamount = Double.parseDouble(jobj.getString("taxamount"));
                        jedjson = new JSONObject();
                        jedjson.put("srno", jedetails.size() + 1);
                        jedjson.put("companyid", company.getCompanyID());
                        jedjson.put("amount", authHandler.formattedAmount(rowtaxamount, companyid));
                        jedjson.put("accountid", rowtax.getAccount().getID());
                        jedjson.put("debit", isdebit);//true);
                        jedjson.put("jeid", jeid);
                        jedjson.put("description", jobj.optString("description"));
                        jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                        jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                        jedetails.add(jed);

                        paymentdetailotherwise.put("amount", Double.parseDouble(jobj.getString("dramount")));
                        paymentdetailotherwise.put("taxjedid", jed.getID());
                        paymentdetailotherwise.put("tax", rowtax.getID());
                        paymentdetailotherwise.put("accountid", jobj.getString("accountid"));
                        paymentdetailotherwise.put("isdebit", isdebit);
                        paymentdetailotherwise.put("taxamount", rowtaxamount);
                        paymentdetailotherwise.put("description", jobj.optString("description"));
                        paymentdetailotherwise.put("payment", payment.getID());
                        result = accVendorPaymentobj.savePaymentDetailOtherwise(paymentdetailotherwise);
                        paymentdetailotherwise.clear();
                        paymentDetailOtherwise = (PaymentDetailOtherwise) result.getEntityList().get(0);
                        payentOtherwiseList.add(paymentDetailOtherwise.getID());
                        HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                        if (!StringUtil.isNullOrEmpty(jobj.optString("customfield", ""))) {
                            JSONArray jcustomarray = new JSONArray(jobj.optString("customfield", "[]"));
                            customrequestParams.put("customarray", jcustomarray);
                            customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
                            customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);// Constants.Acc_JEDetail_recdetailId
                            customrequestParams.put("modulerecid", jed.getID());
                            customrequestParams.put("recdetailId", paymentDetailOtherwise.getID());
                            customrequestParams.put("moduleid", Constants.Acc_Make_Payment_ModuleId);
                            customrequestParams.put("companyid", companyid);
                            customrequestParams.put("customdataclasspath", Constants.Acc_BillInvDetail_custom_data_classpath);
                            KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                            if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                                JSONObject tempJobj = new JSONObject();
                                tempJobj.put("accjedetailcustomdata", jed.getID());
                                tempJobj.put("jedid", jed.getID());
                                jedresult = accJournalEntryobj.updateJournalEntryDetails(tempJobj);
                            }
                        }
                    }

                    HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                    if (!StringUtil.isNullOrEmpty(jobj.optString("customfield", ""))) {
                        JSONArray jcustomarray = new JSONArray(jobj.optString("customfield", "[]"));
                        customrequestParams.put("customarray", jcustomarray);
                        customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
                        customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);// Constants.Acc_JEDetail_recdetailId
                        customrequestParams.put("modulerecid", JEdeatilId.getID());
                        customrequestParams.put("recdetailId", paymentDetailOtherwise.getID());
                        customrequestParams.put("moduleid", Constants.Acc_Make_Payment_ModuleId);
                        customrequestParams.put("companyid", companyid);
                        customrequestParams.put("customdataclasspath", Constants.Acc_BillInvDetail_custom_data_classpath);
                        KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                        if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                            JSONObject tempJobj = new JSONObject();
                            tempJobj.put("accjedetailcustomdata", JEdeatilId.getID());
                            tempJobj.put("jedid", JEdeatilId.getID());
                            jedresult = accJournalEntryobj.updateJournalEntryDetails(tempJobj);
                        }
                    }
                }
            }
        } catch (Exception e) {
            throw ServiceException.FAILURE("savePayment : " + e.getMessage(), e);
        }
    }
    
    public PayDetail getPayDetailObject(HttpServletRequest request,Payment editPaymentObject,Payment payment) throws SessionExpiredException, ServiceException, AccountingException {
        String oldChequeNo = "";
        String Cardid = "";
        PayDetail pdetail = null;

        try {
            String detailsJsonString = request.getParameter("Details");
            boolean  isWarn = request.getParameter("isWarn")!=null?Boolean.parseBoolean(request.getParameter("isWarn")):false;
            JSONArray jSONArray = new JSONArray(detailsJsonString);
            Account dipositTo = null;
            String companyid = sessionHandlerImpl.getCompanyid(request);
            DateFormat df = authHandler.getDateOnlyFormat(request);
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            String receiptid = request.getParameter("billid");
            String methodid = request.getParameter("pmtmethod");
            sessionHandlerImpl.updatePaymentMethodID(request, methodid);
            boolean bankReconsilationEntry = false, bankPayment = false;
            Date clearanceDate = null, startDate = null, endDate = null;
            String bankAccountId = "";
          
            String payDetailID = null;
            JournalEntry oldJE = editPaymentObject != null ? editPaymentObject.getJournalEntry() : null;

            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            currencyid = (request.getParameter("currencyid") == null ? currency.getCurrencyID() : request.getParameter("currencyid"));

            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);

            KwlReturnObject extracapresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracapresult.getEntityList().get(0);

            KwlReturnObject result = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), request.getParameter("pmtmethod"));
            PaymentMethod payMethod = (PaymentMethod) result.getEntityList().get(0);

            dipositTo = payMethod.getAccount();
            HashMap pdetailhm = new HashMap();
            pdetailhm.put("paymethodid", payMethod.getID());
            pdetailhm.put("companyid", companyid);
            if (payMethod.getDetailType() != PaymentMethod.TYPE_CASH && request.getParameter("paydetail") != null) {

                JSONObject obj = new JSONObject(request.getParameter("paydetail"));
                if (payment.getPayDetail() != null) {
                    payDetailID = payment.getPayDetail().getID();
                    if (payment.getPayDetail().getCard() != null) {
                        Cardid = payment.getPayDetail().getCard().getID();
                    }
                    if (payment.getPayDetail().getCheque() != null) {
                        Cardid = payment.getPayDetail().getCheque().getID();
                        oldChequeNo = payment.getPayDetail().getCheque().getChequeNo();
                    }
                }
                if (payMethod.getDetailType() == PaymentMethod.TYPE_BANK) {
                    saveBankReconsilationDetails(request,payment);     
                    
                    HashMap chequehm = new HashMap();
                    BigInteger nextSeqNumber = new BigInteger("0");
                    boolean checkForNextSequenceNumberAlso = true;
                    boolean isChequeNumberInString = false;
                    if (extraCompanyPreferences != null) {
                        try {// USER can enter String values also in such case exception will come
                            nextSeqNumber = new BigInteger(obj.getString("chequenumber"));
                            // cheque whether Cheque Number exist or not if already exist then don't let it save
                        } catch (Exception ex) {
                            checkForNextSequenceNumberAlso = false;
                            isChequeNumberInString = true;
                        }
                    } else {
                        checkForNextSequenceNumberAlso = false;
                    }
                    boolean isChequeNumberAvailable = false;
                    boolean isEditCaseButChqNoChanged = false;
                    if (!StringUtil.isNullOrEmpty(obj.optString("chequenumber")) && extraCompanyPreferences != null) {
                        try {// OLD CHQ NO. can be String value also in such case exception will come

                            HashMap chequeNohm = new HashMap();
                            chequeNohm.put("companyId", companyid);
                            chequeNohm.put("sequenceNumber", nextSeqNumber);
                            chequeNohm.put("checkForNextSequenceNumberAlso", checkForNextSequenceNumberAlso);
                            chequeNohm.put("nextChequeNumber", obj.optString("chequenumber"));
                            chequeNohm.put("bankAccountId", payMethod.getAccount().getID());
                            isChequeNumberAvailable = paymentService.isChequeNumberAvailable(chequeNohm);

                            BigInteger oldChqNoIntValue = new BigInteger("0");
                            if (!StringUtil.isNullOrEmpty(oldChequeNo)) {
                                oldChqNoIntValue = new BigInteger(oldChequeNo);
                            }


                            if (!oldChqNoIntValue.equals(nextSeqNumber) && !StringUtil.isNullOrEmpty(oldChequeNo)) {
                                isEditCaseButChqNoChanged = true;
                            }

                            if (isChequeNumberInString) {
                                if (!oldChequeNo.equals(obj.optString("chequenumber"))) {
                                    isEditCaseButChqNoChanged = true;
                                }
                            }
                        } catch (Exception ex) {
                            if (!oldChequeNo.equals(obj.optString("chequenumber"))) {
                                isEditCaseButChqNoChanged = true;
                            }
                        }
                    } else {
                        if (!oldChequeNo.equals(obj.optString("chequenumber"))) {
                            isEditCaseButChqNoChanged = true;
                        }
                    }
                    if (preferences.getChequeNoDuplicate()!= Constants.ChequeNoIgnore) {

                        if (preferences.getChequeNoDuplicate()==Constants.ChequeNoBlock || (preferences.getChequeNoDuplicate()==Constants.ChequeNoWarn && isWarn )) {
                            if (!StringUtil.isNullOrEmpty(obj.optString("chequenumber")) && isChequeNumberAvailable && isEditCaseButChqNoChanged) {
                                String msgForException = "Cheque Number : <b>" + obj.getString("chequenumber") + "</b> is already exist. ";
                                if (isWarn) {
                                    throw new AccountingException(msgForException);
                                } else {
                                    throw new AccountingException(msgForException + "Please enter different one. ");
                                }
                            }
                            String chequeNumber = obj.optString("chequenumber");
                            chequeNumber = "'" + chequeNumber + "'";
                            HashMap<String, Object> requestMap = new HashMap();
                            requestMap.put("bankAccountId", payMethod.getAccount().getID());
                            requestMap.put("chequeNumber", chequeNumber);
                            KwlReturnObject resultRepeatedPaymentChequeDetails = accPaymentDAOobj.getRepeatedPaymentChequeDetailsForPaymentMethod(requestMap);
                            List RPCD = resultRepeatedPaymentChequeDetails.getEntityList();
                            if (RPCD.size() > 0) {
                                Object[] object = (Object[]) RPCD.get(0);
                                String paymentNumber = (String) object[1];
                                String msgForException = messageSource.getMessage("acc.field.ChequeNumber", null, RequestContextUtils.getLocale(request)) + " : <b>" + obj.getString("chequenumber") + "</b> " + messageSource.getMessage("acc.recurringMP.chequeNoReserverd", null, RequestContextUtils.getLocale(request)) + " <b>" + paymentNumber + "</b>. ";
                                if (isWarn) {
                                    throw new AccountingException(msgForException);
                                } else {
                                    throw new AccountingException(msgForException + messageSource.getMessage("acc.recurringMP.enteranotherChequeNo", null, RequestContextUtils.getLocale(request)));
                                }
                            }
                        }
                    }
                    chequehm.put("chequeno", obj.optString("chequenumber"));
                    chequehm.put("companyId", companyid);
                    chequehm.put("createdFrom", 1);
                    chequehm.put("sequenceNumber", nextSeqNumber);
                    Map<String, Object> seqchequehm = new HashMap<>();
                    obj.put(Constants.companyKey, companyid);
                    String chequesequenceformat = obj.optString("sequenceformat");
                    /**
                     * getNextChequeNumber method to generate next sequence number using
                     * sequence format,also saving the dateprefix and datesuffix in cheque table.
                     */
                    if (!StringUtil.isNullOrEmpty(chequesequenceformat) && !chequesequenceformat.equals("NA")) {
                        seqchequehm = accCompanyPreferencesObj.getNextChequeNumber(obj);
                    }

                    if (seqchequehm.containsKey(Constants.AUTO_ENTRYNUMBER)) {
                        chequehm.put("chequeno", (String) seqchequehm.get(Constants.AUTO_ENTRYNUMBER));
                    }
                    if (seqchequehm.containsKey(Constants.SEQNUMBER)) {
                        chequehm.put("sequenceNumber", (String) seqchequehm.get(Constants.SEQNUMBER));
                    }
                    if (seqchequehm.containsKey(Constants.DATEPREFIX)) {
                        chequehm.put(Constants.DATEPREFIX, (String) seqchequehm.get(Constants.DATEPREFIX));
                    }
                    if (seqchequehm.containsKey(Constants.DATEAFTERPREFIX)) {
                        chequehm.put(Constants.DATEAFTERPREFIX, (String) seqchequehm.get(Constants.DATEAFTERPREFIX));
                    }
                    if (seqchequehm.containsKey(Constants.DATESUFFIX)) {
                        chequehm.put(Constants.DATESUFFIX, (String) seqchequehm.get(Constants.DATESUFFIX));
                    }
                    
                    String autoGenNextChqNo = paymentService.getNextChequeNumber(request, payMethod.getAccount().getID());
                    if (!StringUtil.isNullOrEmpty(obj.optString("chequenumber")) && (autoGenNextChqNo.equals(obj.optString("chequenumber")) || oldChequeNo.equals(obj.optString("chequeno")))) {// if cheque Number is auto Generated OR for edit case if old cheque no. == coming chequenumber
                        chequehm.put("isAutoGeneratedChequeNumber", true);
                    }
                    chequehm.put("bankAccount", (payMethod.getAccount() != null) ? payMethod.getAccount().getID() : "");
                    chequehm.put("description", StringUtil.DecodeText(obj.optString("description")));
                    chequehm.put("bankname", StringUtil.DecodeText(obj.optString("paymentthrough")));
                    chequehm.put("duedate", df.parse(obj.getString("postdate")));
                    KwlReturnObject cqresult = accPaymentDAOobj.addCheque(chequehm);
                    Cheque cheque = (Cheque) cqresult.getEntityList().get(0);
                    pdetailhm.put("chequeid", cheque.getID());
                } else if (payMethod.getDetailType() == PaymentMethod.TYPE_CARD) {
                    HashMap cardhm = new HashMap();
                    cardhm.put("cardno", obj.getString("CardNo"));
                    cardhm.put("nameoncard", obj.getString("nameoncard"));
                    cardhm.put("expirydate", df.parse(obj.getString("expirydate")));
                    cardhm.put("cardtype", obj.getString("cardtype"));
                    cardhm.put("refno", obj.getString("refno"));
                    KwlReturnObject cdresult = accPaymentDAOobj.addCard(cardhm);
                    Card card = (Card) cdresult.getEntityList().get(0);
                    pdetailhm.put("cardid", card.getID());
                }
            }            
            pdetail = accPaymentDAOobj.saveOrUpdatePayDetail(pdetailhm);
        }/* catch(UnsupportedEncodingException ex){
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }*/ catch(ParseException ex){     
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        } catch(JSONException jex){   
            throw ServiceException.FAILURE(jex.getMessage(), jex);
        } catch (ServiceException e) {
            throw ServiceException.FAILURE(e.getMessage(), e);
        }
        return pdetail;
    }

    public void checkForInvalidChequeNumber(HttpServletRequest request, Payment editPaymentObject) throws ServiceException, SessionExpiredException, AccountingException {
        try {
            String oldChequeNo = "";
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String methodid  = "";
            if (request.getParameter("paymentMethodID") != null && !StringUtil.isNullOrEmpty(request.getParameter("paymentMethodID"))) { // SDP-3075 in case the Opening transcation "PaymnetMethodID" is passed
                methodid = request.getParameter("paymentMethodID");
            } else {
                methodid = request.getParameter("pmtmethod");
            }
            boolean  isWarn = request.getParameter("isWarn")!=null?Boolean.parseBoolean(request.getParameter("isWarn")):false;
            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
            KwlReturnObject extracapresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracapresult.getEntityList().get(0);

            KwlReturnObject result = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), methodid);
            PaymentMethod payMethod = (PaymentMethod) result.getEntityList().get(0);

            HashMap pdetailhm = new HashMap();
            pdetailhm.put("paymethodid", payMethod.getID());
            pdetailhm.put("companyid", companyid);
            if (payMethod.getDetailType() != PaymentMethod.TYPE_CASH && request.getParameter("paydetail") != null) {

                JSONObject obj = new JSONObject(request.getParameter("paydetail"));
                if (editPaymentObject!=null && editPaymentObject.getPayDetail() != null) {
                    if (editPaymentObject.getPayDetail().getCheque() != null) {
                        oldChequeNo = editPaymentObject.getPayDetail().getCheque().getChequeNo();
                    }
                }
                if (payMethod.getDetailType() == PaymentMethod.TYPE_BANK) {
                    BigInteger currentChequeNumber = new BigInteger("0");
                    boolean checkForNextSequenceNumberAlso = true;
                    boolean isChequeNumberInString = false;
                    if (extraCompanyPreferences != null) {
                        try {
                            currentChequeNumber = new BigInteger(obj.getString("chequenumber"));
                        } catch (Exception ex) {
                            checkForNextSequenceNumberAlso = false;
                            isChequeNumberInString = true;
                        }
                    } else {
                        checkForNextSequenceNumberAlso = false;
                    }
                    boolean isChequeNumberAvailable = false;
                    boolean isEditCaseButChqNoChanged = false;
                    if (!StringUtil.isNullOrEmpty(obj.optString("chequenumber","")) && extraCompanyPreferences != null) {
                        try {
                            HashMap chequeNohm = new HashMap();
                            chequeNohm.put("companyId", companyid);
                            chequeNohm.put("sequenceNumber", currentChequeNumber);
                            chequeNohm.put("checkForNextSequenceNumberAlso", checkForNextSequenceNumberAlso);
                            chequeNohm.put("nextChequeNumber", obj.optString("chequenumber"));
                            chequeNohm.put("bankAccountId", payMethod.getAccount().getID());
                            isChequeNumberAvailable = paymentService.isChequeNumberAvailable(chequeNohm);

                            BigInteger oldChqNoIntValue = new BigInteger("0");
                            if (!StringUtil.isNullOrEmpty(oldChequeNo)) {
                                oldChqNoIntValue = new BigInteger(oldChequeNo);
                            }

                            if (!oldChqNoIntValue.equals(currentChequeNumber) && !StringUtil.isNullOrEmpty(oldChequeNo)) {
                                isEditCaseButChqNoChanged = true;
                            }

                            if (isChequeNumberInString) {
                                if (!oldChequeNo.equals(obj.optString("chequenumber"))) {
                                    isEditCaseButChqNoChanged = true;
                                }
                            }
                        } catch (Exception ex) {
                            if (!oldChequeNo.equals(obj.optString("chequenumber"))) {
                                isEditCaseButChqNoChanged = true;
                            }
                        }
                    } else {
                        if (!oldChequeNo.equals(obj.optString("chequenumber"))) {
                            isEditCaseButChqNoChanged = true;
                        }
                    }
                    if (preferences.getChequeNoDuplicate()!= Constants.ChequeNoIgnore) {
                        if (preferences.getChequeNoDuplicate()== Constants.ChequeNoBlock || (preferences.getChequeNoDuplicate()== Constants.ChequeNoWarn && isWarn)) {
                            if (!StringUtil.isNullOrEmpty(obj.optString("chequenumber")) && isChequeNumberAvailable && isEditCaseButChqNoChanged) {
                                String msgForException = "Cheque Number : <b>" + obj.getString("chequenumber") + "</b> is already exist. ";
                                if (isWarn) {
                                    throw new AccountingException(msgForException);
                                } else {
                                    throw new AccountingException(msgForException+"Please enter different one. ");
                                }
                            }
                            String chequeNumber = obj.optString("chequenumber");
                            chequeNumber = "'" + chequeNumber + "'";
                            HashMap<String, Object> requestMap = new HashMap();
                            requestMap.put("bankAccountId", payMethod.getAccount().getID());
                            requestMap.put("chequeNumber", chequeNumber);
                            KwlReturnObject resultRepeatedPaymentChequeDetails = accPaymentDAOobj.getRepeatedPaymentChequeDetailsForPaymentMethod(requestMap);
                            List RPCD = resultRepeatedPaymentChequeDetails.getEntityList();
                            if (RPCD.size() > 0) {
                                Object[] object = (Object[]) RPCD.get(0);
                                String paymentNumber = (String) object[1];
                                String msgForException = messageSource.getMessage("acc.field.ChequeNumber", null, RequestContextUtils.getLocale(request)) + " : <b>" + obj.getString("chequenumber") + "</b> " + messageSource.getMessage("acc.recurringMP.chequeNoReserverd", null, RequestContextUtils.getLocale(request)) + " <b>" + paymentNumber + "</b>. ";
                                if (isWarn) {
                                    throw new AccountingException(msgForException);
                                } else {
                                    throw new AccountingException(msgForException + messageSource.getMessage("acc.recurringMP.enteranotherChequeNo", null, RequestContextUtils.getLocale(request)));
                                }
                            }
                        }
                    }
              }
            }
        } catch (JSONException jex) {
            throw ServiceException.FAILURE(jex.getMessage(), jex);
        } catch (ServiceException e) {
            throw ServiceException.FAILURE(e.getMessage(), e);
        }
    }

    public void saveBankReconsilationDetails(HttpServletRequest request, Payment payment) throws ServiceException {
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            DateFormat df = authHandler.getDateOnlyFormat(request);
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            KwlReturnObject result = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), request.getParameter("pmtmethod"));
            PaymentMethod payMethod = (PaymentMethod) result.getEntityList().get(0);           
            String detailsJsonString = request.getParameter("Details");;
            JSONArray jSONArray = new JSONArray(detailsJsonString);
            JSONObject obj = new JSONObject(request.getParameter("paydetail"));
            
            if (request.getAttribute("oldjeid") != null && !StringUtil.isNullOrEmpty((String) request.getAttribute("oldjeid"))) {
                Map<String, Object> delReqMap = new HashMap<String, Object>();
                delReqMap.put("oldjeid", request.getAttribute("oldjeid"));
                delReqMap.put("companyId", companyid);
                deleteBankReconcilation(delReqMap);  //deleting bank reconsilation info 
            }
            
            boolean bankReconsilationEntry = obj.getString("paymentstatus") != null ? obj.getString("paymentstatus").equals("Cleared") : false;
            if (bankReconsilationEntry) {
                Map<String, Object> bankReconsilationMap = new HashMap<String, Object>();
                HashMap<String, Object> globalParams = AccountingManager.getGlobalParams(request);
                String bankAccountId = payMethod.getAccount().getID();
                Date startDate = df.parse(df.format(Calendar.getInstance().getTime()));
                Date endDate = df.parse(df.format(Calendar.getInstance().getTime()));
                Date clearanceDate = df.parse(obj.getString("clearancedate"));
                bankReconsilationMap.put("bankAccountId", bankAccountId);
                bankReconsilationMap.put("startDate", startDate);//dont know the significance so have just put current date 
                bankReconsilationMap.put("endDate", endDate);//dont know the significance so have just put current date
                bankReconsilationMap.put("clearanceDate", clearanceDate);
                bankReconsilationMap.put("endingAmount", 0.0);
                bankReconsilationMap.put("companyId", companyid);
                bankReconsilationMap.put("clearingamount", payment.getDepositAmount());
                bankReconsilationMap.put("currencyid", currencyid);
                bankReconsilationMap.put("details", jSONArray);
                bankReconsilationMap.put("payment", payment);
                bankReconsilationMap.put("ismultidebit", true);
                bankReconsilationMap.put("createdby", sessionHandlerImpl.getUserid(request));
                bankReconsilationMap.put("checkCount", 1);      //As the discussion with Mayur B. and Sagar A. sir MP relates to check count
                bankReconsilationMap.put("depositeCount", 0);
                saveBankReconsilation(bankReconsilationMap, globalParams);
                auditTrailObj.insertAuditLog(AuditAction.BANK_RECONCILIATION_ADDED, "User " + sessionHandlerImpl.getUserFullName(request) + " has reconciled "+payment.getPaymentNumber(), request, companyid); 
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("savePayment : " + ex.getMessage(), ex);
        }
    }
    public Payment createPaymentObject(HttpServletRequest request, Payment editPaymentObject) throws SessionExpiredException, ServiceException, AccountingException {
        KwlReturnObject result = null;
        List list = new ArrayList();
        Invoice invoice = null;
        Customer cust = null;
        Vendor vend = null;
        Payment paymentObject = null;
            String sequenceformat = request.getParameter("sequenceformat")!=null?request.getParameter("sequenceformat"):"NA";
            String companyid = sessionHandlerImpl.getCompanyid(request);
            double externalCurrencyRate = StringUtil.getDouble(request.getParameter("externalcurrencyrate"));
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            int receiptType = StringUtil.getInteger(request.getParameter("receipttype"));
            int actualReceiptType = StringUtil.getInteger(request.getParameter("actualReceiptType") != null ? request.getParameter("actualReceiptType") : "0");
            boolean isAdvancePayment = StringUtil.getBoolean(request.getParameter("isadvpayment"));
            String entryNumber = request.getParameter("no");
            String exciseunit = request.getParameter("exciseunit") != null ? request.getParameter("exciseunit") : "";
            String methodid = request.getParameter("pmtmethod");
            String payee=request.getParameter("payee");
            double paymentCurrencyToPaymentMethodCurrencyRate= StringUtil.getDouble(request.getParameter("paymentCurrencyToPaymentMethodCurrencyExchangeRate"));
            sessionHandlerImpl.updatePaymentMethodID(request, methodid);
            String oldjeid = null;
            String Cardid = null;
            String oldChequeNo = "";
            DateFormat df = authHandler.getDateFormatter(request);
            Date creationDate=null;
            if(!StringUtil.isNullOrEmpty(request.getParameter("creationdate"))){
                try{
                    creationDate=df.parse(request.getParameter("creationdate"));
                }catch(Exception ex){
                    throw ServiceException.FAILURE("createPaymentObject : " + ex.getMessage(), ex);
                }
            }
            boolean isIBGTypeTransaction = StringUtil.getBoolean(request.getParameter("isIBGTypeTransaction"));
            String ibgDetailsID = request.getParameter("ibgDetailsID");
            String ibgCode = request.getParameter("ibgCode");
            int bankType = !StringUtil.isNullOrEmpty(request.getParameter("bankType"))?Integer.parseInt(request.getParameter("bankType")):0;
            String payDetailID = null;
            HashMap paymenthm = new HashMap();
            boolean ismanydbcr = StringUtil.getBoolean(request.getParameter("ismanydbcr"));
            paymenthm.put("ismanydbcr", ismanydbcr);
            paymenthm.put("isadvancepayment", isAdvancePayment);
            paymenthm.put("receipttype", receiptType);
            paymenthm.put("actualReceiptType", actualReceiptType);

            if (isIBGTypeTransaction) {
                paymenthm.put("isIBGTypeTransaction", isIBGTypeTransaction);
                paymenthm.put("ibgDetailsID", ibgDetailsID);
                paymenthm.put("ibgCode", ibgCode);
                paymenthm.put("bankType", bankType);
            } else {
                paymenthm.put("isIBGTypeTransaction", false);
            }

            double bankCharges = 0;
            double bankInterest = 0;
            boolean onlyAdvance = StringUtil.getBoolean(request.getParameter("onlyAdvance"));
            String bankChargesAccid = request.getParameter("bankChargesCmb");
            String bankInterestAccid = request.getParameter("bankInterestCmb");
            if (!StringUtil.isNullOrEmpty(request.getParameter("bankCharges")) && !StringUtil.isNullOrEmpty(bankChargesAccid)) {
                bankCharges = Double.parseDouble(request.getParameter("bankCharges"));
                paymenthm.put("bankCharges", bankCharges);
                paymenthm.put("bankChargesCmb", bankChargesAccid);
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("bankInterest")) && !StringUtil.isNullOrEmpty(bankInterestAccid)) {
                bankInterest = Double.parseDouble(request.getParameter("bankInterest"));
                paymenthm.put("bankInterest", bankInterest);
                paymenthm.put("bankInterestCmb", bankInterestAccid);
            }
            String paidToid = request.getParameter("paidToCmb");
            if (!StringUtil.isNullOrEmpty(request.getParameter("paidToCmb")) && !StringUtil.isNullOrEmpty(paidToid)) {
                paymenthm.put("paidToCmb", paidToid);
            }

            boolean isCustomer = false;
            boolean isVendor = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("accid"))) {
                KwlReturnObject custObj = accountingHandlerDAOobj.getObject(Customer.class.getName(), request.getParameter("accid"));
                if (custObj.getEntityList().get(0) != null) {
                    cust = (Customer) custObj.getEntityList().get(0);
                }
                if (cust != null) {
                    isCustomer = true;
                }

                KwlReturnObject vendObj = accountingHandlerDAOobj.getObject(Vendor.class.getName(), request.getParameter("accid"));
                if (vendObj.getEntityList().get(0) != null) {
                    vend = (Vendor) vendObj.getEntityList().get(0);
                }
                if (vend != null) {
                    isVendor = true;
                }
            }
            if (isCustomer) {
                paymenthm.put("customer", request.getParameter("accid"));
            } else if (isVendor) {
                paymenthm.put("vendorId", request.getParameter("accid"));
            }
            String createdby = sessionHandlerImpl.getUserid(request);
            String modifiedby = sessionHandlerImpl.getUserid(request);
            long createdon = System.currentTimeMillis();
            long updatedon = System.currentTimeMillis();

            if (editPaymentObject != null) {// for edit case
                oldjeid = editPaymentObject.getJournalEntry().getID();
                JournalEntry jetemp = editPaymentObject.getJournalEntry();

                if (editPaymentObject.getPayDetail() != null) {
                    payDetailID = editPaymentObject.getPayDetail().getID();
                    if (editPaymentObject.getPayDetail().getCard() != null) {
                        Cardid = editPaymentObject.getPayDetail().getCard().getID();
                    }
                    if (editPaymentObject.getPayDetail().getCheque() != null) {
                        Cardid = editPaymentObject.getPayDetail().getCheque().getID();
                        oldChequeNo = editPaymentObject.getPayDetail().getCheque().getChequeNo();
                    }
                }
//                if (editPaymentObject != null) {
//                    updateOpeningBalance(editPaymentObject, companyid);
//                }
            }

            synchronized (this) { //this block is used to generate auto sequence number if number is not duplicate
                String nextAutoNo = "";
                String nextAutoNoInt = "";
                int count = 0;
                if (editPaymentObject != null) {
                    if (sequenceformat.equals("NA")) {
                        if (!entryNumber.equals(editPaymentObject.getPaymentNumber())) {
                            result = accVendorPaymentobj.getPaymentFromNo(entryNumber, companyid);
                            paymenthm.put("entrynumber", entryNumber);
                            paymenthm.put("autogenerated", entryNumber.equals(nextAutoNo));
                            count = result.getRecordTotalCount();
                        }
                        if (count > 0) {
                            throw new AccountingException(messageSource.getMessage("acc.field.Paymentnumber", null, RequestContextUtils.getLocale(request)) + entryNumber + messageSource.getMessage("acc.field.alreadyexists.", null, RequestContextUtils.getLocale(request)));
                        }
                    }
                } else {
                    if (!sequenceformat.equals("NA")) {
                        paymenthm.put(Constants.SEQFORMAT, sequenceformat);
                        paymenthm.put(Constants.SEQNUMBER, "");
                    }
                    if (sequenceformat.equals("NA")) {
                        paymenthm.put("entrynumber", entryNumber);
                    } else {
                        paymenthm.put("entrynumber", "");
                    }
                    paymenthm.put("autogenerated", sequenceformat.equals("NA") ? false : true);
                }
            }
             if (sequenceformat.equals("NA")) {//In case of NA checks wheather this number can also be generated by a sequence format or not
                    List resultList = accCompanyPreferencesObj.checksEntryNumberForSequenceNumber(Constants.Acc_Make_Payment_ModuleId, entryNumber, companyid);
                    if (!resultList.isEmpty()) {
                        boolean isvalidEntryNumber = (Boolean) resultList.get(0);
                        String formatName = (String) resultList.get(1);
                        if (!isvalidEntryNumber) {
                            throw new AccountingException(messageSource.getMessage("acc.common.enterdocumentnumber", null, RequestContextUtils.getLocale(request)) + " <b>" + entryNumber + "</b> " + messageSource.getMessage("acc.common.belongsto", null, RequestContextUtils.getLocale(request)) + " <b>" + formatName + "</b>. " + messageSource.getMessage("acc.common.plselectseqformat", null, RequestContextUtils.getLocale(request)) + " <b>" + formatName + "</b> " + messageSource.getMessage("acc.common.insteadof", null, RequestContextUtils.getLocale(request)));
                        }
                    }
            }
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);

            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            currencyid = (request.getParameter("currencyid") == null ? currency.getCurrencyID() : request.getParameter("currencyid"));

            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);

            KwlReturnObject extracapresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracapresult.getEntityList().get(0);

            paymenthm.put("currencyid", currencyid);
            paymenthm.put("externalCurrencyRate", externalCurrencyRate);
            result = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), request.getParameter("pmtmethod"));
            PaymentMethod payMethod = (PaymentMethod) result.getEntityList().get(0);
            paymenthm.put("memo", request.getParameter("memo"));
            paymenthm.put("nonRefundable",!StringUtil.isNullOrEmpty(request.getParameter("NonRefundable")));
            paymenthm.put("cinno",!StringUtil.isNullOrEmpty(request.getParameter("cinno")) ?request.getParameter("cinno"):"");
            paymenthm.put("isLinkedToClaimedInvoice", !StringUtil.isNullOrEmpty(request.getParameter("isLinkedToClaimedInvoice")) ? Boolean.parseBoolean(request.getParameter("isLinkedToClaimedInvoice")):false);
            paymenthm.put("companyid", companyid);
            paymenthm.put("createdby", createdby);
            paymenthm.put("modifiedby", modifiedby);
            paymenthm.put("creationDate", creationDate);
            paymenthm.put(Constants.Checklocktransactiondate,request.getParameter("creationdate"));//ERP-16800-Without parsing date
            paymenthm.put("createdon", createdon);
            paymenthm.put("updatedon", updatedon);
            paymenthm.put("PaymentCurrencyToPaymentMethodCurrencyRate", paymentCurrencyToPaymentMethodCurrencyRate);
            if (editPaymentObject != null) {
                paymenthm.put("paymentid", editPaymentObject.getID());
            }
            paymenthm.put("payee",payee);
            paymenthm.put("exciseunit",exciseunit);
            paymentObject = accVendorPaymentobj.getPaymentObj(paymenthm);
           
        
        return paymentObject;
    }
    public ModelAndView getNextChequeNumber(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "",nextChequeNumber="";
        try {
            JSONObject jsonParams= StringUtil.convertRequestToJsonObject(request);
            Map<String,Object> chequehm = accCompanyPreferencesObj.getNextChequeNumber(jsonParams);

            if(chequehm.containsKey("nextChequeNumber")){
                nextChequeNumber = (String)chequehm.get("nextChequeNumber");
            }
            JSONObject dataObj = new JSONObject();
            jobj.put("nextChequeNumber", nextChequeNumber);

            issuccess = true;
        } catch (Exception ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }

        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public String PostJEFORReevaluation(HttpServletRequest request, double finalAmountReval, String companyid, CompanyAccountPreferences preferences, String basecurrency,String oldRevaluationJE,Map<String,Object> counterMap) {
        String jeid = "";
        try {
            String jeentryNumber = null;
            String jeIntegerPart = "";
            String jeDatePrefix = "";
            String jeDateAfterPrefix = "";
            String jeDateSuffix = "";
            String jeSeqFormatId = "";
            boolean jeautogenflag = true;
            DateFormat df = authHandler.getDateOnlyFormat(request);
            /**
             * added Link Date to Realised JE. while link Advanced Payment to
             * Reevaluated Invoice. Use 'linkingdate'
             */
            String creationDate = !StringUtil.isNullObject(request.getParameter("linkingdate")) ? request.getParameter("linkingdate") : request.getParameter("creationdate");
            Date entryDate = StringUtil.isNullOrEmpty(creationDate)? new Date():df.parse(creationDate);
            int counter=(Integer) counterMap.get("counter");
            synchronized (this) {
                HashMap<String, Object> JEFormatParams = new HashMap<String, Object>();
                JEFormatParams.put("moduleid", Constants.Acc_GENERAL_LEDGER_ModuleId);
                JEFormatParams.put("modulename", "autojournalentry");
                JEFormatParams.put("companyid", companyid);
                JEFormatParams.put("isdefaultFormat", true);

                KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(JEFormatParams);
                SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
                Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_JOURNALENTRY, format.getID(), false, entryDate);
                if(StringUtil.isNullOrEmpty(oldRevaluationJE)){
                    String nextAutoNoTemp= (String)seqNumberMap.get(Constants.AUTO_ENTRYNUMBER);  //next auto generated number
                    int sequence = Integer.parseInt((String)seqNumberMap.get(Constants.SEQNUMBER));
                    sequence = sequence + counter;
                    String number = "" + sequence;
                    String action = "" + (sequence - counter);
                    nextAutoNoTemp.replaceAll(action, number);
                    jeentryNumber = nextAutoNoTemp.replaceAll(action, number);  //next auto generated number
                    jeSeqFormatId = format.getID();
                    jeIntegerPart = String.valueOf(sequence);
                    jeDatePrefix = (String)seqNumberMap.get(Constants.DATEPREFIX);//Date Prefix Part
                    jeDateAfterPrefix = (String)seqNumberMap.get(Constants.DATEAFTERPREFIX);  //Date After Prefix Part
                    jeDateSuffix = (String)seqNumberMap.get(Constants.DATESUFFIX);//Date Suffix Part
                    jeautogenflag = true;
                    counter++;
                    counterMap.put("counter", counter);
                } else if (!StringUtil.isNullOrEmpty(oldRevaluationJE)) {
                    KwlReturnObject result = accountingHandlerDAOobj.getObject(JournalEntry.class.getName(), oldRevaluationJE);
                    JournalEntry entry = (JournalEntry) result.getEntityList().get(0);
                    jeid = entry.getID();
                    jeentryNumber = entry.getEntryNumber();
                    jeSeqFormatId = entry.getSeqformat().getID();
                    jeIntegerPart = String.valueOf(entry.getSeqnumber());
                    jeDatePrefix = entry.getDatePreffixValue();
                    jeDateAfterPrefix = entry.getDateAfterPreffixValue();
                    jeDateSuffix = entry.getDateSuffixValue();      
                    result = accJournalEntryobj.deleteJEDtails(oldRevaluationJE, companyid);
                    result = accJournalEntryobj.deleteJE(oldRevaluationJE, companyid);
                }
            }
            boolean creditDebitFlag = true;
            if (finalAmountReval < 0) {
                finalAmountReval = -(finalAmountReval);
                creditDebitFlag = false;
            }
            
            Map<String, Object> jeDataMapReval = AccountingManager.getGlobalParams(request);
            jeDataMapReval.put("entrynumber", jeentryNumber);
            jeDataMapReval.put("autogenerated", jeautogenflag);
            jeDataMapReval.put(Constants.SEQFORMAT, jeSeqFormatId);
            jeDataMapReval.put(Constants.SEQNUMBER, jeIntegerPart);
            jeDataMapReval.put(Constants.DATEPREFIX, jeDatePrefix);
            jeDataMapReval.put(Constants.DATEAFTERPREFIX, jeDateAfterPrefix);
            jeDataMapReval.put(Constants.DATESUFFIX, jeDateSuffix);
            jeDataMapReval.put("entrydate",entryDate);
            jeDataMapReval.put("companyid", companyid);
            //jeDataMapReval.put("memo", "Realised Gain/Loss");
            jeDataMapReval.put("currencyid", basecurrency);
            jeDataMapReval.put("isReval", 2);
            jeDataMapReval.put("transactionModuleid", counterMap.containsKey("transactionModuleid") ? counterMap.get("transactionModuleid") : 0);
            jeDataMapReval.put("transactionId", counterMap.get("transactionId"));
            Set jedetailsReval = new HashSet();
            KwlReturnObject jeresult = accJournalEntryobj.saveJournalEntry(jeDataMapReval);//Create Journal entry without JEdetails
            JournalEntry journalEntry = (JournalEntry) jeresult.getEntityList().get(0);
            jeid = journalEntry.getID();
            jeDataMapReval.put("jeid", jeid);
            JSONObject jedjsonreval = new JSONObject();
            jedjsonreval.put("srno", jedetailsReval.size() + 1);
            jedjsonreval.put("companyid", companyid);
            jedjsonreval.put("amount", finalAmountReval);//rateDecreased?(-1*amountDiff):
            jedjsonreval.put("accountid", preferences.getForeignexchange().getID());
            jedjsonreval.put("debit", creditDebitFlag ? false : true);
            jedjsonreval.put("jeid", jeid);
            KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjsonreval);
            JournalEntryDetail jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
            jedetailsReval.add(jed);
            /*
             *  Featching Custom field/Dimension Data from Company prefrences.
             */
            String customfield="";
            String lineleveldimensions="";
            KwlReturnObject result =accJournalEntryobj.getRevaluationJECustomData(companyid);
            RevaluationJECustomData revaluationJECustomData= (result != null && result.getEntityList().size() > 0  && result.getEntityList().get(0)!= null) ? (RevaluationJECustomData) result.getEntityList().get(0): null;
            if(revaluationJECustomData != null){
                customfield=revaluationJECustomData.getCustomfield();
                lineleveldimensions=revaluationJECustomData.getLineleveldimensions();
            }
            
            /*        
             * Make dimensions entry
             */
            setDimensionForRevalJEDetail(lineleveldimensions, jed);
             
            String unrealised_accid = "";
            if (preferences.getUnrealisedgainloss() != null) {
                unrealised_accid = preferences.getUnrealisedgainloss().getID();
            } else {

                throw new AccountingException(messageSource.getMessage("acc.field.NoUnrealisedGain/Lossaccountfound", null, RequestContextUtils.getLocale(request)));
            }
            jedjsonreval = new JSONObject();
            jedjsonreval.put("companyid", companyid);
            jedjsonreval.put("srno", jedetailsReval.size() + 1);
            jedjsonreval.put("amount", finalAmountReval);
            jedjsonreval.put("accountid", unrealised_accid);
            jedjsonreval.put("debit", creditDebitFlag ? true : false);
            jedjsonreval.put("jeid", jeid);
            jedresult = accJournalEntryobj.addJournalEntryDetails(jedjsonreval);
            jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
            jedetailsReval.add(jed);
            /*        
             * Make dimensions entry
             */
            setDimensionForRevalJEDetail(lineleveldimensions, jed);
            
            jeDataMapReval.put("jedetails", jedetailsReval);
            jeDataMapReval.put("externalCurrencyRate", 0.0);
            jeresult = accJournalEntryobj.saveJournalEntry(jeDataMapReval);
            /*        
             * Make custom field entry
             */

            if (!StringUtil.isNullOrEmpty(customfield)) {
                JSONArray jcustomarray = new JSONArray(customfield);
                HashMap<String, Object> customrequestParams = new HashMap<>();
                customrequestParams.put("customarray", jcustomarray);
                customrequestParams.put("modulename", Constants.Acc_JE_modulename);
                customrequestParams.put("moduleprimarykey", Constants.Acc_JEid);
                customrequestParams.put("modulerecid", jeid);
                customrequestParams.put("moduleid", Constants.Acc_GENERAL_LEDGER_ModuleId);
                customrequestParams.put("companyid", companyid);
                customrequestParams.put("customdataclasspath", Constants.Acc_BillInv_custom_data_classpath);
                KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                    Map<String, Object> customjeDataMap = new HashMap<>();
                    customjeDataMap.put("accjecustomdataref", jeid);
                    customjeDataMap.put("jeid", jeid);
                    customjeDataMap.put("istemplate", journalEntry.getIstemplate());
                    customjeDataMap.put("isReval", journalEntry.getIsReval());
                    accJournalEntryobj.updateCustomFieldJournalEntry(customjeDataMap);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jeid;
    }
    
    /**
     * Description :This method is used to save Dimension For Reval JEDetail
     */
    public void setDimensionForRevalJEDetail(String lineleveldimensions, JournalEntryDetail jed) {
        try {
            if (!StringUtil.isNullOrEmpty(lineleveldimensions)) {
                JSONArray jcustomarray = new JSONArray(lineleveldimensions);
                HashMap<String, Object> customrequestParams = new HashMap<>();
                customrequestParams.put("customarray", jcustomarray);
                customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
                customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);// Constants.Acc_JEDetail_recdetailId
                customrequestParams.put("modulerecid", jed.getID());
                customrequestParams.put("recdetailId", jed.getID());
                customrequestParams.put("moduleid", Constants.Acc_GENERAL_LEDGER_ModuleId);
                customrequestParams.put("companyid", jed.getCompany().getCompanyID());
                customrequestParams.put("customdataclasspath", Constants.Acc_BillInvDetail_custom_data_classpath);
                KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                    //jed.setAccJEDetailCustomData((AccJEDetailCustomData) hibernateTemplate.get(AccJEDetailCustomData.class, jed.getID()));
                    JSONObject jedjsonreval = new JSONObject();
                    jedjsonreval.put("accjedetailcustomdata", jed.getID());
                    jedjsonreval.put("jedid", jed.getID());
                    accJournalEntryobj.updateJournalEntryDetails(jedjsonreval);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public ModelAndView deletePaymentForEdit(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();

        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            jobj = accVendorPaymentModuleServiceObj.deletePaymentPermanentJSON(paramJobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } 
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public ModelAndView getInvoiceAdvanceCNDN(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;

//            DefaultTransactionDefinition def = new DefaultTransactionDefinition();
//            def.setName("VP_Tx");
//            def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
//            TransactionStatus status = txnManager.getTransaction(def);
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            JSONArray jArr = new JSONArray();
            HashMap<String, String> paymentHashMap = new HashMap<String, String>();
            if (request.getParameter("selectedData") != null) {
                jArr = new JSONArray(request.getParameter("selectedData"));
                if (jArr.length() > 0) {
                    JSONObject jSONObject = jArr.getJSONObject(0);
                    if (!StringUtil.isNullOrEmpty(jSONObject.optString("billid", ""))) {
                        paymentHashMap.put("paymentId", jSONObject.getString("billid"));
                        paymentHashMap.put("invoiceadvcndntype", jSONObject.getString("invoiceadvcndntype"));
                        KwlReturnObject result = accVendorPaymentobj.getInvoiceAdvPaymentList(paymentHashMap);
                        List paymentList = result.getEntityList();
                        Iterator iter = paymentList.iterator();
                        JSONArray jrr = new JSONArray();
                        while (iter.hasNext()) {
                            JSONObject jSONObj = new JSONObject();
                            Payment payment = (Payment) iter.next();
                            jSONObj.put("paymentID", payment.getID());
                            jSONObj.put("invoiceadvcndntype", payment.getInvoiceAdvCndnType());
                            jrr.put(jSONObj);
                        }
                        jobj.put("data", jrr);
                        jobj.put("count", paymentList.size());
                    }
                }

            }
//                txnManager.commit(status);
            issuccess = true;
            msg = messageSource.getMessage("acc.pay.del", null, RequestContextUtils.getLocale(request));  //"Payment(s) has been deleted successfully";
        } catch (SessionExpiredException ex) {
//                txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
//                txnManager.rollback(status);
            msg = "" + ex.getMessage();
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView saveContraPayment(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        String JENumBer = "";
        String billno = "";
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("SP_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        try {
            List li = saveContraPayment(request);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String[] id = (String[]) li.get(0);
            if (li.get(1) != null) {
                billno = li.get(1).toString();
            }
            if (li.get(2) != null) {
                JENumBer = li.get(2).toString();
            }
            issuccess = true;
            msg = messageSource.getMessage("acc.contra.save", null, RequestContextUtils.getLocale(request)) + "<br/>" + messageSource.getMessage("acc.field.DocumentNo", null, RequestContextUtils.getLocale(request)) + ": <b>" + billno + ",</b>" + messageSource.getMessage("acc.field.JENo", null, RequestContextUtils.getLocale(request)) + ": <b>" + JENumBer + "</b>";   //"Payment information has been saved successfully";
            txnManager.commit(status);
//            status = txnManager.getTransaction(def);
//            deleteJEArray(id[0],companyid);
//            txnManager.commit(status);
//            status = txnManager.getTransaction(def);
//            deleteChequeOrCard(id[1],companyid);
//            txnManager.commit(status);
        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = "" + ex.getMessage();
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public List saveContraPayment(HttpServletRequest request) throws SessionExpiredException, ServiceException, AccountingException {
        KwlReturnObject result;
        List list = new ArrayList();
        Payment payment = null;
        String oldjeid = null;
        String Cardid = null;
        List ll = new ArrayList();
        try {
            String maininvoiceid = request.getParameter("maininvoiceid");//Invoice
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Invoice.class.getName(), maininvoiceid);
            Invoice invoice = (Invoice) cmpresult.getEntityList().get(0);
            Account dipositTo = invoice.getCustomer().getAccount();

            double amount = 0;
            double amountDiff = 0;
//            boolean rateDecreased = false;
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String sequenceformat = request.getParameter("sequenceformat");
            double externalCurrencyRate = StringUtil.getDouble(request.getParameter("externalcurrencyrate"));
            DateFormat df = authHandler.getDateOnlyFormat(request);
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            String drAccDetails = request.getParameter("detail");
            boolean isMultiDebit = StringUtil.getBoolean(request.getParameter("ismultidebit"));
            String entryNumber = request.getParameter("no");
//            String receiptid =request.getParameter("billid");

            String methodid = request.getParameter("pmtmethod");
            sessionHandlerImpl.updatePaymentMethodID(request, methodid);

            String jeid = null;
//            String payDetailID=null;
            String jeentryNumber = null;
            boolean jeautogenflag = false;
            String jeIntegerPart = "";
            String jeDatePrefix = "";
            String jeDateAfterPrefix = "";
            String jeDateSuffix = "";
            String jeSeqFormatId = "";
            HashMap paymenthm = new HashMap();
            String nextAutoNo = "";
            Date creationDate = df.parse(request.getParameter("creationdate"));

            synchronized (this) {
                result = accVendorPaymentobj.getPaymentFromNo(entryNumber, companyid);
                int count = result.getRecordTotalCount();
                if (count > 0) {
                    if (sequenceformat.equals("NA")) {
                        throw new AccountingException(messageSource.getMessage("acc.field.Paymentnumber", null, RequestContextUtils.getLocale(request)) + entryNumber + messageSource.getMessage("acc.field.alreadyexists.", null, RequestContextUtils.getLocale(request)));
                    }
                }
                boolean seqformat_oldflag = StringUtil.getBoolean(request.getParameter("seqformat_oldflag"));

                String nextAutoNoInt = "";
                String datePrefix = "";
                String dateafterPrefix = "";
                String dateSuffix = "";
                if (seqformat_oldflag) {
                    nextAutoNo = accCompanyPreferencesObj.getNextAutoNumber(companyid, StaticValues.AUTONUM_PAYMENT, sequenceformat);
                } else {
                    Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                    seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_PAYMENT, sequenceformat, seqformat_oldflag, creationDate);
                    nextAutoNo = (String)seqNumberMap.get(Constants.AUTO_ENTRYNUMBER);  //next auto generated number
                    nextAutoNoInt = (String)seqNumberMap.get(Constants.SEQNUMBER);//integer Part
                    datePrefix = (String)seqNumberMap.get(Constants.DATEPREFIX);//Date Prefix Part
                    dateafterPrefix = (String)seqNumberMap.get(Constants.DATEAFTERPREFIX);  //Date After Prefix Part
                    dateSuffix = (String)seqNumberMap.get(Constants.DATESUFFIX);//Date Suffix Part
                    
                    paymenthm.put(Constants.SEQFORMAT, sequenceformat);
                    paymenthm.put(Constants.SEQNUMBER, nextAutoNoInt);
                    paymenthm.put(Constants.DATEPREFIX, datePrefix);
                    paymenthm.put(Constants.DATEAFTERPREFIX, dateafterPrefix);
                    paymenthm.put(Constants.DATESUFFIX, dateSuffix);
                }
                if (!sequenceformat.equals("NA")) {
                    entryNumber = nextAutoNo;
                }
            }
            paymenthm.put("entrynumber", entryNumber);

            paymenthm.put("autogenerated", entryNumber.equals(nextAutoNo));

            cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);

            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            currencyid = (request.getParameter("currencyid") == null ? currency.getCurrencyID() : request.getParameter("currencyid"));

//            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
//            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);

            paymenthm.put("currencyid", currencyid);
            paymenthm.put("externalCurrencyRate", externalCurrencyRate);
//            result = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), request.getParameter("pmtmethod"));
//            PaymentMethod payMethod = (PaymentMethod) result.getEntityList().get(0);
//
//            dipositTo = payMethod.getAccount();
//            HashMap pdetailhm = new HashMap();
//            pdetailhm.put("paymethodid", payMethod.getID());
//            pdetailhm.put("companyid", companyid);
//            
//            KwlReturnObject pdresult=null;
//            if (!StringUtil.isNullOrEmpty(receiptid)&&!StringUtil.isNullOrEmpty(payDetailID))
//                pdetailhm.put("paydetailid", payDetailID);
//                pdresult = accPaymentDAOobj.addPayDetail(pdetailhm);

//            PayDetail pdetail = (PayDetail) pdresult.getEntityList().get(0);
//            paymenthm.put("paydetailsid", pdetail.getID());
            paymenthm.put("memo", request.getParameter("memo"));
            paymenthm.put("companyid", companyid);
            if (StringUtil.isNullOrEmpty(oldjeid)) {
                synchronized (this) {
                    HashMap<String, Object> JEFormatParams = new HashMap<String, Object>();
                    JEFormatParams.put("moduleid", Constants.Acc_GENERAL_LEDGER_ModuleId);
                    JEFormatParams.put("modulename", "autojournalentry");
                    JEFormatParams.put("companyid", companyid);
                    JEFormatParams.put("isdefaultFormat", true);

                    KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(JEFormatParams);
                    SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
                    Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                    seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_JOURNALENTRY, format.getID(), false, creationDate);
                    jeentryNumber = (String)seqNumberMap.get(Constants.AUTO_ENTRYNUMBER);  //next auto generated number
                    jeIntegerPart = (String)seqNumberMap.get(Constants.SEQNUMBER);//integer Part
                    jeDatePrefix = (String)seqNumberMap.get(Constants.DATEPREFIX);//Date Prefix Part
                    jeDateAfterPrefix = (String)seqNumberMap.get(Constants.DATEAFTERPREFIX);  //Date After Prefix Part
                    jeDateSuffix = (String)seqNumberMap.get(Constants.DATESUFFIX);//Date Suffix Part
                    jeSeqFormatId = format.getID();
                    jeautogenflag = true;
                }
            }
            Map<String, Object> jeDataMap = AccountingManager.getGlobalParams(request);
            jeDataMap.put("entrynumber", jeentryNumber);
            jeDataMap.put("autogenerated", jeautogenflag);
            jeDataMap.put(Constants.SEQFORMAT, jeSeqFormatId);
            jeDataMap.put(Constants.SEQNUMBER, jeIntegerPart);
            jeDataMap.put(Constants.DATEPREFIX, jeDatePrefix);
            jeDataMap.put(Constants.DATEAFTERPREFIX, jeDateAfterPrefix);
            jeDataMap.put(Constants.DATESUFFIX, jeDateSuffix);
            jeDataMap.put("entrydate", creationDate);
            jeDataMap.put("companyid", company.getCompanyID());
            jeDataMap.put("memo", "Contra Entry " + request.getParameter("memo"));
            jeDataMap.put("currencyid", currencyid);
            Set jedetails = new HashSet();
            KwlReturnObject jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Create Journal entry without JEdetails
            JournalEntry journalEntry = (JournalEntry) jeresult.getEntityList().get(0);
            jeid = journalEntry.getID();
            jeDataMap.put("jeid", jeid);
            String detail = request.getParameter("detail");
            JSONArray jArr = new JSONArray();
            if (!StringUtil.isNullOrEmpty(detail)) {
                jArr = new JSONArray(detail);
            }
            if (jArr.length() > 0 && !isMultiDebit) {
                amount = 0;
                for (int i = 0; i < jArr.length(); i++) {
                    JSONObject jobj = jArr.getJSONObject(i);
                    amount += jobj.getDouble("payment");
                }
//                amountDiff = oldPaymentRowsAmount(request, jArr, currencyid,externalCurrencyRate);
//                if (preferences.getForeignexchange() == null) {
//                    throw new AccountingException(messageSource.getMessage("acc.common.forex", null, RequestContextUtils.getLocale(request)));
//                }
//                if (amountDiff != 0 && preferences.getForeignexchange() != null) {
//                    if(amountDiff < 0) {
//                        rateDecreased = true;
//                    }
//                    JSONObject jedjson = new JSONObject();
//                    jedjson.put("srno", jedetails.size()+1);
//                    jedjson.put("companyid", companyid);
//                    jedjson.put("amount", rateDecreased?(-1*amountDiff):amountDiff);
//                    jedjson.put("accountid", preferences.getForeignexchange().getID());
//                    jedjson.put("debit", rateDecreased?true:false);
//                    jedjson.put("jeid", jeid);
//                    KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
//                    JournalEntryDetail jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
//                    jedetails.add(jed);
//                }

            } else {
                amount = Double.parseDouble(request.getParameter("amount"));
            }
            JSONObject jedjson = null;
            KwlReturnObject jedresult = null;
            JournalEntryDetail jed = null;
            if (isMultiDebit) {
                JSONArray drAccArr = new JSONArray(drAccDetails);
                for (int i = 0; i < drAccArr.length(); i++) {
                    JSONObject jobj = drAccArr.getJSONObject(i);
                    jedjson = new JSONObject();
                    jedjson.put("srno", jedetails.size() + 1);
                    jedjson.put("companyid", companyid);
                    jedjson.put("amount", Double.parseDouble(jobj.getString("dramount")));
                    jedjson.put("accountid", jobj.getString("accountid"));
                    jedjson.put("debit", true);
                    jedjson.put("jeid", jeid);
                    jedjson.put("description", jobj.optString("description"));
                    jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                    jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                    jedetails.add(jed);
                }
            } else {
                jedjson = new JSONObject();
                jedjson.put("companyid", companyid);
                jedjson.put("srno", jedetails.size() + 1);
                jedjson.put("amount", amount + amountDiff);
                jedjson.put("accountid", request.getParameter("accid"));
                jedjson.put("debit", true);
                jedjson.put("jeid", jeid);
                jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                jedetails.add(jed);
            }
            jedjson = new JSONObject();
            jedjson.put("srno", jedetails.size() + 1);
            jedjson.put("companyid", companyid);
            //(If currency USD and base currency SGD, inv rate 0.81 n pay rate 0.80 then amount = 1234.57, amountDiff = -15.24, depositAmt = 1250 SGD)
            jedjson.put("amount", amount);
            jedjson.put("accountid", dipositTo.getID());
            jedjson.put("debit", false);
            jedjson.put("jeid", jeid);
            jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);

            jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
            jedetails.add(jed);
            jeDataMap.put("jedetails", jedetails);
            jeDataMap.put("externalCurrencyRate", externalCurrencyRate);
            jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Add Journal entry details
            journalEntry = (JournalEntry) jeresult.getEntityList().get(0);
            paymenthm.put("journalentryid", journalEntry.getID());
            paymenthm.put("contraentry", true);
            if (payment != null) {
                paymenthm.put("paymentid", payment.getID());
            }

            result = accVendorPaymentobj.savePayment(paymenthm);
            payment = (Payment) result.getEntityList().get(0);

            //Save Payment Details

            HashSet payDetails = savePaymentRows(payment, company, jArr, isMultiDebit, invoice);
            paymenthm.put("paymentid", payment.getID());
            paymenthm.put("pdetails", payDetails);

            result = accVendorPaymentobj.savePayment(paymenthm);
            payment = (Payment) result.getEntityList().get(0);

            //Insert new entries in optimized table.
            accJournalEntryobj.saveAccountJEs_optimized(jeid);

            list.add(payment);
//        } catch (UnsupportedEncodingException ex) {
//            throw ServiceException.FAILURE(messageSource.getMessage("acc.common.excp", null, RequestContextUtils.getLocale(request)), ex);
        } catch (ParseException ex) {
            throw ServiceException.FAILURE("savePayment : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("savePayment : " + ex.getMessage(), ex);
        }
        ll.add(new String[]{oldjeid, Cardid});
        ll.add(payment.getPaymentNumber());
        ll.add(payment.getJournalEntry().getEntryNumber());
        return (ArrayList) ll;
    }

    public class EnglishNumberToWords {

        private final String[] tensNames = {
            "", " Ten", " Twenty", " Thirty", " Forty", " Fifty", " Sixty", " Seventy", " Eighty", " Ninety"
        };
        private final String[] numNames = {
            "", " One", " Two", " Three", " Four", " Five", " Six", " Seven", " Eight", " Nine", " Ten", " Eleven", " Twelve",
            " Thirteen", " Fourteen", " Fifteen", " Sixteen", " Seventeen", " Eighteen", " Nineteen"
        };

        private String convertLessThanOneThousand(int number) {
            String soFar;
            if (number % 100 < 20) {
                soFar = numNames[number % 100];
                number /= 100;
            } else {
                soFar = numNames[number % 10];
                number /= 10;
                soFar = tensNames[number % 10] + soFar;
                number /= 10;
            }
            if (number == 0) {
                return soFar;
            }
            return numNames[number] + " Hundred" + soFar;
        }

        private String convertLessOne(int number, KWLCurrency currency) {
            String soFar;
            String val = currency.getAfterDecimalName();
            if (number % 100 < 20) {
                soFar = numNames[number % 100];
                number /= 100;
            } else {
                soFar = numNames[number % 10];
                number /= 10;
                soFar = tensNames[number % 10] + soFar;
                number /= 10;
            }
            if (number == 0) {
                return " And " + soFar + " " + val;
            }
            return " And " + numNames[number] + " " + val + soFar;
        }

        public String convert(Double number, KWLCurrency currency, int countryLanguageId) {
            if (number == 0) {
                return "Zero";
            }
            String answer = "";

            if (countryLanguageId == Constants.OtherCountryLanguageId) { // For universal conversion of amount in words. i.e. in Billion,trillion etc
                answer = universalConvert(number, currency);
            } else if (countryLanguageId == Constants.CountryIndiaLanguageId) { // For Indian word format.ie. in lakhs, crores
                answer = indianConvert(number, currency);
            }
            return answer;
        }
        public String universalConvert(Double number,KWLCurrency currency) {
            boolean isNegative = false;
            if (number < 0) {
                isNegative = true;
                number = -1 * number;
            }
            String snumber = Double.toString(number);
            String mask = "000000000000.00";
            DecimalFormat df = new DecimalFormat(mask);
            snumber = df.format(number);
                int billions = Integer.parseInt(snumber.substring(0, 3));
                int millions = Integer.parseInt(snumber.substring(3, 6));
                int hundredThousands = Integer.parseInt(snumber.substring(6, 9));
                int thousands = Integer.parseInt(snumber.substring(9, 12));
                int fractions = Integer.parseInt(snumber.substring(13, 15));
                String tradBillions;
                switch (billions) {
                    case 0:
                        tradBillions = "";
                        break;
                    case 1:
                        tradBillions = convertLessThanOneThousand(billions) + " Billion ";
                        break;
                    default:
                        tradBillions = convertLessThanOneThousand(billions) + " Billion ";
                }
                String result = tradBillions;

                String tradMillions;
                switch (millions) {
                    case 0:
                        tradMillions = "";
                        break;
                    case 1:
                        tradMillions = convertLessThanOneThousand(millions) + " Million ";
                        break;
                    default:
                        tradMillions = convertLessThanOneThousand(millions) + " Million ";
                }
                result = result + tradMillions;

                String tradHundredThousands;
                switch (hundredThousands) {
                    case 0:
                        tradHundredThousands = "";
                        break;
                    case 1:
                        tradHundredThousands = "One Thousand ";
                        break;
                    default:
                        tradHundredThousands = convertLessThanOneThousand(hundredThousands) + " Thousand ";
                }
                result = result + tradHundredThousands;
                String tradThousand;
                tradThousand = convertLessThanOneThousand(thousands);
                result = result + tradThousand;
                String paises;
                switch (fractions) {
                    case 0:
                        paises = "";
                        break;
                    default:
                        paises = convertLessOne(fractions, currency);
                }
                result = result + paises; //to be done later
                result = result.replaceAll("^\\s+", "").replaceAll("\\b\\s{2,}\\b", " ");
                if (isNegative) {
                    result = "Minus " + result;
                }
//            result = result.substring(0, 1).toUpperCase() + result.substring(1).toLowerCase(); // Make first letter of operand capital.
                return result;
            }
        
        public String indianConvert(Double number,KWLCurrency currency) {
            boolean isNegative = false;
            if (number < 0) {
                isNegative = true;
                number = -1 * number;
            }
            String snumber = Double.toString(number);
            String mask = "000000000000000.00";  //ERP-17681
            DecimalFormat df = new DecimalFormat(mask);
            snumber = df.format(number);

            Long n = Long.parseLong(snumber.substring(0, 15));
            int fractions = Integer.parseInt(snumber.split("\\.").length != 0 ? snumber.split("\\.")[1] : "0");
            if (n == 0) {
                return "Zero";
            }
            String arr1[] = {"One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"};
            String arr2[] = {"Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"};
            String unit[] = {"neel","kharab","Arab", "Crore", "Lakh", "Thousand", "Hundred", ""};
            long factor[] = {100000000000l,100000000000l,1000000000, 10000000, 100000, 1000, 100, 1};
            String answer = "", paises = "";
            if (n < 0) {
                answer = "Minus";
                n = -n;
            }
            int quotient, units, tens;
            for (int i = 0; i < factor.length; i++) {
                quotient = (int)(n / factor[i]);
                if (quotient > 0) {
                    if (quotient < 20) {
                        answer = answer + " " + arr1[quotient - 1];
                    } else {
                        units = quotient % 10;
                        tens = quotient / 10;
                        if (units > 0) {
                            answer = answer + " " + arr2[tens - 2] + " " + arr1[units - 1];
                        } else {
                            answer = answer + " " + arr2[tens - 2] + " ";
                        }
                    }
                    answer = answer + " " + unit[i];
                }
                n = n % factor[i];
            }
            switch (fractions) {
                case 0:
                    paises = "";
                    break;
                default:
                    paises = convertLessOne(fractions, currency);
            }
            answer = answer + paises; //to be done later
            return answer.trim();
        }
    }

    private void deleteBankReconcilation(Map<String, Object> requestParams) throws ServiceException {
        if (requestParams.containsKey("oldjeid")) {
            String reconsilationID = "";
            String unReconsilationID = "";
            String jeid = (String) requestParams.get("oldjeid");
            String companyid = (String) requestParams.get("companyId");

            //Deleting  BankReconciliationDetail
            KwlReturnObject reconsiledDetails = accBankReconciliationObj.getBRfromJE(jeid, companyid, true);
            if (reconsiledDetails.getRecordTotalCount() > 0) {
                List<BankReconciliationDetail> brd = reconsiledDetails.getEntityList();
                for (BankReconciliationDetail reconciliation : brd) {
                    accBankReconciliationObj.permenantDeleteBankReconciliationDetail(reconciliation.getID(), companyid);
                    reconsilationID = reconciliation.getBankReconciliation().getID();
                }
            }

            //Deleting  BankUnreconciliationDetail
            KwlReturnObject unReconsiledDetails = accBankReconciliationObj.getBankUnReconsiledfromJE(jeid, companyid, true);
            if (unReconsiledDetails.getRecordTotalCount() > 0) {
                List<BankUnreconciliationDetail> brd = unReconsiledDetails.getEntityList();
                for (BankUnreconciliationDetail reconciliation : brd) {
                    accBankReconciliationObj.permenantDeleteBankUnReconciliationDetail(reconciliation.getID(), companyid);
                    unReconsilationID = reconciliation.getBankReconciliation().getID();
                }
            }
            if (!StringUtil.isNullOrEmpty(reconsilationID)) {
                accBankReconciliationObj.deleteBankReconciliation(reconsilationID, companyid);
            }
            if (!StringUtil.isNullOrEmpty(unReconsilationID)) {
                accBankReconciliationObj.deleteBankReconciliation(unReconsilationID, companyid);
            }
        }
    }

    private void saveBankReconsilation(Map<String, Object> requestParams, Map<String, Object> globalParams) throws ServiceException, JSONException, UnsupportedEncodingException {
        HashMap<String, Object> brMap = new HashMap<String, Object>();
        KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(globalParams, (Double) requestParams.get("clearingamount"), (String) requestParams.get("currencyid"), (Date) requestParams.get("clearanceDate"), 0);
        double clearingAmount = (Double) crresult.getEntityList().get(0);
        boolean isOpeningPayment = false;
        HashSet hs = new HashSet();
        String billid = "";
        String jeid = "";
        double amount = 0;
        if (requestParams.containsKey("isOpeningPayment")) {
            isOpeningPayment = Boolean.parseBoolean(requestParams.get("isOpeningPayment").toString());
        }
        if (requestParams.containsKey("oldjeid")) {
            deleteBankReconcilation(requestParams);
        }

        brMap.put("startdate", (Date) requestParams.get("startDate"));
        brMap.put("enddate", (Date) requestParams.get("endDate"));
        brMap.put("clearanceDate", (Date) requestParams.get("clearanceDate"));
        brMap.put("clearingamount", (0 - clearingAmount));
        brMap.put("endingamount", (Double) requestParams.get("endingAmount"));
        brMap.put("accountid", (String) requestParams.get("bankAccountId"));
        brMap.put("companyid", (String) requestParams.get("companyId"));
        brMap.put("checkCount", (Integer) requestParams.get("checkCount"));
        brMap.put("depositeCount", (Integer) requestParams.get("depositeCount"));
        brMap.put("createdby", (String) requestParams.get("createdby"));
        KwlReturnObject brresult = accBankReconciliationObj.addBankReconciliation(brMap);
        BankReconciliation br = (BankReconciliation) brresult.getEntityList().get(0);
        String brid = br.getID();
        Payment payment = (Payment) requestParams.get("payment");
        String accountName = "";
        int moduleID = 0;
        if (!isOpeningPayment) {
            JournalEntry entry = payment.getJournalEntry();
            Set details = entry.getDetails();
            Iterator iter = details.iterator();
            while (iter.hasNext()) {
                JournalEntryDetail d = (JournalEntryDetail) iter.next();
                if (!d.isDebit()) {
                    continue;
                }
                accountName += d.getAccount().getName() + ", ";
            }

            //Calculate the Amount.
            JSONArray jArr = (JSONArray) requestParams.get("details");
            for (int i = 0; i < jArr.length(); i++) {
                JSONObject jobj = jArr.getJSONObject(i);
                if (jobj.optDouble("enteramount", 0) != 0) {
                    KwlReturnObject crresult1 = accCurrencyDAOobj.getCurrencyToBaseAmount(globalParams, jobj.getDouble("enteramount"), jobj.getString("currencyid"), (Date) requestParams.get("clearanceDate"), 0);
                    double amt = (Double) crresult1.getEntityList().get(0);
                    if (jobj.optBoolean("debit", true)) {
                        amount += amt;
                    } else {
                        amount -= amt;
                    }
                }
            }
            jeid = entry.getID();
            billid = null;
            moduleID = Constants.Acc_GENERAL_LEDGER_ModuleId;
        } else {
            jeid = null;
            billid = payment.getID();
            amount = clearingAmount;
            moduleID = Constants.Acc_Make_Payment_ModuleId;
            accountName ="";
        }
        accountName = accountName.substring(0, Math.max(0, accountName.length() - 2));

        HashMap<String, Object> brdMap = new HashMap<>();
        brdMap.put("companyid", (String) requestParams.get("companyId"));
        brdMap.put("amount", amount);
        brdMap.put("jeid", jeid);
        brdMap.put("accountname", accountName);
        brdMap.put("debit", false);
        brdMap.put("brid", brid);
        brdMap.put("transactionID",billid);
        brdMap.put("moduleID", moduleID);
        brdMap.put("isOpeningTransaction",isOpeningPayment);
        
        KwlReturnObject brdresult1 = accBankReconciliationObj.addBankReconciliationDetail(brdMap);
        BankReconciliationDetail brd1 = (BankReconciliationDetail) brdresult1.getEntityList().get(0);
        hs.add(brd1);
    }

    public void deleteJEArray(String oldjeid, String companyid) throws ServiceException, AccountingException, SessionExpiredException {
        try {      //delete old invoice
            JournalEntryDetail jed = null;
            if (!StringUtil.isNullOrEmpty(oldjeid)) {
                KwlReturnObject result = accJournalEntryobj.getJournalEntryDetail(oldjeid, companyid);
                List list = result.getEntityList();
                Iterator itr = list.iterator();
                while (itr.hasNext()) {
                    jed = (JournalEntryDetail) itr.next();
                    //Sagar - No need to revert entry from optimized table as entries are already reverted from calling main function in edit case.
                    result = accJournalEntryobj.deleteJournalEntryDetailRow(jed.getID(), companyid);
                }
                result = accJournalEntryobj.permanentDeleteJournalEntry(oldjeid, companyid);
                KwlReturnObject jedresult1 = accJournalEntryobj.deleteJECustomData(oldjeid);
            }
        } catch (Exception ex) {
            //Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
    }

    public void deleteChequeOrCard(String id, String companyid) throws ServiceException, AccountingException, SessionExpiredException {
        try {
            if (id != null) {
                accPaymentDAOobj.deleteCard(id, companyid);
                accPaymentDAOobj.deleteChequePermanently(id, companyid);
            }
        } catch (Exception ex) {
            //Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
    }

    public ModelAndView saveBillingPayment(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONObject jobjDetails = new JSONObject();
        JSONArray jArr = new JSONArray();
        boolean issuccess = false;
        boolean isChequePrint = false;
        String msg = "";
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("SP_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        try {
            List li = saveBillingPayment(request);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String[] id = (String[]) li.get(0);
            issuccess = true;
            if (!StringUtil.isNullOrEmpty(request.getParameter("isChequePrint"))) {
                isChequePrint = Boolean.parseBoolean(request.getParameter("isChequePrint"));
            }
            if (isChequePrint) {
                SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("dd-MM-yyyy");
                Date creationDate = new Date(request.getParameter("creationdate"));
                String date = DATE_FORMAT.format(creationDate);
                String[] amount = (String[]) li.get(1);
                String[] amount1 = (String[]) li.get(2);
                String[] accName = (String[]) li.get(3);
                jobjDetails.put(amount[0], amount[1]);
                jobjDetails.put(amount1[0], amount1[1]);
                jobjDetails.put(accName[0], accName[1]);
                jobjDetails.put("date", date);
                jArr.put(jobjDetails);
            }
            msg = messageSource.getMessage("acc.pay.billsave", null, RequestContextUtils.getLocale(request));   //"Billing Payment information has been saved successfully";
//            msg = result.getMsg();
            txnManager.commit(status);
            status = txnManager.getTransaction(def);
            deleteJEArray(id[0], companyid);
            txnManager.commit(status);
            status = txnManager.getTransaction(def);
            deleteChequeOrCard(id[1], companyid);
            txnManager.commit(status);
        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = "" + ex.getMessage();
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
                jobj.put("data", jArr);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public List saveBillingPayment(HttpServletRequest request) throws SessionExpiredException, ServiceException, AccountingException {
        List list = new ArrayList();
        KwlReturnObject result;
        BillingPayment payment = null;
        String oldjeid = null;
        String Cardid = null;
        List ll = new ArrayList();
        BillingInvoice binvoice = null;//Set for contra entry
        String netinword = "";
        double amount = 0;
        try {
            Account dipositTo = null;
            double amountDiff = 0;
            boolean rateDecreased = false;
            String companyid = sessionHandlerImpl.getCompanyid(request);
            double externalCurrencyRate = StringUtil.getDouble(request.getParameter("externalcurrencyrate"));
            DateFormat df = authHandler.getDateOnlyFormat(request);
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            String drAccDetails = request.getParameter("detail");
            String customfield = request.getParameter("customfield");
            boolean isMultiDebit = StringUtil.getBoolean(request.getParameter("ismultidebit"));
            boolean isAdvancePayment = StringUtil.getBoolean(request.getParameter("isadvpayment"));
            String entryNumber = request.getParameter("no");
            String receiptid = request.getParameter("billid");
            int receiptType = StringUtil.getInteger(request.getParameter("receipttype"));
            boolean isVendorPaymentEdit = (Boolean.parseBoolean((String) request.getParameter("isReceiptEdit")));
            String methodid = request.getParameter("pmtmethod");
            sessionHandlerImpl.updatePaymentMethodID(request, methodid);
            String sequenceformat = request.getParameter("sequenceformat");

            String jeid = null;
            String payDetailID = null;
            String jeentryNumber = null;
            boolean jeautogenflag = false;
            boolean bankReconsilationEntry = false, bankPayment = false;
            Date clearanceDate = null, startDate = null, endDate = null;
            String bankAccountId = "";
            Map<String, Object> bankReconsilationMap = new HashMap<String, Object>();
            HashMap billingPaymenthm = new HashMap();
            boolean ismanydbcr = StringUtil.getBoolean(request.getParameter("ismanydbcr"));
            billingPaymenthm.put("ismanydbcr", ismanydbcr);
            billingPaymenthm.put("receipttype", receiptType);
            if (receiptType == 6) {
                billingPaymenthm.put("customer", request.getParameter("accid"));
            }
            double bankCharges = 0;
            double bankInterest = 0;
            Date creationDate = authHandler.getDateOnlyFormat(request).parse(request.getParameter("creationdate"));
            boolean onlyAdvance = StringUtil.getBoolean(request.getParameter("onlyAdvance"));
            String bankChargesAccid = request.getParameter("bankChargesCmb");
            String bankInterestAccid = request.getParameter("bankInterestCmb");
            if (!StringUtil.isNullOrEmpty(request.getParameter("bankCharges")) && !StringUtil.isNullOrEmpty(bankChargesAccid)) {
                bankCharges = Double.parseDouble(request.getParameter("bankCharges"));
                billingPaymenthm.put("bankCharges", bankCharges);
                billingPaymenthm.put("bankChargesCmb", bankChargesAccid);
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("bankInterest")) && !StringUtil.isNullOrEmpty(bankInterestAccid)) {
                bankInterest = Double.parseDouble(request.getParameter("bankInterest"));
                billingPaymenthm.put("bankInterest", bankInterest);
                billingPaymenthm.put("bankInterestCmb", bankInterestAccid);
            }
            String paidToid = request.getParameter("paidToCmb");
            if (!StringUtil.isNullOrEmpty(request.getParameter("paidToCmb")) && !StringUtil.isNullOrEmpty(paidToid)) {
                billingPaymenthm.put("paidToCmb", paidToid);
            }
            if (!StringUtil.isNullOrEmpty(receiptid)) {
                KwlReturnObject receiptObj = accountingHandlerDAOobj.getObject(BillingPayment.class.getName(), receiptid);
                payment = (BillingPayment) receiptObj.getEntityList().get(0);
                jeentryNumber = payment.getJournalEntry().getEntryNumber();
                oldjeid = payment.getJournalEntry().getID();
                jeautogenflag = payment.getJournalEntry().isAutoGenerated();
                if (payment.getPayDetail() != null) {
                    payDetailID = payment.getPayDetail().getID();
                    if (payment.getPayDetail().getCard() != null) {
                        Cardid = payment.getPayDetail().getCard().getID();
                    }
                    if (payment.getPayDetail().getCheque() != null) {
                        Cardid = payment.getPayDetail().getCheque().getID();
                    }
                }
                result = accVendorPaymentobj.deleteBillingPaymentsDetails(receiptid, companyid);
                result = accVendorPaymentobj.deleteBillingPaymentsDetailsOtherwise(receiptid);
                if (payment != null && payment.getRevalJeId() != null) {
                    result = accJournalEntryobj.deleteJEDtails(payment.getRevalJeId(), companyid);
                    result = accJournalEntryobj.deleteJE(payment.getRevalJeId(), companyid);
                }

                billingPaymenthm.put("deposittojedetailid", null);
                billingPaymenthm.put("depositamount", 0.0);
                //Delete old entries and insert new entries again from optimized table in edit case.
                accJournalEntryobj.deleteOnEditAccountJEs_optimized(oldjeid);
            } else {
                result = accVendorPaymentobj.getBillingPaymentFromNo(entryNumber, companyid);
                int count = result.getRecordTotalCount();
                if (count > 0) {
                    throw new AccountingException(messageSource.getMessage("acc.field.Paymentnumber", null, RequestContextUtils.getLocale(request)) + entryNumber + messageSource.getMessage("acc.field.alreadyexists.", null, RequestContextUtils.getLocale(request)));
                }
                boolean seqformat_oldflag = StringUtil.getBoolean(request.getParameter("seqformat_oldflag"));
                String nextAutoNo = "";
                String nextAutoNoInt = "";
                if (seqformat_oldflag) {
                    nextAutoNo = accCompanyPreferencesObj.getNextAutoNumber(companyid, StaticValues.AUTONUM_BILLINGPAYMENT, sequenceformat);
                } else {
                    Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                    seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_BILLINGPAYMENT, sequenceformat, seqformat_oldflag, creationDate);
                    nextAutoNo = (String)seqNumberMap.get(Constants.AUTO_ENTRYNUMBER);  //next auto generated number
                    nextAutoNoInt = (String)seqNumberMap.get(Constants.SEQNUMBER);//integer Part
                    billingPaymenthm.put(Constants.SEQFORMAT, sequenceformat);
                    billingPaymenthm.put(Constants.SEQNUMBER, nextAutoNoInt);
                }
                billingPaymenthm.put("entrynumber", entryNumber);
                billingPaymenthm.put("autogenerated", entryNumber.equals(nextAutoNo));
            }

            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);

            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            currencyid = (request.getParameter("currencyid") == null ? currency.getCurrencyID() : request.getParameter("currencyid"));

            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);



            billingPaymenthm.put("currencyid", currencyid);

            result = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), request.getParameter("pmtmethod"));
            PaymentMethod payMethod = (PaymentMethod) result.getEntityList().get(0);

            dipositTo = payMethod.getAccount();
            HashMap bpdetailhm = new HashMap();
            bpdetailhm.put("paymethodid", payMethod.getID());
            bpdetailhm.put("companyid", companyid);
            if (payMethod.getDetailType() != PaymentMethod.TYPE_CASH) {
                JSONObject obj = new JSONObject(request.getParameter("paydetail"));
                if (payMethod.getDetailType() == PaymentMethod.TYPE_BANK) {
                    bankPayment = true;
                    bankReconsilationEntry = obj.getString("paymentStatus") != null ? obj.getString("paymentStatus").equals("Cleared") : false;
                    if (bankReconsilationEntry) {
                        bankAccountId = request.getParameter("bankaccid");
                        startDate = df.parse(request.getParameter("startdate"));
                        endDate = df.parse(request.getParameter("enddate"));
                        clearanceDate = df.parse(obj.getString("clearanceDate"));
                        bankReconsilationMap.put("bankAccountId", bankAccountId);
                        bankReconsilationMap.put("startDate", startDate);
                        bankReconsilationMap.put("endDate", endDate);
                        bankReconsilationMap.put("clearanceDate", clearanceDate);
                        bankReconsilationMap.put("endingAmount", 0.0);
                        bankReconsilationMap.put("companyId", companyid);
                    }
                    HashMap chequehm = new HashMap();
                    chequehm.put("chequeno", obj.getString("chequeno"));
                    chequehm.put("description", StringUtil.DecodeText(obj.optString("description")));
                    chequehm.put("bankname", StringUtil.DecodeText(obj.getString("bankname")));
                    chequehm.put("duedate", df.parse(obj.getString("payDate")));
                    chequehm.put("bankmasteritemid", obj.getString("bankmasteritemid"));
                    Map<String, Object> seqchequehm = new HashMap<>();
                    obj.put(Constants.companyKey, companyid);
                    String chequesequenceformat =  obj.optString("sequenceformat");
                    /**
                     * getNextChequeNumber method to generate next sequence number using
                     * sequence format,also saving the dateprefix and datesuffix in cheque table.
                     */
                    if (!StringUtil.isNullOrEmpty(chequesequenceformat) && !chequesequenceformat.equals("NA")) {
                        seqchequehm = accCompanyPreferencesObj.getNextChequeNumber(obj);
                    }
                  
                    if (seqchequehm.containsKey(Constants.AUTO_ENTRYNUMBER)) {
                        chequehm.put("chequeno", (String) seqchequehm.get(Constants.AUTO_ENTRYNUMBER));
                    }
                    if (seqchequehm.containsKey(Constants.SEQNUMBER)) {
                        chequehm.put("sequenceNumber", (String) seqchequehm.get(Constants.SEQNUMBER));
                    }
                    if (seqchequehm.containsKey(Constants.DATEPREFIX)) {
                        chequehm.put(Constants.DATEPREFIX, (String) seqchequehm.get(Constants.DATEPREFIX));
                    }
                    if (seqchequehm.containsKey(Constants.DATEAFTERPREFIX)) {
                        chequehm.put(Constants.DATEAFTERPREFIX, (String) seqchequehm.get(Constants.DATEAFTERPREFIX));
                    }
                    if (seqchequehm.containsKey(Constants.DATESUFFIX)) {
                        chequehm.put(Constants.DATESUFFIX, (String) seqchequehm.get(Constants.DATESUFFIX));
                    }
                    KwlReturnObject cqresult = accPaymentDAOobj.addCheque(chequehm);
                    Cheque cheque = (Cheque) cqresult.getEntityList().get(0);
                    bpdetailhm.put("chequeid", cheque.getID());
                } else if (payMethod.getDetailType() == PaymentMethod.TYPE_CARD) {
                    HashMap cardhm = new HashMap();
                    cardhm.put("cardno", obj.getString("cardno"));
                    cardhm.put("nameoncard", obj.getString("nameoncard"));
                    cardhm.put("expirydate", df.parse(obj.getString("expirydate")));
                    cardhm.put("cardtype", obj.getString("cardtype"));
                    cardhm.put("refno", obj.getString("refno"));
                    KwlReturnObject cdresult = accPaymentDAOobj.addCard(cardhm);
                    Card card = (Card) cdresult.getEntityList().get(0);
                    bpdetailhm.put("cardid", card.getID());
                }

            }
            KwlReturnObject pdresult = null;
            if (!StringUtil.isNullOrEmpty(receiptid) && !StringUtil.isNullOrEmpty(payDetailID)) {
                bpdetailhm.put("paydetailid", payDetailID);
            }
            pdresult = accPaymentDAOobj.addPayDetail(bpdetailhm);

            PayDetail pdetail = (PayDetail) pdresult.getEntityList().get(0);
            billingPaymenthm.put("paydetailsid", pdetail.getID());
            billingPaymenthm.put("memo", request.getParameter("memo"));
            billingPaymenthm.put("companyid", companyid);
            billingPaymenthm.put("deleted", false);

            if (StringUtil.isNullOrEmpty(oldjeid)) {
                String nextJEAutoNo = accCompanyPreferencesObj.getNextAutoNumber(companyid, StaticValues.AUTONUM_JOURNALENTRY);
                jeentryNumber = nextJEAutoNo;// + "/" + entryNumber;
                jeautogenflag = true;
            }
            HashMap<String, Object> jeDataMap = AccountingManager.getGlobalParams(request);
            jeDataMap.put("entrynumber", jeentryNumber);
            jeDataMap.put("autogenerated", jeautogenflag);
            jeDataMap.put("entrydate", creationDate);
            jeDataMap.put("companyid", companyid);
            jeDataMap.put("memo", request.getParameter("memo"));
            jeDataMap.put("currencyid", currencyid);
            HashSet jedetails = new HashSet();
            KwlReturnObject jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Create Journal entry without JEdetails
            JournalEntry journalEntry = (JournalEntry) jeresult.getEntityList().get(0);
            jeid = journalEntry.getID();
            jeDataMap.put("jeid", jeid);
            String detail = request.getParameter("detail");
            JSONArray jArr = new JSONArray();
            if (!StringUtil.isNullOrEmpty(detail)) {
                jArr = new JSONArray(detail);
            }
            HashMap<String, Object> jParam = new HashMap();
            KwlReturnObject jedresult = null;
            JournalEntryDetail jed = null;

            if (jArr.length() > 0 && !isMultiDebit) {
                amount = 0;
                for (int i = 0; i < jArr.length(); i++) {
                    JSONObject jobj = jArr.getJSONObject(i);
                    amount += jobj.getDouble("payment");
                }
                amountDiff = oldBillingPaymentRowsAmount(request, jArr, currencyid, externalCurrencyRate);
                if (preferences.getForeignexchange() == null) {
                    throw new AccountingException(messageSource.getMessage("acc.pay.forex", null, RequestContextUtils.getLocale(request)));
                }
                if (amountDiff != 0 && preferences.getForeignexchange() != null) {
                    if (amountDiff < 0) {
                        rateDecreased = true;
                    }
                    jParam.put("srno", jedetails.size() + 1);
                    jParam.put("companyid", companyid);
                    jParam.put("amount", rateDecreased ? (-1 * amountDiff) : amountDiff);
                    jParam.put("accountid", preferences.getForeignexchange().getID());
                    jParam.put("debit", rateDecreased ? true : false);
                    jParam.put("jeid", jeid);
                    jedresult = accJournalEntryobj.updateJournalEntryDetails(jParam);
                    jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                    jedetails.add(jed);
                }
            } else {
                amount = Double.parseDouble(request.getParameter("amount"));
            }
            JSONObject jedjson = null;
            //boolean taxExist=false;
            List payentOtherwiseList = new ArrayList();
            HashMap paymentdetailotherwise = new HashMap();
            if (isMultiDebit) {
                JSONArray drAccArr = new JSONArray(drAccDetails);
                for (int i = 0; i < drAccArr.length(); i++) {
                    JSONObject jobj = drAccArr.getJSONObject(i);
                    boolean isdebit = jobj.has("isdebit") ? Boolean.parseBoolean(jobj.getString("isdebit")) : true;
                    jParam = new HashMap();
                    jParam.put("srno", jedetails.size() + 1);
                    jParam.put("companyid", companyid);
                    jParam.put("amount", Double.parseDouble(jobj.getString("dramount")));
                    jParam.put("accountid", jobj.getString("accountid"));
                    jParam.put("debit", isdebit);//true);
                    jParam.put("jeid", jeid);
                    jParam.put("description", jobj.get("description"));
                    jedresult = accJournalEntryobj.updateJournalEntryDetails(jParam);
                    jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                    jedetails.add(jed);
                    double rowtaxamount = 0;
                    //  taxExist=StringUtil.isNullOrEmpty(rowtaxid)?false:true;
                    if (receiptType == 2 || (isVendorPaymentEdit && receiptType == 1) || receiptType == 9) {//otherwise case and GL Code Case 
                        String rowtaxid = jobj.getString("prtaxid");
                        KwlReturnObject txresult = accountingHandlerDAOobj.getObject(Tax.class.getName(), rowtaxid); // (Tax)session.get(Tax.class, taxid);
                        Tax rowtax = (Tax) txresult.getEntityList().get(0);
                        if (rowtax == null || rowtaxid.equalsIgnoreCase("-1")) {
                            paymentdetailotherwise.put("amount", Double.parseDouble(jobj.getString("dramount")));
                            paymentdetailotherwise.put("taxjedid", "");
                            paymentdetailotherwise.put("tax", rowtaxid.equalsIgnoreCase("-1") ? "None" : "");
                            paymentdetailotherwise.put("accountid", jobj.getString("accountid"));
                            paymentdetailotherwise.put("isdebit", isdebit);
                            paymentdetailotherwise.put("taxamount", rowtaxamount);
                            paymentdetailotherwise.put("description", jobj.optString("description"));
                            result = accVendorPaymentobj.saveBillingPaymentDetailOtherwise(paymentdetailotherwise);
                            paymentdetailotherwise.clear();
                            BillingPaymentDetailOtherwise paymentDetailOtherwise = null;
                            paymentDetailOtherwise = (BillingPaymentDetailOtherwise) result.getEntityList().get(0);
                            payentOtherwiseList.add(paymentDetailOtherwise.getID());
                        } else {
                            rowtaxamount = Double.parseDouble(jobj.getString("curamount")) - Double.parseDouble(jobj.getString("dramount"));
                            jedjson = new JSONObject();
                            jedjson.put("srno", jedetails.size() + 1);
                            jedjson.put("companyid", company.getCompanyID());
                            jedjson.put("amount", authHandler.formattedAmount(rowtaxamount, companyid));
                            jedjson.put("accountid", rowtax.getAccount().getID());
                            jedjson.put("debit", isdebit);//true);
                            jedjson.put("jeid", jeid);
                            jedjson.put("description", jobj.optString("description"));
                            jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                            jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                            jedetails.add(jed);

                            paymentdetailotherwise.put("amount", Double.parseDouble(jobj.getString("dramount")));
                            paymentdetailotherwise.put("taxjedid", jed.getID());
                            paymentdetailotherwise.put("tax", rowtax.getID());
                            paymentdetailotherwise.put("accountid", jobj.getString("accountid"));
                            paymentdetailotherwise.put("isdebit", isdebit);
                            paymentdetailotherwise.put("taxamount", rowtaxamount);
                            paymentdetailotherwise.put("description", jobj.optString("description"));
                            result = accVendorPaymentobj.saveBillingPaymentDetailOtherwise(paymentdetailotherwise);
                            paymentdetailotherwise.clear();
                            BillingPaymentDetailOtherwise billingPaymentDetailOtherwise = null;
                            billingPaymentDetailOtherwise = (BillingPaymentDetailOtherwise) result.getEntityList().get(0);
                            payentOtherwiseList.add(billingPaymentDetailOtherwise.getID());
                        }

                    }

                }

            } else {

                jParam = new HashMap();
                jParam.put("srno", jedetails.size() + 1);
                jParam.put("companyid", companyid);
                jParam.put("amount", amount + amountDiff);
                jParam.put("accountid", request.getParameter("accid"));
                jParam.put("debit", true);
                jParam.put("jeid", jeid);
                jedresult = accJournalEntryobj.updateJournalEntryDetails(jParam);
                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                jedetails.add(jed);
            }

            if (bankCharges != 0) {
                if (!isAdvancePayment || (isAdvancePayment && onlyAdvance)) {
                    amount += bankCharges;
                    jedjson = new JSONObject();
                    jedjson.put("srno", jedetails.size() + 1);
                    jedjson.put("companyid", companyid);
                    //(If currency USD and base currency SGD, inv rate 0.81 n pay rate 0.80 then amount = 1234.57, amountDiff = -15.24, depositAmt = 1250 SGD)
                    jedjson.put("amount", bankCharges);
                    jedjson.put("accountid", bankChargesAccid);
                    jedjson.put("debit", true);
                    jedjson.put("jeid", jeid);
                    jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                    jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                    jedetails.add(jed);
                }
            }

            if (bankInterest != 0) {
                if (!isAdvancePayment || (isAdvancePayment && onlyAdvance)) {
                    amount += bankInterest;
                    jedjson = new JSONObject();
                    jedjson.put("srno", jedetails.size() + 1);
                    jedjson.put("companyid", companyid);
                    //(If currency USD and base currency SGD, inv rate 0.81 n pay rate 0.80 then amount = 1234.57, amountDiff = -15.24, depositAmt = 1250 SGD)
                    jedjson.put("amount", bankInterest);
                    jedjson.put("accountid", bankInterestAccid);
                    jedjson.put("debit", true);
                    jedjson.put("jeid", jeid);
                    jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                    jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                    jedetails.add(jed);
                }
            }

            if (amount != 0) {
                jParam = new HashMap();
                jParam.put("srno", jedetails.size() + 1);
                jParam.put("companyid", companyid);
                //(If currency USD and base currency SGD, inv rate 0.81 n pay rate 0.80 then amount = 1234.57, amountDiff = -15.24, depositAmt = 1250 SGD)
                jParam.put("amount", amount);
                jParam.put("accountid", dipositTo.getID());
                jParam.put("debit", false);
                jParam.put("jeid", jeid);
                jedresult = accJournalEntryobj.updateJournalEntryDetails(jParam);
                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                jedetails.add(jed);
                billingPaymenthm.put("deposittojedetailid", jed.getID());
                billingPaymenthm.put("depositamount", amount);
            }

            jeDataMap.put("jedetails", jedetails);
            jeDataMap.put("externalCurrencyRate", externalCurrencyRate);
            jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Add Journal entry details
            journalEntry = (JournalEntry) jeresult.getEntityList().get(0);
            billingPaymenthm.put("journalentryid", journalEntry.getID());


            if (!StringUtil.isNullOrEmpty(customfield)) {
                JSONArray jcustomarray = new JSONArray(customfield);
                HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                customrequestParams.put("customarray", jcustomarray);
                customrequestParams.put("modulename", Constants.Acc_JE_modulename);
                customrequestParams.put("moduleprimarykey", Constants.Acc_JEid);
                customrequestParams.put("modulerecid", journalEntry.getID());
                customrequestParams.put("moduleid", Constants.Acc_Make_Payment_ModuleId);
                customrequestParams.put("companyid", companyid);
                customrequestParams.put("customdataclasspath", Constants.Acc_BillInv_custom_data_classpath);
                KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                    jeDataMap.put("accjecustomdataref", journalEntry.getID());
                    jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);
                }
            }

            if (payment != null) {
                billingPaymenthm.put("billingPaymentid", payment.getID());
            }
            result = accVendorPaymentobj.saveBillingPayment(billingPaymenthm);
            payment = (BillingPayment) result.getEntityList().get(0);

            if (!StringUtil.isNullOrEmpty(receiptid)) {
                billingPaymenthm.put("billingpaymentid", payment.getID());
            }
            //Save Payment Details
            HashSet payDetails = saveBillingPaymentRows(payment, company, jArr, isMultiDebit, binvoice);
            billingPaymenthm.put("billingPaymentid", payment.getID());
            billingPaymenthm.put("externalCurrencyRate", externalCurrencyRate);
            billingPaymenthm.put("bpdetails", payDetails);

            result = accVendorPaymentobj.saveBillingPayment(billingPaymenthm);
            payment = (BillingPayment) result.getEntityList().get(0);
            if (receiptType == 2 || (isVendorPaymentEdit && receiptType == 1) || receiptType == 9) {//otherwise case and GL Code Case 
                for (int i = 0; i < payentOtherwiseList.size(); i++) {
                    paymentdetailotherwise.put("billingpayment", payment.getID());
                    paymentdetailotherwise.put("paymentotherwise", payentOtherwiseList.get(i));
                    result = accVendorPaymentobj.saveBillingPaymentDetailOtherwise(paymentdetailotherwise);
                    paymentdetailotherwise.clear();
                }
            }

            if (bankReconsilationEntry) {
                bankReconsilationMap.put("clearingamount", amount);
                bankReconsilationMap.put("currencyid", currencyid);
                bankReconsilationMap.put("details", jArr);
                bankReconsilationMap.put("bpayment", payment);
                bankReconsilationMap.put("ismultidebit", isMultiDebit);
                if (!StringUtil.isNullOrEmpty(oldjeid)) {
                    bankReconsilationMap.put("oldjeid", oldjeid);
                }
                HashMap<String, Object> globalParams = AccountingManager.getGlobalParams(request);
                saveBankReconsilation(bankReconsilationMap, globalParams);
            }
            if (bankPayment && !bankReconsilationEntry && !StringUtil.isNullOrEmpty(oldjeid)) {
                bankReconsilationMap.put("oldjeid", oldjeid);
                bankReconsilationMap.put("companyId", companyid);
                deleteBankReconcilation(bankReconsilationMap);
            }

            //Insert new entries again in optimized table.
            accJournalEntryobj.saveAccountJEs_optimized(jeid);
            if (jArr.length() > 0 && !isMultiDebit) {
                double finalAmountReval = 0;
                String basecurrency = sessionHandlerImpl.getCurrencyID(request);
                for (int i = 0; i < jArr.length(); i++) {
                    JSONObject jobj = jArr.getJSONObject(i);
                    double ratio = 0;
                    double amountReval = 0;
                    double amountdue = jobj.getDouble("payment");
                    HashMap<String, Object> GlobalParams = new HashMap<String, Object>();
                    GlobalParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
                    GlobalParams.put("gcurrencyid", basecurrency);
                    GlobalParams.put("dateformat", authHandler.getDateOnlyFormat(request));
                    result = accountingHandlerDAOobj.getObject(BillingGoodsReceipt.class.getName(), jobj.getString("billid"));
                    BillingGoodsReceipt gr = (BillingGoodsReceipt) result.getEntityList().get(0);
                    double exchangeRate = gr.getJournalEntry().getExternalCurrencyRate();
                    HashMap<String, Object> invoiceId = new HashMap<String, Object>();
                    invoiceId.put("invoiceid", gr.getID());
                    invoiceId.put("companyid", sessionHandlerImpl.getCompanyid(request));
                    invoiceId.put("isRealised", false);//false for geting only non realised invoice id.
                    result = accJournalEntryobj.getRevalInvoiceId(invoiceId);
                    RevaluationHistory revalueationHistory = (result.getEntityList().size()) != 0 ? (RevaluationHistory) result.getEntityList().get(0) : null;
                    if (revalueationHistory != null) {
                        exchangeRate = revalueationHistory.getEvalrate();
                    }
                    result = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), basecurrency);
                    currency = (KWLCurrency) result.getEntityList().get(0);
                    String currid = currency.getCurrencyID();
                    if (gr.getCurrency() != null) {
                        currid = gr.getCurrency().getCurrencyID();
                    }
                    //            double oldrate = CompanyHandler.getCurrencyToBaseAmount(session, request, 1.0, currid, gr.getJournalEntry().getEntryDate());
                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(GlobalParams, 1.0, currid, gr.getJournalEntry().getEntryDate(), gr.getJournalEntry().getExternalCurrencyRate());
                    double oldrate = (Double) bAmt.getEntityList().get(0);
                    //            double newrate = CompanyHandler.getCurrencyToBaseAmount(session, request, 1.0, currid, AuthHandler.getDateOnlyFormatter(request).parse(request.getParameter("creationdate")));
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(GlobalParams, 1.0, currid, creationDate, exchangeRate);
                    double newrate = (Double) bAmt.getEntityList().get(0);
                    ratio = oldrate - newrate;
                    amountReval = amountdue * ratio;
                    finalAmountReval = finalAmountReval + amountReval;
                }
                if (finalAmountReval != 0) {
                    Map<String,Object> counterMap=new HashMap<>();
                    counterMap.put("counter", 0);
                    /**
                     * added transactionID and transactionModuleID to Realised
                     * JE.
                     */
                    counterMap.put("transactionModuleid", Constants.Acc_Make_Payment_ModuleId);
                    counterMap.put("transactionId", payment.getID());
                    String revaljeid = PostJEFORReevaluation(request, finalAmountReval, companyid, preferences, basecurrency,null,counterMap);
                    billingPaymenthm.clear();
                    billingPaymenthm.put("billingPaymentid", payment.getID());
                    billingPaymenthm.put("revalJeId", revaljeid);
                    result = accVendorPaymentobj.saveBillingPayment(billingPaymenthm);
                }
            }
            list.add(payment);

        } catch (UnsupportedEncodingException ex) {
            throw ServiceException.FAILURE(messageSource.getMessage("acc.common.excp", null, RequestContextUtils.getLocale(request)), ex);
        } catch (SessionExpiredException ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        } catch (ParseException ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        ll.add(new String[]{oldjeid, Cardid});
        KwlReturnObject accresult = accountingHandlerDAOobj.getObject(Account.class.getName(), request.getParameter("accid"));
        Account account = (Account) accresult.getEntityList().get(0);
        String accountName = "";
        if (account != null) {
            accountName = account.getName();
        }
        ll.add(new String[]{"amount", String.valueOf(amount)});
        ll.add(new String[]{"amountinword", netinword});
        ll.add(new String[]{"accountName", accountName});
        return (ArrayList) ll;
    }

    public ModelAndView saveContraBillingPayment(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONObject jobjDetails = new JSONObject();
        JSONArray jArr = new JSONArray();
        boolean issuccess = false;
        boolean isChequePrint = false;
        String msg = "";
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("SP_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        try {
            List li = saveContraBillingPayment(request);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String[] id = (String[]) li.get(0);
            issuccess = true;
            msg = messageSource.getMessage("acc.contra.save", null, RequestContextUtils.getLocale(request));   //"Billing Payment information has been saved successfully";
//            msg = result.getMsg();
            txnManager.commit(status);
//            status = txnManager.getTransaction(def);
//            deleteJEArray(id[0],companyid);
//            txnManager.commit(status);
//            status = txnManager.getTransaction(def);
//            deleteChequeOrCard(id[1],companyid);
//            txnManager.commit(status);
        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = "" + ex.getMessage();
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
                jobj.put("data", jArr);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public List saveContraBillingPayment(HttpServletRequest request) throws SessionExpiredException, ServiceException, AccountingException {
        List list = new ArrayList();
        KwlReturnObject result;
        BillingPayment payment = null;
        String oldjeid = null;
        String Cardid = null;
        List ll = new ArrayList();
        String netinword = "";
        double amount = 0;
        try {
            String maininvoiceid = request.getParameter("maininvoiceid");//Billing Invoice
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(BillingInvoice.class.getName(), maininvoiceid);
            BillingInvoice binvoice = (BillingInvoice) cmpresult.getEntityList().get(0);
            Account dipositTo = binvoice.getCustomer().getAccount();
            String sequenceformat = request.getParameter("sequenceformat");

            double amountDiff = 0;
            boolean rateDecreased = false;
            String companyid = sessionHandlerImpl.getCompanyid(request);
            double externalCurrencyRate = StringUtil.getDouble(request.getParameter("externalcurrencyrate"));
            DateFormat df = authHandler.getDateOnlyFormat(request);
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            String drAccDetails = request.getParameter("detail");
            boolean isMultiDebit = StringUtil.getBoolean(request.getParameter("ismultidebit"));
            String entryNumber = request.getParameter("no");
            String receiptid = request.getParameter("billid");
            Date creationDate = df.parse(request.getParameter("creationdate"));

//            String methodid =request.getParameter("pmtmethod");
//            request.getSession().setAttribute("methodid", methodid);

            String jeid = null;
            String jeentryNumber = null;
            boolean jeautogenflag = false;
            HashMap billingPaymenthm = new HashMap();

            result = accVendorPaymentobj.getBillingPaymentFromNo(entryNumber, companyid);
            int count = result.getRecordTotalCount();
            if (count > 0) {
                throw new AccountingException(messageSource.getMessage("acc.field.Paymentnumber", null, RequestContextUtils.getLocale(request)) + entryNumber + messageSource.getMessage("acc.field.alreadyexists.", null, RequestContextUtils.getLocale(request)));
            }
            boolean seqformat_oldflag = StringUtil.getBoolean(request.getParameter("seqformat_oldflag"));
            String nextAutoNo = "";
            String nextAutoNoInt = "";
            if (seqformat_oldflag) {
                nextAutoNo = accCompanyPreferencesObj.getNextAutoNumber(companyid, StaticValues.AUTONUM_BILLINGPAYMENT, sequenceformat);
            } else {
                Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_BILLINGPAYMENT, sequenceformat, seqformat_oldflag, creationDate);
                nextAutoNo = (String)seqNumberMap.get(Constants.AUTO_ENTRYNUMBER);  //next auto generated number
                nextAutoNoInt = (String)seqNumberMap.get(Constants.SEQNUMBER);//integer Part
                billingPaymenthm.put(Constants.SEQFORMAT, sequenceformat);
                billingPaymenthm.put(Constants.SEQNUMBER, nextAutoNoInt);
            }
            billingPaymenthm.put("entrynumber", entryNumber);
            billingPaymenthm.put("autogenerated", entryNumber.equals(nextAutoNo));


            cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);

            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            currencyid = (request.getParameter("currencyid") == null ? currency.getCurrencyID() : request.getParameter("currencyid"));

            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);



            billingPaymenthm.put("currencyid", currencyid);

//            result = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), request.getParameter("pmtmethod"));
//            PaymentMethod payMethod = (PaymentMethod) result.getEntityList().get(0);
//
//            dipositTo = payMethod.getAccount();
//            HashMap bpdetailhm = new HashMap();
//            bpdetailhm.put("paymethodid", payMethod.getID());
//            bpdetailhm.put("companyid", companyid);
//              KwlReturnObject pdresult=null;
//            if (!StringUtil.isNullOrEmpty(receiptid)&&!StringUtil.isNullOrEmpty(payDetailID))
//                bpdetailhm.put("paydetailid", payDetailID);
//                pdresult = accPaymentDAOobj.addPayDetail(bpdetailhm);
//
//            PayDetail pdetail = (PayDetail) pdresult.getEntityList().get(0);
//            billingPaymenthm.put("paydetailsid", pdetail.getID());
            billingPaymenthm.put("memo", request.getParameter("memo"));
            billingPaymenthm.put("companyid", companyid);
            billingPaymenthm.put("deleted", false);

            if (StringUtil.isNullOrEmpty(oldjeid)) {
                String nextJEAutoNo = accCompanyPreferencesObj.getNextAutoNumber(companyid, StaticValues.AUTONUM_JOURNALENTRY);
                jeentryNumber = nextJEAutoNo;// + "/" + entryNumber;
                jeautogenflag = true;
            }
            HashMap<String, Object> jeDataMap = AccountingManager.getGlobalParams(request);
            jeDataMap.put("entrynumber", jeentryNumber);
            jeDataMap.put("autogenerated", jeautogenflag);
            jeDataMap.put("entrydate", creationDate);
            jeDataMap.put("companyid", companyid);
            jeDataMap.put("memo", "Contra Entry : " + request.getParameter("memo"));
            jeDataMap.put("currencyid", currencyid);
            HashSet jedetails = new HashSet();
            KwlReturnObject jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Create Journal entry without JEdetails
            JournalEntry journalEntry = (JournalEntry) jeresult.getEntityList().get(0);
            jeid = journalEntry.getID();
            jeDataMap.put("jeid", jeid);
            String detail = request.getParameter("detail");
            JSONArray jArr = new JSONArray();
            if (!StringUtil.isNullOrEmpty(detail)) {
                jArr = new JSONArray(detail);
            }
            HashMap<String, Object> jParam = new HashMap();
            KwlReturnObject jedresult = null;
            JournalEntryDetail jed = null;

            if (jArr.length() > 0 && !isMultiDebit) {
                amount = 0;
                for (int i = 0; i < jArr.length(); i++) {
                    JSONObject jobj = jArr.getJSONObject(i);
                    amount += jobj.getDouble("payment");
                }
//                amountDiff = oldBillingPaymentRowsAmount(request, jArr, currencyid, externalCurrencyRate);
//                if (preferences.getForeignexchange() == null) {
//                    throw new AccountingException(messageSource.getMessage("acc.pay.forex", null, RequestContextUtils.getLocale(request)));
//                }
//                if (amountDiff != 0 && preferences.getForeignexchange() != null) {
//                    if(amountDiff < 0) {
//                        rateDecreased = true;
//                    }
//                    jParam.put("srno", jedetails.size()+1);
//                    jParam.put("companyid", companyid);
//                    jParam.put("amount", rateDecreased?(-1*amountDiff):amountDiff);
//                    jParam.put("accountid", preferences.getForeignexchange().getID());
//                    jParam.put("debit", rateDecreased?true:false);
//                    jParam.put("jeid", jeid);
//                    jedresult = accJournalEntryobj.updateJournalEntryDetails(jParam);
//                    jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
//                    jedetails.add(jed);
//                }
            } else {
                amount = Double.parseDouble(request.getParameter("amount"));
            }
            if (isMultiDebit) {
                JSONArray drAccArr = new JSONArray(drAccDetails);
                for (int i = 0; i < drAccArr.length(); i++) {
                    JSONObject jobj = drAccArr.getJSONObject(i);
                    jParam = new HashMap();
                    jParam.put("srno", jedetails.size() + 1);
                    jParam.put("companyid", companyid);
                    jParam.put("amount", Double.parseDouble(jobj.getString("dramount")));
                    jParam.put("accountid", jobj.getString("accountid"));
                    jParam.put("debit", true);
                    jParam.put("jeid", jeid);
                    jParam.put("description", jobj.get("description"));
                    jedresult = accJournalEntryobj.updateJournalEntryDetails(jParam);
                    jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                    jedetails.add(jed);
                }
            } else {

                jParam = new HashMap();
                jParam.put("srno", jedetails.size() + 1);
                jParam.put("companyid", companyid);
                jParam.put("amount", amount + amountDiff);
                jParam.put("accountid", request.getParameter("accid"));
                jParam.put("debit", true);
                jParam.put("jeid", jeid);
                jedresult = accJournalEntryobj.updateJournalEntryDetails(jParam);
                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                jedetails.add(jed);
            }



            jParam = new HashMap();
            jParam.put("srno", jedetails.size() + 1);
            jParam.put("companyid", companyid);
            //(If currency USD and base currency SGD, inv rate 0.81 n pay rate 0.80 then amount = 1234.57, amountDiff = -15.24, depositAmt = 1250 SGD)
            jParam.put("amount", amount);
            jParam.put("accountid", dipositTo.getID());
            jParam.put("debit", false);
            jParam.put("jeid", jeid);
            jedresult = accJournalEntryobj.updateJournalEntryDetails(jParam);


            jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
            jedetails.add(jed);

            jeDataMap.put("jedetails", jedetails);
            jeDataMap.put("externalCurrencyRate", externalCurrencyRate);
            jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Add Journal entry details
            journalEntry = (JournalEntry) jeresult.getEntityList().get(0);
            billingPaymenthm.put("journalentryid", journalEntry.getID());
            billingPaymenthm.put("contraentry", true);
            if (payment != null) {
                billingPaymenthm.put("billingPaymentid", payment.getID());
            }
            result = accVendorPaymentobj.saveBillingPayment(billingPaymenthm);
            payment = (BillingPayment) result.getEntityList().get(0);

            if (!StringUtil.isNullOrEmpty(receiptid)) {
                billingPaymenthm.put("billingpaymentid", payment.getID());
            }
            //Save Payment Details
            HashSet payDetails = saveBillingPaymentRows(payment, company, jArr, isMultiDebit, binvoice);
            billingPaymenthm.put("billingPaymentid", payment.getID());
            billingPaymenthm.put("externalCurrencyRate", externalCurrencyRate);
            billingPaymenthm.put("bpdetails", payDetails);

            result = accVendorPaymentobj.saveBillingPayment(billingPaymenthm);
            payment = (BillingPayment) result.getEntityList().get(0);

            //Insert new entries again in optimized table.
            accJournalEntryobj.saveAccountJEs_optimized(jeid);

            list.add(payment);

        } catch (SessionExpiredException ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        } catch (ParseException ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        ll.add(new String[]{oldjeid, Cardid});
        KwlReturnObject accresult = accountingHandlerDAOobj.getObject(Account.class.getName(), request.getParameter("accid"));
        Account account = (Account) accresult.getEntityList().get(0);
        String accountName = "";
        if (account != null) {
            accountName = account.getName();
        }
        ll.add(new String[]{"amount", String.valueOf(amount)});
        ll.add(new String[]{"amountinword", netinword});
        ll.add(new String[]{"accountName", accountName});
        return (ArrayList) ll;
    }

    public HashSet savePaymentRows(Payment payment, Company company, JSONArray jArr, boolean isMultiDebit, Invoice invoice) throws JSONException, ServiceException {
        HashSet pdetails = new HashSet();
        if (!isMultiDebit) {
            for (int i = 0; i < jArr.length(); i++) {
                JSONObject jobj = jArr.getJSONObject(i);
                PaymentDetail pd = new PaymentDetail();
                pd.setSrno(i + 1);
                pd.setID(StringUtil.generateUUID());
                double amountReceived = jobj.getDouble("payment");
                double amountReceivedConverted = jobj.getDouble("payment");
                pd.setAmount(jobj.getDouble("payment"));

                if (!StringUtil.isNullOrEmpty(jobj.optString("exchangeratefortransaction", "").toString()) && !StringUtil.isNullOrEmpty(jobj.optString("currencyidtransaction", "")) && !jobj.optString("currencyidtransaction", "").equals(payment.getCurrency().getCurrencyID())) {
                    pd.setExchangeRateForTransaction(Double.parseDouble(jobj.get("exchangeratefortransaction").toString()));
                    KwlReturnObject resultCurrency = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), jobj.getString("currencyidtransaction"));
                    KWLCurrency kWLCurrency = (KWLCurrency) resultCurrency.getEntityList().get(0);
                    pd.setFromCurrency(kWLCurrency);
                    pd.setToCurrency(payment.getCurrency());
                    amountReceivedConverted = amountReceived / Double.parseDouble(jobj.get("exchangeratefortransaction").toString());
                }
                pd.setCompany(company);
                //            pd.setGoodsReceipt((GoodsReceipt) session.get(GoodsReceipt.class, jobj.getString("billid")));
                KwlReturnObject result = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), jobj.getString("billid"));
                GoodsReceipt goodsReceipt = (GoodsReceipt) result.getEntityList().get(0);
                boolean isClaimedInvoice = goodsReceipt.getBadDebtType() == Constants.Invoice_Claimed || goodsReceipt.getBadDebtType() == Constants.Invoice_Recovered;
                pd.setGoodsReceipt((GoodsReceipt) result.getEntityList().get(0));
                if (invoice != null) {
                    pd.setInvoice(invoice);
                }
                pd.setPayment(payment);
                if (jobj.has("rowjedid")) {
                    pd.setROWJEDID(jobj.getString("rowjedid"));
                }
                
                double amountReceivedConvertedInBaseCurrency = 0d;
                HashMap<String, Object> requestParams = new HashMap();
                requestParams.put(Constants.companyid, company.getCompanyID());
                requestParams.put("gcurrencyid", company.getCurrency().getCurrencyID());
                double externalCurrencyRate = 1d;
                boolean isopeningBalancePM = payment.isIsOpeningBalencePayment();
                Date PMCreationDate = null;
                PMCreationDate = payment.getCreationDate();  
                if (isopeningBalancePM) {
                    externalCurrencyRate = payment.getExchangeRateForOpeningTransaction();
                } else {
//                    PMCreationDate = payment.getJournalEntry().getEntryDate();
                    externalCurrencyRate = payment.getJournalEntry().getExternalCurrencyRate();
                }
                String fromcurrencyid = payment.getCurrency().getCurrencyID();
                KwlReturnObject bAmt = null;
                if (isopeningBalancePM && payment.isConversionRateFromCurrencyToBase()) {// if Payment is opening balance Payment and Conversion rate is taken from user is Currency to base then following method will be called.
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amountReceived, fromcurrencyid, PMCreationDate, externalCurrencyRate);
                } else {
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amountReceived, fromcurrencyid, PMCreationDate, externalCurrencyRate);
                }
                amountReceivedConvertedInBaseCurrency = (Double) bAmt.getEntityList().get(0);
                updateInvoiceAmountDue(goodsReceipt, payment, company, amountReceivedConverted, amountReceivedConvertedInBaseCurrency);
                if (payment != null) {
                    double receiptAmountDue = payment.getOpeningBalanceAmountDue();
                    receiptAmountDue -= amountReceived;
                    payment.setOpeningBalanceAmountDue(receiptAmountDue);
                    payment.setOpeningBalanceBaseAmountDue(payment.getOpeningBalanceBaseAmountDue() - amountReceivedConvertedInBaseCurrency);
                }
//                updatePaymentAmountDue(payment, company, amountReceived, amountReceivedConvertedInBaseCurrency);
                pdetails.add(pd);
            }
        }
        return pdetails;
    }
    public HashSet savePaymentRows(HttpServletRequest request,Payment payment, Company company, JSONArray jArr, boolean isMultiDebit, Invoice invoice,int type) throws JSONException, ServiceException, UnsupportedEncodingException {
        HashSet pdetails = new HashSet();
        String companyid = company.getCompanyID();
        if (type==Constants.PaymentAgainstInvoice) {
            for (int i = 0; i < jArr.length(); i++) {
                JSONObject jobj = jArr.getJSONObject(i);
                PaymentDetail pd = new PaymentDetail();
                pd.setSrno(i + 1);
                pd.setID(StringUtil.generateUUID());
                double amountReceived = jobj.getDouble("enteramount");
                double tdsamt = jobj.optDouble("tdsamount",0.0);
                pd.setTdsamount(tdsamt);
                double amountReceivedConverted = jobj.getDouble("enteramount");
                pd.setAmount(jobj.getDouble("enteramount"));
                
                pd.setCompany(company);
                //            pd.setGoodsReceipt((GoodsReceipt) session.get(GoodsReceipt.class, jobj.getString("billid")));
                KwlReturnObject result = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), jobj.getString("documentid"));
                GoodsReceipt goodsReceipt = (GoodsReceipt) result.getEntityList().get(0);
                pd.setGoodsReceipt(goodsReceipt);
                if (!StringUtil.isNullOrEmpty(jobj.optString("exchangeratefortransaction", "").toString()) && !StringUtil.isNullOrEmpty(goodsReceipt.getCurrency().getCurrencyID()) && !goodsReceipt.getCurrency().getCurrencyID().equals(payment.getCurrency().getCurrencyID())) {
                    pd.setExchangeRateForTransaction(Double.parseDouble(jobj.get("exchangeratefortransaction").toString()));
                    pd.setFromCurrency(goodsReceipt.getCurrency());
                    pd.setToCurrency(payment.getCurrency());
                    double adjustedRate=jobj.optDouble("amountdue",0)/jobj.optDouble("amountDueOriginal",0);
//                    amountReceivedConverted = amountReceived / Double.parseDouble(jobj.get("exchangeratefortransaction").toString());
                    amountReceivedConverted = amountReceived / adjustedRate;
                    amountReceivedConverted = authHandler.round(amountReceivedConverted, companyid);
                    pd.setAmountInGrCurrency(amountReceivedConverted);
                    pd.setAmountDueInGrCurrency(jobj.optDouble("amountDueOriginal",0));
                    pd.setAmountDueInPaymentCurrency(jobj.optDouble("amountdue",0));
                }else{
                    pd.setExchangeRateForTransaction(Double.parseDouble(jobj.get("exchangeratefortransaction").toString()));
                    pd.setFromCurrency(goodsReceipt.getCurrency());
                    pd.setToCurrency(payment.getCurrency());
                    amountReceivedConverted = authHandler.round(amountReceived, companyid);
                    pd.setAmountInGrCurrency(amountReceivedConverted);
                    pd.setAmountDueInGrCurrency(jobj.optDouble("amountDueOriginal",0));
                    pd.setAmountDueInPaymentCurrency(jobj.optDouble("amountdue",0));
                }
                pd.setGstCurrencyRate(jobj.optDouble("gstCurrencyRate",0.0));
                pd.setDescription(StringUtil.DecodeText(jobj.optString("description")));
                if (invoice != null) {
                    pd.setInvoice(invoice);
                }
                pd.setPayment(payment);
                if (jobj.has("rowjedid")) {
                    pd.setROWJEDID(jobj.getString("rowjedid"));
                }
                if (jobj.has("jedetail") && jobj.get("jedetail") != null) {
                    KwlReturnObject resJED = accountingHandlerDAOobj.getObject(JournalEntryDetail.class.getName(), (String) jobj.get("jedetail"));
                    JournalEntryDetail jedObj = (JournalEntryDetail) resJED.getEntityList().get(0);
                    pd.setTotalJED(jedObj);
                }
                HashMap<String, JSONArray> jcustomarrayMap = payment.getJcustomarrayMap();
                if (jobj.has("srNoForRow")) {
                    int srNoForRow = StringUtil.isNullOrEmpty("srNoForRow") ? 0 : Integer.parseInt(jobj.getString("srNoForRow"));
                    pd.setSrNoForRow(srNoForRow);
                }
                JSONArray jcustomarray = jcustomarrayMap.get(pd.getROWJEDID());
                HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                customrequestParams.put("customarray", jcustomarray);
                customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
                customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);// Constants.Acc_JEDetail_recdetailId
                customrequestParams.put("modulerecid", pd.getROWJEDID());
                customrequestParams.put("recdetailId", pd.getID());
                customrequestParams.put("moduleid", Constants.Acc_Make_Payment_ModuleId);
                customrequestParams.put("companyid", companyid);
                customrequestParams.put("customdataclasspath", Constants.Acc_BillInvDetail_custom_data_classpath);
                KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                    KwlReturnObject receiptAccJEDCustomData = accountingHandlerDAOobj.getObject(AccJEDetailCustomData.class.getName(), pd.getROWJEDID());
                    AccJEDetailCustomData accJEDetailCustomData = (AccJEDetailCustomData) receiptAccJEDCustomData.getEntityList().get(0);
                    KwlReturnObject receiptJED = accountingHandlerDAOobj.getObject(JournalEntryDetail.class.getName(), pd.getROWJEDID());
                    JournalEntryDetail journalEntryDetail = (JournalEntryDetail) receiptJED.getEntityList().get(0);
                    journalEntryDetail.setAccJEDetailCustomData(accJEDetailCustomData);
                }
                
                
                double amountReceivedConvertedInBaseCurrency = 0d;
                HashMap<String, Object> requestParams = new HashMap();
                requestParams.put(Constants.companyid, company.getCompanyID());
                requestParams.put("gcurrencyid", company.getCurrency().getCurrencyID());
               // double externalCurrencyRate = 1d;
                boolean isopeningBalancePM = payment.isIsOpeningBalencePayment();
              //  Date PMCreationDate = null;
//                if (isopeningBalancePM) {
//                    PMCreationDate = payment.getCreationDate();
//                    externalCurrencyRate = payment.getExchangeRateForOpeningTransaction();
//                } else {
//                    PMCreationDate = payment.getJournalEntry().getEntryDate();
//                    externalCurrencyRate = payment.getJournalEntry().getExternalCurrencyRate();
//                }
                /*
                     * Amount paid against Invoice will be converted to base currency as per spot rate of invoice 
                */
                double grExternalCurrencyRate=0d;
                Date grCreationDate = null;
                grCreationDate = goodsReceipt.getCreationDate();
                if (goodsReceipt.isIsOpeningBalenceInvoice() && !goodsReceipt.isNormalInvoice()) {
                    grExternalCurrencyRate = goodsReceipt.getExchangeRateForOpeningTransaction();
                } else {
//                    grCreationDate = goodsReceipt.getJournalEntry().getEntryDate();
                    grExternalCurrencyRate = goodsReceipt.getJournalEntry().getExternalCurrencyRate();
                }
                String fromcurrencyid = goodsReceipt.getCurrency().getCurrencyID();
                KwlReturnObject bAmt = null;
//                if (isopeningBalancePM && payment.isConversionRateFromCurrencyToBase()) {// if Payment is opening balance Payment and Conversion rate is taken from user is Currency to base then following method will be called.
//                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amountReceived, fromcurrencyid, PMCreationDate, externalCurrencyRate);
//                } else {
//                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amountReceived, fromcurrencyid, PMCreationDate, externalCurrencyRate);
//                }
                if(goodsReceipt.isIsOpeningBalenceInvoice() && !goodsReceipt.isNormalInvoice()){
                   if(goodsReceipt.isConversionRateFromCurrencyToBase()){
                       grExternalCurrencyRate=1/grExternalCurrencyRate;
                   }
                }
                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amountReceivedConverted, fromcurrencyid, grCreationDate, grExternalCurrencyRate);
                amountReceivedConvertedInBaseCurrency = (Double) bAmt.getEntityList().get(0);
                amountReceivedConvertedInBaseCurrency=authHandler.round(amountReceivedConvertedInBaseCurrency, companyid);
                pd.setAmountInBaseCurrency(amountReceivedConvertedInBaseCurrency);
//                updateInvoiceAmountDue(goodsReceipt, payment, company, amountReceivedConverted, amountReceivedConvertedInBaseCurrency);
                KwlReturnObject goodsReceiptResult=null;
                if (payment.getApprovestatuslevel()==Constants.APPROVED_STATUS_LEVEL) {
                    goodsReceiptResult = updateInvoiceAmountDueAndReturnResult(goodsReceipt, payment, company, amountReceivedConverted, amountReceivedConvertedInBaseCurrency);
                }
                
                if (goodsReceiptResult != null && goodsReceiptResult.getEntityList() != null && goodsReceiptResult.getEntityList().size() > 0) {
                    GoodsReceipt gr = (GoodsReceipt) goodsReceiptResult.getEntityList().get(0);
                    if (gr.isIsOpeningBalenceInvoice() && gr.getOpeningBalanceAmountDue() == 0) {
                        try {
                            DateFormat df = authHandler.getDateOnlyFormat(request);
                            HashMap<String, Object> dataMap = new HashMap<String, Object>();
                            dataMap.put("amountduedate", df.parse(request.getParameter("creationdate")));
                            accGoodsReceiptobj.saveGoodsReceiptAmountDueZeroDate(gr, dataMap);
                        } catch (Exception ex) {
                            System.out.println("" + ex.getMessage());
                        }
                    } else if (gr.getInvoiceamountdue() == 0) {
                        try {
                            DateFormat df = authHandler.getDateOnlyFormat(request);
                            HashMap<String, Object> dataMap = new HashMap<String, Object>();
                            dataMap.put("amountduedate", df.parse(request.getParameter("creationdate")));
                            accGoodsReceiptobj.saveGoodsReceiptAmountDueZeroDate(gr, dataMap);
                        } catch (Exception ex) {
                            System.out.println("" + ex.getMessage());
                        }
                    }
                }
                if (payment != null) {
                    double receiptAmountDue = payment.getOpeningBalanceAmountDue();
                    receiptAmountDue -= amountReceived;
                    payment.setOpeningBalanceAmountDue(receiptAmountDue);
                    payment.setOpeningBalanceBaseAmountDue(payment.getOpeningBalanceBaseAmountDue() - amountReceivedConvertedInBaseCurrency);
                }
//                updatePaymentAmountDue(payment, company, amountReceived, amountReceivedConvertedInBaseCurrency); 
                if (jobj.has("appliedTDS") && !StringUtil.isNullOrEmpty(jobj.getString("appliedTDS"))) {   // TDS Applicable Flow Start in Invoice Details...
                    JSONArray jsonArray = new JSONArray(jobj.getString("appliedTDS"));
                    JSONObject tdsDetails = new JSONObject();
                    tdsDetails.put("appliedTDS", jsonArray);
                    tdsDetails.put("documenttype", jobj.getString("type"));
                    
                    HashMap<String, Object> tdsRequestParams = new HashMap();
                    tdsRequestParams.put("tdsDetailsJsonObj", tdsDetails);
                    tdsRequestParams.put("paymentDetailObj", pd);
                    tdsRequestParams.put("companyObj", company);
                    HashSet tdsdetails = saveTDSdetailsRow(tdsRequestParams);
                    if(!tdsdetails.isEmpty() || tdsdetails.size() > 0){
                    pd.setTdsdetails(tdsdetails);
                    }
                }
               pdetails.add(pd);
            }
        }
        return pdetails;
    }
    
    public ModelAndView checkInvoiceKnockedOffDuringMakePaymentPending(HttpServletRequest request, HttpServletResponse response) {

        JSONObject jobj = new JSONObject();
        JSONArray jArr = new JSONArray();
        boolean issuccess = false;
        String msg = "";
        
        try {
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            String billid = request.getParameter("billid");            
            requestParams.put("billid", billid);                             
            jobj = checkInvoiceKnockedOffDuringMakePaymentPending(requestParams);

        } catch (SessionExpiredException ex) {
            
            msg = ex.getMessage();
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            
            msg = "" + ex.getMessage();
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } 
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public JSONObject checkInvoiceKnockedOffDuringMakePaymentPending(Map<String, Object> requestParams) {
        JSONObject obj = new JSONObject();
        boolean issuccessInv = true;
        boolean issuccessCredit = true;
        boolean issuccessReceipt=true;
        String companyid=requestParams.get(Constants.companyKey).toString();

        try {
            int totalInvoicesLinked = 0;
            String billid = (String) requestParams.get("billid");//This is mandatory parameter
            KwlReturnObject CQObj = accountingHandlerDAOobj.getObject(Payment.class.getName(), billid);
            Payment payment = (Payment) CQObj.getEntityList().get(0);
            
            //For Innvoice
            /*
             * ERP-39732 changes made to make consistent method for checking knockoff invoices, CN/DN , advanced/refund when approving pending MP/RP 
             * Changes required in case of approving MP/RP adv to MP/RP refund , while checking for knockoff linked MP/RP converted amountdue is wrong for foreign currency
             * e.g. linked invoice is in MYR then converting entered amount in MYR and compare with amount due in MYR
             */ 
            for (PaymentDetail detail : payment.getRows()) {
                totalInvoicesLinked++;

                double enteredAmount =detail.getAmount();   //entered amount in transaction currency
                double invKnockedOffAmountInInvoiceCurrency = authHandler.round((enteredAmount/detail.getExchangeRateForTransaction()), companyid); //converting entered amount to linked invoice currency

                double invoiceAmountDue = 0.0;
                if (detail.getGoodsReceipt() != null && detail.getGoodsReceipt().isNormalInvoice()) {                               //For normal invoice

                    invoiceAmountDue = detail.getGoodsReceipt() != null ? detail.getGoodsReceipt().getInvoiceamountdue(): 0;    // invoice amount due in created currency
                } else {

                    invoiceAmountDue = detail.getGoodsReceipt() != null ? detail.getGoodsReceipt().getOpeningBalanceAmountDue() : 0;    // invoice amount due in created currency
                }

                if (invoiceAmountDue >= invKnockedOffAmountInInvoiceCurrency) {
                    issuccessInv = true;
                } else {
                    issuccessInv = false;
                }
            }
            //For Credit Note
            /*
             * ERP-39732 changes made to make consistent method for checking knockoff invoices, CN/DN , advanced/refund when approving pending MP/RP 
             * Changes required in case of approving MP/RP adv to MP/RP refund , while checking for knockoff linked MP/RP converted amountdue is wrong for foreign currency
             * e.g. linked CN/DN are in USD then converting entered amount to USD and comparing with amountdue in USD
             */            
            for (CreditNotePaymentDetails detail : payment.getCreditNotePaymentDetails()) {
                totalInvoicesLinked++;

                double creKnockedOffAmountInCNCurrency = 0.0;
                creKnockedOffAmountInCNCurrency = authHandler.round(detail.getAmountPaid(), companyid); //get converted entered amount in linked CN/DN currency (if CN/DN are created with USD then entered amt converted to USD)
                double creditAmtDue = 0;
                if (detail.getCreditnote() != null && detail.getCreditnote().isNormalCN()) {
                  //For normal Credit Note
                    creditAmtDue = detail.getCreditnote() != null ? authHandler.round(detail.getCreditnote().getCnamountdue(),companyid): 0;    //amount due is in CN/DN currency
                } else {
                   //For Opening Credit Note
                    creditAmtDue = detail.getCreditnote() != null ? authHandler.round(detail.getCreditnote().getOpeningBalanceAmountDue(),companyid): 0;
                }

                if (creditAmtDue >= creKnockedOffAmountInCNCurrency) {
                    issuccessCredit = true;
                } else {
                    issuccessCredit = false;
                }

            }                                                                    
            
            //For advance Receipt Payment
            /*
             * ERP-39732 changes made to make consistent method for checking knockoff invoices, CN/DN , advanced/refund when approving pending MP/RP 
             * Changes required in case of approving MP/RP adv to MP/RP refund , while checking for knockoff linked MP/RP converted amountdue is wrong for foreign currency
             * e.g. linked MP/RP advanced is in USD and MP/RP refund currency is SGD then converting entered SGD amount to USD and comparing amountdue of MP/RP advance in USD and enteredamount in USD 
             */ 
            for (AdvanceDetail advanceDetail : payment.getAdvanceDetails()) {
                
                double receiptKnockedOffAmountInPaymentCurrency = 0.0;

                double exchangeRateForTransanction = advanceDetail.getExchangeratefortransaction(); //line level exchange rate of each MP/RP advanced 
                double enteredAmount = advanceDetail.getAmount();   //entered amount in transaction currency

                receiptKnockedOffAmountInPaymentCurrency = authHandler.round((enteredAmount/exchangeRateForTransanction), companyid);

                double receiptAmtDue = 0;
                if (advanceDetail.getReceiptAdvanceDetails() != null) {

                    receiptAmtDue = advanceDetail.getReceiptAdvanceDetails().getAmountDue();    // RP/MP amount due in creted currency

                    if (receiptAmtDue >= receiptKnockedOffAmountInPaymentCurrency) {
                        issuccessReceipt = true;
                    } else {
                        issuccessReceipt = false;
                    }
                }
            }

        } catch (Exception ex) {
            issuccessCredit = false;
            issuccessInv = false;
            issuccessReceipt=false;

        } finally {
            try {
                obj.put("issuccessCredit", issuccessCredit);
                obj.put("issuccessInv", issuccessInv);
                obj.put("issuccessReceipt",issuccessReceipt);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return obj;
    }
    
     public ModelAndView approvePendingMakePayment(HttpServletRequest request, HttpServletResponse response) throws SessionExpiredException {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;

        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("Invoice_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            String billid = request.getParameter("billid");
            String billno = request.getParameter("billno");
            String remark = request.getParameter("remark");
            String baseUrl = URLUtil.getPageURL(request, loginpageFull);
            String userid = sessionHandlerImpl.getUserid(request);
            String psotingDateStr = request.getParameter("postingDate");
            String userName = sessionHandlerImpl.getUserFullName(request);
            double amount = StringUtil.isNullOrEmpty(request.getParameter("amount")) ? 0 : Double.parseDouble(request.getParameter("amount"));
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put("billid", billid);
            requestParams.put("billno", billno);
            requestParams.put("remark", remark);
            requestParams.put("userid", userid);
            requestParams.put("userName", userName);
            requestParams.put("amount", amount);
            requestParams.put("postingDate", psotingDateStr);
            requestParams.put("reqHeader", request.getHeader("x-real-ip"));//USED TO INSERT DATA IN AUDIT TRIAL
            requestParams.put("remoteAddress", request.getRemoteAddr());//USED TO INSERT DATA IN AUDIT TRIAL
            requestParams.put("baseUrl", baseUrl);
             List list = approvePendingMakePayment(requestParams);
             msg = (String) list.get(0);
            issuccess = true;
            txnManager.commit(status);

            //below code is for Rounding off JE Generation if needed
            status = txnManager.getTransaction(def);
            try {
                accVendorPaymentModuleServiceObj.postRoundingJEAfterPaymentApprove(paramJobj); 
                txnManager.commit(status);
            } catch (Exception ex) {
                if (status != null) {
                    txnManager.rollback(status);
                }
                Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
            }

        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (AccountingException ae) {
            if (status != null) {
                txnManager.rollback(status);
            }
            msg = "" + ae.getMessage();
            msg = msg.replaceFirst("Transaction", "JE Posting");
            Logger.getLogger(accReceiptController.class.getName()).log(Level.SEVERE, null, ae);
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = "" + ex.getMessage();
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
     /**
      * Please Note accounting exception should only be thrown in case of if JE posting date dose not belongs to lockin period.As further code is written only to handle AccountingException in case of lockin period.
      * @param requestParams
      * @return
      * @throws ServiceException
      * @throws AccountingException 
      */
    public List approvePendingMakePayment(Map<String, Object> requestParams) throws ServiceException,AccountingException {
        List returnList = new ArrayList();
        try {

            String jeID = "";
            String jeIdForBankCharges = "";
            String jeIdForbankInterst = "";
            String jeIdForImportService = "";
            String msg = "";
            String companyid = (String) requestParams.get(Constants.companyKey);
            String userid = (String) requestParams.get("userid");
            String billid = (String) requestParams.get("billid");
            String remark = (String) requestParams.get("remark");
            String userFullName = (String) requestParams.get("userName");
            String baseUrl = (String) requestParams.get("baseUrl");
            double amount = (!StringUtil.isNullObject(requestParams.get("amount")) && !StringUtil.isNullOrEmpty(requestParams.get("amount").toString())) ? authHandler.round(Double.parseDouble(requestParams.get("amount").toString()), companyid) : 0;
            boolean isEditToApprove = (!StringUtil.isNullObject(requestParams.get("isEditToApprove")) && !StringUtil.isNullOrEmpty(requestParams.get("isEditToApprove").toString())) ? Boolean.parseBoolean(requestParams.get("isEditToApprove").toString()) : false;
            KwlReturnObject CQObj = accountingHandlerDAOobj.getObject(Payment.class.getName(), billid);
            Payment payment = (Payment) CQObj.getEntityList().get(0);
            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);
            KwlReturnObject returnObject = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) returnObject.getEntityList().get(0);
            HashMap<String, Object> invApproveMap = new HashMap<String, Object>();
            int level = payment.getApprovestatuslevel();
            invApproveMap.put("companyid", companyid);
            invApproveMap.put("level", level);
            invApproveMap.put("totalAmount", String.valueOf(amount));
            invApproveMap.put("currentUser", userid);
            invApproveMap.put("fromCreate", false);
            invApproveMap.put("moduleid", Constants.Acc_Make_Payment_ModuleId);
            int approvedLevel = 0;
            Map<String, Object> paramMap = new HashMap<>();
            paramMap.put("id", companyid);
            Object exPrefObject = kwlCommonTablesDAOObj.getRequestedObjectFields(ExtraCompanyPreferences.class, new String[]{"columnPref"}, paramMap);
            JSONObject jObj = StringUtil.isNullObject(exPrefObject) ? new JSONObject() : new JSONObject(exPrefObject.toString());
            boolean isPostingDateCheck = false;
            if (!StringUtil.isNullObject(jObj) && jObj.has(Constants.IS_POSTING_DATE_CHECK) && jObj.get(Constants.IS_POSTING_DATE_CHECK) != null && jObj.optBoolean(Constants.IS_POSTING_DATE_CHECK, false)) {
                isPostingDateCheck = true;
            }
            String psotingDateStr = (String) requestParams.get("postingDate");
            DateFormat df = authHandler.getDateOnlyFormat();
            Date postingDate = null;
            if (!StringUtil.isNullOrEmpty(psotingDateStr)) {
                postingDate = df.parse(psotingDateStr);
            }
            String JENumber = "";
            String JEMsg = "";
            List list = new ArrayList();
            list.add(payment.getID());
            List approvedLevelList = paymentService.approveMakePayment(list, invApproveMap, true);
            approvedLevel = (Integer) approvedLevelList.get(0);
            jeID = payment.getJournalEntry().getID();
            
            if (approvedLevel == 11) {//when final 
                if (StringUtil.isNullOrEmpty(payment.getJournalEntry().getEntryNumber())) {
                    int isApproved = 0;
                    HashMap<String, Object> JEFormatParams = new HashMap<String, Object>();
                    JEFormatParams.put("moduleid", Constants.Acc_GENERAL_LEDGER_ModuleId);
                    JEFormatParams.put("modulename", CompanyPreferencesConstants.AUTOJOURNALENTRY);
                    JEFormatParams.put("companyid", companyid);
                    JEFormatParams.put("isdefaultFormat", true);
                    KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(JEFormatParams);
                    SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
//                    String JENumBer = journalEntryModuleServiceobj.updateJEEntryNumberForNewJE(requestParams, payment.getJournalEntry(), companyid, format.getID(), isApproved);
                    String JENumBer = "";
                    KwlReturnObject returnObj = journalEntryModuleServiceobj.updateJEEntryNumberForNewJE(requestParams, payment.getJournalEntry(), companyid, format.getID(), isApproved);
                    if (returnObj.isSuccessFlag() && returnObj.getRecordTotalCount() > 0) {
                        JENumBer = (String) returnObj.getEntityList().get(0);
                    } else if (!returnObj.isSuccessFlag()) {
                        throw new AccountingException((String) returnObj.getEntityList().get(0));
                    }
                } else {
                    JSONObject jeJobj = new JSONObject();
                    HashSet<JournalEntryDetail> details = new HashSet<JournalEntryDetail>();
                    jeJobj.put("jeid", jeID);
                    jeJobj.put("comapnyid", companyid);
                    jeJobj.put("pendingapproval", 0);
                    if (isPostingDateCheck && postingDate!=null) {
                        jeJobj.put("entrydate", postingDate);
                    }
                    accJournalEntryobj.updateJournalEntry(jeJobj, details);
                }
                JENumber = " with JE No. " + payment.getJournalEntry().getEntryNumber();
                JEMsg = "<br/>" + "JE No : <b>" + payment.getJournalEntry().getEntryNumber() + "</b>";
            }
            if (payment.getJournalEntryForBankCharges() != null) {
                jeIdForBankCharges = payment.getJournalEntryForBankCharges().getID();
                JSONObject jeJobj = new JSONObject();
                HashSet<JournalEntryDetail> details = new HashSet<JournalEntryDetail>();
                jeJobj.put("jeid", jeIdForBankCharges);
                jeJobj.put("comapnyid", companyid);
                jeJobj.put("pendingapproval", 0);
                accJournalEntryobj.updateJournalEntry(jeJobj, details);
            }
            if (payment.getJournalEntryForBankInterest() != null) {
                //Update JE for Bank Interst
                jeIdForbankInterst = payment.getJournalEntryForBankInterest().getID();
                JSONObject jeJobj = new JSONObject();
                HashSet<JournalEntryDetail> details = new HashSet<JournalEntryDetail>();
                jeJobj.put("jeid", jeIdForbankInterst);
                jeJobj.put("comapnyid", companyid);
                jeJobj.put("pendingapproval", 0);
                accJournalEntryobj.updateJournalEntry(jeJobj, details);
            }
            /*
             * Updating Import Service JE
             */ 
            if (payment.getImportServiceJE() != null) {
                //Update JE for Import Service Invoices
                jeIdForImportService = payment.getImportServiceJE().getID();
                JSONObject jeJobj = new JSONObject();
                HashSet<JournalEntryDetail> details = new HashSet<JournalEntryDetail>();
                jeJobj.put("jeid", jeIdForImportService);
                jeJobj.put("comapnyid", companyid);
                jeJobj.put("pendingapproval", 0);
                accJournalEntryobj.updateJournalEntry(jeJobj, details);
            }

            if (!isEditToApprove && approvedLevel == 11) {
                for (PaymentDetail detail : payment.getRows()) {
                    GoodsReceipt invObj = detail.getGoodsReceipt();
                    double returnAmountInInvoiceCurrecny = 0;
                    double returnAmountInBaseAmountDue = 0;
                    double discountAmt=detail.getDiscountAmount();
                    double discountAmtInInvoiceCurrency = authHandler.round(detail.getDiscountAmount() / detail.getExchangeRateForTransaction(), companyid);
                    returnAmountInInvoiceCurrecny = detail.getAmountInGrCurrency()+discountAmtInInvoiceCurrency;
                    double returnAmountInPaymentCurrency = detail.getAmount()+discountAmt;
//                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, returnAmountInPaymentCurrency, payment.getCurrency().getCurrencyID(), payment.getJournalEntry().getEntryDate(), payment.getJournalEntry().getExternalCurrencyRate());
                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, returnAmountInPaymentCurrency, payment.getCurrency().getCurrencyID(), payment.getCreationDate(), payment.getJournalEntry().getExternalCurrencyRate());
                    returnAmountInBaseAmountDue = (Double) bAmt.getEntityList().get(0);
                    KwlReturnObject invoiceResult = updateInvoiceAmountDueAndReturnResult(invObj, payment, company, returnAmountInInvoiceCurrecny, returnAmountInBaseAmountDue);
                    /*
                     * Update the amountduedate while approving the payment
                     */
                    if (invoiceResult != null && invoiceResult.getEntityList() != null && invoiceResult.getEntityList().size() > 0) {
                        GoodsReceipt gr = (GoodsReceipt) invoiceResult.getEntityList().get(0);
                        if (gr.isIsOpeningBalenceInvoice() && gr.getOpeningBalanceAmountDue() == 0) {
                            try {
//                                DateFormat df = authHandler.getOnlyDateFormat();
                                HashMap<String, Object> dataMap = new HashMap<String, Object>();
//                                dataMap.put("amountduedate", payment!=null ? (payment.isIsOpeningBalencePayment()? payment.getCreationDate() : payment.getJournalEntry().getEntryDate()) : null);
                                dataMap.put("amountduedate", payment != null ? payment.getCreationDate() : null);
                                accGoodsReceiptobj.saveGoodsReceiptAmountDueZeroDate(gr, dataMap);
                            } catch (Exception ex) {
                                System.out.println("" + ex.getMessage());
                            }
                        } else if (gr.getInvoiceamountdue() == 0) {
                            try {
//                                DateFormat df = authHandler.getOnlyDateFormat();
                                HashMap<String, Object> dataMap = new HashMap<String, Object>();
//                                dataMap.put("amountduedate", payment!=null ? (payment.isIsOpeningBalencePayment()? payment.getCreationDate() : payment.getJournalEntry().getEntryDate()) : null);
                                dataMap.put("amountduedate", payment!=null ? payment.getCreationDate() : null);
                                accGoodsReceiptobj.saveGoodsReceiptAmountDueZeroDate(gr, dataMap);
                            } catch (Exception ex) {
                                System.out.println("" + ex.getMessage());
                            }
                        }
                    }
                }

                for (CreditNotePaymentDetails detail : payment.getCreditNotePaymentDetails()) {
                    double returnAmount = detail.getAmountPaid();;
                    KwlReturnObject cnjedresult = accPaymentDAOobj.updateCnAmount(detail.getCreditnote().getID(), returnAmount);
                    KwlReturnObject cnopeningdueresult = accPaymentDAOobj.updateCnOpeningAmountDue(detail.getCreditnote().getID(), returnAmount);           
                    KwlReturnObject cnopeningduebaseresult = accPaymentDAOobj.updateCnOpeningBaseAmountDue(detail.getCreditnote().getID(), returnAmount);
                }

            }
            if (!isEditToApprove && approvedLevel == Constants.APPROVED_STATUS_LEVEL) {              //deducting amount due at final level
                for (AdvanceDetail detail : payment.getAdvanceDetails()) {
                    ReceiptAdvanceDetail receiptAdvanceDetail = detail.getReceiptAdvanceDetails();
                    if (receiptAdvanceDetail != null) {
                        /* ERP-39732
                         * e.g. one linked MP/RP advanced(100SGD)  and other MP/RP advanced(200SGD) is not linked then total_amount(300SGD) of transanction was deducting from linked MP/RP(SGD100)
                         */
                        double finalAmtDue = authHandler.round((receiptAdvanceDetail.getAmountDue() - (detail.getAmount() / detail.getExchangeratefortransaction())), companyid);   //ERP-39732 total amount of MP/RP was getting substracted from advanced type linked MP/RP 
                        receiptAdvanceDetail.setAmountDue(finalAmtDue);         //converting to receipt currency
//                        receiptAdvanceDetail.setAmountDue(receiptAdvanceDetail.getAmountDue() - amount);
                    }
                }                                
            }
            if (approvedLevel != Constants.NoAuthorityToApprove && preferences.isSendapprovalmail()) {//If allow to send approval mail in company account preferences
                String sendorInfo = (!company.isEmailFromCompanyCreator()) ? Constants.ADMIN_EMAILID : authHandlerDAOObj.getSysEmailIdByCompanyID(company.getCompanyID());
                String creatormail = company.getCreator().getEmailID();
                String documentcreatoremail = (payment != null && payment.getCreatedby() != null) ? payment.getCreatedby().getEmailID() : "";
                String fname = company.getCreator().getFirstName() == null ? "" : company.getCreator().getFirstName();
                String lname = company.getCreator().getLastName() == null ? "" : company.getCreator().getLastName();
                String creatorname = fname + " " + lname;
                String approvalpendingStatusmsg = "";
                HashMap<String, Object> qdDataMap = new HashMap<String, Object>();
                ArrayList<String> emailArray = new ArrayList<>();
                qdDataMap.put(Constants.companyKey, companyid);
                qdDataMap.put("level", level);
                qdDataMap.put(Constants.moduleid,Constants.Acc_Make_Payment_ModuleId);
//                emailArray =commonFnControllerService.getUserApprovalEmail(qdDataMap);

                        emailArray.add(creatormail); 
                if (!StringUtil.isNullOrEmpty(documentcreatoremail) && !creatormail.equalsIgnoreCase(documentcreatoremail)) {
                    emailArray.add(documentcreatoremail);
                }
                        String[] emails ={};
                        emails = emailArray.toArray(emails);
//                String[] emails = {creatormail};
                if (!StringUtil.isNullOrEmpty(preferences.getApprovalEmails())) {
                    String[] compPrefMailIds = preferences.getApprovalEmails().split(",");
                    emails = AccountingManager.getMergedMailIds(emails, compPrefMailIds);
                }
                qdDataMap.put("totalAmount",String.valueOf(amount));
                if (level < 11) {
                approvalpendingStatusmsg=commonFnControllerService.getApprovalstatusmsg(qdDataMap);
                }
                Map<String, Object> mailParameters = new HashMap();
                mailParameters.put("Number", payment.getPaymentNumber());
                mailParameters.put("userName", userFullName);
                mailParameters.put("emails", emails);
                mailParameters.put("moduleName", Constants.MAKE_PAYMENT);
                mailParameters.put("sendorInfo", sendorInfo);
                mailParameters.put("addresseeName", "All");
                mailParameters.put("companyid", company.getCompanyID());
                mailParameters.put("baseUrl", baseUrl);
                mailParameters.put("approvalstatuslevel", level);
                mailParameters.put("approvalpendingStatusmsg", approvalpendingStatusmsg);
                if (emails.length > 0) {
                    accountingHandlerDAOobj.sendApprovedEmails(mailParameters);
                }
            }
            
            /*---------_Approval History-------------------  */
            // Save Approval History
            if (approvedLevel != Constants.NoAuthorityToApprove) {
                HashMap<String, Object> hashMap = new HashMap<String, Object>();
                hashMap.put("transtype", Constants.MAKE_PAYMENT_APPROVAL);
                hashMap.put("transid", payment.getID());
                hashMap.put("approvallevel", payment.getApprovestatuslevel());//  If approvedLevel = 11 then its final Approval
                hashMap.put("remark", remark);
                hashMap.put("userid", userid);
                hashMap.put("companyid", companyid);
                accountingHandlerDAOobj.updateApprovalHistory(hashMap);
                // Audit log entry
                String action = "Make Payment ";
                String auditaction = AuditAction.MAKE_PAYMENT_APPROVED;
                auditTrailObj.insertAuditLog(auditaction, "User " + userFullName + " has Approved a " + action + payment.getPaymentNumber() + JENumber + " at Level-" + payment.getApprovestatuslevel(), requestParams, payment.getID());
                msg = "Make Payment has been approved successfully " + " by " + userFullName + " at Level " + payment.getApprovestatuslevel() + "." + JEMsg;
            };
            returnList.add(msg);
        }catch (AccountingException ae) {
            throw new AccountingException(ae.getMessage(), ae);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("approvePendingMake Payment:" + ex.getMessage(), ex);
        }
        return returnList;
    }
     
     
    public HashSet saveTDSdetailsRow(HashMap<String, Object> tdsRequestParams) throws JSONException, ServiceException, UnsupportedEncodingException {
        HashSet tdsdetails = new HashSet();
        TDSRate tdsRate = null;
        Account account=null;
        Account tdsaccountidObj=null;
        
        JSONObject tdsDetailsJsonObj = null;
        PaymentDetail paymentdetail = null;
        AdvanceDetail advanceDetail = null;
        PaymentDetailOtherwise paymentDetailOtherwise=null;
        Company company = null;
        if(tdsRequestParams.containsKey("tdsDetailsJsonObj")){
            tdsDetailsJsonObj = (JSONObject) tdsRequestParams.get("tdsDetailsJsonObj");
        }
        if(tdsRequestParams.containsKey("paymentDetailObj")){
            paymentdetail = (PaymentDetail) tdsRequestParams.get("paymentDetailObj");
        }
        if(tdsRequestParams.containsKey("advanceDetailObj")){
            advanceDetail = (AdvanceDetail) tdsRequestParams.get("advanceDetailObj");
        }
        if(tdsRequestParams.containsKey("paymentDetailOtherwiseObj")){
            paymentDetailOtherwise = (PaymentDetailOtherwise) tdsRequestParams.get("paymentDetailOtherwiseObj");
        }
        if(tdsRequestParams.containsKey("companyObj")){
            company = (Company) tdsRequestParams.get("companyObj");
        }
        JSONArray jsonArr=tdsDetailsJsonObj.getJSONArray("appliedTDS");    
        for(int i=0;i<jsonArr.length();i++){
            
            TdsDetails tdsDetails= new TdsDetails();        
            JSONObject jsonObj=jsonArr.getJSONObject(i);
            if(!jsonObj.has("ruleid") || StringUtil.isNullOrEmpty(jsonObj.getString("ruleid"))){
                break;
            }
            String documenttype= tdsDetailsJsonObj.getString("documenttype");
            String ruleId=jsonObj.getString("ruleid");
            String accountid=jsonObj.getString("accountid");
            String natureofpayment=jsonObj.getString("natureofpayment");
            String amount=jsonObj.getString("amount");
            String rowTaxAmount=jsonObj.getString("rowTaxAmount");
            String includetax=jsonObj.getString("includetax");
            String documentdetail=jsonObj.getString("rowid");
            double tdspercentage=jsonObj.get("tdspercentage")!=null?jsonObj.getDouble("tdspercentage"):0.0;
            double tdsamount=jsonObj.getDouble("tdsamount");
            double enteramount=jsonObj.getDouble("enteramount");
            String tdsjedid=jsonObj.getString("tdsjedid");
            String tdsaccountid=jsonObj.getString("tdsaccountid");
            if(!StringUtil.isNullOrEmpty(ruleId)){
                KwlReturnObject tdsRateData = accountingHandlerDAOobj.getObject(TDSRate.class.getName(), Integer.parseInt(ruleId));
                tdsRate = (TDSRate) tdsRateData.getEntityList().get(0);
            }
            if(!StringUtil.isNullOrEmpty(accountid)){
                KwlReturnObject accountData = accountingHandlerDAOobj.getObject(Account.class.getName(), accountid);
                account = (Account) accountData.getEntityList().get(0);
            }   
            if(!StringUtil.isNullOrEmpty(tdsaccountid)){
                KwlReturnObject accountData = accountingHandlerDAOobj.getObject(Account.class.getName(), tdsaccountid);
                tdsaccountidObj = (Account) accountData.getEntityList().get(0);
            }   
            tdsDetails.setTdsid(StringUtil.generateUUID());
            tdsDetails.setCompany(company);
            tdsDetails.setPaymentdetail(paymentdetail);
            tdsDetails.setAdvanceDetail(advanceDetail);
            tdsDetails.setPaymentdetailotherwise(paymentDetailOtherwise);
            tdsDetails.setRuleid(tdsRate);
            tdsDetails.setAccount(account);
            tdsDetails.setJournalEntryDetail(tdsjedid);
            tdsDetails.setDocumenttype(documenttype);
//            tdsDetails.setDocumentid(null);
            tdsDetails.setDocumentdetails(documentdetail);
            tdsDetails.setEnteramount(enteramount);
            tdsDetails.setTdsamount(tdsamount);            
            tdsDetails.setTdspercentage(tdspercentage);            
            tdsDetails.setIncludetaxamount(true);  
            tdsDetails.setTdspayableaccount(tdsaccountidObj);  
            tdsdetails.add(tdsDetails);
            }
        return tdsdetails;
    }
    
    public HashMap<String,Object> saveLinkedPaymentDetails(HttpServletRequest request, Payment payment, Company company, JSONArray jArr, boolean isMultiDebit,int type, Map<String,Object> counterMap) throws JSONException, ServiceException, AccountingException, SessionExpiredException, ParseException {
        HashMap<String,Object> linkDetails = new HashMap<String, Object>();
        HashSet linkdetails = new HashSet();

        Date maxLinkingDate = null;
        String linkingdate = (String) request.getParameter("linkingdate");
        DateFormat df = authHandler.getDateOnlyFormat();
        if (!StringUtil.isNullOrEmpty(linkingdate)) {
            maxLinkingDate = df.parse(linkingdate);
        }
        String JENumbers=null;
        String companyid = company.getCompanyID();
        KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
        CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
        if (type==Constants.AdvancePayment) {
            String baseCurrency = sessionHandlerImpl.getCurrencyID(request);
                for (int i = 0; i < jArr.length(); i++) {
                    JSONObject jobj = jArr.getJSONObject(i);
                    LinkDetailPayment linkDetailPayment = new LinkDetailPayment();
                    linkDetailPayment.setSrno(i + 1);
                    linkDetailPayment.setID(StringUtil.generateUUID());
                    double amountReceived = jobj.getDouble("enteramount");
                    double amountReceivedConverted = jobj.getDouble("enteramount"); // amount in goodreceipt currency
                    linkDetailPayment.setAmount(jobj.getDouble("enteramount"));

                    linkDetailPayment.setCompany(company);
                    KwlReturnObject result = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), jobj.getString("documentid"));
                    GoodsReceipt goodsReceipt = (GoodsReceipt) result.getEntityList().get(0);
                    linkDetailPayment.setGoodsReceipt(goodsReceipt);
                    //JE For Invoice which is Linked to Invoice
                    double exchangeRateforTransaction = jobj.optDouble("exchangeratefortransaction", 1.0);
                    if (goodsReceipt != null) {
                        double finalAmountReval = ReevalJournalEntryForGoodsReceipt(request, goodsReceipt, amountReceived, exchangeRateforTransaction);
                        if (finalAmountReval != 0) {
                            String basecurrency = sessionHandlerImpl.getCurrencyID(request);
                            /**
                             * added transactionID and transactionModuleID to
                             * Realised JE.
                             */
                            counterMap.put("transactionModuleid", goodsReceipt.isIsOpeningBalenceInvoice() ? Constants.Acc_opening_Prchase_Invoice : Constants.Acc_Vendor_Invoice_ModuleId);
                            counterMap.put("transactionId", goodsReceipt.getID());
                            String revaljeid = PostJEFORReevaluation(request, finalAmountReval, goodsReceipt.getCompany().getCompanyID(), preferences, basecurrency, null,counterMap);
                            linkDetailPayment.setRevalJeId(revaljeid);
                        }
                    }
                    //JE For Receipt which is of Opening Type
                    if (payment != null && (payment.isIsOpeningBalencePayment() || (!payment.getAdvanceDetails().isEmpty()))) {
                        String basecurrency = sessionHandlerImpl.getCurrencyID(request);
                        double finalAmountReval = ReevalJournalEntryForPayment(request, payment, amountReceived, exchangeRateforTransaction);
                        if (finalAmountReval != 0) {
                            /**
                             * added transactionID and transactionModuleID to
                             * Realised JE.
                             */
                            counterMap.put("transactionModuleid", payment.isIsOpeningBalencePayment() ? Constants.Acc_opening_Payment : Constants.Acc_Make_Payment_ModuleId);
                            counterMap.put("transactionId", payment.getID());
                            String revaljeid = PostJEFORReevaluation(request, -(finalAmountReval), payment.getCompany().getCompanyID(), preferences, basecurrency, null,counterMap);
                            linkDetailPayment.setRevalJeIdPayment(revaljeid);
                        }
                    }
                    if (!StringUtil.isNullOrEmpty(jobj.optString("exchangeratefortransaction", "").toString()) && !StringUtil.isNullOrEmpty(goodsReceipt.getCurrency().getCurrencyID()) && !goodsReceipt.getCurrency().getCurrencyID().equals(payment.getCurrency().getCurrencyID())) {
                        linkDetailPayment.setExchangeRateForTransaction(exchangeRateforTransaction);
                        linkDetailPayment.setFromCurrency(goodsReceipt.getCurrency());
                        linkDetailPayment.setToCurrency(payment.getCurrency());
                        exchangeRateforTransaction = Double.parseDouble(jobj.get("exchangeratefortransaction").toString());
                        // adjusted exchange rate used to handle case like ERP-34884
                        double adjustedRate = exchangeRateforTransaction;
                        if (jobj.optDouble("amountdue", 0) != 0 && jobj.optDouble("amountDueOriginal", 0) != 0) {
                            adjustedRate = jobj.optDouble("amountdue", 0) / jobj.optDouble("amountDueOriginal", 0);
                        }
                        amountReceivedConverted = amountReceived / adjustedRate;
                        amountReceivedConverted = authHandler.round(amountReceivedConverted, companyid);
                        linkDetailPayment.setAmountInGrCurrency(amountReceivedConverted);
                    }else{
                        linkDetailPayment.setExchangeRateForTransaction(Double.parseDouble(jobj.get("exchangeratefortransaction").toString()));
                        linkDetailPayment.setFromCurrency(goodsReceipt.getCurrency());
                        linkDetailPayment.setToCurrency(payment.getCurrency());
                        amountReceivedConverted = authHandler.round(amountReceived, companyid);
                        linkDetailPayment.setAmountInGrCurrency(amountReceivedConverted);
                    }
                    linkDetailPayment.setPayment(payment);
                    if (jobj.has("rowjedid")) {
                        linkDetailPayment.setROWJEDID(jobj.getString("rowjedid"));
                    }

                Date linkingDate=new Date();
//                Date invoiceDate= goodsReceipt.isIsOpeningBalenceInvoice()?goodsReceipt.getCreationDate():goodsReceipt.getJournalEntry().getEntryDate();
//                Date paymentDate= payment.isIsOpeningBalencePayment()?payment.getCreationDate():payment.getJournalEntry().getEntryDate();
                Date invoiceDate= goodsReceipt.getCreationDate();
                Date paymentDate= payment.getCreationDate();

                    Date maxDate = null;
                    if (maxLinkingDate != null) {
                        maxDate = maxLinkingDate;
                    } else {
                        List<Date> datelist = new ArrayList<Date>();
                        datelist.add(linkingDate);
                        datelist.add(invoiceDate);
                        datelist.add(paymentDate);
                        Collections.sort(datelist); //Sort the Date object & get the dates in ASC order. Pick-up the last record as Max Date
                        maxDate = datelist.get(datelist.size() - 1);
                        //maxDate = Math.max(Math.max(linkingDate.getTime(), invoiceDate.getTime()), paymentDate.getTime());
                    }

                    linkDetailPayment.setPaymentLinkDate(maxDate);
                    double amountReceivedConvertedInBaseCurrency = 0d;
                HashMap<String, Object> requestParams = new HashMap();
                requestParams.put(Constants.companyid, company.getCompanyID());
                requestParams.put("gcurrencyid", company.getCurrency().getCurrencyID());
                    double externalCurrencyRate = 1d;
                boolean isopeningBalancePM = payment.isIsOpeningBalencePayment();
                    Date PMCreationDate = null;
                    PMCreationDate = payment.getCreationDate();
                    if (isopeningBalancePM) {
                        externalCurrencyRate = payment.getExchangeRateForOpeningTransaction();
                    } else {
//                        PMCreationDate = payment.getJournalEntry().getEntryDate();
                        externalCurrencyRate = payment.getJournalEntry().getExternalCurrencyRate();
                    }
                    String fromcurrencyid = payment.getCurrency().getCurrencyID();
                    KwlReturnObject bAmt = null;
                    if (isopeningBalancePM && payment.isConversionRateFromCurrencyToBase()) {// if Payment is opening balance Payment and Conversion rate is taken from user is Currency to base then following method will be called.
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amountReceived, fromcurrencyid, PMCreationDate, externalCurrencyRate);
                    } else {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amountReceived, fromcurrencyid, PMCreationDate, externalCurrencyRate);
                    }
                    amountReceivedConvertedInBaseCurrency = (Double) bAmt.getEntityList().get(0);
                    amountReceivedConvertedInBaseCurrency = authHandler.round(amountReceivedConvertedInBaseCurrency, companyid);

                    /*
                    Calculate GoodsReceipt amountdue on current amount received and exchangerate
                     */
                    double invoiceExternalCurrencyRate = 1d;
                    boolean isopeningBalanceInvoice = goodsReceipt.isIsOpeningBalenceInvoice();
                    Date invoiceCreationDate = null;
                    invoiceCreationDate = goodsReceipt.getCreationDate();
                    if (isopeningBalanceInvoice) {
                        invoiceExternalCurrencyRate = goodsReceipt.getExchangeRateForOpeningTransaction();
                    } else {
//                        invoiceCreationDate = goodsReceipt.getJournalEntry().getEntryDate();
                        invoiceExternalCurrencyRate = goodsReceipt.getJournalEntry().getExternalCurrencyRate();
                    }
                    String invoicefromcurrencyid = goodsReceipt.getCurrency().getCurrencyID();
                    KwlReturnObject invoicebAmt = null;
                    if (isopeningBalanceInvoice && goodsReceipt.isConversionRateFromCurrencyToBase()) {// if Receipt is opening balance Receipt and Conversion rate is taken from user is Currency to base then following method will be called.
                        invoicebAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amountReceivedConverted, invoicefromcurrencyid, invoiceCreationDate, invoiceExternalCurrencyRate);
                    } else {
                        invoicebAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amountReceivedConverted, invoicefromcurrencyid, invoiceCreationDate, invoiceExternalCurrencyRate);
                    }
                    double invoiceamountReceivedConvertedInBaseCurrency = (Double) invoicebAmt.getEntityList().get(0);
                    invoiceamountReceivedConvertedInBaseCurrency = authHandler.round(invoiceamountReceivedConvertedInBaseCurrency, companyid);
//                updateInvoiceAmountDue(goodsReceipt, payment, company, amountReceivedConverted, invoiceamountReceivedConvertedInBaseCurrency);
                    KwlReturnObject goodsReceiptResult = updateInvoiceAmountDueAndReturnResult(goodsReceipt, payment, company, amountReceivedConverted, invoiceamountReceivedConvertedInBaseCurrency);
                    if (goodsReceiptResult != null && goodsReceiptResult.getEntityList() != null && goodsReceiptResult.getEntityList().size() > 0) {
                        GoodsReceipt gr = (GoodsReceipt) goodsReceiptResult.getEntityList().get(0);
                        if (gr.isIsOpeningBalenceInvoice() && gr.getOpeningBalanceAmountDue() == 0) {
                            try {
                                HashMap<String, Object> dataMap = new HashMap<String, Object>();
                                dataMap.put("amountduedate", maxDate);
                                accGoodsReceiptobj.saveGoodsReceiptAmountDueZeroDate(gr, dataMap);
                            } catch (Exception ex) {
                                System.out.println("" + ex.getMessage());
                            }
                        } else if (gr.getInvoiceamountdue() == 0) {
                            try {
                                HashMap<String, Object> dataMap = new HashMap<String, Object>();
                                dataMap.put("amountduedate", maxDate);
                                accGoodsReceiptobj.saveGoodsReceiptAmountDueZeroDate(gr, dataMap);
                            } catch (Exception ex) {
                                System.out.println("" + ex.getMessage());
                            }
                        }
                    }


                    /*
                    Start gains/loss calculation
                    Calculate Gains/Loss if Invoice exchange rate changed at the time of linking with advance payment
                     */

                if (isopeningBalancePM&& payment.isConversionRateFromCurrencyToBase()) {
                        externalCurrencyRate = 1 / externalCurrencyRate;
                    }
                    if (preferences.getForeignexchange() == null) {
                        throw new AccountingException(messageSource.getMessage("acc.common.forex", null, RequestContextUtils.getLocale(request)));
                    }
                double amountDiff = checkFxGainLossOnLinkInvoices(goodsReceipt, Double.parseDouble(jobj.optString("exchangeratefortransaction","1")),externalCurrencyRate, amountReceived, payment.getCurrency().getCurrencyID(), baseCurrency, company.getCompanyID());
                amountDiff = authHandler.round(amountDiff,company.getCompanyID());
                    if (amountDiff != 0 && preferences.getForeignexchange() != null && Math.abs(amountDiff) >= 0.000001) {//Math.abs(amountDiff) < .0000001 Added this because in case of revaluation the diff in the rates was less than .0000001 and the amount calculation was going in Exachange rate account. 
                        boolean rateDecreased = false;
                        if (amountDiff < 0) {
                            rateDecreased = true;
                        }
                        JournalEntry journalEntry = null;
                        Map<String, Object> jeDataMap = AccountingManager.getGlobalParams(request);
                    int counter =0;
                    String createdby = sessionHandlerImpl.getUserid(request);
                        if(counterMap.containsKey("counter")){
                            counter=(Integer) counterMap.get("counter");
                        }
                        String jeentryNumber = null;
                        boolean jeautogenflag = false;
                        String jeSeqFormatId = "";
                        Date entryDate = maxDate;
                        synchronized (this) {
                            HashMap<String, Object> JEFormatParams = new HashMap<String, Object>();
                            JEFormatParams.put("moduleid", Constants.Acc_GENERAL_LEDGER_ModuleId);
                            JEFormatParams.put("modulename", "autojournalentry");
                            JEFormatParams.put("companyid", companyid);
                            JEFormatParams.put("isdefaultFormat", true);

                            KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(JEFormatParams);
                            SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
                            Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                            seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_JOURNALENTRY, format.getID(), false, entryDate);
                        String nextAutoNoTemp = (String)seqNumberMap.get(Constants.AUTO_ENTRYNUMBER);  //next auto generated number
                        int sequence = Integer.parseInt((String)seqNumberMap.get(Constants.SEQNUMBER));
                        String jeDatePrefix = (String)seqNumberMap.get(Constants.DATEPREFIX);//Date Prefix Part
                        String jeDateAfterPrefix = (String)seqNumberMap.get(Constants.DATEAFTERPREFIX);  //Date After Prefix Part
                        String jeDateSuffix = (String)seqNumberMap.get(Constants.DATESUFFIX);//Date Suffix Part
                            sequence = sequence + counter;
                            String number = "" + sequence;
                            String action = "" + (sequence - counter);
                            nextAutoNoTemp.replaceAll(action, number);
                            jeentryNumber = nextAutoNoTemp.replaceAll(action, number);  //next auto generated number
                            jeSeqFormatId = format.getID();
                            jeautogenflag = true;

                            jeDataMap.put("entrynumber", jeentryNumber);
                            jeDataMap.put("autogenerated", jeautogenflag);
                            jeDataMap.put(Constants.SEQFORMAT, jeSeqFormatId);
                            jeDataMap.put(Constants.SEQNUMBER, number);
                            jeDataMap.put(Constants.DATEPREFIX, jeDatePrefix);
                            jeDataMap.put(Constants.DATEAFTERPREFIX, jeDateAfterPrefix);
                            jeDataMap.put(Constants.DATESUFFIX, jeDateSuffix);
                        }
                        jeDataMap.put("entrydate", entryDate);//   ERP-8987 //     SDP-2944   W: Linking Date for JE
//                    jeDataMap.pu
                        jeDataMap.put("companyid", companyid);
                    jeDataMap.put("memo", "Exchange Gains/Loss posted against Advance Payment '"+payment.getPaymentNumber()+"' linked to Invoice '"+goodsReceipt.getGoodsReceiptNumber()+"'");
                        jeDataMap.put("currencyid", payment.getCurrency().getCurrencyID());
                        jeDataMap.put("externalCurrencyRate", externalCurrencyRate);
                        jeDataMap.put("isexchangegainslossje", true);
                    jeDataMap.put("transactionId",payment.getID() );
                        jeDataMap.put("transactionModuleid", Constants.Acc_Make_Payment_ModuleId);
                        jeDataMap.put("createdby",createdby);
                        journalEntry = accJournalEntryobj.getJournalEntry(jeDataMap);
                        accJournalEntryobj.saveJournalEntryByObject(journalEntry);

                        boolean isDebit = rateDecreased ? false : true;
                        JSONObject jedjson = new JSONObject();
                        jedjson.put("srno", 1);
                        jedjson.put("companyid", companyid);
                        jedjson.put("amount", rateDecreased ? (-1 * amountDiff) : amountDiff);
                        jedjson.put("accountid", preferences.getForeignexchange().getID());
                        jedjson.put("debit", isDebit);
                        jedjson.put("jeid", journalEntry.getID());
                        KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                        JournalEntryDetail jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                        Set<JournalEntryDetail> detail = new HashSet();
                        detail.add(jed);

                        jedjson = new JSONObject();
                        jedjson.put("srno", 2);
                        jedjson.put("companyid", companyid);
                        jedjson.put("amount", rateDecreased ? (-1 * amountDiff) : amountDiff);
                        jedjson.put("accountid", goodsReceipt.getAccount().getID());
                        jedjson.put("debit", !isDebit);
                        jedjson.put("jeid", journalEntry.getID());
                        jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                        jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                        detail.add(jed);
                        journalEntry.setDetails(detail);
                        accJournalEntryobj.saveJournalEntryDetailsSet(detail);

                        linkDetailPayment.setLinkedGainLossJE(journalEntry.getID());
                        counter++;
                        counterMap.put("counter", counter);
                    }
                    // End of Gain/loss calculations
                
                for(AdvanceDetail advanceDetail:payment.getAdvanceDetails()){
//                    advanceDetail.setAmountDue(advanceDetail.getAmountDue()-amountReceived);
                     /**
                     * For link Transaction from Payment, Update Amount Due with
                     * rounding.
                     */
                    double finalamountdue = authHandler.round(advanceDetail.getAmountDue() - amountReceived, companyid);
                    advanceDetail.setAmountDue(finalamountdue);
                }
                if (payment != null && isopeningBalancePM) {
                    double receiptAmountDue = payment.getOpeningBalanceAmountDue();
                    double paymentAmountDueInBase = payment.getOpeningBalanceBaseAmountDue();
                    receiptAmountDue -= amountReceived;
                    payment.setOpeningBalanceAmountDue(receiptAmountDue);
//                    payment.setOpeningBalanceBaseAmountDue(payment.getOpeningBalanceBaseAmountDue() - amountReceivedConvertedInBaseCurrency);
                    
                    if (isopeningBalancePM && payment.isConversionRateFromCurrencyToBase()) {// if Payment is opening balance Payment and Conversion rate is taken from user is Currency to base then following method will be called.
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, receiptAmountDue, fromcurrencyid, PMCreationDate, payment.getExchangeRateForOpeningTransaction());
                    } else {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, receiptAmountDue, fromcurrencyid, PMCreationDate,  payment.getExchangeRateForOpeningTransaction());
                    }
                    paymentAmountDueInBase = (Double) bAmt.getEntityList().get(0);
                    paymentAmountDueInBase = authHandler.round(paymentAmountDueInBase, companyid);
                    payment.setOpeningBalanceBaseAmountDue(paymentAmountDueInBase);
                    HashMap<String, Object> paymenthm = new HashMap<String, Object>();
                    paymenthm.put("paymentid", payment.getID());
                    paymenthm.put("openingBalanceAmountDue", payment.getOpeningBalanceAmountDue());
                    paymenthm.put(Constants.openingBalanceBaseAmountDue, payment.getOpeningBalanceBaseAmountDue());
                    accVendorPaymentobj.savePayment(paymenthm);
                }
                    Set<AdvanceDetail> advanceDetails = payment.getAdvanceDetails();
                    List<ReceiptAdvanceDetailTermMap> advDetailTermMaps = new LinkedList<>();
                    if (company.getCountry().getID().equalsIgnoreCase("" + Constants.indian_country_id)) {
                        if (!advanceDetails.isEmpty()) {
                            for (AdvanceDetail advDetail : advanceDetails) {
                                String advId = advDetail.getId();
                                /**
                                 * Get term details from Advance
                                 */
                                JSONObject jSONObject = new JSONObject();
                                jSONObject.put("adId", advId);
                                KwlReturnObject kwlObject = accVendorPaymentobj.getAdvanceDetailsTerm(jSONObject);
                                advDetailTermMaps = kwlObject.getEntityList();
                            }
                        }
                    }
                    /*
                     * * Post JE for Linking for India Invoice
                     */
                    if (company.getCountry().getID().equalsIgnoreCase("" + Constants.indian_country_id) && payment != null && payment.getAdvanceDetails() != null && payment.isRcmApplicable()&& !advDetailTermMaps.isEmpty()) {
                        JournalEntry journalEntry = null;
                        Map<String, Object> jeDataMap = AccountingManager.getGlobalParams(request);
                        int counter = 0;
                        if (counterMap.containsKey("counter")) {
                            counter = (Integer) counterMap.get("counter");
                        }
                        String jeentryNumber = null;
                        String jeDatePrefix = "";
                        String jeDateAfterPrefix = "";
                        String jeDateSuffix = "";
                        boolean jeautogenflag = false;
                        String jeSeqFormatId = "";
                        Date entryDate = null;
                        if (maxLinkingDate != null) {
                            entryDate = new Date(maxLinkingDate.getTime());
                        } else {
                            entryDate = new Date();
                        }
                        synchronized (this) {
                            HashMap<String, Object> JEFormatParams = new HashMap<String, Object>();
                            JEFormatParams.put("moduleid", Constants.Acc_GENERAL_LEDGER_ModuleId);
                            JEFormatParams.put("modulename", "autojournalentry");
                            JEFormatParams.put("companyid", companyid);
                            JEFormatParams.put("isdefaultFormat", true);
                            KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(JEFormatParams);
                            SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
                            Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                            seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_JOURNALENTRY, format.getID(), false, entryDate);
                            String nextAutoNoTemp = (String) seqNumberMap.get(Constants.AUTO_ENTRYNUMBER);  //next auto generated number
                            int sequence = Integer.parseInt((String) seqNumberMap.get(Constants.SEQNUMBER));
                            jeDatePrefix = (String) seqNumberMap.get(Constants.DATEPREFIX);//Date Prefix Part
                            jeDateAfterPrefix = (String) seqNumberMap.get(Constants.DATEAFTERPREFIX);  //Date After Prefix Part
                            jeDateSuffix = (String) seqNumberMap.get(Constants.DATESUFFIX);//Date Suffix Part
                            sequence = sequence + counter;
                            String number = "" + sequence;
                            String action = "" + (sequence - counter);
                            nextAutoNoTemp.replaceAll(action, number);
                            jeentryNumber = nextAutoNoTemp.replaceAll(action, number);  //next auto generated number
                            jeSeqFormatId = format.getID();
                            jeautogenflag = true;
                            jeDataMap.put("entrynumber", jeentryNumber);
                            if (StringUtil.isNullOrEmpty(JENumbers)) {
                                JENumbers = jeentryNumber;
                            } else {
                                JENumbers = jeentryNumber!=""?JENumbers.concat("," + jeentryNumber):"";
                            }
                            jeDataMap.put("autogenerated", jeautogenflag);
                            jeDataMap.put(Constants.SEQFORMAT, jeSeqFormatId);
                            jeDataMap.put(Constants.SEQNUMBER, number);
                            jeDataMap.put(Constants.DATEPREFIX, jeDatePrefix);
                            jeDataMap.put(Constants.DATEAFTERPREFIX, jeDateAfterPrefix);
                            jeDataMap.put(Constants.DATESUFFIX, jeDateSuffix);
                            counter++;
                            counterMap.put("counter", counter);
                        }
                        jeDataMap.put("entrydate", entryDate); // ERP-8987    SDP-2944 FW: Linking Date for JE
                        jeDataMap.put("companyid", companyid);
                        jeDataMap.put("memo", "GST Adjustment posted against Advance Payment '" + payment.getPaymentNumber() + "' linked to Invoice '" + goodsReceipt.getGoodsReceiptNumber() + "'");
                        jeDataMap.put("currencyid", payment.getCurrency().getCurrencyID());
                        jeDataMap.put("externalCurrencyRate", externalCurrencyRate);
//                jeDataMap.put("isexchangegainslossje", true);
                        jeDataMap.put("transactionId", payment.getID());
                        jeDataMap.put("transactionModuleid", Constants.Acc_Make_Payment_ModuleId);
                        journalEntry = accJournalEntryobj.getJournalEntry(jeDataMap);
                        accJournalEntryobj.saveJournalEntryByObject(journalEntry);

                        /**
                         * need to get receipt details and its GST details
                         */
                        if (!advanceDetails.isEmpty()) {
                            Set<JournalEntryDetail> detail = new HashSet();
                            for (AdvanceDetail advanceDetail : advanceDetails) {
                                String adId = advanceDetail.getId();
                                /**
                                 * Get term details from Advance
                                 */
                                JSONObject jSONObject = new JSONObject();
                                jSONObject.put("adId", adId);
                                KwlReturnObject kro = accVendorPaymentobj.getAdvanceDetailsTerm(jSONObject);
                                List<AdvanceDetailTermMap> advanceDetailTermMaps = kro.getEntityList();
                                int srcount = 1;
                                double totalpercentage = 0d;
                                for (AdvanceDetailTermMap receiptAdvanceDetailTermMap : advanceDetailTermMaps) {
                                    totalpercentage += receiptAdvanceDetailTermMap.getPercentage();
                                }
                                for (AdvanceDetailTermMap receiptAdvanceDetailTermMap : advanceDetailTermMaps) {
                                    double termamount = 0d;//receiptAdvanceDetailTermMap.getTermamount();
                                    double percentage = receiptAdvanceDetailTermMap.getPercentage();
                                    String gstAdvpayableAcc = receiptAdvanceDetailTermMap.getEntitybasedLineLevelTermRate().getLineLevelTerms().getPayableAccount().getID();
                                    String gstAcc = receiptAdvanceDetailTermMap.getEntitybasedLineLevelTermRate().getLineLevelTerms().getAccount().getID();
                                    /**
                                     * Calculate Amount Formula is written based
                                     * on calculate GST amount by applying
                                     * percentage on amount excluding tax amount
                                     * Example : Advance amount = 1000+50 =1050
                                     * Invoice Amount = 500+25=525 Linking JE
                                     * amount = Calculate GST amount on 500 not
                                     * on 525
                                     */
                                    double amtWithoutTax = (amountReceivedConverted * 100 / (100 + totalpercentage));
                                    double amount = amountReceivedConverted * percentage / 100;
                                    termamount = authHandler.round(amount, companyid);
                                    JSONObject jedjson = new JSONObject();
                                    jedjson.put("srno", srcount);
                                    jedjson.put("companyid", companyid);
                                    jedjson.put("amount", termamount);
                                    jedjson.put("accountid", gstAcc);
                                    jedjson.put("debit", true);
                                    jedjson.put("jeid", journalEntry.getID());
                                    KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                                    JournalEntryDetail jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                                    detail.add(jed);
                                    srcount++;

                                    jedjson = new JSONObject();
                                    jedjson.put("srno", srcount);
                                    jedjson.put("companyid", companyid);
                                    jedjson.put("amount", termamount);
                                    jedjson.put("accountid", gstAdvpayableAcc);
                                    jedjson.put("debit", false);
                                    jedjson.put("jeid", journalEntry.getID());
                                    jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                                    jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                                    detail.add(jed);
                                    srcount++;
                                }
                            }
                            journalEntry.setDetails(detail);
                            accJournalEntryobj.saveJournalEntryDetailsSet(detail);
                            linkDetailPayment.setLinkedGSTJE(journalEntry.getID());
                        }
                    }
                linkdetails.add(linkDetailPayment);
                linkDetails.put("linkDetailPayment", linkdetails);
                
            }
            linkDetails.put("JournalEntries",JENumbers);
        }
        return linkDetails;
    }
    
    /*
        To implement below method we referred oldPaymentRowsAmount() which is used to calculate Forex Gains/Loss for invoices  
    */
    public double checkFxGainLossOnLinkInvoices(GoodsReceipt gr, double newInvoiceExchageRate, double paymentExchangeRate, double recinvamount, String paymentCurrency, String baseCurrency, String companyid) throws ServiceException {
        double amount = 0;
        HashMap<String, Object> GlobalParams = new HashMap<String, Object>();
        GlobalParams.put("companyid", companyid);
        GlobalParams.put("gcurrencyid", baseCurrency);
        double goodsReceiptExchangeRate = 0d;
        Date goodsReceiptCreationDate = null;
        boolean isopeningBalanceInvoice = gr.isIsOpeningBalenceInvoice();
        if (gr.isNormalInvoice()) {
            goodsReceiptExchangeRate = gr.getJournalEntry().getExternalCurrencyRate();
//            goodsReceiptCreationDate = gr.getJournalEntry().getEntryDate();
        } else {
            goodsReceiptExchangeRate = gr.getExchangeRateForOpeningTransaction();
            if(isopeningBalanceInvoice && gr.isConversionRateFromCurrencyToBase()){ //converting rate to Base to Other Currency Rate
                goodsReceiptExchangeRate=1/goodsReceiptExchangeRate;
            }
        }
        goodsReceiptCreationDate = gr.getCreationDate();

        boolean revalFlag = false;
        
        HashMap<String, Object> invoiceId = new HashMap<String, Object>();
        invoiceId.put("invoiceid", gr.getID());
        invoiceId.put("companyid", companyid);
        KwlReturnObject result = accJournalEntryobj.getRevalInvoiceId(invoiceId);
        RevaluationHistory history = (result.getEntityList().size()) != 0 ? (RevaluationHistory) result.getEntityList().get(0) : null;
        if (history != null) {
            goodsReceiptExchangeRate = history.getEvalrate();
            revalFlag = true;
        }
        String currid = gr.getCurrency().getCurrencyID();
        KwlReturnObject bAmt = null;
        if (currid.equalsIgnoreCase(paymentCurrency)) {
//            if (history == null && isopeningBalanceInvoice && gr.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
//                bAmt = accCurrencyDAOobj.getOneCurrencyToOtherAccordingToCurrencyToBaseExchangeRate(GlobalParams, 1.0, currid, paymentCurrency, goodsReceiptCreationDate, goodsReceiptExchangeRate);
//            } else {
                double paymentExternalCurrencyRate = paymentExchangeRate;
                if (goodsReceiptExchangeRate != paymentExternalCurrencyRate) {
                    bAmt = accCurrencyDAOobj.getOneCurrencyToOtherWithDiffRates(GlobalParams, 1.0, currid, paymentCurrency, goodsReceiptCreationDate, goodsReceiptExchangeRate, paymentExternalCurrencyRate);
                } else {
                    bAmt = accCurrencyDAOobj.getOneCurrencyToOther(GlobalParams, 1.0, currid, paymentCurrency, goodsReceiptCreationDate, goodsReceiptExchangeRate);
                }
//            }
        } else {
//            if (history == null && isopeningBalanceInvoice && gr.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
//                bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModifiedAccordingToCurrencyToBaseExchangeRate(GlobalParams, 1.0, currid, paymentCurrency, goodsReceiptCreationDate, goodsReceiptExchangeRate);
//            } else {
                double paymentExternalCurrencyRate = paymentExchangeRate;
                if (goodsReceiptExchangeRate != paymentExternalCurrencyRate) {
                    bAmt = accCurrencyDAOobj.getOneCurrencyToOtherWithDiffRates(GlobalParams, 1.0, currid, paymentCurrency, goodsReceiptCreationDate, goodsReceiptExchangeRate, paymentExternalCurrencyRate);
                } else {
                    bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(GlobalParams, 1.0, currid, paymentCurrency, goodsReceiptCreationDate, goodsReceiptExchangeRate);
                }
//        }
        }
        double oldrate = (Double) bAmt.getEntityList().get(0);
        double newrate = 0.0;
        double ratio = 0;
        if (newInvoiceExchageRate != oldrate && newInvoiceExchageRate != 0.0 
                && Math.abs(newInvoiceExchageRate - oldrate) >= 0.000001) {
            newrate = newInvoiceExchageRate;
            ratio = oldrate - newrate;
            amount = (recinvamount - (recinvamount / newrate) * oldrate);
        } 
        amount = authHandler.round(amount, companyid);
        return amount;
    }
    /*
     * Update vendor invoice due amount when payment is being made against that
     * vendor invoice.
     */
    public void updateInvoiceAmountDue(GoodsReceipt goodsReceipt, Payment payment, Company company, double amountReceivedForGoodsReceipt, double baseAmountReceivedForGoodsReceipt) throws JSONException, ServiceException {
        if (goodsReceipt != null) {
            double invoiceAmountDue = goodsReceipt.getOpeningBalanceAmountDue();
            invoiceAmountDue -= amountReceivedForGoodsReceipt;
            Map<String, Object> greceipthm = new HashMap<String, Object>();
            greceipthm.put("grid", goodsReceipt.getID());;
            greceipthm.put("companyid", company.getCompanyID());
            greceipthm.put("openingBalanceAmountDue", invoiceAmountDue);
            greceipthm.put(Constants.openingBalanceBaseAmountDue, goodsReceipt.getOpeningBalanceBaseAmountDue() - baseAmountReceivedForGoodsReceipt);
            greceipthm.put(Constants.invoiceamountdue, goodsReceipt.getInvoiceamountdue() - amountReceivedForGoodsReceipt);
            greceipthm.put(Constants.invoiceamountdueinbase, goodsReceipt.getInvoiceAmountDueInBase()- baseAmountReceivedForGoodsReceipt);
            accGoodsReceiptobj.updateGoodsReceipt(greceipthm);
        }
    }
    /*Function to update invoiceamountdue and return KwlReturnObject*/
    public KwlReturnObject updateInvoiceAmountDueAndReturnResult(GoodsReceipt goodsReceipt, Payment payment, Company company, double amountReceivedForGoodsReceipt, double baseAmountReceivedForGoodsReceipt) throws JSONException, ServiceException {
        KwlReturnObject result = null;
        if (goodsReceipt != null) {
            boolean isInvoiceIsClaimed = (goodsReceipt.getBadDebtType() == Constants.Invoice_Claimed || goodsReceipt.getBadDebtType() == Constants.Invoice_Recovered);
            boolean isopeningBalanceInvoice = goodsReceipt.isIsOpeningBalenceInvoice();
            Map<String, Object> greceipthm = new HashMap<String, Object>();
            greceipthm.put("grid", goodsReceipt.getID());;
            greceipthm.put("companyid", company.getCompanyID());
            if (isInvoiceIsClaimed) {
                greceipthm.put(Constants.claimAmountDue, goodsReceipt.getClaimAmountDue() - amountReceivedForGoodsReceipt);
            } else {
                double invoiceAmountDue = goodsReceipt.getOpeningBalanceAmountDue();
                invoiceAmountDue -= amountReceivedForGoodsReceipt;
                greceipthm.put("grid", goodsReceipt.getID());;
                greceipthm.put("companyid", company.getCompanyID());
                greceipthm.put("openingBalanceAmountDue", invoiceAmountDue);
                String invoicefromcurrencyid = goodsReceipt.getCurrency().getCurrencyID();
                KwlReturnObject invoicebAmt = null;
                double invoiceExternalCurrencyRate = 1d;
                if (isopeningBalanceInvoice) {
                    invoiceExternalCurrencyRate = goodsReceipt.getExchangeRateForOpeningTransaction();
                } else {
                    invoiceExternalCurrencyRate = goodsReceipt.getJournalEntry().getExternalCurrencyRate();
                }
                Date invoiceCreationDate = null;
                invoiceCreationDate = goodsReceipt.getCreationDate();
                HashMap<String, Object> requestParams = new HashMap();
                requestParams.put(Constants.companyid, company.getCompanyID());
                requestParams.put("gcurrencyid", company.getCurrency().getCurrencyID());
                if (isopeningBalanceInvoice && goodsReceipt.isConversionRateFromCurrencyToBase()) {// if Receipt is opening balance Receipt and Conversion rate is taken from user is Currency to base then following method will be called.
                    invoicebAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, invoiceAmountDue, invoicefromcurrencyid, invoiceCreationDate, invoiceExternalCurrencyRate);
                } else if(isopeningBalanceInvoice && !goodsReceipt.isConversionRateFromCurrencyToBase()){
                    invoicebAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invoiceAmountDue, invoicefromcurrencyid, invoiceCreationDate, invoiceExternalCurrencyRate);
                } else {
                    invoicebAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, (goodsReceipt.getInvoiceamountdue() - amountReceivedForGoodsReceipt), invoicefromcurrencyid, invoiceCreationDate, invoiceExternalCurrencyRate);
                }
                double invoiceAmountDueInBase = (Double) invoicebAmt.getEntityList().get(0);
                invoiceAmountDueInBase = authHandler.round(invoiceAmountDueInBase, company.getCompanyID());
//                greceipthm.put(Constants.openingBalanceBaseAmountDue, goodsReceipt.getOpeningBalanceBaseAmountDue() - baseAmountReceivedForGoodsReceipt);
                greceipthm.put(Constants.openingBalanceBaseAmountDue, invoiceAmountDueInBase);
                greceipthm.put(Constants.invoiceamountdue, goodsReceipt.getInvoiceamountdue() - amountReceivedForGoodsReceipt);
//                greceipthm.put(Constants.invoiceamountdueinbase, goodsReceipt.getInvoiceAmountDueInBase() - baseAmountReceivedForGoodsReceipt);
                greceipthm.put(Constants.invoiceamountdueinbase, invoiceAmountDueInBase);
            }
            result = accGoodsReceiptobj.updateGoodsReceipt(greceipthm);
        }
        return result;
    }

    /*
     * Update payment due amount when payment is being made.
     */
    public void updatePaymentAmountDue(Payment payment, Company company, double amountReceived, double baseAmountReceived) throws JSONException, ServiceException {
        if (payment != null) {
            double receiptAmountDue = payment.getOpeningBalanceAmountDue();
            receiptAmountDue -= amountReceived;
            HashMap paymenthm = new HashMap();
            paymenthm.put("openingBalanceAmountDue", receiptAmountDue);
            paymenthm.put(Constants.openingBalanceBaseAmountDue, payment.getOpeningBalanceBaseAmountDue() - baseAmountReceived);
            paymenthm.put("paymentid", payment.getID());
            paymenthm.put("currencyid", payment.getCurrency().getCurrencyID());
            paymenthm.put("companyid", company.getCompanyID());

//            String createdby = sessionHandlerImpl.getUserid(request);
//            String modifiedby = sessionHandlerImpl.getUserid(request);
//            long createdon = System.currentTimeMillis();
//            long updatedon = System.currentTimeMillis();
            accVendorPaymentobj.savePayment(paymenthm);
        }
    }

    public HashSet saveBillingPaymentRows(BillingPayment payment, Company company, JSONArray jArr, boolean isMultiDebit, BillingInvoice binvoice) throws JSONException, ServiceException {
        HashSet hs = new HashSet();
        if (!isMultiDebit) {
            for (int i = 0; i < jArr.length(); i++) {
                JSONObject jobj = jArr.getJSONObject(i);
                BillingPaymentDetail rd = new BillingPaymentDetail();
                rd.setSrno(i + 1);
                rd.setAmount(jobj.getDouble("payment"));
                rd.setCompany(company);
//            rd.setBillingGoodsReceipt((BillingGoodsReceipt) session.get(BillingGoodsReceipt.class, jobj.getString("billid")));
                KwlReturnObject result = accountingHandlerDAOobj.getObject(BillingGoodsReceipt.class.getName(), jobj.getString("billid"));
                rd.setBillingGoodsReceipt((BillingGoodsReceipt) result.getEntityList().get(0));
                if (binvoice != null) {
                    rd.setBillingInvoice(binvoice);
                }
                rd.setBillingPayment(payment);
//            amount += jobj.getDouble("payment");
                hs.add(rd);
            }
        }
//        payment.setRows(hs);
        return hs;
    }

    public double oldPaymentRowsAmount(HttpServletRequest request, JSONArray jArr, String currencyid, double externalCurrencyRate) throws ServiceException, SessionExpiredException {
        double amount = 0, actualAmount = 0;
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String basecurrency = sessionHandlerImpl.getCurrencyID(request);
            HashMap<String, Object> GlobalParams = new HashMap<String, Object>();
            GlobalParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
            GlobalParams.put("gcurrencyid", basecurrency);
            GlobalParams.put("dateformat", authHandler.getDateOnlyFormat(request));
            Date creationDate = authHandler.getDateOnlyFormat(request).parse(request.getParameter("creationdate"));
            for (int i = 0; i < jArr.length(); i++) {
                double ratio = 0;
                JSONObject jobj = jArr.getJSONObject(i);
//                boolean revalFlag=false;
//            GoodsReceipt gr = (GoodsReceipt) session.get(GoodsReceipt.class, jobj.getString("billid"));
                double newrate = 0.0;
                boolean revalFlag = false;
//                KwlReturnObject result = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), jobj.getString("billid"));
                KwlReturnObject result = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), jobj.getString("documentid"));
                GoodsReceipt gr = (GoodsReceipt) result.getEntityList().get(0);
                boolean isopeningBalanceInvoice = gr.isIsOpeningBalenceInvoice();
//                Double recinvamount = jobj.getDouble("payment");
                Double recinvamount = jobj.getDouble("enteramount");
                boolean isopeningBalancePayment = jobj.optBoolean("isopeningBalancePayment", false);
                boolean isConversionRateFromCurrencyToBase = jobj.optBoolean("isConversionRateFromCurrencyToBase", false);
                double exchangeRate = 0d;
                Date goodsReceiptCreationDate = null;
                if (gr.isNormalInvoice()) {
                    exchangeRate = gr.getJournalEntry().getExternalCurrencyRate();
//                    goodsReceiptCreationDate = gr.getJournalEntry().getEntryDate();
                } else {
                    exchangeRate = gr.getExchangeRateForOpeningTransaction();
                    if(gr.isConversionRateFromCurrencyToBase()){
                        exchangeRate=1/exchangeRate;
                    }
                }
                goodsReceiptCreationDate = gr.getCreationDate();


                HashMap<String, Object> invoiceId = new HashMap<String, Object>();
                invoiceId.put("invoiceid", gr.getID());
                invoiceId.put("companyid", sessionHandlerImpl.getCompanyid(request));
//                if (gr.isNormalInvoice()) {
                result = accJournalEntryobj.getRevalInvoiceId(invoiceId);
                RevaluationHistory history = (result.getEntityList().size()) != 0 ? (RevaluationHistory) result.getEntityList().get(0) : null;
                if (history != null) {
                    exchangeRate = history.getEvalrate();
                    newrate = jobj.optDouble("exchangeratefortransaction", 0.0);
                    revalFlag = true;
                }
//                }
                result = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), basecurrency);
                KWLCurrency currency = (KWLCurrency) result.getEntityList().get(0);
                String currid = currency.getCurrencyID();
                if (gr.getCurrency() != null) {
                    currid = gr.getCurrency().getCurrencyID();
                }

                KwlReturnObject bAmt = null;
                if (currid.equalsIgnoreCase(currencyid)) {
                    // code in if condition is commented for ticket ERP-18047
//                    if (history == null && isopeningBalanceInvoice && gr.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
//                        bAmt = accCurrencyDAOobj.getOneCurrencyToOtherAccordingToCurrencyToBaseExchangeRate(GlobalParams, 1.0, currid, currencyid, goodsReceiptCreationDate, exchangeRate);
//                    } else {
                            double paymentExternalCurrencyRate=StringUtil.isNullOrEmpty(request.getParameter("externalcurrencyrate"))?0.0:Double.parseDouble(request.getParameter("externalcurrencyrate"));
                            if(exchangeRate!=paymentExternalCurrencyRate){
                                bAmt = accCurrencyDAOobj.getOneCurrencyToOtherWithDiffRates(GlobalParams, 1.0, currid, currencyid, goodsReceiptCreationDate, exchangeRate,paymentExternalCurrencyRate);
                            }else{
                                bAmt = accCurrencyDAOobj.getOneCurrencyToOther(GlobalParams, 1.0, currid, currencyid, goodsReceiptCreationDate, exchangeRate);
                            }
//                    }
                } else {
                    // code in if condition is commented for ticket ERP-18047
//                    if (history == null && isopeningBalanceInvoice && gr.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
//                        bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModifiedAccordingToCurrencyToBaseExchangeRate(GlobalParams, 1.0, currid, currencyid, goodsReceiptCreationDate, exchangeRate);
//                    } else {
                            double paymentExternalCurrencyRate=StringUtil.isNullOrEmpty(request.getParameter("externalcurrencyrate"))?0.0:Double.parseDouble(request.getParameter("externalcurrencyrate"));
                            if(exchangeRate!=paymentExternalCurrencyRate){
                                bAmt = accCurrencyDAOobj.getOneCurrencyToOtherWithDiffRates(GlobalParams, 1.0, currid, currencyid, goodsReceiptCreationDate, exchangeRate,paymentExternalCurrencyRate);
                            }else{
                                bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(GlobalParams, 1.0, currid, currencyid, goodsReceiptCreationDate, exchangeRate);
                            }
//                    }
                }
                double oldrate = (Double) bAmt.getEntityList().get(0);
                if (jobj.optDouble("exchangeratefortransaction", 0.0) != oldrate && jobj.optDouble("exchangeratefortransaction", 0.0) != 0.0 && Math.abs(jobj.optDouble("exchangeratefortransaction", 0.0) - oldrate) >= 0.000001) {
                    newrate = jobj.optDouble("exchangeratefortransaction", 0.0);
                    ratio = oldrate - newrate;
                    amount = (recinvamount - (recinvamount / newrate) * oldrate) / newrate;
                    KwlReturnObject bAmtActual = accCurrencyDAOobj.getBaseToCurrencyAmount(GlobalParams, amount, currencyid, creationDate, newrate);
                    actualAmount += authHandler.round((Double) bAmtActual.getEntityList().get(0), companyid);
                } else {
                    if (currid.equalsIgnoreCase(currencyid)) {
                        // code in if condition is commented for ticket ERP-18047
//                        if (history == null && isopeningBalanceInvoice && gr.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
//                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherAccordingToCurrencyToBaseExchangeRate(GlobalParams, 1.0, currid, currencyid, goodsReceiptCreationDate, exchangeRate);
//                        } else {      
                            double paymentExternalCurrencyRate=StringUtil.isNullOrEmpty(request.getParameter("externalcurrencyrate"))?0.0:Double.parseDouble(request.getParameter("externalcurrencyrate"));
                            if(exchangeRate!=paymentExternalCurrencyRate){
                                bAmt = accCurrencyDAOobj.getOneCurrencyToOtherWithDiffRates(GlobalParams, 1.0, currid, currencyid, goodsReceiptCreationDate, exchangeRate,paymentExternalCurrencyRate);
                            }else{
                                bAmt = accCurrencyDAOobj.getOneCurrencyToOther(GlobalParams, 1.0, currid, currencyid, goodsReceiptCreationDate, exchangeRate);
                            }
//                        }
                    } else {
                        // code in if condition is commented for ticket ERP-18047
//                        if (history == null && isopeningBalanceInvoice && gr.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
//                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModifiedAccordingToCurrencyToBaseExchangeRate(GlobalParams, 1.0, currid, currencyid, goodsReceiptCreationDate, exchangeRate);
//                        } else {
                            double paymentExternalCurrencyRate=StringUtil.isNullOrEmpty(request.getParameter("externalcurrencyrate"))?0.0:Double.parseDouble(request.getParameter("externalcurrencyrate"));
                            if(exchangeRate!=paymentExternalCurrencyRate){
                                bAmt = accCurrencyDAOobj.getOneCurrencyToOtherWithDiffRates(GlobalParams, 1.0, currid, currencyid, goodsReceiptCreationDate, exchangeRate,paymentExternalCurrencyRate);
                            }else{
                                bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(GlobalParams, 1.0, currid, currencyid, goodsReceiptCreationDate, exchangeRate);
                            }
//                        }
                    }
                    if (!revalFlag) {
                        newrate = (Double) bAmt.getEntityList().get(0);
                    }
                    if (Math.abs(jobj.optDouble("exchangeratefortransaction", 0.0) - oldrate) >= 0.000001) {
                        ratio = oldrate - newrate;
                    }
                    amount = recinvamount * ratio;
                    KwlReturnObject bAmtActual = null;
                    if (isopeningBalancePayment && isConversionRateFromCurrencyToBase) {// if payment is opening balance payment and Conversion rate is taken from user is Currency to base then following method will be called.
                        bAmtActual = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(GlobalParams, amount, currencyid, creationDate, externalCurrencyRate);
                    } else {
                        bAmtActual = accCurrencyDAOobj.getBaseToCurrencyAmount(GlobalParams, amount, currencyid, creationDate, externalCurrencyRate);
                    }
                    actualAmount +=authHandler.round((Double) bAmtActual.getEntityList().get(0), companyid);
                }
            }
        } catch (ParseException ex) {
            throw ServiceException.FAILURE("oldPaymentRowsAmount : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("oldPaymentRowsAmount : " + ex.getMessage(), ex);
        }
        return (actualAmount);
    }
    public double cndnPaymentForexGailLossAmount(HttpServletRequest request,JSONObject jobj, Payment payment ,String transactionCurrencyId, String currencyid, double externalCurrencyRate) throws ServiceException, SessionExpiredException, JSONException {
        double amount = 0, actualAmount = 0;
        String companyid = sessionHandlerImpl.getCompanyid(request);
        HashMap<String, Object> requestParams = new HashMap<String, Object>();
        requestParams.put("gcurrencyid",sessionHandlerImpl.getCurrencyID(request));
        requestParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
        requestParams.put("dateformat", authHandler.getDateOnlyFormat(request));
        double enterAmountPaymentCurrencyOld=0;
        double enterAmountTrancastionCurrencyNew=0;
        double amountdiff=0;
        try {
            
                double exchangeRate = 0d;
                double newrate = 0.0;
                double ratio = 0;
                Double enteramount = jobj.getDouble("enteramount");
                String documentId = jobj.getString("documentid");
                KwlReturnObject resultObject = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), documentId);
                CreditNote creditMemo = (CreditNote) resultObject.getEntityList().get(0);
                JournalEntry je = creditMemo.getJournalEntry();
                Date creditNoteDate = null;
                boolean isopeningBalanceInvoice = creditMemo.isIsOpeningBalenceCN();
                if (creditMemo.isNormalCN()) {
                    je = creditMemo.getJournalEntry();
//                    creditNoteDate = je.getEntryDate();
                    externalCurrencyRate = je.getExternalCurrencyRate();
                } else {
                    externalCurrencyRate =creditMemo.getExchangeRateForOpeningTransaction();
                    if(creditMemo.isConversionRateFromCurrencyToBase()) {
                       externalCurrencyRate = 1 / externalCurrencyRate;
                    }
                }
                creditNoteDate = creditMemo.getCreationDate();
                
                HashMap<String, Object> invoiceId = new HashMap<>();
                invoiceId.put("invoiceid", creditMemo.getID());
                invoiceId.put("companyid", sessionHandlerImpl.getCompanyid(request));
                KwlReturnObject result = accJournalEntryobj.getRevalInvoiceId(invoiceId);
                RevaluationHistory history = (result.getEntityList().size()) != 0 ? (RevaluationHistory) result.getEntityList().get(0) : null;
                if (history != null) {
                    externalCurrencyRate = history.getEvalrate();
                }
                
//                KwlReturnObject result = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), transactionCurrencyId);
//                KWLCurrency currency = (KWLCurrency) result.getEntityList().get(0);
//                String currid = currency.getCurrencyID();
//                currencyid = currency.getCurrencyID();
//                if (payment.getCurrency() != null) {
//                    currid = payment.getCurrency().getCurrencyID();
//                }

//               KwlReturnObject bAmt = null;
//            if (!StringUtil.isNullOrEmpty(transactionCurrencyId) && !StringUtil.isNullOrEmpty(transactionCurrencyId) && !transactionCurrencyId.equals(currencyid)) {
//                KwlReturnObject bAmtCurrencyFilter = null;
//                bAmtCurrencyFilter = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, enteramount, currencyid, transactionCurrencyId, creditNoteDate, externalCurrencyRate);
//                enterAmountTrancastionCurrencyOld = authHandler.round((Double) bAmtCurrencyFilter.getEntityList().get(0),2);
//                enterAmountTrancastionCurrencyNew = enterAmountTrancastionCurrencyOld;
//                if (!StringUtil.isNullOrEmpty(jobj.optString("exchangeratefortransaction", "").toString())) {
//                    double exchangeratefortransaction = Double.parseDouble(jobj.optString("exchangeratefortransaction", "1"));
//                    enterAmountTrancastionCurrencyNew = enteramount / Double.parseDouble(jobj.get("exchangeratefortransaction").toString());
//                    enterAmountTrancastionCurrencyNew = authHandler.round(enterAmountTrancastionCurrencyNew, 2);
//                    amountdiff=enterAmountTrancastionCurrencyOld-enterAmountTrancastionCurrencyNew;
//                    bAmtCurrencyFilter = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, amountdiff, transactionCurrencyId, currencyid, creditNoteDate, externalCurrencyRate);
//                    amountdiff = (Double) bAmtCurrencyFilter.getEntityList().get(0);
// 
//                    
//                }
                enterAmountTrancastionCurrencyNew = enteramount;
                if (!StringUtil.isNullOrEmpty(jobj.optString("exchangeratefortransaction", "").toString())) {
                    double exchangeratefortransaction = Double.parseDouble(jobj.optString("exchangeratefortransaction", "1"));
                    enterAmountTrancastionCurrencyNew = enteramount / Double.parseDouble(jobj.get("exchangeratefortransaction").toString());
                    enterAmountTrancastionCurrencyNew = authHandler.round(enterAmountTrancastionCurrencyNew, companyid);
                    KwlReturnObject bAmtCurrencyFilter = null;
                    bAmtCurrencyFilter = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, enterAmountTrancastionCurrencyNew, transactionCurrencyId, currencyid, creditNoteDate, externalCurrencyRate);
                    enterAmountPaymentCurrencyOld = authHandler.round((Double) bAmtCurrencyFilter.getEntityList().get(0), companyid);
                    amountdiff=enteramount-enterAmountPaymentCurrencyOld;
//                    bAmtCurrencyFilter = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, amountdiff, transactionCurrencyId, currencyid, creditNoteDate, externalCurrencyRate);
//                    amountdiff = (Double) bAmtCurrencyFilter.getEntityList().get(0);
            }
            
        }catch (Exception ex) {
            throw ServiceException.FAILURE("cndnPaymentForexGailLossAmount : " + ex.getMessage(), ex);
        }
        return (amountdiff);
    }
    
    public double cndnPaymentForexGailLossAmountForSameCurrency(HttpServletRequest request, JSONObject jobj, Payment payment, String transactionCurrencyId, String currencyid, double externalCurrencyRate) throws ServiceException, SessionExpiredException, JSONException {
        double amount = 0, actualAmount = 0;
        HashMap<String, Object> requestParams = new HashMap<String, Object>();
        requestParams.put("gcurrencyid", sessionHandlerImpl.getCurrencyID(request));
        requestParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
        requestParams.put("dateformat", authHandler.getDateOnlyFormat(request));
        double enterAmountPaymentCurrencyOld = 0;
        double enterAmountTrancastionCurrencyNew = 0;
        double amountdiff = 0;
        try {

            double exchangeRate = 0d;
            double newrate = 0.0;
            double ratio = 0;
            Double enteramount = jobj.getDouble("enteramount");
            String documentId = jobj.getString("documentid");
            KwlReturnObject resultObject = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), documentId);
            CreditNote creditMemo = (CreditNote) resultObject.getEntityList().get(0);
            JournalEntry je = creditMemo.getJournalEntry();
            Date creditNoteDate = null;
            boolean isopeningBalanceInvoice = creditMemo.isIsOpeningBalenceCN();
            if (creditMemo.isNormalCN()) {
                je = creditMemo.getJournalEntry();
//                creditNoteDate = je.getEntryDate();
                exchangeRate = je.getExternalCurrencyRate();
            } else {
                exchangeRate =creditMemo.getExchangeRateForOpeningTransaction();
                if(creditMemo.isConversionRateFromCurrencyToBase()) {
                   exchangeRate = 1 / exchangeRate;
                }
            }
            creditNoteDate = creditMemo.getCreationDate();
            double paymentExternalCurrencyRate=StringUtil.isNullOrEmpty(request.getParameter("externalcurrencyrate"))?1.0:Double.parseDouble(request.getParameter("externalcurrencyrate"));
            HashMap<String, Object> invoiceId = new HashMap<>();
            invoiceId.put("invoiceid", creditMemo.getID());
            invoiceId.put("companyid", sessionHandlerImpl.getCompanyid(request));
            KwlReturnObject result = accJournalEntryobj.getRevalInvoiceId(invoiceId);
            RevaluationHistory history = (result.getEntityList().size()) != 0 ? (RevaluationHistory) result.getEntityList().get(0) : null;
            if (history != null) {
                externalCurrencyRate = history.getEvalrate();
            }
                
            KwlReturnObject bAmt = null;
            if(exchangeRate!=paymentExternalCurrencyRate){
                bAmt = accCurrencyDAOobj.getOneCurrencyToOtherWithDiffRates(requestParams, 1.0, transactionCurrencyId, currencyid, creditNoteDate, exchangeRate,paymentExternalCurrencyRate);
            }else{
                bAmt = accCurrencyDAOobj.getOneCurrencyToOther(requestParams, 1.0, transactionCurrencyId, currencyid, creditNoteDate, exchangeRate);
            }
            double oldrate = (Double) bAmt.getEntityList().get(0);
            newrate = jobj.optDouble("exchangeratefortransaction", 0.0);
            amount = (enteramount - (enteramount / newrate) * oldrate) / newrate;
            KwlReturnObject bAmtActual = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, amount, currencyid, creditNoteDate, newrate);
            actualAmount += (Double) bAmtActual.getEntityList().get(0);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("cndnPaymentForexGailLossAmountForSameCurrency : " + ex.getMessage(), ex);
        }
        return (actualAmount);
    }
    
    private double oldBillingPaymentRowsAmount(HttpServletRequest request, JSONArray jArr, String currencyid, double externalCurrencyRate) throws ServiceException, SessionExpiredException {
        double ratio = 0;
        double amount = 0;
        try {
            KwlReturnObject result;
            HashMap<String, Object> GlobalParams = new HashMap<String, Object>();
            GlobalParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
            GlobalParams.put("gcurrencyid", sessionHandlerImpl.getCurrencyID(request));
            GlobalParams.put("dateformat", authHandler.getDateOnlyFormat(request));
            Date creationDate = authHandler.getDateOnlyFormat(request).parse(request.getParameter("creationdate"));
            for (int i = 0; i < jArr.length(); i++) {
                boolean revalFlag = false;
                JSONObject jobj = jArr.getJSONObject(i);
//            BillingGoodsReceipt bgr=(BillingGoodsReceipt) session.get(BillingGoodsReceipt.class, jobj.getString("billid"));
                result = accountingHandlerDAOobj.getObject(BillingGoodsReceipt.class.getName(), jobj.getString("billid"));
                BillingGoodsReceipt bgr = (BillingGoodsReceipt) result.getEntityList().get(0);
                double exchangeRate = bgr.getJournalEntry().getExternalCurrencyRate();
                HashMap<String, Object> invoiceId = new HashMap<String, Object>();
                invoiceId.put("invoiceid", bgr.getID());
                invoiceId.put("companyid", sessionHandlerImpl.getCompanyid(request));
                result = accJournalEntryobj.getRevalInvoiceId(invoiceId);
                RevaluationHistory history = (result.getEntityList().size()) != 0 ? (RevaluationHistory) result.getEntityList().get(0) : null;
                if (history != null) {
                    exchangeRate = history.getEvalrate();
                    revalFlag = true;
                }
                Double recinvamount = jobj.getDouble("payment");
//            KWLCurrency currency = (KWLCurrency)session.get(KWLCurrency.class, AuthHandler.getCurrencyID(request));
                result = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
                KWLCurrency currency = (KWLCurrency) result.getEntityList().get(0);

                String currid = currency.getCurrencyID();
                if (bgr.getCurrency() != null) {
                    currid = bgr.getCurrency().getCurrencyID();
                }
//            double oldrate=CompanyHandler.getCurrencyToBaseAmount(session,request,1.0,currid,bgr.getJournalEntry().getEntryDate(),externalCurrencyRate);
                KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(GlobalParams, 1.0, currid, bgr.getJournalEntry().getEntryDate(), exchangeRate);
                double oldrate = (Double) bAmt.getEntityList().get(0);

//            double  newrate=CompanyHandler.getCurrencyToBaseAmount(session,request,1.0,currid,AuthHandler.getDateOnlyFormatter(request).parse(request.getParameter("creationdate")),externalCurrencyRate);
                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(GlobalParams, 1.0, currid, creationDate, externalCurrencyRate);
                double newrate = (Double) bAmt.getEntityList().get(0);

                ratio = oldrate - newrate;
                amount += recinvamount * ratio;

            }
//         amount=CompanyHandler.getBaseToCurrencyAmount(session,request,amount,currencyid,AuthHandler.getDateOnlyFormatter(request).parse(request.getParameter("creationdate")),externalCurrencyRate);
            KwlReturnObject bAmt = accCurrencyDAOobj.getBaseToCurrencyAmount(GlobalParams, amount, currencyid, creationDate, externalCurrencyRate);
            amount = (Double) bAmt.getEntityList().get(0);
        } catch (ParseException ex) {
            throw ServiceException.FAILURE("oldPaymentRowsAmount : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("oldPaymentRowsAmount : " + ex.getMessage(), ex);
        }
        return (amount);
    }

    public ModelAndView getSinglePaymentDataToLoad(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            HashMap<String, Object> requestParams = getPaymentMap(request);
            String billid = request.getParameter("billid") != null ? request.getParameter("billid") : "";
            boolean isCopyTransaction = Boolean.parseBoolean(request.getParameter("isCopyTransaction"));
            requestParams.put("isCopyTransaction", isCopyTransaction);
            requestParams.put("billid", billid);
            DateFormat df = authHandler.getOnlyDateFormat(request);
            requestParams.put("df", df);
            KwlReturnObject result = null;
            result = accVendorPaymentobj.getPayments(requestParams);
            Object[] objects = (Object[]) result.getEntityList().get(0);
            Payment payment = (Payment) objects[0];
            Account acc = (Account) objects[1];
            JSONObject paymentObj = getPaymentInfo(payment, acc, requestParams);
            jobj.put("data", paymentObj);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            msg = ex.getMessage();
        } catch (ServiceException ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            msg = ex.getMessage();
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public JSONObject getPaymentInfo(Payment payment, Account acc, HashMap<String, Object> requestParams) throws JSONException, ServiceException, UnsupportedEncodingException, AccountingException {
        DateFormat df = (DateFormat) requestParams.get("df");
        String companyid = (String) requestParams.get("companyid");
        Map<String, Object> paramMap = new HashMap<>();
        paramMap.put("id", companyid);
        Object exPrefObject = kwlCommonTablesDAOObj.getRequestedObjectFields(ExtraCompanyPreferences.class, new String[]{"columnPref"}, paramMap);
        JSONObject jObj = StringUtil.isNullObject(exPrefObject) ? new JSONObject() : new JSONObject(exPrefObject.toString());
        boolean isPostingDateCheck = false;
        if (!StringUtil.isNullObject(jObj) && jObj.has(Constants.IS_POSTING_DATE_CHECK) && jObj.get(Constants.IS_POSTING_DATE_CHECK) != null && jObj.optBoolean(Constants.IS_POSTING_DATE_CHECK, false)) {
            isPostingDateCheck = true;
        }
        JSONObject obj = new JSONObject();
        obj.put("billid", payment.getID());
        if (isPostingDateCheck) {
            obj.put("billdate", df.format(payment.getCreationDate()));
            obj.put("creationdate", df.format(payment.getCreationDate()));
        } else {
            obj.put("billdate", df.format(payment.getJournalEntry().getEntryDate()));
            obj.put("creationdate", df.format(payment.getJournalEntry().getEntryDate()));
        }
        obj.put("companyid", payment.getCompany().getCompanyID());
        obj.put("companyname", payment.getCompany().getCompanyName());
        obj.put("entryno", payment.getJournalEntry().getEntryNumber());
        obj.put("journalentryid", payment.getJournalEntry().getID());
        obj.put("isadvancepayment", payment.isIsadvancepayment());
        obj.put("ismanydbcr", payment.isIsmanydbcr());
        obj.put("isprinted", payment.isPrinted());
        obj.put("bankCharges", payment.getBankChargesAmount());
        obj.put("bankChargesCmb", payment.getBankChargesAccount() != null ? payment.getBankChargesAccount().getID() : "");
//        obj.put("bankChargesCmbValue", payment.getBankChargesAccount() != null ? payment.getBankChargesAccount().getName() : "");
        obj.put("bankChargesCmbValue", payment.getBankChargesAccount() != null ? (StringUtil.isNullOrEmpty(payment.getBankChargesAccount().getName()) ? (StringUtil.isNullOrEmpty(payment.getBankChargesAccount().getAcccode()) ? "" : payment.getBankChargesAccount().getAcccode()) : payment.getBankChargesAccount().getName()) : "");
        obj.put("bankInterest", payment.getBankInterestAmount());
        obj.put("bankInterestCmb", payment.getBankInterestAccount() != null ? payment.getBankInterestAccount().getID() : "");
//        obj.put("bankInterestCmbValue", payment.getBankInterestAccount() != null ? payment.getBankInterestAccount().getName() : "");
        obj.put("bankInterestCmbValue", payment.getBankInterestAccount() != null ? (StringUtil.isNullOrEmpty(payment.getBankInterestAccount().getName()) ? (StringUtil.isNullOrEmpty(payment.getBankInterestAccount().getAcccode()) ? "" : payment.getBankInterestAccount().getAcccode()) : payment.getBankInterestAccount().getName()) : "");
        obj.put("paidToCmb", payment.getPaidTo() != null ? payment.getPaidTo().getID() : ""); 
        obj.put("paidToCmbValue", payment.getPaidTo() != null ? payment.getPaidTo().getValue(): "");
        obj.put(Constants.SEQUENCEFORMATID, payment.getSeqformat() == null ? "" : payment.getSeqformat().getID());
        obj.put("sequenceformatvalue", payment.getSeqformat() == null ? "" : payment.getSeqformat().getName());
        Customer customer = null;
        
        Vendor vendor = payment.getVendor();
        if (payment.getCustomer() != null) {
            KwlReturnObject custResult = accountingHandlerDAOobj.getObject(Customer.class.getName(), payment.getCustomer());
            customer = (Customer) custResult.getEntityList().get(0);
            obj.put("personid", customer.getID());
            obj.put("personcode", customer.getAcccode());
            MasterItem gstRegistrationType = customer != null ? customer.getGSTRegistrationType() : null;
            if (gstRegistrationType != null && gstRegistrationType.getDefaultMasterItem() != null) {
                obj.put("GSTINRegTypeDefaultMstrID", gstRegistrationType.getDefaultMasterItem().getID());
            }
        } else if (payment.getVendor() != null) {
            obj.put("personid", vendor.getID());
            obj.put("personcode", vendor.getAcccode());
            MasterItem gstRegistrationType = vendor != null ? vendor.getGSTRegistrationType() : null;
            if (gstRegistrationType != null && gstRegistrationType.getDefaultMasterItem() != null) {
                obj.put("GSTINRegTypeDefaultMstrID", gstRegistrationType.getDefaultMasterItem().getID());
            }
        } else {
            obj.put("personid", acc.getID());
        }
        KwlReturnObject result = accVendorPaymentobj.getPaymentVendorNames(payment.getCompany().getCompanyID(), payment.getID());
        List vNameList = result.getEntityList();
        Iterator vNamesItr = vNameList.iterator();
        StringBuilder vendorNames = new StringBuilder("");        
        obj.put("memo", payment.getMemo());
        obj.put("cinno", payment.getCinNo());
        obj.put("deleted", payment.isDeleted());
        obj.put("currencysymbol",payment.getCurrency().getSymbol());
        if(payment.getExternalCurrencyRate()==0) {
//            KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, 1.0d, payment.getCurrency().getCurrencyID(), payment.getJournalEntry().getEntryDate(), payment.getJournalEntry().getExternalCurrencyRate());
            KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, 1.0d, payment.getCurrency().getCurrencyID(), payment.getCreationDate(), payment.getJournalEntry().getExternalCurrencyRate());
            obj.put("externalcurrencyrate", 1/(Double) bAmt.getEntityList().get(0));
        } else {
            obj.put("externalcurrencyrate", payment.getExternalCurrencyRate());
        }
        obj.put("nonRefundable", payment.isNonRefundable());
        obj.put("chequenumber", payment.getPayDetail() == null ? "" : (payment.getPayDetail().getPaymentMethod().getDetailType() == PaymentMethod.TYPE_BANK) ? (payment.getPayDetail().getCheque() != null ? payment.getPayDetail().getCheque().getChequeNo() : "") : "");
        obj.put("chequesequenceformatid", payment.getPayDetail() == null ? "" : (payment.getPayDetail().getPaymentMethod().getDetailType() == PaymentMethod.TYPE_BANK) ? (payment.getPayDetail().getCheque() != null ? (payment.getPayDetail().getCheque().getSeqformat()!=null?payment.getPayDetail().getCheque().getSeqformat().getId():"") : "") : "");
        obj.put("chequedescription", payment.getPayDetail() == null ? "" : (payment.getPayDetail().getPaymentMethod().getDetailType() == PaymentMethod.TYPE_BANK) ? (payment.getPayDetail().getCheque() != null ? (payment.getPayDetail().getCheque().getDescription() != null ? payment.getPayDetail().getCheque().getDescription() : "") : "") : "");
        obj.put("currencyid", payment.getCurrency().getCurrencyID());
        obj.put("paymentmethodname", (payment.getPayDetail() == null ? "" : payment.getPayDetail().getPaymentMethod().getMethodName()));
        obj.put("detailtype", (payment.getPayDetail() == null ? "" : payment.getPayDetail().getPaymentMethod().getDetailType()));
        obj.put("pmtmethod", (payment.getPayDetail() == null ? "" : payment.getPayDetail().getPaymentMethod().getID()));
        obj.put("paymentmethodacc", (payment.getPayDetail() == null ? "" : payment.getPayDetail().getPaymentMethod().getAccount().getID()));
        obj.put("paymentmethodaccname", (payment.getPayDetail() == null ? "" : payment.getPayDetail().getPaymentMethod().getAccount().getName()));
        obj.put("payee", payment.getPayee());
        obj.put("exciseunit", payment.getExciseunit());
        if (payment.getJournalEntryForBankCharges() != null || payment.getJournalEntryForBankInterest() != null) {
            obj.put("amount", authHandler.round((payment.getDepositAmount()), companyid));       // Seperate JE for Bank charges and interest so dont club amount.
        } else {
            obj.put("amount", authHandler.round((payment.getDepositAmount() - payment.getBankChargesAmount() - payment.getBankInterestAmount()), companyid));       // Seperate JE for Bank charges and interest so dont club amount.
        }
        obj.put("paymentwindowtype", payment.getPaymentWindowType()!=0?payment.getPaymentWindowType():1);
        obj.put("no",payment.getPaymentNumber());
        KwlReturnObject bAmt = null;
        String baseCurrency=(String)requestParams.get("gcurrencyid");
        double totalAmount=payment.getDepositAmount();
        if (baseCurrency!=null&&!baseCurrency.equalsIgnoreCase(payment.getCurrency().getCurrencyID())) {
                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, payment.getDepositAmount(), payment.getCurrency().getCurrencyID(), payment.getCreationDate(), payment.getJournalEntry().getExternalCurrencyRate());
                totalAmount=(!bAmt.getEntityList().isEmpty())?(Double)bAmt.getEntityList().get(0):0d;
        }
        obj.put("paymentamountinbasecurrency",totalAmount);
        obj.put("paymentCurrencyToPaymentMethodCurrencyExchangeRate",payment.getPaymentcurrencytopaymentmethodcurrencyrate());
        /**
         * Put GST document history.
         */
        if (payment.getCompany().getCountry().getID().equalsIgnoreCase("" + Constants.indian_country_id)) {
            obj.put("refdocid", payment.getID());
            fieldDataManagercntrl.getGSTDocumentHistory(obj);
        }
        JSONArray jSONArray=new JSONArray();
        JSONArray jSONArrayPayDetails=new JSONArray();
        getPayDetailsInfo(payment, acc, requestParams,jSONArrayPayDetails);
        getPaymentDetailsInfo(payment, acc, requestParams,jSONArray);
        getPaymentAdvanceDetailsInfo(payment, acc, requestParams,jSONArray);
        getPaymentCNDNDetailsInfo(payment, acc, requestParams,jSONArray);
        getPaymentDetailsOtherwiseInfo(payment, acc, requestParams,jSONArray,vendorNames);
        obj.put("personname", StringUtil.DecodeText((vendor==null&&customer==null) ? vendorNames.toString() : ((vendor != null) ? vendor.getName() : (customer != null) ? customer.getName() : "")));    //Used decoder to avoid '+' symbol at white/empty space between words. 
        JSONArray sortedArray = new JSONArray();
        sortedArray = paymentService.sortJson(jSONArray);
        if (sortedArray.length() == jSONArray.length()) {
            jSONArray = sortedArray;
        }
        if(jSONArray.length()!=0){
            obj.put("Details", new JSONObject().put("data", jSONArray));
        }
        if(jSONArrayPayDetails.length()!=0){
            obj.put("paydetail", new JSONObject().put("data", jSONArrayPayDetails.get(0)));
        }
        obj.put("rcmApplicable", payment.isRcmApplicable());
        obj.put("advanceToVendor", payment.isAdvanceToVendor());
        if(vendor != null){
            obj.put("residentialstatus", vendor.getResidentialstatus());
            String tdsPayableAccountId = "";
            if (!StringUtil.isNullOrEmpty(vendor.getNatureOfPayment())) {
                KwlReturnObject catresult = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), vendor.getNatureOfPayment());
                MasterItem masterItem = (MasterItem) catresult.getEntityList().get(0);
                if(masterItem != null){
                    obj.put("natureOfPayment", masterItem.getValue());
                    tdsPayableAccountId = masterItem.getAccID();
                } else {
                    obj.put("natureOfPayment", "");
                }
            } else {
                obj.put("natureOfPayment", "");
            } 
            obj.put("tdsaccountid", tdsPayableAccountId);
            if(!StringUtil.isNullOrEmpty(vendor.getDeducteeType())){
                obj.put("deducteetype", vendor.getDeducteeType());
            }
            if(!StringUtil.isNullOrEmpty(vendor.getDeductionReason())){
                obj.put("deductionReason", vendor.getDeductionReason());
            }
           MasterItem masterItem = null;
           if (!StringUtil.isNullOrEmpty(vendor.getDeducteeType())) {
               KwlReturnObject catresult = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), vendor.getDeducteeType());
               masterItem = (MasterItem) catresult.getEntityList().get(0);
               obj.put("deducteetypename", masterItem.getValue());//INDIAN Company for TDS Calculation in Make Payment
           } else {
               obj.put("deducteetypename", "");
           } 
        }
        if(customer != null){
            obj.put("residentialstatus", customer.getResidentialstatus());
            if(!StringUtil.isNullOrEmpty(customer.getDeducteeType())){
                obj.put("deducteetype", customer.getDeducteeType());
            }
            MasterItem masterItem = null;
            if (!StringUtil.isNullOrEmpty(customer.getDeducteeType())) {
                KwlReturnObject catresult = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), customer.getDeducteeType());
                masterItem = (MasterItem) catresult.getEntityList().get(0);
                obj.put("deducteetypename", masterItem.getValue());//INDIAN Company for TDS Calculation in Make Payment
            } else {
                obj.put("deducteetypename", "");
            }
        }
        if (payment.isIBGTypeTransaction()) {
            obj.put("isIBGTypeTransaction", true);
            if (payment.getCimbreceivingbankdetails() != null) {
                obj.put("ibgDetailsID", payment.getCimbreceivingbankdetails().getId());
            } else if (payment.getIbgreceivingbankdetails() != null) {
                obj.put("isIBGTypeTransaction", payment.isIBGTypeTransaction());
                obj.put("ibgDetailsID", payment.getIbgreceivingbankdetails().getId());
                obj.put("ibgCode", payment.getIbgCode());
            }
        }
        return obj;
    }
    public ModelAndView reloadGridOnCurrencyChange(HttpServletRequest request, HttpServletResponse response) throws JSONException, ServiceException, UnsupportedEncodingException {
        JSONObject obj = new JSONObject();
        Customer customer = null;
        boolean issuccess = false;
        String msg = "";
        try {    
            HashMap<String, Object> requestParams = getPaymentMap(request);
            String billid = request.getParameter("billid") != null ? request.getParameter("billid") : "";
            requestParams.put("billid", billid);
             DateFormat df = authHandler.getDateOnlyFormat(request);
            requestParams.put("df", df);
            requestParams.put("newcurrency", request.getParameter("newcurrency"));
            requestParams.put("changedDate", request.getParameter("date"));
            boolean isCopyTransaction = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("isCopyTransaction"))) {
                isCopyTransaction = Boolean.parseBoolean(request.getParameter("isCopyTransaction"));
            }
            requestParams.put("isCopyTransaction", isCopyTransaction);
            KwlReturnObject result = null;
            result = accVendorPaymentobj.getPayments(requestParams);
            Object[] objects = (Object[]) result.getEntityList().get(0);
            Payment payment = (Payment) objects[0];
            Account acc = (Account) objects[1];
            obj=reloadGridOnCurrencyChange(payment, acc, requestParams);
            issuccess = true;
        } catch (ServiceException ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            msg = ex.getMessage();
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                obj.put("success", issuccess);
                obj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", obj.toString());
    }
    public JSONObject reloadGridOnCurrencyChange(Payment payment, Account acc, HashMap<String, Object> requestParams) throws JSONException, ServiceException, UnsupportedEncodingException, ParseException, AccountingException {
        DateFormat df = (DateFormat) requestParams.get("df");
        String companyid = (String) requestParams.get("companyid");
        JSONObject obj = new JSONObject();
        Customer customer = null;
        boolean issuccess = false;
        String msg = "";
            Vendor vendor = payment.getVendor();
            if (payment.getCustomer() != null) {
                KwlReturnObject custResult = accountingHandlerDAOobj.getObject(Customer.class.getName(), payment.getCustomer());
                customer = (Customer) custResult.getEntityList().get(0);
                obj.put("personid", customer.getID());
            } else if (payment.getVendor() != null) {
                obj.put("personid", vendor.getID());
            } else {
                obj.put("personid", acc.getID());
            }
            KwlReturnObject result = accVendorPaymentobj.getPaymentVendorNames(payment.getCompany().getCompanyID(), payment.getID());
            List vNameList = result.getEntityList();
            Iterator vNamesItr = vNameList.iterator();
            StringBuilder vendorNames = new StringBuilder("");
            JSONArray jSONArray = new JSONArray();
            JSONArray jSONArrayPayDetails = new JSONArray();
            //used to know whether to change the amount accoring to date or not
            String baseCurrencyID=payment.getCompany().getCurrency().getCurrencyID();
            String fromCurrencyID=payment.getCurrency().getCurrencyID();
            String tocurrencyid = (requestParams.get("newcurrency") == null ? baseCurrencyID : requestParams.get("newcurrency")+"");
            Date paymentCreationDate = null;
            Date actualPaymentCreationDate = null;
            double externalCurrencyRate = 0d;
            if (payment.isIsOpeningBalencePayment() && !payment.isNormalPayment()) {
                    if(requestParams.containsKey("changedDate")&&requestParams.get("changedDate")!=null&&!requestParams.get("changedDate").toString().equals("")){
                         Date changedDate = new Date(requestParams.get("changedDate").toString());
                         paymentCreationDate = df.parse(df.format(changedDate));
                    }else{
                         paymentCreationDate = payment.getCreationDate();
                    }
                    actualPaymentCreationDate = df.parse(df.format(payment.getCreationDate()));
                    externalCurrencyRate = payment.getExchangeRateForOpeningTransaction();
                } else {
                    if(requestParams.containsKey("changedDate")&&requestParams.get("changedDate")!=null&&!requestParams.get("changedDate").toString().equals("")){
                         Date changedDate = new Date(requestParams.get("changedDate").toString());
                         paymentCreationDate = df.parse(df.format(changedDate));
                    }else{
//                         paymentCreationDate = payment.getJournalEntry().getEntryDate();
                         paymentCreationDate = payment.getCreationDate();
                    }
//                    actualPaymentCreationDate = df.parse(df.format(payment.getJournalEntry().getEntryDate()));
                    actualPaymentCreationDate = df.parse(df.format(payment.getCreationDate()));
                    externalCurrencyRate = payment.getJournalEntry().getExternalCurrencyRate();
                }
            KwlReturnObject bAmt = null;
            bAmt = accCurrencyDAOobj.getOneCurrencyToOther(requestParams, 1.0d, fromCurrencyID, tocurrencyid, paymentCreationDate, externalCurrencyRate);
            double ramount = (Double) bAmt.getEntityList().get(0);
            bAmt = accCurrencyDAOobj.getOneCurrencyToOther(requestParams, 1.0d, fromCurrencyID, tocurrencyid, actualPaymentCreationDate, externalCurrencyRate);
            double ramountactual = (Double) bAmt.getEntityList().get(0);
            //if currency and date is same call edit case's function
        if (fromCurrencyID.equals(tocurrencyid) &&ramountactual==ramount) {
            getPaymentDetailsInfo(payment, acc, requestParams, jSONArray);
            getPaymentAdvanceDetailsInfo(payment, acc, requestParams,jSONArray);
            getPaymentCNDNDetailsInfo(payment, acc, requestParams,jSONArray);
            getPaymentDetailsOtherwiseInfo(payment, acc, requestParams,jSONArray,vendorNames);
        } else {
            getPaymentDetailsInfoOnCurrencyChange(payment, acc, requestParams, jSONArray);
            getPaymentAdvanceDetailsInfoOnCurrencyChange(payment, acc, requestParams,jSONArray);
            getPaymentCNDNDetailsInfoOnCurrencyChange(payment, acc, requestParams,jSONArray);
            getPaymentDetailsOtherwiseInfoOnCurrencyChange(payment, acc, requestParams,jSONArray,vendorNames);
        } 
            bAmt = accCurrencyDAOobj.getIfBaseToCurrencyRatePresence(requestParams, 1.0d, tocurrencyid, paymentCreationDate, externalCurrencyRate);
            double baseRate = (Double) bAmt.getEntityList().get(0);
            boolean exchangeRateFound=true;
            if(baseRate==0){
                exchangeRateFound=false;
            }
            obj.put("exchangeRateFound", exchangeRateFound);    
            obj.put("personname", StringUtil.DecodeText((vendor == null && customer == null) ? vendorNames.toString() : ((vendor != null) ? vendor.getName() : (customer != null) ? customer.getName() : "")));    //Used decoder to avoid '+' symbol at white/empty space between words. 
            if (jSONArray.length() != 0) {
                JSONObject jSONObject=new JSONObject();
                jSONObject.put("data", jSONArray);
                obj.put("Details", jSONObject);
                obj.put("paymentwindowtype", payment.getPaymentWindowType());
                if(requestParams.containsKey("totalenteredamount")){
                    obj.put("amount", requestParams.get("totalenteredamount"));
                }else{
                    obj.put("amount", authHandler.round(payment.getDepositAmount()-payment.getBankChargesAmount()-payment.getBankInterestAmount(), companyid));
                }
            }
            issuccess = true;
        return obj;
    }
    
    public void getPaymentDetailsInfo(Payment payment, Account acc, HashMap<String, Object> requestParams,JSONArray jSONArray) throws JSONException, ServiceException, UnsupportedEncodingException {
        DateFormat df = (DateFormat) requestParams.get("df");
        String companyid = (String) requestParams.get("companyid");
        boolean ispendingAproval = (requestParams.containsKey("ispendingAproval") && requestParams.get("ispendingAproval") != null) ? Boolean.parseBoolean((String)requestParams.get("ispendingAproval")) : false;
        boolean isView = (requestParams.containsKey("isView") && requestParams.get("isView") != null) ? Boolean.parseBoolean((String)requestParams.get("isView")) : false;
        boolean isCopyTransaction = requestParams.get("isCopyTransaction")!=null ? (Boolean)requestParams.get("isCopyTransaction") : false;
        Set<PaymentDetail> paymentDetails=payment.getRows();
        HashMap<String, Object> fieldrequestParams = new HashMap();
        HashMap<String, String> customFieldMap = new HashMap<String, String>();
        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        fieldrequestParams.put(Constants.filter_values, Arrays.asList(payment.getCompany().getCompanyID(), Constants.Acc_Make_Payment_ModuleId));
        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap,customFieldMap,customDateFieldMap);
         boolean isDishonouredCheque = payment.isIsDishonouredCheque();
        for (PaymentDetail paymentDetail : paymentDetails) {
            JSONObject obj = new JSONObject();
            GoodsReceipt goodsReceipt=paymentDetail.getGoodsReceipt();
            boolean isInvoiceIsClaimed=(goodsReceipt.getBadDebtType() == Constants.Invoice_Claimed || goodsReceipt.getBadDebtType() == Constants.Invoice_Recovered);
            boolean isopeningBalanceInvoice = goodsReceipt.isIsOpeningBalenceInvoice();
            obj.put("type",Constants.PaymentAgainstInvoice);
            obj.put("debit",true);
            obj.put("modified", true);
            obj.put("exchangeratefortransaction", paymentDetail.getExchangeRateForTransaction()!=0 ? paymentDetail.getExchangeRateForTransaction() : 1);
            obj.put("enteramount", paymentDetail.getAmount());
            obj.put("tdsamount", paymentDetail.getTdsamount());
//            obj.put("amountdue", paymentDetail.getAmountDueInPaymentCurrency());
//            obj.put("amountDueOriginal", paymentDetail.getAmountDueInGrCurrency());
//            obj.put("amountDueOriginalSaved", paymentDetail.getAmountDueInGrCurrency()); 
            if (isopeningBalanceInvoice) {
                obj.put("transactionAmount", goodsReceipt.getOriginalOpeningBalanceAmount());
            } else {
                obj.put("transactionAmount", goodsReceipt.getVendorEntry().getAmount());
            }
            if (isInvoiceIsClaimed) {
                obj.put("enteramount", isCopyTransaction ? authHandler.round(goodsReceipt.getClaimAmountDue() * paymentDetail.getExchangeRateForTransaction(), companyid) : paymentDetail.getAmount());
                obj.put("amountdue", isCopyTransaction ? authHandler.round(goodsReceipt.getClaimAmountDue() * paymentDetail.getExchangeRateForTransaction(), companyid) : authHandler.round(goodsReceipt.getClaimAmountDue() * paymentDetail.getExchangeRateForTransaction(), companyid) + paymentDetail.getAmount());
                obj.put("amountDueOriginal", isCopyTransaction ? goodsReceipt.getClaimAmountDue() : goodsReceipt.getClaimAmountDue() + paymentDetail.getAmountDueInGrCurrency());
                obj.put("amountDueOriginalSaved", isCopyTransaction ? goodsReceipt.getClaimAmountDue() : goodsReceipt.getClaimAmountDue() + paymentDetail.getAmountDueInGrCurrency());
            } else {
                if (isopeningBalanceInvoice) {
                    obj.put("enteramount", isCopyTransaction ? authHandler.round(goodsReceipt.getOpeningBalanceAmountDue() * paymentDetail.getExchangeRateForTransaction(), companyid) : paymentDetail.getAmount());
                    obj.put("discountname", ((isCopyTransaction || ispendingAproval) && !isView) ? 0 : paymentDetail.getDiscountAmount());
                } else {
                    obj.put("enteramount", isCopyTransaction ? authHandler.round(goodsReceipt.getInvoiceamountdue() * paymentDetail.getExchangeRateForTransaction(), companyid) : paymentDetail.getAmount());
                    obj.put("discountname", ((isCopyTransaction || ispendingAproval) && !isView) ? 0 : paymentDetail.getDiscountAmount());
                }

//                double discountAmtInInvoiceCurrency = authHandler.round(paymentDetail.getDiscountAmount() / paymentDetail.getExchangeRateForTransaction(), goodsReceipt.getCompany().getCompanyID());
                double discountAmtInInvoiceCurrency = paymentDetail.getDiscountAmountInInvoiceCurrency();
                double discountAmount = paymentDetail.getDiscountAmount();

                if (isopeningBalanceInvoice) {
                    if (payment.getApprovestatuslevel() == Constants.APPROVED_STATUS_LEVEL) {
                        obj.put("amountdue", (isCopyTransaction ||isDishonouredCheque) ? authHandler.round(goodsReceipt.getOpeningBalanceAmountDue() * paymentDetail.getExchangeRateForTransaction(), companyid) : authHandler.round(goodsReceipt.getOpeningBalanceAmountDue() * paymentDetail.getExchangeRateForTransaction(), companyid) + (paymentDetail.getAmount()+discountAmount));
                        obj.put("amountDueOriginal", (isCopyTransaction ||isDishonouredCheque) ? goodsReceipt.getOpeningBalanceAmountDue() : goodsReceipt.getOpeningBalanceAmountDue() + (paymentDetail.getAmountInGrCurrency()+discountAmtInInvoiceCurrency));
                        obj.put("amountDueOriginalSaved", (isCopyTransaction ||isDishonouredCheque) ? goodsReceipt.getOpeningBalanceAmountDue() : goodsReceipt.getOpeningBalanceAmountDue() + (paymentDetail.getAmountInGrCurrency()+discountAmtInInvoiceCurrency));
                        obj.put("amountdueafterdiscount", (isCopyTransaction ||isDishonouredCheque) ? authHandler.round(goodsReceipt.getOpeningBalanceAmountDue() * paymentDetail.getExchangeRateForTransaction(), companyid) : authHandler.round(((goodsReceipt.getOpeningBalanceAmountDue() * paymentDetail.getExchangeRateForTransaction())+paymentDetail.getAmount()), companyid));
                    } else {
                        obj.put("amountdue", authHandler.round(goodsReceipt.getOpeningBalanceAmountDue() * paymentDetail.getExchangeRateForTransaction(), companyid));
                        obj.put("amountDueOriginal", goodsReceipt.getOpeningBalanceAmountDue());
                        obj.put("amountDueOriginalSaved", goodsReceipt.getOpeningBalanceAmountDue());
                        obj.put("amountdueafterdiscount", authHandler.round(((goodsReceipt.getOpeningBalanceAmountDue() * paymentDetail.getExchangeRateForTransaction())-discountAmount), companyid));
                    }
                } else {
                    if (payment.getApprovestatuslevel() == Constants.APPROVED_STATUS_LEVEL) {
                        obj.put("amountdue", (isCopyTransaction ||isDishonouredCheque) ? authHandler.round(goodsReceipt.getInvoiceamountdue() * paymentDetail.getExchangeRateForTransaction(), companyid) : authHandler.round(goodsReceipt.getInvoiceamountdue() * paymentDetail.getExchangeRateForTransaction(), companyid) + (paymentDetail.getAmount()+discountAmount));
                        obj.put("amountDueOriginal", (isCopyTransaction ||isDishonouredCheque) ? goodsReceipt.getInvoiceamountdue() : goodsReceipt.getInvoiceamountdue() + (paymentDetail.getAmountInGrCurrency()+discountAmtInInvoiceCurrency));
                        obj.put("amountDueOriginalSaved", (isCopyTransaction ||isDishonouredCheque) ? goodsReceipt.getInvoiceamountdue() : goodsReceipt.getInvoiceamountdue() + (paymentDetail.getAmountInGrCurrency()+discountAmtInInvoiceCurrency));
                        obj.put("amountdueafterdiscount", (isCopyTransaction ||isDishonouredCheque) ? authHandler.round(goodsReceipt.getInvoiceamountdue() * paymentDetail.getExchangeRateForTransaction(), companyid) : authHandler.round(((goodsReceipt.getInvoiceamountdue() * paymentDetail.getExchangeRateForTransaction())+paymentDetail.getAmount()), companyid));
                    } else {
                        obj.put("amountdue", authHandler.round(goodsReceipt.getInvoiceamountdue() * paymentDetail.getExchangeRateForTransaction(), companyid));
                        obj.put("amountDueOriginal", goodsReceipt.getInvoiceamountdue());
                        obj.put("amountDueOriginalSaved", goodsReceipt.getInvoiceamountdue());
                        obj.put("amountdueafterdiscount", authHandler.round(((goodsReceipt.getInvoiceamountdue() * paymentDetail.getExchangeRateForTransaction())-discountAmount), companyid));
                    }

                }
            }
            
            obj.put("taxamount", 0);
            obj.put("prtaxid", "");
            if(paymentDetail.getDescription()!=null){
                obj.put("description", StringUtil.DecodeText(paymentDetail.getDescription()));
            }else{
               obj.put("description",""); 
            }
            obj.put("documentid", goodsReceipt.getID());
            obj.put("documentno", goodsReceipt.getGoodsReceiptNumber());
            obj.put("payment", "");
            obj.put("currencyid", payment.getCurrency().getCurrencyID());
            obj.put("currencysymbol", payment.getCurrency().getSymbol());
            obj.put("currencyname", payment.getCurrency().getName());
            obj.put("currencysymboltransaction", goodsReceipt.getCurrency().getSymbol());
            obj.put("currencynametransaction", goodsReceipt.getCurrency().getName());
            obj.put("currencyidtransaction", goodsReceipt.getCurrency().getCurrencyID());
            obj.put("gstCurrencyRate", paymentDetail.getGstCurrencyRate());
            obj.put("date", df.format((Date)goodsReceipt.getCreationDate()));
//            if (goodsReceipt.isIsOpeningBalenceInvoice() && !goodsReceipt.isNormalInvoice()) {
//                obj.put("date", df.format((Date)goodsReceipt.getCreationDate()));
//            }else{
//                obj.put("date", df.format((Date)goodsReceipt.getJournalEntry().getEntryDate()));
//            }
            obj.put("claimedDate", goodsReceipt.getDebtClaimedDate()==null?"":df.format(goodsReceipt.getDebtClaimedDate()));
            obj.put("srNoForRow", paymentDetail.getSrNoForRow());
            obj.put("rowdetailid", paymentDetail.getID());
            obj.put("grcreationdate", df.format((Date)goodsReceipt.getCreationDate()));
            /**
             * Passing JE date in response for validating date on JS Side
             * ERM-655.
             */
            if (isopeningBalanceInvoice) {
                obj.put("jeDate", df.format((Date) goodsReceipt.getCreationDate()));
            } else {
                obj.put("jeDate", df.format((Date) goodsReceipt.getJournalEntry().getEntryDate()));
            }
            obj.put("invoiceduedate", df.format((Date) goodsReceipt.getDueDate()));
            obj.put("applicabledays", goodsReceipt.getTermid() != null ? goodsReceipt.getTermid().getApplicableDays() : -1);
            obj.put("discounttype", (goodsReceipt.getTermid() != null && goodsReceipt.getTermid().getDiscountName() != null) ? goodsReceipt.getTermid().getDiscountName().isDiscounttype() : "");
            obj.put("discountvalue", (goodsReceipt.getTermid() != null && goodsReceipt.getTermid().getDiscountName() != null) ? goodsReceipt.getTermid().getDiscountName().getValue() : "");
            if (goodsReceipt.isIsOpeningBalenceInvoice()) {
                obj.put("amount", goodsReceipt.getOriginalOpeningBalanceAmount());
            } else {
                obj.put("amount", goodsReceipt.getVendorEntry().getAmount());
            }
//            if (payment.getCompany().getCountry().getID().equals(Constants.indian_country_id+"")) {
//                HashMap<String, Object> dataMap = new HashMap<String, Object>();
//                dataMap.put("documentType", Constants.PaymentAgainstInvoice + "");
//                dataMap.put("documentid", goodsReceipt.getID());
//                dataMap.put("rowdetailid", paymentDetail.getID());
//                JSONObject jsonObj = getJsonOfTdsDetails(dataMap);
//                JSONArray jsonArrayTDS = jsonObj.getJSONArray("data");
//                obj.put("appliedTDS", jsonArrayTDS.toString());
//            }
            getCustomDataInfo(obj,paymentDetail.getID(),customFieldMap,FieldMap,replaceFieldMap);
            if (goodsReceipt.isImportService()) {
                obj.put(Constants.RCMApplicable, goodsReceipt.isImportService());
                accGoodsReceiptModuleService.getGoodsReceiptCustomDataForPayment(requestParams, obj, goodsReceipt, goodsReceipt.getJournalEntry());
            }
            jSONArray.put(obj);
        }
    }
    public void getPaymentDetailsInfoOnCurrencyChange(Payment payment, Account acc, HashMap<String, Object> requestParams,JSONArray jSONArray) throws JSONException, ServiceException, UnsupportedEncodingException, ParseException {
        DateFormat df = (DateFormat) requestParams.get("df");
        Set<PaymentDetail> paymentDetails=payment.getRows();
        HashMap<String, Object> fieldrequestParams = new HashMap();
        HashMap<String, String> customFieldMap = new HashMap<String, String>();
        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        fieldrequestParams.put(Constants.filter_values, Arrays.asList(payment.getCompany().getCompanyID(), Constants.Acc_Make_Payment_ModuleId));
        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap,customFieldMap,customDateFieldMap);
        for (PaymentDetail paymentDetail : paymentDetails) {
            JSONObject obj = new JSONObject();
            GoodsReceipt goodsReceipt=paymentDetail.getGoodsReceipt();
            obj.put("type",Constants.PaymentAgainstInvoice);
            obj.put("modified", true);
//            obj.put("exchangeratefortransaction", paymentDetail.getExchangeRateForTransaction());
//            obj.put("enteramount", paymentDetail.getAmount());
//            obj.put("amountdue", paymentDetail.getAmountDueInPaymentCurrency());
            getPaymentDetailsAmountDue(paymentDetail, requestParams, obj);
             boolean isopeningBalanceInvoice = goodsReceipt.isIsOpeningBalenceInvoice();
            if(isopeningBalanceInvoice){
                 obj.put("amountDueOriginal", goodsReceipt.getOpeningBalanceAmountDue()+paymentDetail.getAmountInGrCurrency());
                 obj.put("amountDueOriginalSaved", goodsReceipt.getOpeningBalanceAmountDue()+paymentDetail.getAmountInGrCurrency());
            }else{
                 obj.put("amountDueOriginal", goodsReceipt.getInvoiceamountdue()+paymentDetail.getAmountInGrCurrency());
                 obj.put("amountDueOriginalSaved", goodsReceipt.getInvoiceamountdue()+paymentDetail.getAmountInGrCurrency());
            }
            obj.put("taxamount", 0);
            obj.put("prtaxid", "");
            obj.put("description", paymentDetail.getDescription());
            obj.put("documentid", goodsReceipt.getID());
            obj.put("documentno", goodsReceipt.getGoodsReceiptNumber());
            obj.put("payment", "");
//            obj.put("currencyid", payment.getCurrency().getCurrencyID());
//            obj.put("currencysymbol", payment.getCurrency().getSymbol());
//            obj.put("currencyname", payment.getCurrency().getName());
            obj.put("currencysymboltransaction", goodsReceipt.getCurrency().getSymbol());
            obj.put("currencynametransaction", goodsReceipt.getCurrency().getName());
            obj.put("currencyidtransaction", goodsReceipt.getCurrency().getCurrencyID());
            obj.put("gstCurrencyRate", paymentDetail.getGstCurrencyRate());
            obj.put("date", df.format((Date)goodsReceipt.getCreationDate()));
//            if (goodsReceipt.isIsOpeningBalenceInvoice() && !goodsReceipt.isNormalInvoice()) {
//                obj.put("date", df.format((Date)goodsReceipt.getCreationDate()));
//            }else{
//                obj.put("date", df.format((Date)goodsReceipt.getJournalEntry().getEntryDate()));
//            }
            getCustomDataInfo(obj,paymentDetail.getID(),customFieldMap,FieldMap,replaceFieldMap);
            jSONArray.put(obj);
        }
    }
    public void getPaymentDetailsAmountDue(PaymentDetail paymentDetail, HashMap<String, Object> requestParams,JSONObject jSONObject) throws JSONException, ServiceException, UnsupportedEncodingException, ParseException {
                DateFormat df = (DateFormat) requestParams.get("df");
                String companyid = "";
                if (requestParams.containsKey("companyid")) {
                    companyid = (String) requestParams.get("companyid");
                }
                Date paymentCreationDate = null;
                double externalCurrencyRate = 0d;
                String baseCurrencyID=paymentDetail.getCompany().getCurrency().getCurrencyID();
//                boolean isopeningBalancePayment = pd.getPayment().isIsOpeningBalencePayment();
                
                if (paymentDetail.getPayment().isIsOpeningBalencePayment() && !paymentDetail.getPayment().isNormalPayment()) {
                    if(requestParams.containsKey("changedDate")&&requestParams.get("changedDate")!=null&&!requestParams.get("changedDate").toString().equals("")){
                        Date changedDate = new Date(requestParams.get("changedDate").toString());
                         paymentCreationDate = df.parse(df.format(changedDate));
                    }else{
                        paymentCreationDate = paymentDetail.getPayment().getCreationDate();
                    }
                    externalCurrencyRate = paymentDetail.getPayment().getExchangeRateForOpeningTransaction();
                } else {
                    if(requestParams.containsKey("changedDate")&&requestParams.get("changedDate")!=null&&!requestParams.get("changedDate").toString().equals("")){
                        Date changedDate = new Date(requestParams.get("changedDate").toString());
                         paymentCreationDate = df.parse(df.format(changedDate));
                    }else{
//                        paymentCreationDate = paymentDetail.getPayment().getJournalEntry().getEntryDate();
                        paymentCreationDate = paymentDetail.getPayment().getCreationDate();
                    }
                    externalCurrencyRate = paymentDetail.getPayment().getJournalEntry().getExternalCurrencyRate();
                }
                    GoodsReceipt goodsReceipt=paymentDetail.getGoodsReceipt();
                    String fromcurrencyid=goodsReceipt.getCurrency().getCurrencyID();
                    String tocurrencyid = (requestParams.get("newcurrency") == null ? baseCurrencyID : requestParams.get("newcurrency")+"");
                    KwlReturnObject currResult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), tocurrencyid);
                    KWLCurrency currency = (KWLCurrency) currResult.getEntityList().get(0);
                    jSONObject.put("currencyid", tocurrencyid);
                    jSONObject.put("currencysymbol", currency.getSymbol());
                    jSONObject.put("currencyname", currency.getName());
                    KwlReturnObject bAmt = null;
//                    if (isopeningBalancePayment && pd.getPayment().isConversionRateFromCurrencyToBase()) {// if payment is opening balance payment and Conversion rate is taken from user is Currency to base then following method will be called.
//                        bAmt = accCurrencyDAOobj.getOneCurrencyToOtherAccordingToCurrencyToBaseExchangeRate(request, pd.getAmount(), fromcurrencyid, currencyid, paymentCreationDate, externalCurrencyRate);
//                    } else {
                        bAmt = accCurrencyDAOobj.getOneCurrencyToOther(requestParams, 1.0d, fromcurrencyid, tocurrencyid, paymentCreationDate, externalCurrencyRate);
//                    }
                   double ramount = (Double) bAmt.getEntityList().get(0);
                     boolean isopeningBalanceInvoice = goodsReceipt.isIsOpeningBalenceInvoice();
                    if(isopeningBalanceInvoice){
                        jSONObject.put("amountdue", authHandler.round(goodsReceipt.getOpeningBalanceAmountDue()*ramount, companyid)+paymentDetail.getAmount());
                    }else{
                        jSONObject.put("amountdue", authHandler.round(goodsReceipt.getInvoiceamountdue()*ramount, companyid)+paymentDetail.getAmount());
                    }
                   jSONObject.put("enteramount",authHandler.round(ramount*paymentDetail.getAmountInGrCurrency(), companyid));
                   if(requestParams.containsKey("totalenteredamount")){
                        double totalAmount=(Double)requestParams.get("totalenteredamount");
                        requestParams.put("totalenteredamount",authHandler.round(ramount*paymentDetail.getAmountInGrCurrency(), companyid)+totalAmount);
                   }else{
                        requestParams.put("totalenteredamount",authHandler.round(ramount*paymentDetail.getAmountInGrCurrency(), companyid));
                   }
                   if(!goodsReceipt.getCurrency().getCurrencyID().equals(tocurrencyid)){
                        jSONObject.put("exchangeratefortransaction",ramount);
                   }else{
                        jSONObject.put("exchangeratefortransaction",1);
                   }

    }
    public void getPayDetailsInfo(Payment payment, Account acc, HashMap<String, Object> requestParams,JSONArray jSONArray) throws JSONException, ServiceException, UnsupportedEncodingException {
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        DateFormat sdf = (DateFormat) requestParams.get("df");
        boolean isCopyTransaction = false;
        if (requestParams.containsKey("isCopyTransaction") && requestParams.get("isCopyTransaction") != null) {
            isCopyTransaction = (Boolean) requestParams.get("isCopyTransaction");
        }
        PayDetail payDetail=payment.getPayDetail();
        JSONObject obj = new JSONObject();
        obj.put("chequenumber", payment.getPayDetail() == null ? "" : (payment.getPayDetail().getPaymentMethod().getDetailType() == PaymentMethod.TYPE_BANK) ? (payment.getPayDetail().getCheque() != null ? payment.getPayDetail().getCheque().getChequeNo() : "") : "");
        obj.put("description", payment.getPayDetail() == null ? "" : (payment.getPayDetail().getPaymentMethod().getDetailType() == PaymentMethod.TYPE_BANK) ? (payment.getPayDetail().getCheque() != null ? (payment.getPayDetail().getCheque().getDescription() != null ? StringUtil.DecodeText(payment.getPayDetail().getCheque().getDescription()) : "") : "") : "");
        obj.put("currencyid", (payment.getCurrency().getCurrencyID()));
        obj.put("methodid", (payment.getPayDetail() == null ? "" : payment.getPayDetail().getPaymentMethod().getID()));
        obj.put("detailtype", (payment.getPayDetail() == null ? "" : payment.getPayDetail().getPaymentMethod().getDetailType()));
        if(payment.getPayDetail().getCheque()!=null && payment.getPayDetail().getCheque().getDueDate()!=null) {
            obj.put("postdate", sdf.format(payment.getPayDetail().getCheque().getDueDate()));
        }
        obj.put("paymentthrough", payment.getPayDetail() == null ? "" : (payment.getPayDetail().getPaymentMethod().getDetailType() == PaymentMethod.TYPE_BANK) ? (payment.getPayDetail().getCheque() != null ? (payment.getPayDetail().getCheque().getBankName() != null ? payment.getPayDetail().getCheque().getBankName() : "") : "") : "");

        if (payment.getPayDetail() != null) {
            try {
                obj.put("expirydate", (payment.getPayDetail().getCard() == null ? "" : df.format(payment.getPayDetail().getCard().getExpiryDate())));
            } catch (IllegalArgumentException ae) {
                obj.put("expirydate", "");
            }
            obj.put("refdetail", (payment.getPayDetail().getCard() == null ? (payment.getPayDetail().getCheque() == null ? "" : payment.getPayDetail().getCheque().getDescription()) : payment.getPayDetail().getCard().getCardType()));

            obj.put("refno", (payment.getPayDetail().getCard() == null ? (payment.getPayDetail().getCheque() == null ? "" : payment.getPayDetail().getCheque().getChequeNo()) : payment.getPayDetail().getCard().getRefNo()));
            obj.put("refname", (payment.getPayDetail().getCard() == null ? (payment.getPayDetail().getCheque() == null ? "" : payment.getPayDetail().getCheque().getBankName()) : payment.getPayDetail().getCard().getCardHolder()));
            if (payment.getPayDetail().getCard() != null) {
                obj.put("refcardno", payment.getPayDetail().getCard().getCardNo());
//                        obj.put("refexpdate", payment.getPayDetail().getCard().getExpiryDate());
            }
        }
        obj.put("clearancedate", "");
        obj.put("paymentstatus", "Uncleared");
        if (payment.getPayDetail() != null) {
            KwlReturnObject clearanceDate = accBankReconciliationObj.getBRfromJE(payment.getJournalEntry().getID(), payment.getCompany().getCompanyID(), false);
            if (clearanceDate != null && clearanceDate.getEntityList() != null && clearanceDate.getEntityList().size() > 0) {
                BankReconciliationDetail brd = (BankReconciliationDetail) clearanceDate.getEntityList().get(0);
                if (brd.getBankReconciliation().getClearanceDate() != null && !isCopyTransaction) {     //SDP-10874
                    obj.put("clearancedate", sdf.format(brd.getBankReconciliation().getClearanceDate()));
                    obj.put("paymentstatus", "Cleared");
                }
            }
        }
        jSONArray.put(obj);
    }
    public void getPaymentDetailsOtherwiseInfo(Payment payment, Account acc, HashMap<String, Object> requestParams,JSONArray jSONArray,StringBuilder vendorNames) throws JSONException, ServiceException, UnsupportedEncodingException {
        DateFormat df = (DateFormat) requestParams.get("df");
        // Comparator for sorting GL records as per sequence in UI for Copy/ Edit case ref SDP-5425
        Set<PaymentDetailOtherwise> paymentDetailOtherwises = new TreeSet<>(new Comparator<PaymentDetailOtherwise>() {
            @Override
            public int compare(PaymentDetailOtherwise MP1, PaymentDetailOtherwise MP2) {
                if (MP1.getSrNoForRow() > MP2.getSrNoForRow()) {
                    return 1;
                } else {
                    return -1;
                }
            }
        });
        paymentDetailOtherwises.addAll(payment.getPaymentDetailOtherwises());
        HashMap<String, Object> fieldrequestParams = new HashMap();
        HashMap<String, String> customFieldMap = new HashMap<String, String>();
        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        fieldrequestParams.put(Constants.filter_values, Arrays.asList(payment.getCompany().getCompanyID(), Constants.Acc_Make_Payment_ModuleId));
        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap,customFieldMap,customDateFieldMap);
        double taxPercent=0.0;
        boolean isCopy = (boolean) (requestParams.containsKey("isCopyTransaction") ? requestParams.get("isCopyTransaction") : false);
        for (PaymentDetailOtherwise paymentDetailOtherwise : paymentDetailOtherwises) {
            JSONObject obj = new JSONObject();
            obj.put("type",Constants.GLPayment);
            obj.put("modified", true);
            obj.put("exchangeratefortransaction", 1);
            taxPercent=0.0;
            if (paymentDetailOtherwise.getTax() != null) {
//                KwlReturnObject perresult = accTaxObj.getTaxPercent(payment.getCompany().getCompanyID(), payment.getJournalEntry().getEntryDate(), paymentDetailOtherwise.getTax().getID());
                KwlReturnObject perresult = accTaxObj.getTaxPercent(payment.getCompany().getCompanyID(), payment.getCreationDate(), paymentDetailOtherwise.getTax().getID());
                taxPercent = (Double) perresult.getEntityList().get(0);
            }
            obj.put("taxpercent", taxPercent);
            obj.put("enteramount", paymentDetailOtherwise.getAmount());
            obj.put("tdsamount", paymentDetailOtherwise.getTdsamount());
            obj.put("amountdue", 0);
            obj.put("amountDueOriginal", 0);
            obj.put("amountDueOriginalSaved", 0);
            obj.put("transactionAmount",0);
            obj.put("taxamount", paymentDetailOtherwise.getTaxamount());
            if (payment.getSalesReturn() != null && payment.getSalesReturn().isIsPayment()) {
                obj.put("recTermAmount", paymentDetailOtherwise.getTaxamount());
                obj.put("paymentWithSalesReturn", payment.getSalesReturn().isIsPayment());
                obj.put("otherwiseid", paymentDetailOtherwise.getID());
                /**
                 * Put terms details in View case of payment created while sales Refund
                 */
                KwlReturnObject result6 = accVendorPaymentobj.getAdvanceDetailsTerm(obj);
                if (result6.getEntityList() != null && result6.getEntityList().size() > 0 && result6.getEntityList().get(0) != null) {
                    ArrayList<AdvanceDetailTermMap> productTermDetail = (ArrayList<AdvanceDetailTermMap>) result6.getEntityList();
                    JSONArray productTermJsonArry = putGSTTermDetailsForPayment(productTermDetail);
                    obj.put("LineTermdetails", productTermJsonArry.toString());
                }
            }
            if(paymentDetailOtherwise.getTax()!=null){
                obj.put("taxname", paymentDetailOtherwise.getTax().getName());
                obj.put("prtaxid", paymentDetailOtherwise.getTax().getID());
//                obj.put("taxname", isCopy ? (paymentDetailOtherwise.getTax().isActivated() ? paymentDetailOtherwise.getTax().getName() : "") : paymentDetailOtherwise.getTax().getName());
//                obj.put("prtaxid", isCopy ? (paymentDetailOtherwise.getTax().isActivated() ? paymentDetailOtherwise.getTax().getID() : "") : paymentDetailOtherwise.getTax().getID());
            }else{
                obj.put("taxname", "");
                obj.put("prtaxid", "");
            }
            obj.put("description", paymentDetailOtherwise.getDescription() == null ? "" : StringUtil.DecodeText(paymentDetailOtherwise.getDescription()));
            obj.put("documentid", paymentDetailOtherwise.getAccount().getID());
            obj.put("documentno", StringUtil.isNullOrEmpty(paymentDetailOtherwise.getAccount().getName()) ? (StringUtil.isNullOrEmpty(paymentDetailOtherwise.getAccount().getAcccode()) ? "" : paymentDetailOtherwise.getAccount().getAcccode()) : paymentDetailOtherwise.getAccount().getName());
            obj.put(Constants.accountCode, paymentDetailOtherwise.getAccount() != null && StringUtil.isNullOrEmpty(paymentDetailOtherwise.getAccount().getAcccode()) ? "" : paymentDetailOtherwise.getAccount().getAcccode());
            obj.put("payment", "");
            obj.put("currencyid", payment.getCurrency().getCurrencyID());
            obj.put("currencysymbol", payment.getCurrency().getSymbol());
            obj.put("currencyname", payment.getCurrency().getName());
            obj.put("currencysymboltransaction", payment.getCurrency().getSymbol());
            obj.put("currencynametransaction", payment.getCurrency().getName());
            obj.put("currencyidtransaction", payment.getCurrency().getCurrencyID());
            obj.put("debit", paymentDetailOtherwise.isIsdebit()); // flag used against GL - multi CN/DN
            obj.put("srNoForRow", paymentDetailOtherwise.getSrNoForRow());
            obj.put("rowdetailid", paymentDetailOtherwise.getID());
            obj.put("appliedGst",paymentDetailOtherwise.getGstapplied()==null?"":paymentDetailOtherwise.getGstapplied().getID());
//            if (payment.getCompany().getCountry().getID().equals(Constants.indian_country_id+"")) {
//                HashMap<String, Object> dataMap = new HashMap<String, Object>();
//                dataMap.put("documentType", Constants.GLPayment + "");
//                dataMap.put("documentid", paymentDetailOtherwise.getID());
//                dataMap.put("rowdetailid", paymentDetailOtherwise.getID());
//                JSONArray jsonArrayTDS = getJsonOfTdsDetails(dataMap).getJSONArray("data");
//                obj.put("appliedTDS", jsonArrayTDS.toString());
//            }
            Account pdoAccount = paymentDetailOtherwise.getAccount();
            obj.put("masterTypeValue", pdoAccount.getMastertypevalue());
            vendorNames.append(URLEncoder.encode(paymentDetailOtherwise.getAccount().getName(),"UTF-8")).append(",");
            getCustomDataInfo(obj,paymentDetailOtherwise.getID(),customFieldMap,FieldMap,replaceFieldMap);
            jSONArray.put(obj);
        }
        if(vendorNames.lastIndexOf(",")>=0)
            vendorNames.deleteCharAt(vendorNames.lastIndexOf(","));
    }
    public void getPaymentDetailsOtherwiseInfoOnCurrencyChange(Payment payment, Account acc, HashMap<String, Object> requestParams,JSONArray jSONArray,StringBuilder vendorNames) throws JSONException, ServiceException, UnsupportedEncodingException, ParseException {
        DateFormat df = (DateFormat) requestParams.get("df");
        // Comparator for sorting GL records as per sequence in UI for Copy/ Edit case ref SDP-5425
        Set<PaymentDetailOtherwise> paymentDetailOtherwises = new TreeSet<>(new Comparator<PaymentDetailOtherwise>() {

            @Override
            public int compare(PaymentDetailOtherwise MP1, PaymentDetailOtherwise MP2) {
                if (MP1.getSrNoForRow() > MP2.getSrNoForRow()) {
                    return 1;
                } else {
                    return -1;
                }
            }
        });
        paymentDetailOtherwises.addAll(payment.getPaymentDetailOtherwises());  
        HashMap<String, Object> fieldrequestParams = new HashMap();
        HashMap<String, String> customFieldMap = new HashMap<String, String>();
        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        fieldrequestParams.put(Constants.filter_values, Arrays.asList(payment.getCompany().getCompanyID(), Constants.Acc_Make_Payment_ModuleId));
        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap,customFieldMap,customDateFieldMap);
        double taxPercent=0.0;
        for (PaymentDetailOtherwise paymentDetailOtherwise : paymentDetailOtherwises) {
            JSONObject obj = new JSONObject();
            obj.put("type",Constants.GLPayment);
            obj.put("modified", true);
            obj.put("exchangeratefortransaction", 1);
//            obj.put("enteramount", paymentDetailOtherwise.getAmount());
            getPaymentOtherwiseDetailsAmountDue(paymentDetailOtherwise, requestParams, obj);
            taxPercent=0.0;
            if (paymentDetailOtherwise.getTax() != null) {
//                KwlReturnObject perresult = accTaxObj.getTaxPercent(payment.getCompany().getCompanyID(), payment.getJournalEntry().getEntryDate(), paymentDetailOtherwise.getTax().getID());
                KwlReturnObject perresult = accTaxObj.getTaxPercent(payment.getCompany().getCompanyID(), payment.getCreationDate(), paymentDetailOtherwise.getTax().getID());
                taxPercent = (Double) perresult.getEntityList().get(0);
            }
             obj.put("taxpercent", taxPercent);
            obj.put("amountdue", 0);
            obj.put("amountDueOriginal", 0);
            obj.put("amountDueOriginalSaved", 0);
//            obj.put("taxamount", paymentDetailOtherwise.getTaxamount());
            if(paymentDetailOtherwise.getTax()!=null){
                obj.put("taxname", paymentDetailOtherwise.getTax().getName());
                obj.put("prtaxid", paymentDetailOtherwise.getTax().getID());
            }else{
                obj.put("taxname", "");
                obj.put("prtaxid", "");
            }
            obj.put("description", paymentDetailOtherwise.getDescription());
            obj.put("documentid", paymentDetailOtherwise.getAccount().getID());
            obj.put("documentno", paymentDetailOtherwise.getAccount().getName());
            obj.put("payment", "");
//            obj.put("currencyid", payment.getCurrency().getCurrencyID());
//            obj.put("currencysymbol", payment.getCurrency().getSymbol());
//            obj.put("currencyname", payment.getCurrency().getName());
            obj.put("currencysymboltransaction", payment.getCurrency().getSymbol());
            obj.put("currencynametransaction", payment.getCurrency().getName());
            obj.put("currencyidtransaction", payment.getCurrency().getCurrencyID());
//            if (payment.getCompany().getCountry().getID().equals(Constants.indian_country_id+"")) {
//                HashMap<String, Object> dataMap = new HashMap<String, Object>();
//                dataMap.put("documentType", Constants.GLPayment + "");
//                dataMap.put("documentid", paymentDetailOtherwise.getID());
//                dataMap.put("rowdetailid", paymentDetailOtherwise.getID());
//                JSONArray jsonArrayTDS = getJsonOfTdsDetails(dataMap).getJSONArray("data");
//                obj.put("appliedTDS", jsonArrayTDS);
//            }
            vendorNames.append(URLEncoder.encode(paymentDetailOtherwise.getAccount().getName(),"UTF-8")).append(",");
            getCustomDataInfo(obj,paymentDetailOtherwise.getID(),customFieldMap,FieldMap,replaceFieldMap);
            jSONArray.put(obj);
        }
        if(vendorNames.lastIndexOf(",")>=0)
            vendorNames.deleteCharAt(vendorNames.lastIndexOf(","));
    }
     public void getPaymentOtherwiseDetailsAmountDue(PaymentDetailOtherwise paymentDetailOtherwise, HashMap<String, Object> requestParams,JSONObject jSONObject) throws JSONException, ServiceException, UnsupportedEncodingException, ParseException {
                String companyid = (String) requestParams.get("companyid");
                Date paymentCreationDate = null;
                DateFormat df = (DateFormat) requestParams.get("df");
                double externalCurrencyRate = 0d;
                String baseCurrencyID=paymentDetailOtherwise.getPayment().getCompany().getCurrency().getCurrencyID();
//                boolean isopeningBalancePayment = pd.getPayment().isIsOpeningBalencePayment();

                if (paymentDetailOtherwise.getPayment().isIsOpeningBalencePayment() && !paymentDetailOtherwise.getPayment().isNormalPayment()) {
                    if(requestParams.containsKey("changedDate")&&requestParams.get("changedDate")!=null&&!requestParams.get("changedDate").toString().equals("")){
                        Date changedDate = new Date(requestParams.get("changedDate").toString());
                         paymentCreationDate = df.parse(df.format(changedDate));
                    }else{
                        paymentCreationDate = paymentDetailOtherwise.getPayment().getCreationDate();
                    }
                    externalCurrencyRate = paymentDetailOtherwise.getPayment().getExchangeRateForOpeningTransaction();
                } else {
                    if(requestParams.containsKey("changedDate")&&requestParams.get("changedDate")!=null&&!requestParams.get("changedDate").toString().equals("")){
                        Date changedDate = new Date(requestParams.get("changedDate").toString());
                         paymentCreationDate = df.parse(df.format(changedDate));
                    }else{
//                        paymentCreationDate = paymentDetailOtherwise.getPayment().getJournalEntry().getEntryDate();
                        paymentCreationDate = paymentDetailOtherwise.getPayment().getCreationDate();
                    }
                    externalCurrencyRate = paymentDetailOtherwise.getPayment().getJournalEntry().getExternalCurrencyRate();
                }
                
                    String fromcurrencyid=paymentDetailOtherwise.getPayment().getCurrency().getCurrencyID();
                    String tocurrencyid = (requestParams.get("newcurrency") == null ? baseCurrencyID : requestParams.get("newcurrency")+"");
                    KwlReturnObject currResult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), tocurrencyid);
                    KWLCurrency currency = (KWLCurrency) currResult.getEntityList().get(0);
                    jSONObject.put("currencyid", tocurrencyid);
                    jSONObject.put("currencysymbol", currency.getSymbol());
                    jSONObject.put("currencyname", currency.getName());
                    KwlReturnObject bAmt = null;
//                    if (isopeningBalancePayment && pd.getPayment().isConversionRateFromCurrencyToBase()) {// if payment is opening balance payment and Conversion rate is taken from user is Currency to base then following method will be called.
//                        bAmt = accCurrencyDAOobj.getOneCurrencyToOtherAccordingToCurrencyToBaseExchangeRate(request, pd.getAmount(), fromcurrencyid, currencyid, paymentCreationDate, externalCurrencyRate);
//                    } else {
                        bAmt = accCurrencyDAOobj.getOneCurrencyToOther(requestParams, 1.0d, fromcurrencyid, tocurrencyid, paymentCreationDate, externalCurrencyRate);
//                    }
                   double ramount = (Double) bAmt.getEntityList().get(0);
                   jSONObject.put("enteramount",authHandler.round(ramount*paymentDetailOtherwise.getAmount(), companyid));
                    if (requestParams.containsKey("totalenteredamount")) {
                        double totalAmount = (Double) requestParams.get("totalenteredamount");
                        requestParams.put("totalenteredamount", authHandler.round(ramount * paymentDetailOtherwise.getAmount(), companyid) + totalAmount);
                    } else {
                        requestParams.put("totalenteredamount", authHandler.round(ramount * paymentDetailOtherwise.getAmount(), companyid));
                    }
                    double taxPercent = 0.0;
                    if (paymentDetailOtherwise.getTax() != null) {
//                        KwlReturnObject perresult = accTaxObj.getTaxPercent(paymentDetailOtherwise.getPayment().getCompany().getCompanyID(), paymentDetailOtherwise.getPayment().getJournalEntry().getEntryDate(), paymentDetailOtherwise.getTax().getID());
                        KwlReturnObject perresult = accTaxObj.getTaxPercent(paymentDetailOtherwise.getPayment().getCompany().getCompanyID(), paymentDetailOtherwise.getPayment().getCreationDate(), paymentDetailOtherwise.getTax().getID());
                        taxPercent = (Double) perresult.getEntityList().get(0);
                    }
                   double taxamount=taxPercent*(authHandler.round(ramount*paymentDetailOtherwise.getAmount(), companyid))/100;
                   jSONObject.put("taxamount", taxamount);
                   if(!fromcurrencyid.equals(tocurrencyid)){
                        jSONObject.put("exchangeratefortransaction",ramount);
                   }else{
                        jSONObject.put("exchangeratefortransaction",1);
                   }

    }
    public void getPaymentAdvanceDetailsInfo(Payment payment, Account acc, HashMap<String, Object> requestParams,JSONArray jSONArray) throws JSONException, ServiceException, AccountingException,UnsupportedEncodingException {
        DateFormat df = (DateFormat) requestParams.get("df");
        boolean isCopyTransaction = requestParams.get("isCopyTransaction")!=null ? (Boolean)requestParams.get("isCopyTransaction") : false;
        Set<AdvanceDetail> advanceDetails=payment.getAdvanceDetails();
        HashMap<String, Object> fieldrequestParams = new HashMap();
        HashMap<String, String> customFieldMap = new HashMap<String, String>();
        String countryID = payment.getCompany() != null &&  payment.getCompany().getCountry() != null ?  payment.getCompany().getCountry().getID() : "";
        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        fieldrequestParams.put(Constants.filter_values, Arrays.asList(payment.getCompany().getCompanyID(), Constants.Acc_Make_Payment_ModuleId));
        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap,customFieldMap,customDateFieldMap);
        boolean isDishonouredCheque = payment.isIsDishonouredCheque();
        for (AdvanceDetail advanceDetail : advanceDetails) {
            JSONObject obj = new JSONObject();
            obj.put("type",Constants.AdvancePayment);
            obj.put("debit",true);
            obj.put("modified", true);
            obj.put("enteramount", advanceDetail.getAmount());
            obj.put("tdsamount", advanceDetail.getTdsamount());
            obj.put("taxamount", 0);
            obj.put("prtaxid", "");
            obj.put("description", advanceDetail.getDescription()==null?"":StringUtil.DecodeText(advanceDetail.getDescription()));
            obj.put("payment", "");
            obj.put("productid", StringUtil.isNullOrEmpty(advanceDetail.getProductId()) ? "" : advanceDetail.getProductId());
            /*
             * isCopyTransaction is used for identifying the copy case
             * When this flag is true, data in the grid will be loaded in the similar way as laoded for create new case.
             * In copy case, document type and amount received will be same as original payment, but document number will be blank
             * also, in case of refund, if advance payment with different currency is linked, copy case will show initial transaction currency at line level as payment currency
             * (similar to create new case)
             */
            if(advanceDetail.getReceiptAdvanceDetails()!=null) {
                Receipt re = advanceDetail.getReceiptAdvanceDetails().getReceipt();
                obj.put("transactionAmount", advanceDetail.getReceiptAdvanceDetails().getAmount());
                obj.put("documentid", isCopyTransaction?"":advanceDetail.getReceiptAdvanceDetails().getId());
                obj.put("documentno", isCopyTransaction?"":re.getReceiptNumber());
                obj.put("currencyid", isCopyTransaction?payment.getCurrency().getCurrencyID():re.getCurrency().getCurrencyID());
                obj.put("currencysymbol", isCopyTransaction?payment.getCurrency().getSymbol():re.getCurrency().getSymbol());
                obj.put("currencyname", isCopyTransaction?payment.getCurrency().getName():re.getCurrency().getName());
                obj.put("currencysymboltransaction", isCopyTransaction?payment.getCurrency().getSymbol():re.getCurrency().getSymbol());
                obj.put("currencynametransaction", isCopyTransaction?payment.getCurrency().getName():re.getCurrency().getName());
                obj.put("currencyidtransaction", isCopyTransaction?payment.getCurrency().getCurrencyID():re.getCurrency().getCurrencyID());
                double enternedAmnt= advanceDetail.getAmount();
//                double enternedAmntOriginal= advanceDetail.getAmount();
                if (!payment.getCurrency().getCurrencyID().equals(re.getCurrency().getCurrencyID())) {
//                    KwlReturnObject bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, enternedAmnt, payment.getCurrency().getCurrencyID(),currencyid,  re.getJournalEntry().getEntryDate(), 0);
//                    enternedAmntOriginal = (Double) bAmt.getEntityList().get(0);
                    obj.put("currencyidpayment", payment.getCurrency().getCurrencyID());
                    obj.put("currencysymbolpayment", payment.getCurrency().getSymbol());
                }
//                double exchangeratefortransaction =  (enternedAmntOriginal <= 0 && enternedAmnt <= 0) ? 0 : (enternedAmnt / enternedAmntOriginal);
                double exchangeratefortransaction = advanceDetail.getExchangeratefortransaction();
                if (payment.getApprovestatuslevel() == Constants.APPROVED_STATUS_LEVEL) {            //if approva; status is 11 than it will add amount due and entered amount for displaying amountdue
                    obj.put("amountdue", (isCopyTransaction || isDishonouredCheque)? 0 : advanceDetail.getReceiptAdvanceDetails().getAmountDue() * exchangeratefortransaction + advanceDetail.getAmount());
                    obj.put("amountDueOriginal", (isCopyTransaction || isDishonouredCheque) ? 0 : advanceDetail.getReceiptAdvanceDetails().getAmountDue() + (advanceDetail.getAmount() / exchangeratefortransaction));
                    obj.put("amountDueOriginalSaved", (isCopyTransaction || isDishonouredCheque) ? 0 : advanceDetail.getReceiptAdvanceDetails().getAmountDue() + (advanceDetail.getAmount() / exchangeratefortransaction));
                    obj.put("exchangeratefortransaction", isCopyTransaction ? 1 : exchangeratefortransaction);
                } else {
                    obj.put("amountdue", isCopyTransaction ? 0 : advanceDetail.getReceiptAdvanceDetails().getAmountDue() * exchangeratefortransaction);
                    obj.put("amountDueOriginal", isCopyTransaction ? 0 : advanceDetail.getReceiptAdvanceDetails().getAmountDue());
                    obj.put("amountDueOriginalSaved", isCopyTransaction ? 0 : advanceDetail.getReceiptAdvanceDetails().getAmountDue());
                    obj.put("exchangeratefortransaction", isCopyTransaction ? 1 : exchangeratefortransaction);
                }
            } else {
                obj.put("transactionAmount", 0);
                obj.put("exchangeratefortransaction", 1);
                obj.put("documentid", "");
                obj.put("documentno", "");
                obj.put("currencyid", payment.getCurrency().getCurrencyID());
                obj.put("currencysymbol", payment.getCurrency().getSymbol());
                obj.put("currencyname", payment.getCurrency().getName());
                obj.put("currencysymboltransaction", payment.getCurrency().getSymbol());
                obj.put("currencynametransaction", payment.getCurrency().getName());
                obj.put("currencyidtransaction", payment.getCurrency().getCurrencyID());
                obj.put("amountdue", isCopyTransaction?0:advanceDetail.getAmountDue());
                obj.put("amountDueOriginal", isCopyTransaction?0:advanceDetail.getAmountDue());
                obj.put("amountDueOriginalSaved", isCopyTransaction?0:advanceDetail.getAmountDue());
            }
            obj.put("srNoForRow", advanceDetail.getSrNoForRow());
            obj.put("rowdetailid", advanceDetail.getId());
            if (payment.getCompany().getCountry().getID().equals(Constants.indian_country_id+"")) {
                HashMap<String, Object> dataMap = new HashMap<String, Object>();
                dataMap.put("documentType", Constants.AdvancePayment + "");
                dataMap.put("documentid", advanceDetail.getId());
                dataMap.put("rowdetailid", advanceDetail.getId());
                JSONArray jsonArrayTDS = getJsonOfTdsDetails(dataMap).getJSONArray("data");
                obj.put("appliedTDS", jsonArrayTDS.toString());
            }
            getCustomDataInfo(obj,advanceDetail.getId(),customFieldMap,FieldMap,replaceFieldMap);
            /**
             * Fetch Term Details for HSN in India case
             */
            if (countryID.equalsIgnoreCase("" + Constants.indian_country_id)) { // Fetch  term details of Product
                obj.put("adId", advanceDetail.getId());
                /*
                 * Adding Product Name column in the grid for indian subdomain only ERM-1016
                 */
                HashMap<String, Object> productMap = new HashMap();
                productMap.put("id", advanceDetail.getProductId()!=null ? advanceDetail.getProductId():null);
                Object productName = (Object) kwlCommonTablesDAOObj.getRequestedObjectFields(Product.class, new String[]{"name"}, productMap);
                if (productName != null) {
                    obj.put("productname", (String) productName);
                }
                KwlReturnObject result6 = accVendorPaymentobj.getAdvanceDetailsTerm(obj);
                if (result6.getEntityList() != null && result6.getEntityList().size() > 0 && result6.getEntityList().get(0) != null) {
                    ArrayList<AdvanceDetailTermMap> productTermDetail = (ArrayList<AdvanceDetailTermMap>) result6.getEntityList();
                    JSONArray productTermJsonArry = putGSTTermDetailsForPayment(productTermDetail);
                    obj.put("LineTermdetails", productTermJsonArry.toString());
                    obj.put("recTermAmount", advanceDetail.getTaxamount());
                }
                /**
                 * Put GST Tax Class History.
                 */
                obj.put("refdocid", advanceDetail.getId());
                fieldDataManagercntrl.getGSTTaxClassHistory(obj);
            }
            jSONArray.put(obj);
        }
    }
    public JSONArray putGSTTermDetailsForPayment(ArrayList<AdvanceDetailTermMap> productTermDetail) throws JSONException {
        JSONArray productTermJsonArry = new JSONArray();
        for (AdvanceDetailTermMap productTermsMapObj : productTermDetail) {
            JSONObject productTermJsonObj = new JSONObject();
            productTermJsonObj.put("id", productTermsMapObj.getId());
            productTermJsonObj.put("termid", productTermsMapObj.getEntitybasedLineLevelTermRate().getLineLevelTerms().getId());
            productTermJsonObj.put("productentitytermid", productTermsMapObj.getEntitybasedLineLevelTermRate() != null ? productTermsMapObj.getEntitybasedLineLevelTermRate().getId() : "");
            productTermJsonObj.put("isDefault", productTermsMapObj.isIsGSTApplied());
            productTermJsonObj.put("term", productTermsMapObj.getEntitybasedLineLevelTermRate().getLineLevelTerms().getTerm());
            productTermJsonObj.put("formula", productTermsMapObj.getEntitybasedLineLevelTermRate().getLineLevelTerms().getFormula());
            productTermJsonObj.put("formulaids", productTermsMapObj.getEntitybasedLineLevelTermRate().getLineLevelTerms().getFormula());
            productTermJsonObj.put("termpercentage", productTermsMapObj.getPercentage());
            productTermJsonObj.put("originalTermPercentage", productTermsMapObj.getEntitybasedLineLevelTermRate().getLineLevelTerms().getPercentage()); // For Service Tax Abatemnt calculation
            productTermJsonObj.put("termamount", productTermsMapObj.getTermamount());
            productTermJsonObj.put("glaccountname", productTermsMapObj.getEntitybasedLineLevelTermRate().getLineLevelTerms().getAccount().getAccountName());
            productTermJsonObj.put("glaccount", productTermsMapObj.getEntitybasedLineLevelTermRate().getLineLevelTerms().getAccount().getID());
            productTermJsonObj.put("IsOtherTermTaxable", productTermsMapObj.getEntitybasedLineLevelTermRate().getLineLevelTerms().isOtherTermTaxable());
            productTermJsonObj.put("sign", productTermsMapObj.getEntitybasedLineLevelTermRate().getLineLevelTerms().getSign());
            productTermJsonObj.put("purchasevalueorsalevalue", productTermsMapObj.getPurchaseValueOrSaleValue());
            productTermJsonObj.put("deductionorabatementpercent", productTermsMapObj.getDeductionOrAbatementPercent());
            productTermJsonObj.put("assessablevalue", productTermsMapObj.getAssessablevalue());
            productTermJsonObj.put("taxtype", productTermsMapObj.getTaxType());
            productTermJsonObj.put("taxvalue", productTermsMapObj.getPercentage());
            productTermJsonObj.put("termtype", productTermsMapObj.getEntitybasedLineLevelTermRate().getLineLevelTerms().getTermType());
            productTermJsonObj.put("termsequence", productTermsMapObj.getEntitybasedLineLevelTermRate().getLineLevelTerms().getTermSequence());
            productTermJsonObj.put("formType", productTermsMapObj.getEntitybasedLineLevelTermRate().getLineLevelTerms().getFormType());
            productTermJsonObj.put("accountid", productTermsMapObj.getEntitybasedLineLevelTermRate().getLineLevelTerms().getAccount().getID());
            productTermJsonObj.put("payableaccountid", productTermsMapObj.getEntitybasedLineLevelTermRate().getLineLevelTerms().getPayableAccount().getID());
            productTermJsonArry.put(productTermJsonObj);
        }
        return productTermJsonArry;
    }
    public void getPaymentAdvanceDetailsInfoOnCurrencyChange(Payment payment, Account acc, HashMap<String, Object> requestParams,JSONArray jSONArray) throws JSONException, ServiceException, UnsupportedEncodingException, ParseException {
        DateFormat df = (DateFormat) requestParams.get("df");
        Set<AdvanceDetail> advanceDetails=payment.getAdvanceDetails();
        HashMap<String, Object> fieldrequestParams = new HashMap();
        HashMap<String, String> customFieldMap = new HashMap<String, String>();
        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        fieldrequestParams.put(Constants.filter_values, Arrays.asList(payment.getCompany().getCompanyID(), Constants.Acc_Make_Payment_ModuleId));
        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap,customFieldMap,customDateFieldMap);
        for (AdvanceDetail advanceDetail : advanceDetails) {
            JSONObject obj = new JSONObject();
            obj.put("type",Constants.AdvancePayment);
            obj.put("modified", true);
//            obj.put("exchangeratefortransaction", 1);
//            obj.put("enteramount", advanceDetail.getAmount());
//            obj.put("amountdue", advanceDetail.getAmountDue());
            getAdvanceDetailsAmountDue(advanceDetail, requestParams, obj);
            obj.put("amountDueOriginal", advanceDetail.getAmountDue());
            obj.put("amountDueOriginalSaved", advanceDetail.getAmountDue());
            obj.put("taxamount", 0);
            obj.put("prtaxid", "");
            obj.put("description", advanceDetail.getDescription());
            obj.put("documentid", "");
            obj.put("documentno", "");
            obj.put("payment", "");
//            obj.put("currencyid", payment.getCurrency().getCurrencyID());
//            obj.put("currencysymbol", payment.getCurrency().getSymbol());
//            obj.put("currencyname", payment.getCurrency().getName());
            obj.put("currencysymboltransaction", payment.getCurrency().getSymbol());
            obj.put("currencynametransaction", payment.getCurrency().getName());
            obj.put("currencyidtransaction", payment.getCurrency().getCurrencyID());
            getCustomDataInfo(obj,advanceDetail.getId(),customFieldMap,FieldMap,replaceFieldMap);
            jSONArray.put(obj);
        }
    }
    public void getAdvanceDetailsAmountDue(AdvanceDetail advanceDetail, HashMap<String, Object> requestParams,JSONObject jSONObject) throws JSONException, ServiceException, UnsupportedEncodingException, ParseException {
                String companyid = "";
                DateFormat df = (DateFormat) requestParams.get("df");
                Date paymentCreationDate = null;
                double externalCurrencyRate = 0d;
                String baseCurrencyID=advanceDetail.getCompany().getCurrency().getCurrencyID();
//                boolean isopeningBalancePayment = pd.getPayment().isIsOpeningBalencePayment();
                if(requestParams.containsKey("companyid")){
                    companyid = (String) requestParams.get("companyid");
                }
                if (advanceDetail.getPayment().isIsOpeningBalencePayment() && !advanceDetail.getPayment().isNormalPayment()) {
                    if(requestParams.containsKey("changedDate")&&requestParams.get("changedDate")!=null&&!requestParams.get("changedDate").toString().equals("")){
                        Date changedDate = new Date(requestParams.get("changedDate").toString());
                         paymentCreationDate = df.parse(df.format(changedDate));
                    }else{
                        paymentCreationDate = advanceDetail.getPayment().getCreationDate();
                    }
                    externalCurrencyRate = advanceDetail.getPayment().getExchangeRateForOpeningTransaction();
                } else {
                    if(requestParams.containsKey("changedDate")&&requestParams.get("changedDate")!=null&&!requestParams.get("changedDate").toString().equals("")){
                        Date changedDate = new Date(requestParams.get("changedDate").toString());
                         paymentCreationDate = df.parse(df.format(changedDate));
                    }else{
//                        paymentCreationDate = advanceDetail.getPayment().getJournalEntry().getEntryDate();
                        paymentCreationDate = advanceDetail.getPayment().getCreationDate();
                    }
                    externalCurrencyRate = advanceDetail.getPayment().getJournalEntry().getExternalCurrencyRate();
                }

                    String fromcurrencyid=advanceDetail.getPayment().getCurrency().getCurrencyID();
                    String tocurrencyid = (requestParams.get("newcurrency") == null ? baseCurrencyID : requestParams.get("newcurrency")+"");
                    KwlReturnObject currResult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), tocurrencyid);
                    KWLCurrency currency = (KWLCurrency) currResult.getEntityList().get(0);
                    jSONObject.put("currencyid", tocurrencyid);
                    jSONObject.put("currencysymbol", currency.getSymbol());
                    jSONObject.put("currencyname", currency.getName());
                    KwlReturnObject bAmt = null;
//                    if (isopeningBalancePayment && pd.getPayment().isConversionRateFromCurrencyToBase()) {// if payment is opening balance payment and Conversion rate is taken from user is Currency to base then following method will be called.
//                        bAmt = accCurrencyDAOobj.getOneCurrencyToOtherAccordingToCurrencyToBaseExchangeRate(request, pd.getAmount(), fromcurrencyid, currencyid, paymentCreationDate, externalCurrencyRate);
//                    } else {
                        bAmt = accCurrencyDAOobj.getOneCurrencyToOther(requestParams, 1.0d, fromcurrencyid, tocurrencyid, paymentCreationDate, externalCurrencyRate);
//                    }
                   double ramount = (Double) bAmt.getEntityList().get(0);
                   jSONObject.put("amountdue",authHandler.round(ramount*advanceDetail.getAmountDue(), companyid));
                   jSONObject.put("enteramount",authHandler.round(ramount*advanceDetail.getAmount(), companyid));
                   if(requestParams.containsKey("totalenteredamount")){
                        double totalAmount=(Double)requestParams.get("totalenteredamount");
                        requestParams.put("totalenteredamount",authHandler.round(ramount*advanceDetail.getAmountDue(), companyid)+totalAmount);
                   }else{
                        requestParams.put("totalenteredamount",authHandler.round(ramount*advanceDetail.getAmountDue(), companyid));
                   }
                   if(!fromcurrencyid.equals(tocurrencyid)){
                        jSONObject.put("exchangeratefortransaction",ramount);
                   }
                   else{
                        jSONObject.put("exchangeratefortransaction",1);
                   }

    }
    
    public void getPaymentCNDNDetailsInfo(Payment payment, Account acc, HashMap<String, Object> requestParams,JSONArray jSONArray) throws JSONException, ServiceException, UnsupportedEncodingException {
        DateFormat df = (DateFormat) requestParams.get("df");
        String companyid = "";
        if(requestParams.containsKey("companyid")){
            companyid = (String) requestParams.get("companyid");
        }
        boolean isCopyTransaction = requestParams.get("isCopyTransaction")!=null ? (Boolean)requestParams.get("isCopyTransaction") : false;
        JSONArray innerJArrCNDN = new JSONArray();
            HashMap<String, Object> fieldrequestParams = new HashMap();
            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(payment.getCompany().getCompanyID(), Constants.Acc_Make_Payment_ModuleId));
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap,customFieldMap,customDateFieldMap);
             boolean isDishonouredCheque = payment.isIsDishonouredCheque();
                KwlReturnObject cndnResult = accVendorPaymentobj.getVendorCnPayment(payment.getID());
                List <CreditNotePaymentDetails> cnpdList = cndnResult.getEntityList();
                for (CreditNotePaymentDetails cnpd : cnpdList) {
                    Double cnPaidAmountOriginalCurrency = cnpd.getAmountPaid();
                    Double cnPaidAmountPaymentCurrency = cnpd.getPaidAmountInPaymentCurrency();
                    Double exchangeratefortransaction = cnpd.getExchangeRateForTransaction();
                    String description= cnpd.getDescription()!=null?cnpd.getDescription():"";
                    Double gstCurrencyRate= cnpd.getGstCurrencyRate();
                    int srNoForRow= cnpd.getSrno();
                    CreditNote creditNote = cnpd.getCreditnote();
                    JSONObject obj = new JSONObject();
                    obj.put("type",Constants.PaymentAgainstCNDN);
                    obj.put("debit",true);
                    obj.put("modified", true);
                    obj.put("exchangeratefortransaction", exchangeratefortransaction);
                    obj.put("enteramount", isCopyTransaction?authHandler.round((creditNote.getCnamountdue()*exchangeratefortransaction), companyid):cnPaidAmountPaymentCurrency);
                    obj.put("tdsamount", cnpd.getTdsamount());
//                    obj.put("amountdue", cnAmountPaymentCurrency);
//                    obj.put("amountDueOriginal", cnAmountOriginalCurrency);
//                    obj.put("amountDueOriginalSaved", cnAmountOriginalCurrency);
                    if (creditNote.isIsOpeningBalenceCN() && !creditNote.isNormalCN()) {
                        obj.put("transactionAmount", creditNote.getCnamount());
                    } else {
                        obj.put("transactionAmount", creditNote.getCustomerEntry().getAmount());
                    }
                    if (payment.getApprovestatuslevel() == 11) {
                      obj.put("amountdue", (isCopyTransaction || isDishonouredCheque)?authHandler.round((creditNote.getCnamountdue()*exchangeratefortransaction), companyid):authHandler.round((creditNote.getCnamountdue()*exchangeratefortransaction), companyid)+cnPaidAmountPaymentCurrency);
                      obj.put("amountDueOriginal", (isCopyTransaction || isDishonouredCheque)?creditNote.getCnamountdue():creditNote.getCnamountdue()+cnPaidAmountOriginalCurrency);
                      obj.put("amountDueOriginalSaved", (isCopyTransaction || isDishonouredCheque)?creditNote.getCnamountdue():creditNote.getCnamountdue()+cnPaidAmountOriginalCurrency);
                    }else{
                        obj.put("amountdue", authHandler.round((creditNote.getCnamountdue()*exchangeratefortransaction), companyid));
                        obj.put("amountDueOriginal", creditNote.getCnamountdue());
                        obj.put("amountDueOriginalSaved",creditNote.getCnamountdue());
                    }
                    obj.put("taxamount", 0);
                    obj.put("prtaxid", "");
                    obj.put("description", StringUtil.DecodeText(description));
                    obj.put("documentid", creditNote.getID());
                    obj.put("documentno", creditNote.getCreditNoteNumber());
                    obj.put("payment", "");
                    obj.put("currencyid", payment.getCurrency().getCurrencyID());
                    obj.put("currencysymbol", payment.getCurrency().getSymbol());
                    obj.put("currencyname", payment.getCurrency().getName());
                    obj.put("currencysymboltransaction", creditNote.getCurrency().getSymbol());
                    obj.put("currencynametransaction", creditNote.getCurrency().getName());
                    obj.put("currencyidtransaction", creditNote.getCurrency().getCurrencyID());
                    obj.put("gstCurrencyRate", gstCurrencyRate);
                    obj.put("srNoForRow", srNoForRow);
                    obj.put("rowdetailid", cnpd.getID());
//                    if (payment.getCompany().getCountry().getID().equals(Constants.indian_country_id+"")) {
//                        HashMap<String, Object> dataMap = new HashMap<String, Object>();
//                        dataMap.put("documentType", Constants.PaymentAgainstCNDN + "");
//                        dataMap.put("documentid", creditNote.getID());
//                        dataMap.put("rowdetailid", cnpd.getID());
//                        dataMap.put("amount", isCopyTransaction?authHandler.round((creditNote.getCnamountdue()*exchangeratefortransaction),2):cnPaidAmountPaymentCurrency);
//                        JSONArray jsonArrayTDS = getJsonOfTdsDetails(dataMap).getJSONArray("data");
//                        obj.put("appliedTDS", jsonArrayTDS.toString());
//                    }
                    obj.put("date", df.format((Date)creditNote.getCreationDate()));
//                    if (creditNote.isIsOpeningBalenceCN() && !creditNote.isNormalCN()) {
//                        obj.put("date", df.format((Date)creditNote.getCreationDate()));
//                    }else{
//                        obj.put("date", df.format((Date)creditNote.getJournalEntry().getEntryDate()));
//                    }
                    /**
                     * Passing JE date in response for validating date on JS
                     * Side ERM-655.
                     */
                    if (creditNote.isIsOpeningBalenceCN() && !creditNote.isNormalCN()) {
                        obj.put("jeDate", df.format((Date) creditNote.getCreationDate()));
                    } else {
                        obj.put("jeDate", df.format((Date) creditNote.getJournalEntry().getEntryDate()));
                    }
                    if(cnpd.getID() != null&&!(cnpd.getID()).equals(""))
                        getCustomDataInfo(obj,cnpd.getID(),customFieldMap,FieldMap,replaceFieldMap);
                    jSONArray.put(obj);
        }
    } 
    public void getPaymentCNDNDetailsInfoOnCurrencyChange(Payment payment, Account acc, HashMap<String, Object> requestParams,JSONArray jSONArray) throws JSONException, ServiceException, UnsupportedEncodingException, ParseException {
        DateFormat df = (DateFormat) requestParams.get("df");
        JSONArray innerJArrCNDN = new JSONArray();
            HashMap<String, Object> fieldrequestParams = new HashMap();
            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(payment.getCompany().getCompanyID(), Constants.Acc_Make_Payment_ModuleId));
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap,customFieldMap,customDateFieldMap);
                KwlReturnObject cndnResult = accVendorPaymentobj.getVendorCnPayment(payment.getID());
                List <CreditNotePaymentDetails> cnpdList = cndnResult.getEntityList();
                for (CreditNotePaymentDetails cnpd : cnpdList) {
                    Double cnPaidAmountOriginalCurrency = cnpd.getAmountPaid();
                    Double cnPaidAmountPaymentCurrency = cnpd.getPaidAmountInPaymentCurrency();
                    Double cnAmountOriginalCurrency = cnpd.getAmountPaid();
                    Double exchangeratefortransaction = cnpd.getExchangeRateForTransaction();
                    String description= cnpd.getDescription()!=null?cnpd.getDescription():"";
                    Double gstCurrencyRate= cnpd.getGstCurrencyRate();
                    CreditNote creditNote = cnpd.getCreditnote();
                    JSONObject obj = new JSONObject();
                    obj.put("type",Constants.PaymentAgainstCNDN);
                    obj.put("modified", true);
//                    obj.put("exchangeratefortransaction", exchangeratefortransaction);
//                    obj.put("enteramount", cnPaidAmountPaymentCurrency);
//                    obj.put("amountdue", cnAmountPaymentCurrency);
                    getCNDNDetailsAmountDue(creditNote, payment, cnAmountOriginalCurrency, cnPaidAmountOriginalCurrency,cnPaidAmountPaymentCurrency,exchangeratefortransaction, requestParams, obj);
//                    obj.put("amountDueOriginal", cnAmountOriginalCurrency);
//                    obj.put("amountDueOriginalSaved", cnAmountOriginalCurrency);    
                    obj.put("amountDueOriginal", creditNote.getCnamountdue()+cnPaidAmountOriginalCurrency);
                    obj.put("amountDueOriginalSaved", creditNote.getCnamountdue()+cnPaidAmountOriginalCurrency);
                    obj.put("taxamount", 0);
                    obj.put("prtaxid", "");
                    obj.put("description", description);
                    obj.put("documentid", creditNote.getID());
                    obj.put("documentno", creditNote.getCreditNoteNumber());
                    obj.put("payment", "");
//                    obj.put("currencyid", payment.getCurrency().getCurrencyID());
//                    obj.put("currencysymbol", payment.getCurrency().getSymbol());
//                    obj.put("currencyname", payment.getCurrency().getName());
                    obj.put("currencysymboltransaction", creditNote.getCurrency().getSymbol());
                    obj.put("currencynametransaction", creditNote.getCurrency().getName());
                    obj.put("currencyidtransaction", creditNote.getCurrency().getCurrencyID());
                    obj.put("gstCurrencyRate", gstCurrencyRate);
                    obj.put("date", df.format((Date)creditNote.getCreationDate()));
//                    if (creditNote.isIsOpeningBalenceCN() && !creditNote.isNormalCN()) {
//                        obj.put("date", df.format((Date)creditNote.getCreationDate()));
//                    }else{
//                        obj.put("date", df.format((Date)creditNote.getJournalEntry().getEntryDate()));
//                    }
                    if(cnpd.getID() != null&&!(cnpd.getID()).equals(""))
                        getCustomDataInfo(obj,cnpd.getID(),customFieldMap,FieldMap,replaceFieldMap);
                    jSONArray.put(obj);
        }
    } 
    public void getCNDNDetailsAmountDue(CreditNote creditNote,Payment payment,double cnAmountOriginalCurrency,double cnPaidAmountOriginalCurrency,double cnPaidAmountPaymentCurrency,double exchangeratefortransaction,HashMap<String, Object> requestParams,JSONObject jSONObject) throws JSONException, ServiceException, UnsupportedEncodingException, ParseException {
                
                String companyid = "";
                if (requestParams.containsKey("companyid")) {
                    companyid = (String) requestParams.get("companyid");
                }
                Date paymentCreationDate = null;
                DateFormat df = (DateFormat) requestParams.get("df");
                double externalCurrencyRate = 0d;
                String baseCurrencyID=creditNote.getCompany().getCurrency().getCurrencyID();
//                boolean isopeningBalancePayment = pd.getPayment().isIsOpeningBalencePayment();

                if (payment.isIsOpeningBalencePayment() && !payment.isNormalPayment()) {
                    if(requestParams.containsKey("changedDate")&&requestParams.get("changedDate")!=null&&!requestParams.get("changedDate").toString().equals("")){
                        Date changedDate = new Date(requestParams.get("changedDate").toString());
                         paymentCreationDate = df.parse(df.format(changedDate));
                    }else{
                        paymentCreationDate = payment.getCreationDate();
                    }
                    externalCurrencyRate = payment.getExchangeRateForOpeningTransaction();
                } else {
                    if(requestParams.containsKey("changedDate")&&requestParams.get("changedDate")!=null&&!requestParams.get("changedDate").toString().equals("")){
                        Date changedDate = new Date(requestParams.get("changedDate").toString());
                         paymentCreationDate = df.parse(df.format(changedDate));
                    }else{
//                        paymentCreationDate = payment.getJournalEntry().getEntryDate();
                        paymentCreationDate = payment.getCreationDate();
                    }
                    externalCurrencyRate = payment.getJournalEntry().getExternalCurrencyRate();
                }

                    String fromcurrencyid=creditNote.getCurrency().getCurrencyID();
                    String tocurrencyid = (requestParams.get("newcurrency") == null ? baseCurrencyID : requestParams.get("newcurrency")+"");
                    KwlReturnObject currResult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), tocurrencyid);
                    KWLCurrency currency = (KWLCurrency) currResult.getEntityList().get(0);
                    jSONObject.put("currencyid", tocurrencyid);
                    jSONObject.put("currencysymbol", currency.getSymbol());
                    jSONObject.put("currencyname", currency.getName());
                    KwlReturnObject bAmt = null;
//                    if (isopeningBalancePayment && pd.getPayment().isConversionRateFromCurrencyToBase()) {// if payment is opening balance payment and Conversion rate is taken from user is Currency to base then following method will be called.
//                        bAmt = accCurrencyDAOobj.getOneCurrencyToOtherAccordingToCurrencyToBaseExchangeRate(request, pd.getAmount(), fromcurrencyid, currencyid, paymentCreationDate, externalCurrencyRate);
//                    } else {
                        bAmt = accCurrencyDAOobj.getOneCurrencyToOther(requestParams, 1.0d, fromcurrencyid, tocurrencyid, paymentCreationDate, externalCurrencyRate);
//                    }
                   double ramount = (Double) bAmt.getEntityList().get(0);
                   jSONObject.put("amountdue",authHandler.round(ramount*cnAmountOriginalCurrency, companyid));
//                   jSONObject.put("enteramount",authHandler.round(ramount*cnPaidAmountOriginalCurrency,2));
                    jSONObject.put("amountdue", authHandler.round((creditNote.getCnamountdue()*exchangeratefortransaction), companyid)+cnPaidAmountPaymentCurrency);
                  if(requestParams.containsKey("totalenteredamount")){
                        double totalAmount=(Double)requestParams.get("totalenteredamount");
                        requestParams.put("totalenteredamount",authHandler.round(ramount*cnPaidAmountOriginalCurrency, companyid)+totalAmount);
                   }else{
                        requestParams.put("totalenteredamount",authHandler.round(ramount*cnPaidAmountOriginalCurrency, companyid));
                   }
                   if(!creditNote.getCurrency().getCurrencyID().equals(tocurrencyid)){
                        jSONObject.put("exchangeratefortransaction",ramount);
                   }else{
                        jSONObject.put("exchangeratefortransaction",1);
                   }

    }
    public void getCustomDataInfo(JSONObject obj,String rowId,HashMap<String, String> customFieldMap,HashMap<String, Integer> FieldMap,HashMap<String, String> replaceFieldMap) throws JSONException, ServiceException, UnsupportedEncodingException {
                    // ## Get Custom Field Data 
                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                    ArrayList Detailfilter_names = new ArrayList(),Detailfilter_params = new ArrayList();
                    Detailfilter_names.add(Constants.Acc_JEDetail_recdetailId);
                    Detailfilter_params.add(rowId);
                    invDetailRequestParams.put("filter_names", Detailfilter_names);
                    invDetailRequestParams.put("filter_params", Detailfilter_params);
                    KwlReturnObject idcustresult = accVendorPaymentobj.getVendorPaymentCustomData(invDetailRequestParams);
                    if(idcustresult.getEntityList().size()>0) {
                        AccJEDetailCustomData jeDetailCustom = (AccJEDetailCustomData) idcustresult.getEntityList().get(0);
                        AccountingManager.setCustomColumnValues(jeDetailCustom, FieldMap, replaceFieldMap,variableMap);
                        for (Entry<String, Object> varEntry : variableMap.entrySet()) {
                            String coldata = varEntry.getValue()!=null?varEntry.getValue().toString():"";
                            if(customFieldMap.containsKey(varEntry.getKey())){
                                 //   KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), coldata);
                                  //  FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                   if(coldata != null){
                                       obj.put(varEntry.getKey(), coldata!=null?coldata:"");//fieldComboData.getValue()!=null ?fieldComboData.getValue():"");
                                   }
                              }else{
                                     if (!StringUtil.isNullOrEmpty(coldata)) {
                                        obj.put(varEntry.getKey(), coldata);
                                     }
                              }
                        }
                    }
    } 
    
    public ModelAndView getOpeningBalancePayments(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        boolean issuccess = false;
        String msg = "";
        try {
            HashMap<String, Object> requestParams = getPaymentMap(request);
            String vendorId = request.getParameter("custVenId");
            requestParams.put(InvoiceConstants.vendorid, vendorId);
            // get opening balance Payments created from opening balance button.

            KwlReturnObject result = accVendorPaymentobj.getOpeningBalancePayments(requestParams);
            List<Payment> list = result.getEntityList();
            getOpeningBalanceReceiptJson(request, list, DataJArr);

//            // getting normal receipts of past year which has been converted into opening balance receipts.
//            result = accReceiptDAOobj.getOpeningBalanceNormalReceipts(requestParams);
//            list = result.getEntityList();
//            getOpeningBalanceReceiptJson(request, list, DataJArr);

            int count = result.getRecordTotalCount();
            JSONArray pagedJson = DataJArr;
            String start = request.getParameter("start");
            String limit = request.getParameter("limit");
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }

            jobj.put("data", pagedJson);
            jobj.put("count", count);
            issuccess = true;
        } catch (JSONException ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (ServiceException ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (Exception ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }

        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public void getOpeningBalanceReceiptJson(HttpServletRequest request, List<Payment> list, JSONArray dataArray) {
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            DateFormat df = authHandler.getDateOnlyFormat(request);
            SimpleDateFormat sdf = new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");
            HashMap<String, Object> requestParams = getPaymentMap(request);
            if (list != null && !list.isEmpty()) {
                Iterator it = list.iterator();
                while (it.hasNext()) {
                    Payment payment = (Payment) it.next();

                    Date receiptCreationDate = null;
                    Double receiptAmount = 0d;

                    receiptCreationDate = payment.getCreationDate();
                    receiptAmount = payment.getDepositAmount();

                    double exchangeRateForOtherCurrency = payment.getExchangeRateForOpeningTransaction();
//                    double exchangeRateForOtherCurrencyModifiedForJS = 0d;
                    boolean isopeningBalancePayment = payment.isIsOpeningBalencePayment();

                    JSONObject receiptJson = new JSONObject();
                    receiptJson.put("transactionId", payment.getID());
                    receiptJson.put("exchangeRateForOtherCurrency", exchangeRateForOtherCurrency);
                    receiptJson.put("isCurrencyToBaseExchangeRate", payment.isConversionRateFromCurrencyToBase());
                    receiptJson.put("isNormalTransaction", payment.isNormalPayment());
                    receiptJson.put("transactionNo", payment.getPaymentNumber());
                    receiptJson.put("transactionAmount", authHandler.formattedAmount(receiptAmount, companyid));
                    receiptJson.put("transactionDate", sdf.format(receiptCreationDate));
                    receiptJson.put("currencysymbol", (payment.getCurrency() == null ? "" : payment.getCurrency().getSymbol()));
                    receiptJson.put("currencyid", (payment.getCurrency() == null ? "" : payment.getCurrency().getCurrencyID()));
                    receiptJson.put("transactionAmountDue", authHandler.formattedAmount(payment.getOpeningBalanceAmountDue(), companyid));
                    receiptJson.put("chequeNumber", payment.getChequeNumber());
                    receiptJson.put("drawnOn", payment.getDrawnOn());
                    receiptJson.put("chequeDate", payment.getChequeDate() != null ? df.format(payment.getChequeDate()) : "");
                    double transactionAmountInBase = 0d;
                    if (Constants.OpeningBalanceBaseAmountFlag) {
                        transactionAmountInBase = payment.getOriginalOpeningBalanceBaseAmount();
                    } else {
                        KwlReturnObject bAmt = null;
                        if (isopeningBalancePayment && payment.isConversionRateFromCurrencyToBase()) {// if payment is opening balance payment and Conversion rate is taken from user is Currency to base then following method will be called.
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, receiptAmount, payment.getCurrency().getCurrencyID(), payment.getCreationDate(), exchangeRateForOtherCurrency);
                        } else {
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, receiptAmount, payment.getCurrency().getCurrencyID(), payment.getCreationDate(), exchangeRateForOtherCurrency);
                        }
                        transactionAmountInBase = (Double) bAmt.getEntityList().get(0);
                    }
                    receiptJson.put("transactionAmountInBase", authHandler.formattedAmount(transactionAmountInBase, companyid));
                    dataArray.put(receiptJson);
                }
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (JSONException ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }

    }

    public static HashMap<String, Object> getPaymentMap(HttpServletRequest request) throws SessionExpiredException {
        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
        requestParams.put("start", request.getParameter("start"));
        requestParams.put("limit", request.getParameter("limit"));
        requestParams.put("ss", request.getParameter("ss"));
        requestParams.put("deleted", request.getParameter("deleted"));
        requestParams.put("nondeleted", request.getParameter("nondeleted"));
        requestParams.put(Constants.REQ_startdate, request.getParameter("stdate"));
        requestParams.put(Constants.REQ_enddate, request.getParameter("enddate"));
        requestParams.put("ispendingAproval", request.getParameter("ispendingAproval"));
        requestParams.put(Constants.Acc_Search_Json, request.getParameter(Constants.Acc_Search_Json));
        requestParams.put(Constants.Filter_Criteria, request.getParameter(InvoiceConstants.Filter_Criteria));
        requestParams.put(Constants.moduleid, request.getParameter(Constants.moduleid));
        if (request.getParameter("isView") != null) {
            requestParams.put("isView", request.getParameter("isView"));
        }
        if (request.getParameter("isCopyTransaction") != null) {
            if (request.getParameter("isCopyTransaction").equalsIgnoreCase("true")) {
                requestParams.put("isCopyTransaction", true);
            } else {
                requestParams.put("isCopyTransaction", false);
            }
        }
        return requestParams;
    }

    public List<JSONObject> getOpeningBalanceReceiptJsonForReport(HttpServletRequest request, List list, List<JSONObject> jsonObjectlist) {
        List<JSONObject> returnList = new ArrayList<JSONObject>();
        try {
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            Iterator itr = list.iterator();
            while (itr.hasNext()) {

                Payment payment = (Payment) itr.next();

                JSONObject obj = new JSONObject();
                obj.put("withoutinventory", false);
                obj.put("isOpeningBalanceTransaction", payment.isIsOpeningBalencePayment());
                obj.put("isNormalTransaction", payment.isNormalPayment());
//                KwlReturnObject vendorresult = accountingHandlerDAOobj.getObject(Vendor.class.getName(), acc.getID());
                Vendor vendor = payment.getVendor();
                if (vendor != null) {
                    obj.put("address", vendor.getAddress());
                    obj.put("personemail", vendor.getEmail());
                } else {
                    obj.put("address", "");
                    obj.put("personemail", "");
                }
                obj.put("billid", payment.getID());
                obj.put("companyid", payment.getCompany().getCompanyID());
                obj.put("companyname", payment.getCompany().getCompanyName());
                obj.put("entryno", "");
                obj.put("journalentryid", "");
                obj.put("personid", vendor.getID());
                obj.put("billno", payment.getPaymentNumber());
                obj.put("isadvancepayment", payment.isIsadvancepayment());
                obj.put("isadvancefromvendor", false);
                obj.put("ismanydbcr", false);
                obj.put("bankCharges", 0.0);
                obj.put("bankChargesCmb", "");
                obj.put("bankInterest", 0.0);
                obj.put("bankInterestCmb", "");
                obj.put("paidToCmb", "");

                obj.put("advanceUsed", false);
                obj.put("advanceid", "");
                obj.put("advanceamount", 0.0);
                obj.put("billdate", authHandler.getDateOnlyFormat(request).format(payment.getCreationDate()));
//                obj.put("receipttype", receipt.getReceipttype());

                obj.put("amount", authHandler.formattedAmount(payment.getDepositAmount(), companyid));
                obj.put("personname", vendor == null ? "" : vendor.getName());
                obj.put("memo", "");
                obj.put("deleted", payment.isDeleted());
                obj.put("currencysymbol", (payment.getCurrency() == null ? currency.getSymbol() : payment.getCurrency().getSymbol()));
                obj.put("externalcurrencyrate", payment.getExternalCurrencyRate());
                obj.put("currencyid", (payment.getCurrency() == null ? currency.getCurrencyID() : payment.getCurrency().getCurrencyID()));
                obj.put("methodid", "");
                obj.put("detailtype", "");
                obj.put("paymentmethod", "");
                if (!payment.getRows().isEmpty()) {
                    obj.put("otherwise", false);
                } else {
                    obj.put("otherwise", true);
                }

                returnList.add(obj);
            }
        } catch (JSONException ex) {
            returnList = null;
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (ServiceException ex) {
            returnList = null;
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (SessionExpiredException ex) {
            returnList = null;
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        if (returnList != null) {
            jsonObjectlist.addAll(returnList);
        }
        return jsonObjectlist;
    }

    public List<JSONObject> getPaymentsJson(HashMap<String, Object> requestParams, List list, List<JSONObject> jsonlist) throws ServiceException {
        //JSONObject jobj = new JSONObject();
        //JSONArray JArr = new JSONArray();
        try {
            HashMap<String, Object> rRequestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
            String companyid = (String) requestParams.get("companyid");
            String currencyid = (String) requestParams.get("gcurrencyid");

            HashMap<String, Object> fieldrequestParams = new HashMap();
            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Make_Payment_ModuleId));
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);


            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            DateFormat df = (DateFormat) requestParams.get("df");
//            DecimalFormat f = new DecimalFormat("##.00");
            Iterator itr = list.iterator();
            Customer customer = null;
            while (itr.hasNext()) {


                /*
                 * If you are modifying in this method then you will need to
                 * modify on accReportsController.java - getIBGEntryJson()
                 * method AND on AccReportsServiceImpl.java getPaymentAmount()
                 * method
                 */

                JSONArray jArr1 = new JSONArray();
                Object[] row = (Object[]) itr.next();
                Payment payment = (Payment) row[0];
                Account acc = (Account) row[1];
                JSONObject obj = new JSONObject();
                obj.put("withoutinventory", false);
//                KwlReturnObject vendorresult = accountingHandlerDAOobj.getObject(Vendor.class.getName(), acc.getID());
                if (payment.getCustomer() != null) {
                    KwlReturnObject custResult = accountingHandlerDAOobj.getObject(Customer.class.getName(), payment.getCustomer());
                    customer = (Customer) custResult.getEntityList().get(0);
                }

                Vendor vendor = payment.getVendor();
                if (vendor != null) {
                    obj.put("address", vendor.getAddress());
                    obj.put("personemail", vendor.getEmail());
                } else {
                    obj.put("address", "");
                    obj.put("personemail", "");
                }
//                Vendor vendor = (Vendor) session.get(Vendor.class, acc.getID());
//                if(vendor!=null)
//                   obj.put("address", vendor.getAddress());
//                        obj.put("address", vendor.getAddress());

                obj.put("billid", payment.getID());
                obj.put("companyid", payment.getCompany().getCompanyID());
                obj.put("companyname", payment.getCompany().getCompanyName());
                obj.put("entryno", payment.getJournalEntry().getEntryNumber() != null ? payment.getJournalEntry().getEntryNumber() : "");
                obj.put("journalentryid", payment.getJournalEntry().getID());
                obj.put("isadvancepayment", payment.isIsadvancepayment());
                obj.put("ismanydbcr", payment.isIsmanydbcr());
                obj.put("isprinted", payment.isPrinted());
                obj.put("bankCharges", payment.getBankChargesAmount());
                obj.put("bankChargesCmb", payment.getBankChargesAccount() != null ? payment.getBankChargesAccount().getID() : "");
                obj.put("bankInterest", payment.getBankInterestAmount());
                obj.put("bankInterestCmb", payment.getBankInterestAccount() != null ? payment.getBankInterestAccount().getID() : "");
                obj.put("paidToCmb", payment.getPaidTo() == null ? "" : payment.getPaidTo().getID());
                obj.put("paidto", payment.getPaidTo() != null ? payment.getPaidTo().getValue() : "");  //to show the paid to option in grid
                obj.put(Constants.SEQUENCEFORMATID, payment.getSeqformat() == null ? "" : payment.getSeqformat().getID());
                boolean advanceUsed = false;
                if (payment.getAdvanceid() != null && !payment.getAdvanceid().isDeleted()) {
                    rRequestParams.clear();
                    filter_names.clear();
                    filter_params.clear();
                    filter_names.add("payment.ID");
                    filter_params.add(payment.getAdvanceid().getID());
                    rRequestParams.put("filter_names", filter_names);
                    rRequestParams.put("filter_params", filter_params);
                    KwlReturnObject grdresult = accVendorPaymentobj.getPaymentDetails(rRequestParams);
                    advanceUsed = grdresult.getEntityList().size() > 0 ? true : false;
                }
                Payment paymentObject = null;
                if (payment.getInvoiceAdvCndnType() == 2 || payment.getInvoiceAdvCndnType() == 1) {
                    paymentObject = accVendorPaymentobj.getPaymentObject(payment);
                    if (paymentObject != null) {
                        obj.put("cndnid", paymentObject.getID());
                    }
                } else if (payment.getInvoiceAdvCndnType() == 3) {
                    obj.put("cndnid", payment.getID());
                }
                obj.put("invoiceadvcndntype", payment.getInvoiceAdvCndnType());
                obj.put("cndnAndInvoiceId", !StringUtil.isNullOrEmpty(payment.getCndnAndInvoiceId()) ? payment.getCndnAndInvoiceId() : "");
                obj.put("advanceUsed", advanceUsed);
                obj.put("advanceid", (payment.getAdvanceid() != null && !payment.getAdvanceid().isDeleted()) ? payment.getAdvanceid().getID() : "");
                obj.put("advanceamount", payment.getAdvanceamount());
                obj.put("receipttype", payment.getReceipttype());
                obj.put("personid", (vendor != null) ? vendor.getID() : acc.getID());
//                obj.put("customervendorname", (vendor!=null)? vendor.getName() : (customer!=null)? customer.getName():"");
                obj.put("billno", payment.getPaymentNumber());
//                obj.put("billdate", df.format(payment.getJournalEntry().getEntryDate()));//receiptdate
                obj.put("billdate", df.format(payment.getCreationDate()));//receiptdate

                rRequestParams.clear();
                filter_names.clear();
                filter_params.clear();
                filter_names.add("payment.ID");
                filter_params.add(payment.getID());
                rRequestParams.put("filter_names", filter_names);
                rRequestParams.put("filter_params", filter_params);
                KwlReturnObject pdoresult = accVendorPaymentobj.getPaymentDetailOtherwise(rRequestParams);
                List<PaymentDetailOtherwise> list1 = pdoresult.getEntityList();
                Iterator pdoRow = list1.iterator();

                Iterator itrRow = payment.getRows().iterator();
                double amount = 0, totaltaxamount = 0;
                if (!payment.getRows().isEmpty()) {
                    while (itrRow.hasNext()) {
                        amount += ((PaymentDetail) itrRow.next()).getAmount();
                    }
                    obj.put("otherwise", false);
                } else if (pdoRow != null && list1.size() > 0) {
                    for (PaymentDetailOtherwise paymentDetailOtherwise : list1) {
                        if (payment.getID().equals(paymentDetailOtherwise.getPayment().getID())) {
                            double taxamount = 0;
                            if (paymentDetailOtherwise.getTax() != null) {
                                taxamount = paymentDetailOtherwise.getTaxamount();
                                totaltaxamount += taxamount;
                            }
                            JSONObject obj1 = new JSONObject();
                            obj1.put("debitaccid", paymentDetailOtherwise.getAccount().getID());
                            obj1.put("debitamt", paymentDetailOtherwise.getAmount());
                            obj1.put("isdebit", paymentDetailOtherwise.isIsdebit());
                            obj1.put("desc", paymentDetailOtherwise.getDescription() != null ? paymentDetailOtherwise.getDescription() : "");
                            obj1.put("prtaxid", paymentDetailOtherwise.getTax() != null ? paymentDetailOtherwise.getTax().getID() : "");
                            obj1.put("taxamount", taxamount);
                            obj1.put("curamount", (paymentDetailOtherwise.getAmount() + paymentDetailOtherwise.getTaxamount()));
                            if (payment.isIsmanydbcr()) {
                                if (paymentDetailOtherwise.isIsdebit()) {
                                    amount += Double.parseDouble(authHandler.formattedAmount(((paymentDetailOtherwise.getAmount() + paymentDetailOtherwise.getTaxamount())), companyid));
                                } else {
                                    amount -= Double.parseDouble(authHandler.formattedAmount(((paymentDetailOtherwise.getAmount() + paymentDetailOtherwise.getTaxamount())), companyid));
                                }
                            } else {
                                amount = amount + Double.parseDouble(authHandler.formattedAmount(((paymentDetailOtherwise.getAmount() + paymentDetailOtherwise.getTaxamount())), companyid));
                            }
                            // ## Get Custom Field Data 
                            Map<String, Object> variableMap = new HashMap<String, Object>();
                            HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                            ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                            Detailfilter_names.add(Constants.Acc_JEDetail_recdetailId);
                            Detailfilter_params.add(paymentDetailOtherwise.getID());
                            invDetailRequestParams.put("filter_names", Detailfilter_names);
                            invDetailRequestParams.put("filter_params", Detailfilter_params);
                            KwlReturnObject idcustresult = accVendorPaymentobj.getVendorPaymentCustomData(invDetailRequestParams);
                            if (idcustresult.getEntityList().size() > 0) {
                                AccJEDetailCustomData jeDetailCustom = (AccJEDetailCustomData) idcustresult.getEntityList().get(0);
                                AccountingManager.setCustomColumnValues(jeDetailCustom, FieldMap, replaceFieldMap, variableMap);
                                for (Entry<String, Object> varEntry : variableMap.entrySet()) {
                                    String coldata = varEntry.getValue() != null ? varEntry.getValue().toString() : "";
                                    if (customFieldMap.containsKey(varEntry.getKey())) {
                                        KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), coldata);
                                        FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                        if (fieldComboData != null) {
                                            obj1.put(varEntry.getKey(), coldata != null ? coldata : "");//fieldComboData.getValue()!=null ?fieldComboData.getValue():"");
                                        }
                                    } else {
                                        if (!StringUtil.isNullOrEmpty(coldata)) {
                                            obj1.put(varEntry.getKey(), coldata);
                                        }
                                    }
                                }
                            }
                            jArr1.put(obj1);
                        }
                    }

                    obj.put("otherwise", true);
                    obj.put("detailsjarr", jArr1);
                } else {
                    itrRow = payment.getJournalEntry().getDetails().iterator();
                    while (itrRow.hasNext()) {
                        JournalEntryDetail jed = ((JournalEntryDetail) itrRow.next());
                        if (!jed.isDebit()) {
                            if (payment.getDeposittoJEDetail() != null) {
                                amount = payment.getDeposittoJEDetail().getAmount();
                            } else {
                                amount = jed.getAmount();
                            }
                        } else {
                            JSONObject obj1 = new JSONObject();
                            obj1.put("debitaccid", jed.getAccount().getID());
                            obj1.put("debitamt", jed.getAmount());
                            obj1.put("isdebit", jed.isDebit());
                            obj1.put("curamount", jed.getAmount());
                            obj1.put("desc", jed.getDescription() != null ? jed.getDescription() : "");
                            jArr1.put(obj1);
                        }
                    }
                    obj.put("otherwise", true);
                    obj.put("detailsjarr", jArr1);
                }
                obj.put("amount", authHandler.formattedAmount(amount, companyid));
                obj.put("totaltaxamount", authHandler.formattedAmount(totaltaxamount, companyid));


                String paycurrencyid = (payment.getCurrency() == null ? currency.getCurrencyID() : payment.getCurrency().getCurrencyID());
//                KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount, paycurrencyid, payment.getJournalEntry().getEntryDate(), payment.getJournalEntry().getExternalCurrencyRate());
                KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount, paycurrencyid, payment.getCreationDate(), payment.getJournalEntry().getExternalCurrencyRate());
                double amountinbase = (Double) bAmt.getEntityList().get(0);
                obj.put("amountinbase", authHandler.formattedAmount(amountinbase, companyid));


                KwlReturnObject result = accVendorPaymentobj.getPaymentVendorNames(companyid, payment.getID());
                List vNameList = result.getEntityList();
                Iterator vNamesItr = vNameList.iterator();
                String vendorNames = "";
                while (vNamesItr.hasNext()) {
                    String tempName = URLEncoder.encode((String) vNamesItr.next(), "UTF-8");
                    vendorNames += tempName;
                    vendorNames += ",";
                }
                vendorNames = vendorNames.substring(0, Math.max(0, vendorNames.length() - 1));
                obj.put("personname", (payment.getReceipttype() == 9 || payment.getReceipttype() == 2) ? vendorNames : ((vendor != null) ? vendor.getName() : (customer != null) ? customer.getName() : ""));
                obj.put("memo", payment.getMemo());
                obj.put("deleted", payment.isDeleted());
                obj.put("currencysymbol", (payment.getCurrency() == null ? currency.getSymbol() : payment.getCurrency().getSymbol()));
                obj.put("externalcurrencyrate", payment.getExternalCurrencyRate());
                obj.put("paymentmethod", (payment.getPayDetail() == null ? "" : payment.getPayDetail().getPaymentMethod().getMethodName()));
                obj.put("chequenumber", payment.getPayDetail() == null ? "" : (payment.getPayDetail().getPaymentMethod().getDetailType() == PaymentMethod.TYPE_BANK) ? (payment.getPayDetail().getCheque() != null ? payment.getPayDetail().getCheque().getChequeNo() : "") : "");
                obj.put("chequedescription", payment.getPayDetail() == null ? "" : (payment.getPayDetail().getPaymentMethod().getDetailType() == PaymentMethod.TYPE_BANK) ? (payment.getPayDetail().getCheque() != null ? (payment.getPayDetail().getCheque().getDescription() != null ? payment.getPayDetail().getCheque().getDescription() : "") : "") : "");
                obj.put("currencyid", (payment.getCurrency() == null ? currency.getCurrencyID() : payment.getCurrency().getCurrencyID()));
                obj.put("methodid", (payment.getPayDetail() == null ? "" : payment.getPayDetail().getPaymentMethod().getID()));
                obj.put("detailtype", (payment.getPayDetail() == null ? "" : payment.getPayDetail().getPaymentMethod().getDetailType()));
                if (payment.getPayDetail() != null) {
                    try {
                        obj.put("expirydate", (payment.getPayDetail().getCard() == null ? "" : df.format(payment.getPayDetail().getCard().getExpiryDate())));
                    } catch (IllegalArgumentException ae) {
                        obj.put("expirydate", "");
                    }
                    obj.put("refdetail", (payment.getPayDetail().getCard() == null ? (payment.getPayDetail().getCheque() == null ? "" : payment.getPayDetail().getCheque().getDescription()) : payment.getPayDetail().getCard().getCardType()));

//                if (payment.getPayDetail() != null) {
                    obj.put("refno", (payment.getPayDetail().getCard() == null ? (payment.getPayDetail().getCheque() == null ? "" : payment.getPayDetail().getCheque().getChequeNo()) : payment.getPayDetail().getCard().getRefNo()));
                    obj.put("refname", (payment.getPayDetail().getCard() == null ? (payment.getPayDetail().getCheque() == null ? "" : payment.getPayDetail().getCheque().getBankName()) : payment.getPayDetail().getCard().getCardHolder()));
                    if (payment.getPayDetail().getCard() != null) {
                        obj.put("refcardno", payment.getPayDetail().getCard().getCardNo());
//                        obj.put("refexpdate", payment.getPayDetail().getCard().getExpiryDate());
                    }
//                }
                }
                obj.put("clearanceDate", "");
                obj.put("paymentStatus", false);
                if (payment.getPayDetail() != null) {
                    KwlReturnObject clearanceDate = accBankReconciliationObj.getBRfromJE(payment.getJournalEntry().getID(), payment.getCompany().getCompanyID(), false);
                    if (clearanceDate != null && clearanceDate.getEntityList() != null && clearanceDate.getEntityList().size() > 0) {
                        BankReconciliationDetail brd = (BankReconciliationDetail) clearanceDate.getEntityList().get(0);
                        if (brd.getBankReconciliation().getClearanceDate() != null) {
                            obj.put("clearanceDate", df.format(brd.getBankReconciliation().getClearanceDate()));
                            obj.put("paymentStatus", true);
                        }
                    }
                }

                if (payment.isIBGTypeTransaction()) {
                    obj.put("isIBGTypeTransaction", payment.isIBGTypeTransaction());
                    obj.put("ibgDetailsID", payment.getIbgreceivingbankdetails().getId());
                    obj.put("ibgCode", payment.getIbgCode());
                }

                jsonlist.add(obj);
            }
            //jobj.put("data", JArr);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getPaymentsJson : " + ex.getMessage(), ex);
        }
        return jsonlist;
    }

    public List<JSONObject> getBillingPaymentsJson(HashMap<String, Object> requestParams, List list, List<JSONObject> jsonlist) throws ServiceException {
        try {
            HashMap<String, Object> rRequestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
            String companyid = (String) requestParams.get("companyid");
            String currencyid = (String) requestParams.get("gcurrencyid");
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            DateFormat df = (DateFormat) requestParams.get("df");
            Iterator itr = list.iterator();
            //JSONArray jArr=new JSONArray();
            while (itr.hasNext()) {
                JSONArray jArr1 = new JSONArray();
                Object[] row = (Object[]) itr.next();
                BillingPayment receipt = (BillingPayment) row[0];
                Account acc = (Account) row[1];
                JSONObject obj = new JSONObject();
                obj.put("withoutinventory", true);
                obj.put("billid", receipt.getID());
                obj.put("companyid", receipt.getCompany().getCompanyID());
                obj.put("companyname", receipt.getCompany().getCompanyName());
                obj.put("entryno", receipt.getJournalEntry().getEntryNumber());
                obj.put("journalentryid", receipt.getJournalEntry().getID());
                obj.put("personid", acc.getID());
                obj.put("billno", receipt.getBillingPaymentNumber());
                obj.put("ismanydbcr", receipt.isIsmanydbcr());
                obj.put("bankCharges", receipt.getBankChargesAmount());
                obj.put("bankChargesCmb", receipt.getBankChargesAccount() != null ? receipt.getBankChargesAccount().getID() : "");
                obj.put("bankInterest", receipt.getBankInterestAmount());
                obj.put("bankInterestCmb", receipt.getBankInterestAccount() != null ? receipt.getBankInterestAccount().getID() : "");
                obj.put("paidToCmb", receipt.getPaidTo() == null ? "" : receipt.getPaidTo().getID());
                obj.put("currencysymbol", (receipt.getCurrency() == null ? currency.getCurrencyID() : receipt.getCurrency().getSymbol()));
                obj.put("externalcurrencyrate", receipt.getExternalCurrencyRate());
                obj.put("billdate", df.format(receipt.getJournalEntry().getEntryDate()));//receiptdate
                Iterator itrRow = receipt.getRows().iterator();

                rRequestParams.clear();
                filter_names.clear();
                filter_params.clear();
                filter_names.add("billingPayment.ID");
                filter_params.add(receipt.getID());
                rRequestParams.put("filter_names", filter_names);
                rRequestParams.put("filter_params", filter_params);
                KwlReturnObject pdoresult = accVendorPaymentobj.getBillingPaymentDetailOtherwise(rRequestParams);
                List<BillingPaymentDetailOtherwise> list1 = pdoresult.getEntityList();
                Iterator pdoRow = list1.iterator();
                double amount = 0;
                if (!receipt.getRows().isEmpty()) {
                    while (itrRow.hasNext()) {
                        amount += ((BillingPaymentDetail) itrRow.next()).getAmount();
                    }
                    obj.put("otherwise", false);
                } else if (pdoRow != null && list1.size() > 0) {
                    for (BillingPaymentDetailOtherwise billingPaymentDetailOtherwise : list1) {
                        if (receipt.getID().equals(billingPaymentDetailOtherwise.getBillingPayment().getID())) {
                            JSONObject obj1 = new JSONObject();
                            obj1.put("debitaccid", billingPaymentDetailOtherwise.getAccount().getID());
                            obj1.put("debitamt", billingPaymentDetailOtherwise.getAmount());
                            obj1.put("isdebit", billingPaymentDetailOtherwise.isIsdebit());
                            obj1.put("desc", billingPaymentDetailOtherwise.getDescription() != null ? billingPaymentDetailOtherwise.getDescription() : "");
                            obj1.put("prtaxid", billingPaymentDetailOtherwise.getTax() != null ? billingPaymentDetailOtherwise.getTax().getID() : "");
                            obj1.put("curamount", (billingPaymentDetailOtherwise.getAmount() + billingPaymentDetailOtherwise.getTaxamount()));
                            if (receipt.isIsmanydbcr()) {
                                if (billingPaymentDetailOtherwise.isIsdebit()) {
                                    amount += (billingPaymentDetailOtherwise.getAmount() + billingPaymentDetailOtherwise.getTaxamount());
                                } else {
                                    amount -= (billingPaymentDetailOtherwise.getAmount() + billingPaymentDetailOtherwise.getTaxamount());
                                }
                            } else {
                                amount = amount + (billingPaymentDetailOtherwise.getAmount() + billingPaymentDetailOtherwise.getTaxamount());
                            }
                            jArr1.put(obj1);
                        }
                    }

                    obj.put("otherwise", true);
                    obj.put("detailsjarr", jArr1);
                } else {
                    itrRow = receipt.getJournalEntry().getDetails().iterator();
                    while (itrRow.hasNext()) {
                        JournalEntryDetail jed = ((JournalEntryDetail) itrRow.next());
                        if (!jed.isDebit()) {
                            if (receipt.getDeposittoJEDetail() != null) {
                                amount = receipt.getDeposittoJEDetail().getAmount();
                            } else {
                                amount = jed.getAmount();
                            }
                        } else {
                            JSONObject obj1 = new JSONObject();
                            obj1.put("debitaccid", jed.getAccount().getID());
                            obj1.put("debitamt", jed.getAmount());
                            obj1.put("isdebit", jed.isDebit());
                            obj1.put("curamount", jed.getAmount());
                            obj1.put("desc", jed.getDescription() != null ? jed.getDescription() : "");
                            jArr1.put(obj1);
                        }
                    }
                    obj.put("otherwise", true);
                    obj.put("detailsjarr", jArr1);
                }
                obj.put("receipttype", "");
                KwlReturnObject result = accVendorPaymentobj.getBillingPaymentVendorNames(companyid, receipt.getID());
                List vNameList = result.getEntityList();
                Iterator vNamesItr = vNameList.iterator();
                String vendorNames = "";
                while (vNamesItr.hasNext()) {
                    String tempName = URLEncoder.encode((String) vNamesItr.next(), "UTF-8");
                    vendorNames += tempName;
                    vendorNames += ",";
                }
                vendorNames = vendorNames.substring(0, Math.max(0, vendorNames.length() - 1));
                KwlReturnObject vendorresult = accountingHandlerDAOobj.getObject(Vendor.class.getName(), acc.getID());
                Vendor vendor = (Vendor) vendorresult.getEntityList().get(0);
                obj.put("personemail", vendor != null ? vendor.getEmail() : "");
                obj.put("personname", vendorNames);
                obj.put("memo", receipt.getMemo());
                obj.put("deleted", receipt.isDeleted());
                obj.put("paymentmethod", (receipt.getPayDetail() == null ? "" : receipt.getPayDetail().getPaymentMethod().getMethodName()));
                obj.put("amount", authHandler.formattedAmount(amount, companyid));
                obj.put("currencysymbol", (receipt.getCurrency() == null ? currency.getSymbol() : receipt.getCurrency().getSymbol()));
                obj.put("currencyid", (receipt.getCurrency() == null ? currency.getCurrencyID() : receipt.getCurrency().getCurrencyID()));
                obj.put("methodid", (receipt.getPayDetail() == null ? "" : receipt.getPayDetail().getPaymentMethod().getID()));
                obj.put("detailtype", (receipt.getPayDetail() == null ? "" : receipt.getPayDetail().getPaymentMethod().getDetailType()));
                if (receipt.getPayDetail() != null) {
                    try {
                        obj.put("expirydate", (receipt.getPayDetail().getCard() == null ? "" : df.format(receipt.getPayDetail().getCard().getExpiryDate())));
                    } catch (IllegalArgumentException ae) {
                        obj.put("expirydate", "");
                    }
                    obj.put("refdetail", (receipt.getPayDetail().getCard() == null ? (receipt.getPayDetail().getCheque() == null ? "" : receipt.getPayDetail().getCheque().getDescription()) : receipt.getPayDetail().getCard().getCardType()));
                    obj.put("refno", (receipt.getPayDetail().getCard() == null ? (receipt.getPayDetail().getCheque() == null ? "" : receipt.getPayDetail().getCheque().getChequeNo()) : receipt.getPayDetail().getCard().getRefNo()));
                    obj.put("refname", (receipt.getPayDetail().getCard() == null ? (receipt.getPayDetail().getCheque() == null ? "" : receipt.getPayDetail().getCheque().getBankName()) : receipt.getPayDetail().getCard().getCardHolder()));
                    if (receipt.getPayDetail().getCard() != null) {
                        obj.put("refcardno", receipt.getPayDetail().getCard().getCardNo());
                        //obj.put("refexpdate", receipt.getPayDetail().getCard().getExpiryDate());
                    }
                }
                obj.put("clearanceDate", "");
                obj.put("paymentStatus", false);
                if (receipt.getPayDetail() != null) {
                    KwlReturnObject clearanceDate = accBankReconciliationObj.getBRfromJE(receipt.getJournalEntry().getID(), receipt.getCompany().getCompanyID(), false);
                    if (clearanceDate != null && clearanceDate.getEntityList() != null && clearanceDate.getEntityList().size() > 0) {
                        BankReconciliationDetail brd = (BankReconciliationDetail) clearanceDate.getEntityList().get(0);
                        if (brd.getBankReconciliation().getClearanceDate() != null) {
                            obj.put("clearanceDate", df.format(brd.getBankReconciliation().getClearanceDate()));
                            obj.put("paymentStatus", true);
                        }
                    }
                }
                jsonlist.add(obj);
            }
            //jobj.put("data", jArr);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getBillingPaymentsJson : " + ex.getMessage(), ex);
        }
        return jsonlist;
    }

    public ModelAndView getPaymentRows(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";

        try {
//            HashMap<String, Object> requestParams = new HashMap<String, Object>();
//            requestParams.put("gcurrencyid", AuthHandler.getCurrencyID(request));
//            requestParams.put("dateformat", AuthHandler.getDateOnlyFormatter(request));
//            requestParams.put("bills", request.getParameterValues("bills"));
//
//            JSONArray DataJArr = getPaymentRowsJson(requestParams);
//            jobj.put("data", DataJArr.length()>0?DataJArr:"");
            jobj = getPaymentRows(request, true);
            issuccess = true;
            msg = messageSource.getMessage("acc.common.rec", null, RequestContextUtils.getLocale(request));
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            msg = ex.getMessage();
        } catch (ServiceException ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            msg = ex.getMessage();
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView getVendorCnPayment(HttpServletRequest request, HttpServletResponse response) throws ServiceException {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        try {
            KwlReturnObject jobj1;
            String billid = request.getParameter("bills");
            String cnWithAdvanceInvoice = request.getParameter("cnwithadvanceinvoice");
            String noteType = request.getParameter("noteType");
            if (noteType.equals("Credit Note")) {
                jobj1 = accVendorPaymentobj.getVendorCnPayment(billid);
            } else {
                jobj1 = accVendorPaymentobj.getVendorDnPayment(billid);
            }
            List lst = jobj1.getEntityList();
            if (Boolean.parseBoolean(cnWithAdvanceInvoice) && lst.isEmpty()) {
                if (noteType.equals("Credit Note")) {
                    jobj1 = accVendorPaymentobj.getVendorCnPaymentWithAdvance(billid);
                } else {
                    jobj1 = accVendorPaymentobj.getVendorDnPaymentWithAdvance(billid);
                }
                lst = jobj1.getEntityList();
            }
            Iterator iter = lst.iterator();
            JSONArray jrr = new JSONArray();
            while (iter.hasNext()) {
                JSONObject jobj2 = new JSONObject();
                Object[] obj = (Object[]) iter.next();
                String tmp = obj[0].toString();
                String cnno = "";
                String noteid = "";
                String currencyid = "";
                String currencysymbol = "";
                double amountDue = 0.0;
                if (noteType.equals("Credit Note")) {
                    KwlReturnObject cnresult = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), obj[1].toString());
                    CreditNote cn = (CreditNote) cnresult.getEntityList().get(0);
                    noteid = cn.getID();
                    cnno = cn.getCreditNoteNumber();
                    amountDue = cn.getCnamountdue();
                    currencyid = cn.getCurrency().getCurrencyID();
                    currencysymbol = cn.getCurrency().getSymbol();
                    
                } else {
                    KwlReturnObject cnresult = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), obj[1].toString());
                    DebitNote cn = (DebitNote) cnresult.getEntityList().get(0);
                    cnno = cn.getDebitNoteNumber();
                    noteid = cn.getID();
                    amountDue = cn.getDnamountdue();
                    currencyid = cn.getCurrency().getCurrencyID();
                    currencysymbol = cn.getCurrency().getSymbol();
                }

                jobj2.put("select", true);
                jobj2.put("noteid", noteid);
                jobj2.put("noteno", cnno);
                jobj2.put("amount", obj[3].toString());
                jobj2.put("amountdue", obj[4].toString());
                jobj2.put("payment", obj[3].toString());
                jobj2.put("currencyid", currencyid);
                jobj2.put("currencysymbol", currencysymbol);
                jrr.put(jobj2);
            }
            jobj.put("data", jrr);
            jobj.put("count", lst.size());
            issuccess = true;
        } catch (Exception ex) {
            System.out.print(ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", "");
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView getBillingPaymentRows(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            jobj = getPaymentRows(request, false);
            issuccess = true;
            msg = messageSource.getMessage("acc.common.rec", null, RequestContextUtils.getLocale(request));
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            msg = ex.getMessage();
        } catch (ServiceException ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            msg = ex.getMessage();
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public JSONArray getBillingPaymentRowsJson(HashMap<String, Object> requestParams) throws ServiceException {
        JSONArray JArr = new JSONArray();
        try {
            String currencyid = (String) requestParams.get("gcurrencyid");
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            boolean isVendorPaymentEdit = (Boolean.parseBoolean((String) requestParams.get("isReceiptEdit")));
            String[] billingreceipt = (String[]) requestParams.get("bills");
            int i = 0;
            double taxPercent = 0;
            DateFormat df = (DateFormat) requestParams.get("dateformat");
            HashMap<String, Object> pRequestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            filter_names.add("billingPayment.ID");
            order_by.add("srno");
            order_type.add("asc");
            pRequestParams.put("filter_names", filter_names);
            pRequestParams.put("filter_params", filter_params);
            pRequestParams.put("order_by", order_by);
            pRequestParams.put("order_type", order_type);


            while (billingreceipt != null && i < billingreceipt.length) {
//                BillingPayment re=(BillingPayment)session.get(BillingPayment.class, billingreceipt[i]);
                KwlReturnObject presult = accountingHandlerDAOobj.getObject(BillingPayment.class.getName(), billingreceipt[i]);
                BillingPayment re = (BillingPayment) presult.getEntityList().get(0);
//                Iterator itr=re.getRows().iterator();
                filter_params.clear();
                filter_params.add(re.getID());
                KwlReturnObject grdresult = accVendorPaymentobj.getBillingPaymentDetails(pRequestParams);
                Iterator itr = grdresult.getEntityList().iterator();


                while (itr.hasNext()) {
                    BillingPaymentDetail row = (BillingPaymentDetail) itr.next();
                    JSONObject obj = new JSONObject();
                    obj.put("billid", isVendorPaymentEdit ? row.getBillingGoodsReceipt().getID() : re.getID());
                    obj.put("srno", row.getSrno());
                    obj.put("rowid", row.getID());
                    obj.put("transectionno", row.getBillingGoodsReceipt().getBillingGoodsReceiptNumber());
                    obj.put("transectionid", (isVendorPaymentEdit ? row.getBillingGoodsReceipt().getVendorEntry().getAmount() : row.getBillingGoodsReceipt().getID()));
                    obj.put("amount", row.getAmount());
                    obj.put("amountpaid", row.getAmount());
                    obj.put("currencysymbol", (row.getBillingPayment().getCurrency() == null ? currency.getCurrencyID() : row.getBillingPayment().getCurrency().getSymbol()));
                    obj.put("duedate", df.format(row.getBillingGoodsReceipt().getDueDate()));
                    obj.put("creationdate", df.format(row.getBillingGoodsReceipt().getJournalEntry().getEntryDate()));
                    double totalamount = row.getBillingGoodsReceipt().getVendorEntry().getAmount();
                    obj.put("totalamount", totalamount);

                    KwlReturnObject amtrs = accGoodsReceiptobj.getAmtromBPD(row.getBillingGoodsReceipt().getID());
                    double ramount = amtrs.getEntityList().size() > 0 ? (Double) amtrs.getEntityList().get(0) : 0;
                    double amountdue = totalamount - ramount;

                    if (row.getBillingGoodsReceipt().getTax() != null) {
                        KwlReturnObject perresult = accTaxObj.getTaxPercent(row.getCompany().getCompanyID(), row.getBillingGoodsReceipt().getJournalEntry().getEntryDate(), row.getBillingGoodsReceipt().getTax().getID());
                        taxPercent = (Double) perresult.getEntityList().get(0);
                    }
                    obj.put("taxpercent", taxPercent);
                    obj.put("discount", row.getBillingGoodsReceipt().getDiscount() == null ? 0 : row.getBillingGoodsReceipt().getDiscount().getDiscountValue());
                    obj.put("payment", row.getBillingGoodsReceipt().getID());
                    obj.put("amountduenonnegative", (isVendorPaymentEdit ? amountdue + row.getAmount() : amountdue));
                    obj.put("totalamount", row.getBillingGoodsReceipt().getVendorEntry().getAmount());
                    JArr.put(obj);
                }
                i++;
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accVendorPaymentController.getBillingPaymentRowsJson : " + ex.getMessage(), ex);
        }
        return JArr;
    }

    public JSONObject getPaymentRows(HttpServletRequest request, boolean flag) throws SessionExpiredException, ServiceException {
        JSONObject jobj = new JSONObject();
        try {
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put("gcurrencyid", sessionHandlerImpl.getCurrencyID(request));
            requestParams.put("dateformat", authHandler.getDateOnlyFormat(request));
            requestParams.put("bills", request.getParameterValues("bills"));
            requestParams.put("isReceiptEdit", request.getParameter("isReceiptEdit"));
            JSONArray DataJArr = new JSONArray();
//            if(flag){
//                DataJArr = getPaymentRowsJson(requestParams); xz
//            }else{
            DataJArr = getBillingPaymentRowsJson(requestParams);
//            }
            jobj.put("data", DataJArr.length() > 0 ? DataJArr : "");
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getPaymentRows : " + ex.getMessage(), ex);
//            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jobj;
    }

    public ModelAndView exportPayment(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray jArr = new JSONArray();
        List<JSONObject> list = new ArrayList<JSONObject>();
        List<JSONObject> tempList = new ArrayList<JSONObject>();
        int limitValue = 0, startValue = 0, dataCount = 0;
        String view = "jsonView_ex";
        try {
            HashMap<String, Object> requestParams = getPaymentMap(request);
            String start = (String) requestParams.get("start");
            String limit = (String) requestParams.get("limit");
            boolean contraentryflag = request.getParameter("contraentryflag") != null;
            boolean isAdvancePayment = request.getParameter("advancePayment") != null;
            boolean isAdvanceToCustomer = request.getParameter("advanceToCustomer") != null;
            boolean isPostDatedCheque = request.getParameter("isPostDatedCheque") != null;
            boolean isDishonouredCheque = request.getParameter("isDishonouredCheque") != null;
            boolean isGlcode = request.getParameter("isGlcode") != null;
            boolean ispendingApproval = !StringUtil.isNullOrEmpty(request.getParameter("ispendingAproval"))?true:false;
            
            requestParams.put("contraentryflag", contraentryflag);
            requestParams.put("isadvancepayment", isAdvancePayment);
            requestParams.put("isadvancetocustomer", isAdvanceToCustomer);
            requestParams.put("isPostDatedCheque", isPostDatedCheque);
            requestParams.put("isDishonouredCheque", isDishonouredCheque);
            requestParams.put("isGlcode", isGlcode);
            requestParams.put("ispendingAproval",ispendingApproval);
            
            boolean onlyOpeningBalanceTransactionsFlag = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("onlyOpeningBalanceTransactionsFlag"))) {
                onlyOpeningBalanceTransactionsFlag = Boolean.parseBoolean(request.getParameter("onlyOpeningBalanceTransactionsFlag"));
            }
            boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
            String[] companyids = (consolidateFlag && request.getParameter("companyids") != null) ? request.getParameter("companyids").split(",") : sessionHandlerImpl.getCompanyid(request).split(",");
            String gcurrencyid = (consolidateFlag && request.getParameter("gcurrencyid") != null) ? request.getParameter("gcurrencyid") : sessionHandlerImpl.getCurrencyID(request);
            boolean eliminateflag = consolidateFlag;
//            if(consolidateFlag) {
            requestParams.put(Constants.start, "");
            requestParams.put(Constants.limit, "");
//            }
            KwlReturnObject result = null;
            KwlReturnObject billingResult = null;
            String companyid = "";
            for (int cnt = 0; cnt < companyids.length; cnt++) {
                companyid = companyids[cnt];
                request.setAttribute("companyid", companyid);
                request.setAttribute("gcurrencyid", gcurrencyid);
                requestParams.put("companyid", companyid);
                requestParams.put("gcurrencyid", gcurrencyid);

                tempList.clear();
                if (onlyOpeningBalanceTransactionsFlag) {    //To export opening balance records (To Print Data in PDF, CSV format)
                    result = accVendorPaymentobj.getAllOpeningBalancePayments(requestParams);
                    JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
//                    tempList = accVendorPaymentModuleServiceObj.getOpeningBalanceReceiptJsonForReport(request, result.getEntityList(), tempList);
                    tempList = accVendorPaymentModuleServiceObj.getOpeningBalanceReceiptJsonForReport(paramJobj, result.getEntityList(), tempList);
                } else {
                    result = accVendorPaymentobj.getPayments(requestParams);
                    tempList = accVendorPaymentModuleServiceObj.getPaymentsJson(requestParams, result.getEntityList(), tempList);
                }
                Collections.sort(tempList, Collections.reverseOrder(new VendorPaymentDateComparator()));
                list.addAll(tempList);
            }
            limitValue = list.size();
            startValue = 0;
            Iterator iterator = list.iterator();
            for (int i = 0; i < list.size(); i++) {
                if (i >= startValue && dataCount < limitValue) {
                    JSONObject jSONObject = (JSONObject) iterator.next();
                    jArr.put(jSONObject);
                    dataCount++;
                }
                if (dataCount == limitValue) {
                    break;
                }
            }
            jobj.put("data", jArr);
            jobj.put("count", list.size());
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateOnlyFormat(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    private class VendorPaymentDateComparator implements Comparator<JSONObject> {

        @Override
        public int compare(JSONObject o1, JSONObject o2) {   //sort data on date
            int result = 0;
            try {
                Date date1 = new Date(o1.getString("billdate"));
                Date date2 = new Date(o2.getString("billdate"));

                if (date1.getTime() > date2.getTime()) {
                    result = 1;
                } else if (date1.getTime() < date2.getTime()) {
                    result = -1;
                } else {
                    result = 0;
                }
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            }
            return result;
        }
    }

    public ModelAndView linkPayment(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
         boolean issuccess = false;
        String msg = "";
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("SP_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        try {
            List li = linkPayment(request);
            issuccess = true;
            msg = messageSource.getMessage("acc.field.PaymentinformationhasbeenLinkedtoVendorInvoicesuccessfully", null, RequestContextUtils.getLocale(request));
            txnManager.commit(status);
        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = "" + ex.getMessage();
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    public ModelAndView linkPaymentNew(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
         boolean issuccess = false;
        String msg = "";
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("SP_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        try {
            List li = linkPaymentNew(request);
            issuccess = true;
            msg = messageSource.getMessage("acc.field.PaymentinformationhasbeenLinkedtoVendorInvoicesuccessfully", null, RequestContextUtils.getLocale(request));
            txnManager.commit(status);
//            status = txnManager.getTransaction(def);
//            txnManager.commit(status);
//            status = txnManager.getTransaction(def);
//            txnManager.commit(status);
        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = "" + ex.getMessage();
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

     public List linkPayment(HttpServletRequest request) throws ServiceException, SessionExpiredException {
        List result = new ArrayList();
        Invoice invoice = null;
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            DateFormat df = authHandler.getDateOnlyFormat(request);
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            String paymentid =request.getParameter("paymentid");
            String invoiceids[] = request.getParameter("invoiceids").split(",");
            String paymentno =request.getParameter("paymentno");
            String invoicenos =request.getParameter("invoicenos");
            double amount = 0;

            String amounts[] = request.getParameter("amounts").split(",");

            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);

            KwlReturnObject receiptObj = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentid);
            Payment payment = (Payment) receiptObj.getEntityList().get(0);

            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
            JournalEntry je = null;
            JournalEntryDetail updatejed = null;
            double eternalCurrencyRate = 0d;
            boolean isopeningBalancePayment = payment.isIsOpeningBalencePayment();
            String jeid = "";
            if (payment.isNormalPayment()) {
                je = payment.getJournalEntry();
                jeid = je.getID();
                eternalCurrencyRate = je.getExternalCurrencyRate();
            }
            if (!payment.isNormalPayment() && payment.isIsOpeningBalencePayment()) {
                eternalCurrencyRate = payment.getExchangeRateForOpeningTransaction();
                amount = payment.getDepositAmount();
            }
//Commented the code becoz now only advance payment can be linked and in that we dont need to delete the je and create it again
//            if (payment.isNormalPayment()) {
//                //Delete entry from optimized table
//                accJournalEntryobj.deleteOnEditAccountJEs_optimized(jeid);
//
//                Iterator itrRow = je.getDetails().iterator();
//                updatejed = new JournalEntryDetail();
//                while (itrRow.hasNext()) {
//                    JournalEntryDetail jed = ((JournalEntryDetail) itrRow.next());
//                    if (!jed.isDebit()) {
//                        amount = jed.getAmount();
//                        updatejed = jed;
//                    } else {
//                        accJournalEntryobj.deleteJournalEntryDetailRow(jed.getID(), companyid);
//                    }
//                }
//            }            
           JSONArray jArr = new JSONArray();
           String vendorId="";
           String accountId="";
           String linkedInvoiceids="";
           String linkedInvoicenos="";
           
           Iterator itrRow = payment.getRows().iterator();
           Map<String,Double> paymentRowsHashMap=new HashMap<String, Double>();
           double paymentAmount=0.0;
           if (!payment.getRows().isEmpty()) {//deleting linked data if the Payment is parctially linked
                    while (itrRow.hasNext()) {
                        PaymentDetail paymentDetail=((PaymentDetail) itrRow.next());
                        paymentRowsHashMap.put(paymentDetail.getGoodsReceipt().getID(), paymentDetail.getAmount());
                        paymentAmount+=paymentDetail.getAmount();
                    }
                    accVendorPaymentobj.deletePaymentsDetailsAndUpdateAmountDue(payment.getID(),payment.getCompany().getCompanyID(),payment.getApprovestatuslevel());
                    HashMap<String, Object> requestParams = new HashMap();
                    requestParams.put(Constants.companyid, company.getCompanyID());
                    requestParams.put("gcurrencyid", company.getCurrency().getCurrencyID());
                    double externalCurrencyRate = 1d;
                    boolean isopeningBalanceRP = payment.isIsOpeningBalencePayment();
                    Date rpCreationDate = null;
                    rpCreationDate = payment.getCreationDate();
                    if (!payment.isNormalPayment() && payment.isIsOpeningBalencePayment()) {
                        externalCurrencyRate = payment.getExchangeRateForOpeningTransaction();
                    } else {
//                        rpCreationDate = payment.getJournalEntry().getEntryDate();
                        externalCurrencyRate = payment.getJournalEntry().getExternalCurrencyRate();
                    }
                    String fromcurrencyid = payment.getCurrency().getCurrencyID();
                    KwlReturnObject bAmt = null;
                    if (isopeningBalanceRP && payment.isConversionRateFromCurrencyToBase()) {// if Receipt is opening balance Receipt and Conversion rate is taken from user is Currency to base then following method will be called.
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, paymentAmount, fromcurrencyid, rpCreationDate, externalCurrencyRate);
                    } else {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, paymentAmount, fromcurrencyid, rpCreationDate, externalCurrencyRate);
                    }
                    double openingbalanceBaseAmountDue = (Double) bAmt.getEntityList().get(0);

                    payment.setOpeningBalanceAmountDue(payment.getOpeningBalanceAmountDue()+paymentAmount);
                    payment.setOpeningBalanceBaseAmountDue(payment.getOpeningBalanceBaseAmountDue()+openingbalanceBaseAmountDue);
           }
            for (int k = 0; k < invoiceids.length; k++) {//creating a hash map with payment and their linked invoice
                if (StringUtil.isNullOrEmpty(invoiceids[k])) {
                    continue;
                }
                double usedcnamount = 0d;
                if (!StringUtil.isNullOrEmpty(amounts[k])) {
                    usedcnamount = Double.parseDouble((String) amounts[k]);
                } else {
                    usedcnamount = 0;
                }
                if (usedcnamount == 0) {
                    continue;
                }
                KwlReturnObject grresult = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), invoiceids[k]);
                GoodsReceipt gr = (GoodsReceipt) grresult.getEntityList().get(0);
                if(linkedInvoiceids.equals("")&&gr!=null){
                    linkedInvoiceids+=gr.getID();
                    linkedInvoicenos+=gr.getGoodsReceiptNumber();
                }else if(gr!=null){
                    linkedInvoiceids+=","+gr.getID();
                    linkedInvoicenos+=","+gr.getGoodsReceiptNumber();
                }
                vendorId=gr.getVendor().getID();
                accountId=gr.getVendor().getAccount().getID();
                
                JSONObject jobj = new JSONObject();
                
                if(paymentRowsHashMap.containsKey(invoiceids[k])){
                    double actualAmount=paymentRowsHashMap.get(invoiceids[k]);
                    jobj.put("payment", Double.parseDouble(amounts[k])+actualAmount);
                    paymentRowsHashMap.remove(invoiceids[k]);
                }else{
                    jobj.put("payment", amounts[k]);
                }
                jobj.put("billid", invoiceids[k]);
                jobj.put("isopeningBalancePayment", isopeningBalancePayment);
                jobj.put("isConversionRateFromCurrencyToBase", payment.isConversionRateFromCurrencyToBase());
                jArr.put(jobj);
            }
            
            for (Entry<String, Double> entry : paymentRowsHashMap.entrySet()) {//creating json for saving linked data
                JSONObject jobj = new JSONObject();
                String key = entry.getKey();
                Double value = entry.getValue();
                jobj.put("payment", value);
                jobj.put("billid", key);
                jobj.put("isopeningBalancePayment", isopeningBalancePayment);
                jobj.put("isConversionRateFromCurrencyToBase", payment.isConversionRateFromCurrencyToBase());
                jArr.put(jobj);
            }
            
            
            HashMap<String, Object> paymenthm = new HashMap<String, Object>();
            HashSet payDetails = savePaymentRows(payment, company, jArr, false, invoice);
            paymenthm.put("vendorId", vendorId);
            paymenthm.put("paymentid", payment.getID());
            paymenthm.put("pdetails", payDetails);
            accVendorPaymentobj.savePayment(paymenthm);

            //Commented the code becoz now only advance payment can be linked and in that we dont need to delete the je and create it again
//            JournalEntryDetail updatejed1 = null;
//            if (payment.isNormalPayment()) {
//                JSONObject jedjson = new JSONObject();
//                jedjson.put("companyid", companyid);
//                jedjson.put("srno", 2);
//                jedjson.put("amount", amount);
//                jedjson.put("accountid", accountId);
//                jedjson.put("debit", true);
//                jedjson.put("jeid", jeid);
//                KwlReturnObject kjed = accJournalEntryobj.addJournalEntryDetails(jedjson);
//                updatejed1 = (JournalEntryDetail) kjed.getEntityList().get(0);
//            }
//
//            if (jArr.length() > 0) {
//                boolean rateDecreased = false;
//                amount = 0;
//                JSONObject jobj = new JSONObject();
//                for (int i = 0; i < jArr.length(); i++) {
//                    jobj = jArr.getJSONObject(i);
//                    amount += jobj.getDouble("payment");
//                }
//                double amountDiff = oldPaymentRowsAmount(request, jArr, payment.getCurrency().getCurrencyID(), eternalCurrencyRate);
//                if (preferences.getForeignexchange() == null) {
//                    throw new AccountingException(messageSource.getMessage("acc.pay.forex", null, RequestContextUtils.getLocale(request)));
//                }
//                if (amountDiff != 0 && preferences.getForeignexchange() != null && payment.isNormalPayment()) {
//                    if (amountDiff < 0) {
//                        rateDecreased = true;
//                    }
//                    JSONObject jParam = new JSONObject();
//                    jParam.put("srno", 3);
//                    jParam.put("companyid", companyid);
//                    jParam.put("amount", rateDecreased ? (-1 * amountDiff) : amountDiff);
//                    jParam.put("accountid", preferences.getForeignexchange().getID());
//                    jParam.put("debit", rateDecreased ? true : false);
//                    jParam.put("jeid", jeid);
//                    accJournalEntryobj.addJournalEntryDetails(jParam);
//
//                    jParam = new JSONObject();
//                    jParam.put("jedid", updatejed1.getID());
//                    jParam.put("amount", rateDecreased ? (updatejed.getAmount() + amountDiff) : updatejed1.getAmount() + amountDiff);
//                    accJournalEntryobj.updateJournalEntryDetails(jParam);
//                }
//            }
//
//            if (payment.isNormalPayment()) {
//                //Insert new entries again in optimized table.
//                accJournalEntryobj.saveAccountJEs_optimized(jeid);
//            }
            auditTrailObj.insertAuditLog(AuditAction.LINKEDPAYMENT, "User " + sessionHandlerImpl.getUserFullName(request) + " has linked Payment "+paymentno+" to "+linkedInvoicenos, request,linkedInvoiceids);
        } catch (SessionExpiredException ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        } catch (Exception ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return result;
    }
     public List linkPaymentNew(HttpServletRequest request) throws ServiceException, SessionExpiredException {
        List result = new ArrayList();
        Invoice invoice = null;
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            DateFormat df = authHandler.getDateOnlyFormat(request);
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            String paymentid =request.getParameter("paymentid");
            double amount = 0;
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);

            KwlReturnObject receiptObj = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentid);
            Payment payment = (Payment) receiptObj.getEntityList().get(0);
            String paymentno =payment.getPaymentNumber();
            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
            JournalEntry je = null;
            JournalEntryDetail updatejed = null;
            double eternalCurrencyRate = 0d;
            boolean isopeningBalancePayment = payment.isIsOpeningBalencePayment();
            String jeid = "";
            if (payment.isNormalPayment()) {
                je = payment.getJournalEntry();
                jeid = je.getID();
                eternalCurrencyRate = je.getExternalCurrencyRate();
            }
            if (!payment.isNormalPayment() && payment.isIsOpeningBalencePayment()) {
                eternalCurrencyRate = payment.getExchangeRateForOpeningTransaction();
                amount = payment.getDepositAmount();
            }         
           JSONArray jArr = new JSONArray();
           String vendorId="";
           String accountId="";
           String linkedInvoiceids="";
           String linkedInvoicenos="";
           

           JSONArray linkJSONArray=request.getParameter("linkdetails")!=null?new JSONArray(request.getParameter("linkdetails")):new JSONArray();
           Map<String,Object> counterMap=new HashMap<>();
           counterMap.put("counter", 0);
            for (int k = 0; k < linkJSONArray.length(); k++) {//creating a hash map with payment and their linked invoice
                JSONObject jSONObject=linkJSONArray.getJSONObject(k);
                if (jSONObject.optDouble("invamount",0)!=0) {
                    String invoiceId=jSONObject.optString("billid","");
                    double invAmount=jSONObject.optDouble("invamount",0);
                    double exchangeratefortransaction=jSONObject.optDouble("exchangeratefortransaction",1);
                    KwlReturnObject grresult = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), invoiceId);
                    GoodsReceipt gr = (GoodsReceipt) grresult.getEntityList().get(0);
                    if(linkedInvoiceids.equals("")&&gr!=null){
                        linkedInvoiceids+=gr.getID();
                        linkedInvoicenos+=gr.getGoodsReceiptNumber();
                    }else if(gr!=null){
                        linkedInvoiceids+=","+gr.getID();
                        linkedInvoicenos+=","+gr.getGoodsReceiptNumber();
                    }
                    vendorId=gr.getVendor().getID();
                    accountId=gr.getVendor().getAccount().getID();
                    JSONObject jobj = new JSONObject();

                    jobj.put("enteramount", invAmount);
                    jobj.put("documentid", invoiceId);
                    jobj.put("isopeningBalancePayment", isopeningBalancePayment);
                    jobj.put("isConversionRateFromCurrencyToBase", payment.isConversionRateFromCurrencyToBase());
                    jobj.put("exchangeratefortransaction", exchangeratefortransaction);
                    jArr.put(jobj);
                    
                }
            }
            
            HashMap<String, Object> paymenthm = new HashMap<String, Object>();
            HashMap<String, Object> linkDetails = saveLinkedPaymentDetails(request, payment, company, jArr, false,Constants.AdvancePayment,counterMap);
            paymenthm.put("vendorId", vendorId);
            paymenthm.put("paymentid", payment.getID());
            paymenthm.put("linkDetails", linkDetails.get("linkDetailPayment"));
            accVendorPaymentobj.savePayment(paymenthm);
            auditTrailObj.insertAuditLog(AuditAction.LINKEDPAYMENT, "User " + sessionHandlerImpl.getUserFullName(request) + " has linked Payment "+paymentno+" to "+linkedInvoicenos, request,linkedInvoiceids);
        } catch (SessionExpiredException ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        } catch (Exception ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return result;
    }

    public ModelAndView linkBillingPayment(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("SP_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        try {
            List li = linkBillingPayment(request);
            issuccess = true;
            msg = messageSource.getMessage("acc.field.PaymentinformationhasbeenLinkedtoVendorInvoicesuccessfully", null, RequestContextUtils.getLocale(request));
            txnManager.commit(status);
//            status = txnManager.getTransaction(def);
//            txnManager.commit(status);
//            status = txnManager.getTransaction(def);
//            txnManager.commit(status);
        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = "" + ex.getMessage();
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public List linkBillingPayment(HttpServletRequest request) throws ServiceException, SessionExpiredException {
        List result = new ArrayList();
        BillingInvoice binvoice = null;//Set for contra entry
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            DateFormat df = authHandler.getDateOnlyFormat(request);
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            String paymentid = request.getParameter("paymentid");
            String invoiceid = request.getParameter("invoiceid");
            double amount = 0;

            KwlReturnObject grresult = accountingHandlerDAOobj.getObject(BillingGoodsReceipt.class.getName(), invoiceid);
            BillingGoodsReceipt gr = (BillingGoodsReceipt) grresult.getEntityList().get(0);

            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);

            KwlReturnObject receiptObj = accountingHandlerDAOobj.getObject(BillingPayment.class.getName(), paymentid);
            BillingPayment payment = (BillingPayment) receiptObj.getEntityList().get(0);

            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
            JournalEntry je = payment.getJournalEntry();
            String jeid = je.getID();

            //Delete entry from optimized table
            accJournalEntryobj.deleteOnEditAccountJEs_optimized(jeid);

            Iterator itrRow = je.getDetails().iterator();
            JournalEntryDetail updatejed = new JournalEntryDetail();
            while (itrRow.hasNext()) {
                JournalEntryDetail jed = ((JournalEntryDetail) itrRow.next());
                if (!jed.isDebit()) {
                    amount = jed.getAmount();
                    updatejed = jed;
                } else {
                    accJournalEntryobj.deleteJournalEntryDetailRow(jed.getID(), companyid);
                }
            }
            JSONArray jArr = new JSONArray();
            JSONObject jobj = new JSONObject();
            jobj.put("payment", amount);
            jobj.put("billid", invoiceid);
            jArr.put(jobj);

            HashMap<String, Object> paymenthm = new HashMap<String, Object>();
            HashSet payDetails = saveBillingPaymentRows(payment, company, jArr, false, binvoice);
            paymenthm.put("billingPaymentid", payment.getID());
            paymenthm.put("bpdetails", payDetails);
            accVendorPaymentobj.saveBillingPayment(paymenthm);

            JSONObject jedjson = new JSONObject();
            jedjson.put("companyid", companyid);
            jedjson.put("srno", 2);
            jedjson.put("amount", amount);
            jedjson.put("accountid", gr.getVendor().getID());
            jedjson.put("debit", true);
            jedjson.put("jeid", jeid);
            KwlReturnObject kjed = accJournalEntryobj.addJournalEntryDetails(jedjson);
            JournalEntryDetail updatejed1 = (JournalEntryDetail) kjed.getEntityList().get(0);


            if (jArr.length() > 0) {
                boolean rateDecreased = false;
                amount = 0;
                for (int i = 0; i < jArr.length(); i++) {
                    jobj = jArr.getJSONObject(i);
                    amount += jobj.getDouble("payment");
                }
                double amountDiff = oldBillingPaymentRowsAmount(request, jArr, payment.getCurrency().getCurrencyID(), je.getExternalCurrencyRate());
                if (preferences.getForeignexchange() == null) {
                    throw new AccountingException(messageSource.getMessage("acc.pay.forex", null, RequestContextUtils.getLocale(request)));
                }
                if (amountDiff != 0 && preferences.getForeignexchange() != null) {
                    if (amountDiff < 0) {
                        rateDecreased = true;
                    }
                    JSONObject jParam = new JSONObject();
                    jParam.put("srno", 3);
                    jParam.put("companyid", companyid);
                    jParam.put("amount", rateDecreased ? (-1 * amountDiff) : amountDiff);
                    jParam.put("accountid", preferences.getForeignexchange().getID());
                    jParam.put("debit", rateDecreased ? true : false);
                    jParam.put("jeid", jeid);
                    accJournalEntryobj.addJournalEntryDetails(jParam);

                    jParam = new JSONObject();
                    jParam.put("jedid", updatejed1.getID());
                    jParam.put("amount", rateDecreased ? (updatejed.getAmount() + amountDiff) : updatejed1.getAmount() + amountDiff);
                    accJournalEntryobj.updateJournalEntryDetails(jParam);
                }
            }

            //Insert new entries again in optimized table.
            accJournalEntryobj.saveAccountJEs_optimized(jeid);

        } catch (SessionExpiredException ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        } catch (Exception ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return result;
    }

    public ModelAndView deletePaymentMerged(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();

        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            jobj=accVendorPaymentModuleServiceObj.deletePaymentTemporaryJSON(paramJobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } 
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    /**
     * Added @Transactional instead of txnmanager - ERP-32983. Moved code
     * containing business logic to the AccVendorPaymentModuleServiceImpl No any
     * changes other than this has been done in code.
     * @param request
     * @param response
     * @return
     */
    public ModelAndView rejectPendingMakePayment(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            request.setAttribute("rejectPayment",true);
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            jobj=accVendorPaymentModuleServiceObj.rejectPaymentTemporaryJSON(paramJobj);
            issuccess = jobj.optBoolean(Constants.RES_success, false);
            msg = jobj.optString(Constants.RES_msg);
        } catch (SessionExpiredException ex) {
            msg = ""+ex.getMessage();
            Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = ""+ex.getMessage();
            Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try{
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch(JSONException ex){
                Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView deletePaymentPermanent(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;

        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("VP_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            accVendorPaymentModuleServiceObj.deletePaymentPermanent(paramJobj);
            txnManager.commit(status);
            issuccess = true;
            msg = messageSource.getMessage("acc.pay.del", null, RequestContextUtils.getLocale(request));  //"Payment(s) has been deleted successfully";
        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = "" + (ex.getMessage() != null ? ex.getMessage() : ex.getCause().getMessage());
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    public void deletePaymentPermanently(HttpServletRequest request, String companyid, Payment payment) throws AccountingException, SessionExpiredException, ServiceException, ParseException {
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            Map<String, Object> requestMap = AccountingManager.getGlobalParamsJson(paramJobj);
            KwlReturnObject result, result1;
            if (payment != null && payment.getRevalJeId() != null) {
                result = accJournalEntryobj.deleteJEDtails(payment.getRevalJeId(), companyid);// 2 For realised JE
                result = accJournalEntryobj.deleteJE(payment.getRevalJeId(), companyid);
            }
            /*
              Delete Forex Gains/Loss JEs
             */
            if (payment.getLinkDetailPayments() != null && !payment.getLinkDetailPayments().isEmpty()) {
                Set<LinkDetailPayment> linkedDetailPaymentList = payment.getLinkDetailPayments();
                for (LinkDetailPayment ldprow : linkedDetailPaymentList) {
                    if (!StringUtil.isNullOrEmpty(ldprow.getLinkedGainLossJE())) {
                        result = accJournalEntryobj.deleteJEDtails(ldprow.getLinkedGainLossJE(), companyid);
                        result = accJournalEntryobj.deleteJE(ldprow.getLinkedGainLossJE(), companyid);
                    }
                }
            }

            if (payment != null) {
                accVendorPaymentModuleServiceObj.updateOpeningBalance(payment, companyid);
                String countryID = payment.getCompany().getCountry().getID();
                accVendorPaymentModuleServiceObj.updateReceiptAdvancePaymentAmountDue(payment, companyid, countryID);
            }
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put("paymentid", payment.getID());
            requestParams.put("companyid", companyid);
            requestParams.put("paymentno", payment.getPaymentNumber());
            if (!StringUtil.isNullOrEmpty(payment.getID())) {

                if (payment.getLinkDetailPayments() != null && !payment.getLinkDetailPayments().isEmpty()) {
                    accVendorPaymentobj.deleteLinkDetailsAndUpdateAmountDue(requestMap,payment.getID(), companyid,false);
                }
                accVendorPaymentobj.deletePaymentPermanent(requestParams);
            }
        } catch (JSONException ex) {
            throw new AccountingException(messageSource.getMessage("acc.common.excp1", null, RequestContextUtils.getLocale(request)));
        }
    }


    public ModelAndView deleteOpeningPaymentPermanent(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;

        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("VP_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        try {
            deleteOpeningPaymentPermanent(request);
            txnManager.commit(status);
            issuccess = true;
            msg = messageSource.getMessage("acc.pay.del", null, RequestContextUtils.getLocale(request));  //"Payment(s) has been deleted successfully";
        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = "" + ex.getMessage();
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public void deleteOpeningPaymentPermanent(HttpServletRequest request) throws AccountingException, SessionExpiredException, ServiceException {
        String companyid = sessionHandlerImpl.getCompanyid(request);
        KwlReturnObject companyResult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
        Company company = (Company) companyResult.getEntityList().get(0);
        String countryID = company != null && company.getCountry() != null ? company.getCountry().getID() : "";
        String paymentid[] = request.getParameterValues("billidArray");
        String paymentno[] = request.getParameterValues("invoicenoArray");
        for (int count = 0; count < paymentid.length; count++) {
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put("paymentid", paymentid[count]);
            requestParams.put("companyid", companyid);
//             requestParams.put("paymentno",paymentno);
            try {
                if (!StringUtil.isNullOrEmpty(paymentid[count])) {
                    KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentid[count]);
                    Payment payment = (Payment) objItr.getEntityList().get(0);

                    if (payment != null) {
                        accVendorPaymentModuleServiceObj.updateOpeningBalance(payment, companyid);
                        accVendorPaymentModuleServiceObj.updateReceiptAdvancePaymentAmountDue(payment,companyid, countryID);
                    }

                    accVendorPaymentobj.deletePaymentPermanent(requestParams);
                    auditTrailObj.insertAuditLog(AuditAction.OPENING_BALANCE_DELETED, "User " + sessionHandlerImpl.getUserFullName(request) + " has deleted Opening Balance Payment Permanently " + paymentno, request, paymentid[count]);
                }

            } catch (Exception ex) {
                throw new AccountingException(messageSource.getMessage("acc.pay1.excp1", null, RequestContextUtils.getLocale(request)));
            }
        }
    }

    public ModelAndView updatePrint(HttpServletRequest request, HttpServletResponse response) throws ServiceException {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("IC_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

        TransactionStatus status = txnManager.getTransaction(def);
        try {
            KwlReturnObject result = null;
            String recordids = "";
            if (!StringUtil.isNullOrEmpty(request.getParameter("recordids"))) {
                recordids = request.getParameter("recordids");
            }
            ArrayList<String> SOIDList = CustomDesignHandler.getSelectedBillIDs(recordids);
            for (int cnt = 0; cnt < SOIDList.size(); cnt++) {
                boolean withInventory = Boolean.parseBoolean(request.getParameter("withInv"));
                HashMap<String, Object> hm = new HashMap<String, Object>();
                hm.put("paymentid", SOIDList.get(cnt));
                hm.put("isprinted", request.getParameter("isprinted"));
                if (!StringUtil.isNullOrEmpty(SOIDList.get(cnt))) {
                    result = accVendorPaymentobj.savePayment(hm);
                }
            }
            msg = messageSource.getMessage("acc.field.setsuccessfully", null, RequestContextUtils.getLocale(request));
            issuccess = true;
            txnManager.commit(status);
        } catch (ServiceException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    public ModelAndView printCheck(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobjDetails = new JSONObject();
        JSONObject jobj = new JSONObject();
        JSONArray jArr = new JSONArray();
        String msg = "";
        ChequeLayout chequeLayout=null;
        JSONObject chequeobj=new JSONObject();
        boolean issuccess = false;
        boolean isnewlayout = false;
        try {
            
            String  paymentid=request.getParameter("paymentid");
            String paymentno=request.getParameter("paymentno");
            String chequeno =request.getParameter("chequeno");
            KwlReturnObject result = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), request.getParameter("paymentMethod"));
            PaymentMethod payMethod = (PaymentMethod) result.getEntityList().get(0);
            
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            if (!StringUtil.isNullOrEmpty(payMethod.getID())) {
                requestParams.put("bankid", payMethod.getID());
            }
            String companyid=payMethod.getCompany().getCompanyID();
            
            int countryLanguageId = Constants.OtherCountryLanguageId; // 0
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            if (extraCompanyPreferences.isAmountInIndianWord()) {
                countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
            }
            int countryId = 0;
            if(extraCompanyPreferences != null && extraCompanyPreferences.getCompany() != null && extraCompanyPreferences.getCompany().getCountry()!= null && !StringUtil.isNullOrEmpty(extraCompanyPreferences.getCompany().getCountry().getID())){
                countryId = Integer.parseInt(extraCompanyPreferences.getCompany().getCountry().getID());
            }
            DateFormat DATE_FORMAT = new SimpleDateFormat(Constants.DEFAULT_FORMAT_CHECK);
            String prefixbeforamt = "";
            String dateformat="";
            KwlReturnObject result1 = accPaymentDAOobj.getChequeLayout(requestParams);
            List list = result1.getEntityList();
            Iterator itr = list.iterator();
            while (itr.hasNext()) {
                chequeLayout = (ChequeLayout) itr.next();
                chequeobj = new JSONObject(chequeLayout.getCoordinateinfo());               
                jobjDetails.put("dateLeft", chequeobj.optString("dateLeft","0"));
                jobjDetails.put("nameLeft", chequeobj.optString("nameLeft","0"));
                jobjDetails.put("amtinwordLeft", chequeobj.optString("amtinwordLeft","0"));
                jobjDetails.put("amtinwordLeftLine2", chequeobj.optString("amtinwordLeftLine2","0"));
                jobjDetails.put("amtLeft", chequeobj.optString("amtLeft","0"));
                jobjDetails.put("dateTop", chequeobj.optString("dateTop","0"));
                jobjDetails.put("nameTop", chequeobj.optString("nameTop","0"));
                jobjDetails.put("amtinwordTop", chequeobj.optString("amtinwordTop","0"));
                jobjDetails.put("amtinwordTopLine2", chequeobj.optString("amtinwordTopLine2","0"));
                jobjDetails.put("amtTop", chequeobj.optString("amtTop","0"));

                /*
                 Get US related additional cheque co-ordinates 
                 */
                if (chequeLayout.isActivateExtraFields()) {
                    if (!chequeobj.optString("memoLeft").equals("-1")) {
                        jobjDetails.put("memoLeft", chequeobj.optString("memoLeft", "0"));
                    }
                    if (!chequeobj.optString("memoTop").equals("-1")) {
                        jobjDetails.put("memoTop", chequeobj.optString("memoTop", "0"));
                    }
                    if (!chequeobj.optString("addressLine1Left").equals("-1")) {
                        jobjDetails.put("addressLine1Left", chequeobj.optString("addressLine1Left", "0"));
                    }
                    if (!chequeobj.optString("addressLine1Top").equals("-1")) {
                        jobjDetails.put("addressLine1Top", chequeobj.optString("addressLine1Top", "0"));
                    }
                    if (!chequeobj.optString("addressLine2Left").equals("-1")) {
                        jobjDetails.put("addressLine2Left", chequeobj.optString("addressLine2Left", "0"));
                    }
                    if (!chequeobj.optString("addressLine2Top").equals("-1")) {
                        jobjDetails.put("addressLine2Top", chequeobj.optString("addressLine2Top", "0"));
                    }
                    if (!chequeobj.optString("addressLine3Left").equals("-1")) {
                        jobjDetails.put("addressLine3Left", chequeobj.optString("addressLine3Left", "0"));
                    }
                    if (!chequeobj.optString("addressLine3Top").equals("-1")) {
                        jobjDetails.put("addressLine3Top", chequeobj.optString("addressLine3Top", "0"));
                    }
                    if (!chequeobj.optString("addressLine4Left").equals("-1")) {
                        jobjDetails.put("addressLine4Left", chequeobj.optString("addressLine4Left", "0"));
                    }
                    if (!chequeobj.optString("addressLine4Top").equals("-1")) {
                        jobjDetails.put("addressLine4Top", chequeobj.optString("addressLine4Top", "0"));
                    }
                }
                dateformat = chequeLayout.getDateFormat().getJavaForm();
               /*
                If 'AddCharacterInCheckDate' is true then don't remove '/' or '-' from check Date
               */
                if (!chequeLayout.isAddCharacterInCheckDate()) {
                    dateformat = dateformat.replaceAll("/", "");
                    dateformat = dateformat.replaceAll("-", "");
                }
                DATE_FORMAT = new SimpleDateFormat(dateformat);
                prefixbeforamt = chequeLayout.getAppendcharacter();
                isnewlayout = chequeLayout.isIsnewlayout();
            }
            boolean isFontStylePresent = chequeobj.has("fontStyle") && !StringUtil.isNullOrEmpty(chequeobj.getString("fontStyle")) ? true : false;
            String fontStyle = chequeobj.has("fontStyle") && !StringUtil.isNullOrEmpty(chequeobj.getString("fontStyle")) ? chequeobj.getString("fontStyle") : "";
            HashMap<String, Object> requestParams1 = new HashMap<String, Object>();
            requestParams1.put("fontStyle", fontStyle);
            char fontStyleChar;
            if (fontStyle.equals("1")) {
                fontStyleChar = 'b';
            } else if (fontStyle.equals("2")) {
                fontStyleChar = 'i';
            } else {
                fontStyleChar = 'p';
            }
            
            Date creationDate = new Date(request.getParameter("Printdate"));
            String date = DATE_FORMAT.format(creationDate);
            String formatted_date_with_spaces = "";
            if (dateformat.equalsIgnoreCase(Constants.MMMMddyyyy) ||(chequeLayout!=null && chequeLayout.isAddCharacterInCheckDate())) { //if Date format ='MMMM dd,yyyy'(January 23,2017) that's why no need to add space.
                    formatted_date_with_spaces=date;
            } else {
                for (int i = 0; i < date.length(); i++) {
                    formatted_date_with_spaces += date.charAt(i);
                    formatted_date_with_spaces += isnewlayout ? "&nbsp;&nbsp;&nbsp;" : "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";

                }
            }
            
            String netinword = "";
            DecimalFormat df=new DecimalFormat("#,###,###,##0.00");
  
            String amount2=request.getParameter("amount");
            String basecurrency=request.getParameter("currencyid");
            KwlReturnObject result2 = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), basecurrency);
            KWLCurrency currency = (KWLCurrency) result2.getEntityList().get(0);
            netinword = EnglishNumberToWordsOjb.convert(Double.parseDouble(String.valueOf(amount2)), currency,countryLanguageId);
            String[] amount = {"amount", df.format(Double.parseDouble(amount2))};
            if(Constants.indian_country_id == countryId){
                amount = new String[]{"amount", CustomDesignHandler.getAmountinCommaDecimal(Double.parseDouble(amount2),Constants.AMOUNT_DIGIT_AFTER_DECIMAL,countryId)};
            }
            String[] amount1 = {"amountinword", netinword};
            String s = StringUtil.DecodeText(request.getParameter("name"));
            String[] accName = {"accountName", s};
            String[] memo={"memo",""};
            String memoInRequest="";
            String address=request.getParameter("address");
            String[] addressArr = {"address", address};
            String address_Line1="",address_Line2="",address_Line3="",address_Line4="";
            /*
             If Other Field option ==true and address or memo is empty the put this value as empty
            */
            if (chequeLayout != null && chequeLayout.isActivateExtraFields()) {
                 memoInRequest = StringUtil.DecodeText(request.getParameter("memo"));
                 memo= new String[]{"memo", memoInRequest};
                 if (StringUtil.isNullOrEmpty(address)) {
                    jobjDetails.put("addressLine1", "");
                    jobjDetails.put("addressLine2", "");
                    jobjDetails.put("addressLine3", "");
                    jobjDetails.put("addressLine4", "");
                }
            }
            
            jobjDetails.put(amount[0], prefixbeforamt+amount[1]);
            String amount_first_line = "";
            String amount_second_line = "";
            String action=" Only.";
                if (amount1[1].length() > 34 && amount1[1].charAt(34) == ' ') {
                    amount_first_line = amount1[1].substring(0, 34);
                    amount_second_line = amount1[1].substring(34, amount1[1].length());
                    jobjDetails.put(amount1[0], amount_first_line );
                    jobjDetails.put("amountinword1", amount_second_line+action);
                } else if (amount1[1].length() > 34) {
                    amount_first_line = amount1[1].substring(0, 34);
                    amount_first_line = amount1[1].substring(0, amount_first_line.lastIndexOf(" "));
                    amount_second_line = amount1[1].substring(amount_first_line.length(), amount1[1].length());
                    jobjDetails.put(amount1[0], amount_first_line );
                    jobjDetails.put("amountinword1", amount_second_line+action);
                } else {
                    if(amount1[1].length()<27){
                      jobjDetails.put(amount1[0], "<"+fontStyleChar+">" + amount1[1]+action + "</"+fontStyleChar+">"); 
                      jobjDetails.put("amountinword1", "");
                    }
                    else{
                        jobjDetails.put(amount1[0],"<"+fontStyleChar+">"+amount1[1]+"</"+fontStyleChar+">"); 
                        jobjDetails.put("amountinword1","<"+fontStyleChar+">"+ action +"</"+fontStyleChar+">");   
                    }
                    
                }
            
            /*
             For address formating and putting in json Object
            */        
                if (!StringUtil.isNullOrEmpty(address) && chequeLayout != null && chequeLayout.isActivateExtraFields()) {
                int len = address.length();
                if (len <= 50) {
                    requestParams1.put("fontSize", chequeobj.optString("selectFontSizeForAddressLine1Txt", "'"));
                    requestParams1.put("fontString", addressArr[1]);
                    if (jobjDetails.has("addressLine1Left") && jobjDetails.has("addressLine1Top")) {
                        jobjDetails.put("addressLine1", authHandler.applyFontStyleForCheque(requestParams1));
                    } else {
                        jobjDetails.put("addressLine1", "");
                    }
                    jobjDetails.put("addressLine2", "");
                    jobjDetails.put("addressLine3", "");
                    jobjDetails.put("addressLine4", "");
                } else if (len > 50 && len <= 100) {
                    address_Line1 = addressArr[1].substring(0, 50);
                    if (addressArr[1].charAt(50) == ' ' || addressArr[1].charAt(50) == '\n') {
                        address_Line1 = addressArr[1].substring(0, 50);
                    } else if (address_Line1.lastIndexOf(" ") > 0) {
                        address_Line1 = addressArr[1].substring(0, address_Line1.lastIndexOf(" "));
                    } else {
                        address_Line1 = addressArr[1].substring(0, address_Line1.lastIndexOf("\n"));
                    }
                    address_Line2 = addressArr[1].substring(address_Line1.length(), addressArr[1].length());
                    requestParams1.put("fontSize", chequeobj.optString("selectFontSizeForAddressLine1Txt", "'"));
                    requestParams1.put("fontString", address_Line1);
                    if (jobjDetails.has("addressLine1Left") && jobjDetails.has("addressLine1Top")) {
                        jobjDetails.put("addressLine1", authHandler.applyFontStyleForCheque(requestParams1));
                    } else {
                        jobjDetails.put("addressLine1", "");
                    }
                    requestParams1.put("fontSize", chequeobj.optString("selectFontSizeForAddressLine2Txt", "'"));
                    requestParams1.put("fontString", address_Line2);
                    if (jobjDetails.has("addressLine2Left") && jobjDetails.has("addressLine2Top")) {
                        jobjDetails.put("addressLine2", authHandler.applyFontStyleForCheque(requestParams1));
                    } else {
                        jobjDetails.put("addressLine2", "");
                    }

                    jobjDetails.put("addressLine3", "");
                    jobjDetails.put("addressLine4", "");

                } else if (len > 100 && len <= 150) {
                    address_Line1 = addressArr[1].substring(0, 50);
                    if (addressArr[1].charAt(50) == ' ' || addressArr[1].charAt(50) == '\n') {
                        address_Line1 = addressArr[1].substring(0, 50);
                    } else if (address_Line1.lastIndexOf(" ") > 0) {
                        address_Line1 = addressArr[1].substring(0, address_Line1.lastIndexOf(" "));
                    } else {
                        address_Line1 = addressArr[1].substring(0, address_Line1.lastIndexOf("\n"));
                    }
                    address_Line2 = addressArr[1].substring(address_Line1.length(), 100);

                    if (addressArr[1].charAt(100) == ' ' || addressArr[1].charAt(100) == '\n') {
                        address_Line2 = addressArr[1].substring(address_Line1.length(), 100);
                    } else if (address_Line1.lastIndexOf(" ") > 0) {
                        address_Line2 = addressArr[1].substring(address_Line1.length(), (address_Line1 + address_Line2).lastIndexOf(" "));
                    } else {
                        address_Line2 = addressArr[1].substring(address_Line1.length(), (address_Line1 + address_Line2).lastIndexOf("\n"));
                    }
                    address_Line3 = addressArr[1].substring((address_Line2.length() + address_Line2.length()), addressArr[1].length());

                    requestParams1.put("fontSize", chequeobj.optString("selectFontSizeForAddressLine1Txt", "'"));
                    requestParams1.put("fontString", address_Line1);
                    if (jobjDetails.has("addressLine1Left") && jobjDetails.has("addressLine1Top")) {
                        jobjDetails.put("addressLine1", authHandler.applyFontStyleForCheque(requestParams1));
                    } else {
                        jobjDetails.put("addressLine1", "");
                    }
                    requestParams1.put("fontSize", chequeobj.optString("selectFontSizeForAddressLine2Txt", "'"));
                    requestParams1.put("fontString", address_Line2);
                    if (jobjDetails.has("addressLine2Left") && jobjDetails.has("addressLine2Top")) {
                        jobjDetails.put("addressLine2", authHandler.applyFontStyleForCheque(requestParams1));
                    } else {
                        jobjDetails.put("addressLine2", "");
                    }
                    requestParams1.put("fontSize", chequeobj.optString("selectFontSizeForAddressLine3Txt", "'"));
                    requestParams1.put("fontString", address_Line3);

                    if (jobjDetails.has("addressLine3Left") && jobjDetails.has("addressLine3Top")) {
                        jobjDetails.put("addressLine3", authHandler.applyFontStyleForCheque(requestParams1));
                    } else {
                        jobjDetails.put("addressLine3", "");
                    }

                    jobjDetails.put("addressLine4", "");

                } else if (len > 150) {

                    address_Line1 = addressArr[1].substring(0, 50);
                    if (addressArr[1].charAt(50) == ' ' || addressArr[1].charAt(50) == '\n') {
                        address_Line1 = addressArr[1].substring(0, 50);
                    } else if (address_Line1.lastIndexOf(" ") > 0) {
                        address_Line1 = addressArr[1].substring(0, address_Line1.lastIndexOf(" "));
                    } else {
                        address_Line1 = addressArr[1].substring(0, address_Line1.lastIndexOf("\n"));
                    }
                    address_Line2 = addressArr[1].substring(address_Line1.length(), 100);

                    if (addressArr[1].charAt(100) == ' ' || addressArr[1].charAt(100) == '\n') {
                        address_Line2 = addressArr[1].substring(address_Line1.length(), 100);
                    } else if ((address_Line1 + address_Line2).lastIndexOf(" ") > 0) {
                        address_Line2 = addressArr[1].substring(address_Line1.length(), (address_Line1 + address_Line2).lastIndexOf(" "));
                    } else {
                        address_Line2 = addressArr[1].substring(address_Line1.length(), (address_Line1 + address_Line2).lastIndexOf("\n"));
                    }

                    address_Line3 = addressArr[1].substring((address_Line1.length() + address_Line2.length()), 150);

                    if (addressArr[1].charAt(150) == ' ' || addressArr[1].charAt(150) == '\n') {
                        address_Line3 = addressArr[1].substring((address_Line1.length() + address_Line2.length()), 150);
                    } else if ((address_Line1 + address_Line2 + address_Line3).lastIndexOf(" ") > 0) {
                        address_Line3 = addressArr[1].substring((address_Line1.length() + address_Line2.length()), (address_Line1 + address_Line2 + address_Line3).lastIndexOf(" "));
                    } else {
                        address_Line3 = addressArr[1].substring((address_Line1.length() + address_Line2.length()), (address_Line1 + address_Line2 + address_Line3).lastIndexOf("\n"));
                    }
                    address_Line4 = addressArr[1].substring((address_Line1.length() + address_Line2.length() + address_Line3.length()), addressArr[1].length());

                    requestParams1.put("fontSize", chequeobj.optString("selectFontSizeForAddressLine1Txt", "'"));
                    requestParams1.put("fontString", address_Line1);
                    if (jobjDetails.has("addressLine1Left") && jobjDetails.has("addressLine1Top")) {
                        jobjDetails.put("addressLine1", authHandler.applyFontStyleForCheque(requestParams1));
                    } else {
                        jobjDetails.put("addressLine1", "");
                    }
                    requestParams1.put("fontSize", chequeobj.optString("selectFontSizeForAddressLine2Txt", "'"));
                    requestParams1.put("fontString", address_Line2);
                    if (jobjDetails.has("addressLine2Left") && jobjDetails.has("addressLine2Top")) {
                        jobjDetails.put("addressLine2", authHandler.applyFontStyleForCheque(requestParams1));
                    } else {
                        jobjDetails.put("addressLine2", "");
                    }
                    requestParams1.put("fontSize", chequeobj.optString("selectFontSizeForAddressLine3Txt", "'"));
                    requestParams1.put("fontString", address_Line3);
                    if (jobjDetails.has("addressLine3Left") && jobjDetails.has("addressLine3Top")) {
                        jobjDetails.put("addressLine3", authHandler.applyFontStyleForCheque(requestParams1));
                    } else {
                        jobjDetails.put("addressLine3", "");
                    }
                    requestParams1.put("fontSize", chequeobj.optString("selectFontSizeForAddressLine4Txt", "'"));
                    requestParams1.put("fontString", address_Line4);
                    if (jobjDetails.has("addressLine4Left") && jobjDetails.has("addressLine4Top")) {
                        jobjDetails.put("addressLine4", authHandler.applyFontStyleForCheque(requestParams1));
                    } else {
                        jobjDetails.put("addressLine4", "");
                    }
                }

            }
            jobjDetails.put(accName[0], accName[1]);
            
            /*
             For memo formating and put in json
            */ 
            if (chequeLayout != null && chequeLayout.isActivateExtraFields()) {
                requestParams1.put("fontSize", chequeobj.optString("selectFontSizeForMemoTxt", "'"));
                requestParams1.put("fontString", memo[1]);
                if(jobjDetails.has("memoLeft") && jobjDetails.has("memoTop")) {
                   jobjDetails.put(memo[0], authHandler.applyFontStyleForCheque(requestParams1)); 
                }else{
                    jobjDetails.put(memo[0], ""); 
                }
            }
            
            jobjDetails.put("date", formatted_date_with_spaces);
            jobjDetails.put("isnewlayout", isnewlayout);
            jobjDetails.put("activateExtraFields", (chequeLayout!=null?chequeLayout.isActivateExtraFields():false));
            //for name
            if (chequeobj.has("dateFontSize") || isFontStylePresent) {
                if (isFontStylePresent && !StringUtil.isNullOrEmpty(chequeobj.getString("dateFontSize"))) {
                    formatted_date_with_spaces = "<font size=" + chequeobj.getString("dateFontSize") + "><" + fontStyleChar + ">" + formatted_date_with_spaces + "</" + fontStyleChar + "></font> ";
                    jobjDetails.put("date", formatted_date_with_spaces);
                } else if (!StringUtil.isNullOrEmpty(chequeobj.getString("dateFontSize"))) {
                   formatted_date_with_spaces = "<font size=" + chequeobj.getString("dateFontSize") + ">" + formatted_date_with_spaces + "</font> ";
                    jobjDetails.put("date", formatted_date_with_spaces);
                } else {
                    formatted_date_with_spaces = "<" + fontStyleChar + ">" + formatted_date_with_spaces + "</" + fontStyleChar + ">";
                    jobjDetails.put("date", formatted_date_with_spaces);

                }
            }
            //for name
            if (chequeobj.has("nameFontSize") || isFontStylePresent) {
                if (isFontStylePresent && !StringUtil.isNullOrEmpty(chequeobj.getString("nameFontSize"))) {
                    accName[1] = "<font size=" + chequeobj.getString("nameFontSize") + "><" + fontStyleChar + ">" + accName[1] + "</" + fontStyleChar + "></font> ";
                    jobjDetails.put(accName[0], accName[1]);
                } else if (!StringUtil.isNullOrEmpty(chequeobj.getString("nameFontSize"))) {
                    accName[1] = "<font size=" + chequeobj.getString("nameFontSize") + ">" + accName[1] + "</font> ";
                    jobjDetails.put(accName[0], accName[1]);
                } else {
                    accName[1] = "<" + fontStyleChar + ">" + accName[1] + "</" + fontStyleChar + ">";
                    jobjDetails.put(accName[0], accName[1]);

                }
            }
            
            //for amount in words
            if (chequeobj.has("amountInWordsFontSize") || isFontStylePresent) {
                if (isFontStylePresent && !StringUtil.isNullOrEmpty(chequeobj.getString("amountInWordsFontSize"))) {
                    amount_first_line = "<font size=" + chequeobj.getString("amountInWordsFontSize") + "><" + fontStyleChar + ">" + amount_first_line + "</" + fontStyleChar + "></font> ";
                    amount_second_line = "<font size=" + chequeobj.getString("amountInWordsFontSize") + "><" + fontStyleChar + ">" + amount_second_line +" "+action+ "</" + fontStyleChar + "></font> ";
                     if (amount1[1].length() > 34) {
                        jobjDetails.put(amount1[0], amount_first_line);
                        jobjDetails.put("amountinword1", amount_second_line);
                    } else if (amount1[1].length() < 27) {
                        amount1[1] = "<font size=" + chequeobj.getString("amountInWordsFontSize") + "><" + fontStyleChar + ">" + amount1[1] +" "+action+ "</" + fontStyleChar + "></font> ";
                        jobjDetails.put(amount1[0], amount1[1]);
                        jobjDetails.put("amountinword1", "");
                    }
                } else if (!StringUtil.isNullOrEmpty(chequeobj.getString("amountInWordsFontSize"))) {
                    amount_first_line = "<font size=" + chequeobj.getString("amountInWordsFontSize") + ">" + amount_first_line + "</font> ";
                    amount_second_line = "<font size=" + chequeobj.getString("amountInWordsFontSize") + ">" + amount_second_line +" "+action+ "</font> ";
                    if (amount1[1].length() > 34) {
                        jobjDetails.put(amount1[0], amount_first_line);
                        jobjDetails.put("amountinword1", amount_second_line);
                    } else if (amount1[1].length() < 27) {
                        amount1[1] = "<font size=" + chequeobj.getString("amountInWordsFontSize") + ">" + amount1[1] +" "+action+ "</font> ";
                        jobjDetails.put(amount1[0], amount1[1]);
                        jobjDetails.put("amountinword1", "");
                    }
                } else {
                    amount_first_line = "<" + fontStyleChar + ">" + amount_first_line + "</" + fontStyleChar + ">";
                    amount_second_line = "<" + fontStyleChar + ">" + amount_second_line +" "+action+ "</" + fontStyleChar + ">";
                     if (amount1[1].length() > 34) {
                        jobjDetails.put(amount1[0], amount_first_line);
                        jobjDetails.put("amountinword1", amount_second_line);
                    } else if (amount1[1].length() < 27) {
                         amount1[1] = "<" + fontStyleChar + ">" + amount1[1] + " "+action+"</" + fontStyleChar + ">";
                        jobjDetails.put(amount1[0], amount1[1]);
                        jobjDetails.put("amountinword1", "");
                    }
                }
            }
            
            //for amount in number
            if (chequeobj.has("amountFontSize") || isFontStylePresent) {
                if (isFontStylePresent && !StringUtil.isNullOrEmpty(chequeobj.getString("amountFontSize"))) {
                    amount[1] = "<font size=" + chequeobj.getString("amountFontSize") + "><" + fontStyleChar + ">" + prefixbeforamt+amount[1] + "</" + fontStyleChar + "></font> ";
                    jobjDetails.put(amount[0], amount[1]);
                } else if (!StringUtil.isNullOrEmpty(chequeobj.getString("amountFontSize"))) {
                    amount[1] = "<font size=" + chequeobj.getString("amountFontSize") + ">" + prefixbeforamt+amount[1] + "</font> ";
                    jobjDetails.put(amount[0], amount[1]);
                } else {
                    amount[1] = "<" + fontStyleChar + ">" + prefixbeforamt+amount[1] + "</" + fontStyleChar + ">";
                    jobjDetails.put(amount[0],amount[1]);

                }
            }

            jArr.put(jobjDetails);
           KwlReturnObject result3 = accPaymentDAOobj.updateChequePrint(paymentid,companyid);
            issuccess = true;
            auditTrailObj.insertAuditLog(AuditAction.MAKE_PAYMENT, "User " + sessionHandlerImpl.getUserFullName(request) + " has printed a cheque "+chequeno+" for "+accName[1]+" in payment " + paymentno, request, paymentid);
            msg = messageSource.getMessage("acc.pay.del", null, RequestContextUtils.getLocale(request));  //"Payment(s) has been deleted successfully";
        } catch (Exception ex) {

            msg = "" + ex.getMessage();
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);

                jobj.put("data", jArr);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    @Override
    public void setMessageSource(MessageSource ms) {
        this.messageSource = ms;

    }
    public Set<JournalEntryDetail> journalEntryDetailCommonObjectsForBankCharges(HttpServletRequest request, JournalEntry journalEntry, Payment payment, boolean bankCharge) throws SessionExpiredException, ServiceException, AccountingException {
        double amount = 0;
        Set jedetails = new HashSet();
        try {
            KwlReturnObject jedresult = null;
            JSONObject jedjson = null;
            JournalEntryDetail jed = null;
            JournalEntryDetail JEdeatilId = null;
            Account dipositTo = null;
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            double bankCharges = 0;
            double bankInterest = 0;
            String bankChargesAccid = request.getParameter("bankChargesCmb");
            String bankInterestAccid = request.getParameter("bankInterestCmb");
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            currencyid = (request.getParameter("currencyid") == null ? currency.getCurrencyID() : request.getParameter("currencyid"));

            KwlReturnObject result = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), request.getParameter("pmtmethod"));
            PaymentMethod payMethod = (PaymentMethod) result.getEntityList().get(0);

            dipositTo = payMethod.getAccount();

            String jeid = null;
            if (journalEntry != null) {
                jeid = journalEntry.getID();
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("bankCharges")) && !StringUtil.isNullOrEmpty(bankChargesAccid)) {
                bankCharges = Double.parseDouble(request.getParameter("bankCharges"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("bankInterest")) && !StringUtil.isNullOrEmpty(bankInterestAccid)) {
                bankInterest = Double.parseDouble(request.getParameter("bankInterest"));
            }
            // amount = Double.parseDouble(request.getParameter("amount"));
            //All Fore
            if (bankCharge && bankCharges != 0) {
                amount += bankCharges;
                jedjson = new JSONObject();
                jedjson.put("srno", jedetails.size() + 1);
                jedjson.put("companyid", companyid);
                //(If currency USD and base currency SGD, inv rate 0.81 n pay rate 0.80 then amount = 1234.57, amountDiff = -15.24, depositAmt = 1250 SGD)
                jedjson.put("amount", bankCharges);
                jedjson.put("accountid", bankChargesAccid);
                jedjson.put("debit", true);            // receipt side charges
                jedjson.put("jeid", jeid);

                jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                JEdeatilId = (JournalEntryDetail) jedresult.getEntityList().get(0);
                jedjson.put("jedid", JEdeatilId.getID());
                jed = accJournalEntryobj.getJournalEntryDetails(jedjson);

                jedetails.add(jed);
            }
            if (!bankCharge && bankInterest != 0) {
                amount += bankInterest;
                jedjson = new JSONObject();
                jedjson.put("srno", jedetails.size() + 1);
                jedjson.put("companyid", companyid);
                //(If currency USD and base currency SGD, inv rate 0.81 n pay rate 0.80 then amount = 1234.57, amountDiff = -15.24, depositAmt = 1250 SGD)
                jedjson.put("amount", bankInterest);
                jedjson.put("accountid", bankInterestAccid);
                jedjson.put("debit", true);    // receipt side charges
                jedjson.put("jeid", jeid);
                jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                JEdeatilId = (JournalEntryDetail) jedresult.getEntityList().get(0);
                jedjson.put("jedid", JEdeatilId.getID());
                jed = accJournalEntryobj.getJournalEntryDetails(jedjson);
                jedetails.add(jed);
            }
            if (amount != 0) {
                jedjson = new JSONObject();
                jedjson.put("srno", jedetails.size() + 1);
                jedjson.put("companyid", companyid);
                //(If currency USD and base currency SGD, inv rate 0.81 n pay rate 0.80 then amount = 1234.57, amountDiff = -15.24, depositAmt = 1250 SGD)
                jedjson.put("amount", amount);
                jedjson.put("accountid", dipositTo.getID());
                jedjson.put("debit", false);
                jedjson.put("jeid", jeid);
                jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                JEdeatilId = (JournalEntryDetail) jedresult.getEntityList().get(0);
                // jedetails.add(JEdeatilId);
                jedjson.put("jedid", JEdeatilId.getID());
                jed = accJournalEntryobj.getJournalEntryDetails(jedjson);
                jedetails.add(jed);
            }
        } catch (Exception e) {
            throw ServiceException.FAILURE("savePayment : " + e.getMessage(), e);
        }
        return jedetails;
    }
    
    public ModelAndView unlinkPaymentInvoices(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("SP_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        try {
            List li = unlinkPaymentNew(request);
            issuccess = true;
            msg = messageSource.getMessage("acc.field.PaymentinformationhasbeenUnLinkedtoVendorInvoicesuccessfully", null, RequestContextUtils.getLocale(request));
            txnManager.commit(status);
        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = "" + ex.getMessage();
            Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
}
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public List unlinkPaymentNew(HttpServletRequest request) throws ServiceException, SessionExpiredException {
        List result = new ArrayList();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String paymentid =request.getParameter("paymentid");
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);

            KwlReturnObject paymentKWLObj = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentid);
            Payment payment = (Payment) paymentKWLObj.getEntityList().get(0);
            String paymentno =payment.getPaymentNumber();
            
            String linkedInvoiceids="";
            String linkedInvoicenos="";
            List<String> linkedDetailInvoice = new ArrayList();
            JSONArray linkJSONArray=request.getParameter("linkdetails")!=null?new JSONArray(request.getParameter("linkdetails")):new JSONArray();
            for (int k = 0; k < linkJSONArray.length(); k++) {//creating a hash map with payment and their linked invoice
                JSONObject jSONObject=linkJSONArray.getJSONObject(k);
                String linkId=jSONObject.optString("linkdetailid","");
                linkedDetailInvoice.add(linkId);
            }
            
            double paymentexternalCurrencyRate = 1d;
            boolean isopeningBalanceRCP = payment.isIsOpeningBalencePayment();
            Date rcpCreationDate = null;
            rcpCreationDate = payment.getCreationDate();
            if (isopeningBalanceRCP) {
                paymentexternalCurrencyRate = payment.getExchangeRateForOpeningTransaction();
            } else {
//                rcpCreationDate = payment.getJournalEntry().getEntryDate();
                paymentexternalCurrencyRate = payment.getJournalEntry().getExternalCurrencyRate();
            }
            String fromcurrencyid = payment.getCurrency().getCurrencyID();
            
            String linkedDetailIDs = "";
            for(String invID : linkedDetailInvoice) {
                linkedDetailIDs = linkedDetailIDs.concat("'").concat(invID).concat("',");
            }
            if(!StringUtil.isNullOrEmpty(linkedDetailIDs.toString())) {
                linkedDetailIDs = linkedDetailIDs.substring(0, linkedDetailIDs.length()-1);
            }
            double sumOfTotalAmount = 0;
            Set<String> grIDSet = new HashSet<>();
            List<GoodsReceipt> invoiceList=new ArrayList<GoodsReceipt>();
            List<LinkDetailPayment> details = accVendorPaymentobj.getDeletedLinkedPaymentInvoices(payment, linkedDetailInvoice, companyid);
            for (LinkDetailPayment paymentDetail : details) {
                GoodsReceipt goodsreceipt = paymentDetail.getGoodsReceipt();
                boolean isOpeningInvoice = goodsreceipt.isIsOpeningBalenceInvoice();
                double externalCurrencyRateForLinking = paymentDetail.getExchangeRateForTransaction();
                sumOfTotalAmount += paymentDetail.getAmount();
                
                //Converting amount in invoice currency
                double ammountInGRCurrency;
                if (externalCurrencyRateForLinking != 0) {
                    ammountInGRCurrency = authHandler.round(paymentDetail.getAmount() / externalCurrencyRateForLinking, companyid);
                } else {
                    ammountInGRCurrency = paymentDetail.getAmountInGrCurrency();
                }

                //Converting Invoice amount in Base currency accrding to invoice exchange rate
//                Date invoiceCreationdate = isOpeningInvoice ? goodsreceipt.getCreationDate() : goodsreceipt.getJournalEntry().getEntryDate();
                Date invoiceCreationdate = goodsreceipt.getCreationDate();
                double externalCurrencyRate = isOpeningInvoice ? goodsreceipt.getExchangeRateForOpeningTransaction() : goodsreceipt.getJournalEntry().getExternalCurrencyRate();
                HashMap<String, Object> requestParams = new HashMap();
                requestParams.put(Constants.companyid, companyid);
                requestParams.put("gcurrencyid", company.getCurrency().getCurrencyID());
                KwlReturnObject bAmt = null;
//                if (isOpeningInvoice && goodsreceipt.isConversionRateFromCurrencyToBase()) {
//                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, ammountInGRCurrency, goodsreceipt.getCurrency().getCurrencyID(), invoiceCreationdate, externalCurrencyRate);
//                } else {
//                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, ammountInGRCurrency, goodsreceipt.getCurrency().getCurrencyID(), invoiceCreationdate, externalCurrencyRate);
//                }
//                double amountReceivedConvertedInInvoiceBaseCurrency = authHandler.round((Double) bAmt.getEntityList().get(0),companyid);
                double amountReceivedConvertedInInvoiceBaseCurrency = 0;
                
                if (isOpeningInvoice) {
                    double amountdue = goodsreceipt.getOpeningBalanceAmountDue();
                    /*
                     * set status flag for opening invoices
                     */
                    double amountdueforstatus = amountdue +  paymentDetail.getAmountInGrCurrency();
                    if (authHandler.round(amountdueforstatus, companyid) <= 0) {
                        goodsreceipt.setIsOpenPayment(false);
                    } else {
                        goodsreceipt.setIsOpenPayment(true);
                    }
                    if (goodsreceipt.isConversionRateFromCurrencyToBase()) {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, (goodsreceipt.getOpeningBalanceAmountDue() + paymentDetail.getAmountInGrCurrency()), goodsreceipt.getCurrency().getCurrencyID(), invoiceCreationdate, externalCurrencyRate);
                    } else {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, (goodsreceipt.getOpeningBalanceAmountDue() + paymentDetail.getAmountInGrCurrency()), goodsreceipt.getCurrency().getCurrencyID(), invoiceCreationdate, externalCurrencyRate);
                    }
                    goodsreceipt.setOpeningBalanceAmountDue(goodsreceipt.getOpeningBalanceAmountDue() + paymentDetail.getAmountInGrCurrency());
                    amountReceivedConvertedInInvoiceBaseCurrency = authHandler.round((Double) bAmt.getEntityList().get(0), companyid);
                    goodsreceipt.setOpeningBalanceBaseAmountDue(amountReceivedConvertedInInvoiceBaseCurrency);
                } else {
                    double amountdue = goodsreceipt.getInvoiceamountdue();
//                    double amountdueInBase = goodsreceipt.getInvoiceAmountDueInBase();
                    /*
                     * set status flag for amount due
                     */
                    double amountdueforstatus = amountdue + paymentDetail.getAmountInGrCurrency();
                    if (authHandler.round(amountdueforstatus, companyid) <= 0) {
                        goodsreceipt.setIsOpenPayment(false);
                    } else {
                        goodsreceipt.setIsOpenPayment(true);
                    }
                    goodsreceipt.setInvoiceamountdue(amountdue + paymentDetail.getAmountInGrCurrency());
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, (amountdue + paymentDetail.getAmountInGrCurrency()), goodsreceipt.getCurrency().getCurrencyID(), invoiceCreationdate, externalCurrencyRate);
                    amountReceivedConvertedInInvoiceBaseCurrency = authHandler.round((Double) bAmt.getEntityList().get(0), companyid);
                    goodsreceipt.setInvoiceAmountDueInBase(amountReceivedConvertedInInvoiceBaseCurrency);
                    if ((amountdue + paymentDetail.getAmountInGrCurrency()) != 0) {
                        goodsreceipt.setAmountDueDate(null);
                    }
                }
                
                linkedInvoicenos = linkedInvoicenos.concat(goodsreceipt.getGoodsReceiptNumber()).concat(",");
                invoiceList.add(goodsreceipt);
                grIDSet.add(goodsreceipt.getID());
                
                // check if Forex/Gain Loss JE generated. If yes then need to delete JE too
                if(paymentDetail.getLinkedGainLossJE()!=null && !paymentDetail.getLinkedGainLossJE().isEmpty()) {
                    deleteJEArray(paymentDetail.getLinkedGainLossJE(), companyid);
                }
                if (paymentDetail != null && !StringUtil.isNullOrEmpty(paymentDetail.getRevalJeId()) ) {
                    accJournalEntryobj.deleteJEDtails(paymentDetail.getRevalJeId(), companyid);
                    accJournalEntryobj.deleteJE(paymentDetail.getRevalJeId(), companyid);
                }
                if (paymentDetail != null && !StringUtil.isNullOrEmpty(paymentDetail.getRevalJeIdPayment()) ) {
                    accJournalEntryobj.deleteJEDtails(paymentDetail.getRevalJeIdPayment(), companyid);
                    accJournalEntryobj.deleteJE(paymentDetail.getRevalJeIdPayment(), companyid);
                }
                if (!StringUtil.isNullOrEmpty(paymentDetail.getLinkedGSTJE())) {
                    /**
                     * Delete tax adjustment journal entry in purchase invoice
                     * is unlinked from payment.
                     */
                    deleteJEArray(paymentDetail.getLinkedGSTJE(), companyid);
                }
                /* Deleting Linking iformation of Received Payment from Linking table if it is unlinked*/
                HashMap<String, Object> linkingrequestParams = new HashMap<String, Object>();
                linkingrequestParams.put("paymentid", payment.getID());
                linkingrequestParams.put("linkedTransactionID", paymentDetail.getGoodsReceipt().getID());
                linkingrequestParams.put("unlinkflag", true);
                accVendorPaymentobj.deleteLinkingInformationOfMP(linkingrequestParams);
            }
            
            if (sumOfTotalAmount!=0 && payment.getAdvanceDetails() != null && !payment.getAdvanceDetails().isEmpty()) {
                for (AdvanceDetail advanceDetail : payment.getAdvanceDetails()) {
                    double linkedAmountDue = advanceDetail.getAmountDue();
                    /**
                     * For link Transaction from Payment, Update Amount Due with
                     * rounding.
                     */
                    double finalamountdue = authHandler.round(linkedAmountDue + sumOfTotalAmount, companyid);
                    advanceDetail.setAmountDue(finalamountdue);
                    List<Object> objectList = new ArrayList<Object>();
                    objectList.add((Object) advanceDetail);
                    accAccountDAOobj.saveOrUpdateAll(objectList);
                }
            } else if(sumOfTotalAmount!=0 && isopeningBalanceRCP) {
                HashMap<String, Object> requestParams = new HashMap();
                requestParams.put(Constants.companyid, companyid);
                requestParams.put("gcurrencyid", company.getCurrency().getCurrencyID());
                KwlReturnObject bAmt = null;
                if (isopeningBalanceRCP && payment.isConversionRateFromCurrencyToBase()) {// if Receipt is opening balance Receipt and Conversion rate is taken from user is Currency to base then following method will be called.
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, sumOfTotalAmount, fromcurrencyid, rcpCreationDate, paymentexternalCurrencyRate);
                } else {
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, sumOfTotalAmount, fromcurrencyid, rcpCreationDate, paymentexternalCurrencyRate);
            }
                double amountPaymentConvertedInBaseCurrency = (Double) bAmt.getEntityList().get(0);
                payment.setOpeningBalanceAmountDue(sumOfTotalAmount + payment.getOpeningBalanceAmountDue());
                payment.setOpeningBalanceBaseAmountDue(amountPaymentConvertedInBaseCurrency + payment.getOpeningBalanceBaseAmountDue());
                List<Object> objectList = new ArrayList<Object>();
                objectList.add((Object) payment);
                accAccountDAOobj.saveOrUpdateAll(objectList);
            }
            if(!invoiceList.isEmpty()){
                List<Object> objectList = new ArrayList<Object>(invoiceList);
                accAccountDAOobj.saveOrUpdateAll(objectList);
            }
            if(!StringUtil.isNullOrEmpty(linkedInvoicenos)) {
                linkedInvoicenos = linkedInvoicenos.substring(0, linkedInvoicenos.length()-1);
            }
            accVendorPaymentobj.deleteSelectedLinkedPaymentInvoices(payment.getID(), linkedDetailIDs, companyid,"");
            if (!StringUtil.isNullOrEmpty(linkedInvoicenos)) {
                auditTrailObj.insertAuditLog(AuditAction.LINKEDRECEIPT, "User " + sessionHandlerImpl.getUserFullName(request) + " has unlinked Payment " + paymentno + " from Purchase Invoice(s) " + linkedInvoicenos, request, linkedInvoiceids);
            }

            //Delete Rouding JEs if created against PI
            String roundingJENo = "";
            String roundingIDs = "";
            String piIDs = "";
            for (String piID : grIDSet) {
                piIDs = piID + ",";
            }
            if (!StringUtil.isNullOrEmpty(piIDs)) {
                piIDs = piIDs.substring(0, piIDs.length() - 1);
            }
            KwlReturnObject jeResult = accJournalEntryobj.getRoundingJournalEntryByGRIds(piIDs, companyid);
            List<JournalEntry> jeList = jeResult.getEntityList();
            for (JournalEntry roundingJE : jeList) {
                roundingJENo = roundingJE.getEntryNumber() + ",";
                roundingIDs = roundingJE.getID() + ",";
                deleteJEArray(roundingJE.getID(), companyid);
            }
            if (!StringUtil.isNullOrEmpty(roundingJENo)) {
                roundingJENo = roundingJENo.substring(0, roundingJENo.length() - 1);
            }
            if (!StringUtil.isNullOrEmpty(roundingIDs)) {
                roundingIDs = roundingIDs.substring(0, roundingIDs.length() - 1);
            }
            if (!StringUtil.isNullOrEmpty(roundingJENo)) {
                auditTrailObj.insertAuditLog(AuditAction.ROUNDING_OFF_JE_DELETED, "User " + sessionHandlerImpl.getUserFullName(request) + " "+messageSource.getMessage("acc.roundingje.unlinkedpayment", null, RequestContextUtils.getLocale(request)) + " "+paymentno + " "+ messageSource.getMessage("acc.roundingje.frompurchaseinvoice", null, RequestContextUtils.getLocale(request))+ " "+linkedInvoicenos + "."+ messageSource.getMessage("acc.roundingje.roundingje", null, RequestContextUtils.getLocale(request))+" "+ roundingJENo + " "+messageSource.getMessage("acc.roundingje.roundingjedelted", null, RequestContextUtils.getLocale(request))+".", request, roundingIDs);
            }
        } catch (SessionExpiredException ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        } catch (Exception ex) {
            Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
        }
        return result;
    }
    public ModelAndView saveRepeatePaymentInfo(HttpServletRequest request, HttpServletResponse response) throws SessionExpiredException {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        String repeateid = "";
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("RIC_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        String detail = "";
        TransactionStatus status = txnManager.getTransaction(def);
        DateFormat datef=authHandler.getDateOnlyFormat();
        try {
            GregorianCalendar gc = new GregorianCalendar(); //It returns actual Date object            
            HashMap<String, Object> requestParams = new HashMap<String, Object>();  //Map for notification mail data
            String loginUserId = sessionHandlerImpl.getUserid(request);
            requestParams.put("loginUserId", loginUserId);
            DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
            HashMap<String, Object> dataMap = new HashMap<String, Object>();
            int intervalUnit = Integer.parseInt(request.getParameter("interval"));
            dataMap.put("intervalUnit", intervalUnit);
            boolean isActivate = StringUtil.isNullOrEmpty(request.getParameter("isactivate")) ? true : Boolean.parseBoolean(request.getParameter("isactivate"));
            int NoOfPaymentpost = Integer.parseInt(request.getParameter("NoOfPaymentpost"));
            dataMap.put("NoOfPaymentpost", NoOfPaymentpost);
            dataMap.put("intervalType", request.getParameter("intervalType"));
            Date startDate = df.parse(request.getParameter("startDate"));
            String action = "added";
            int chequeOption = 0;

            String approver = "";
            int notifyme = StringUtil.isNullOrEmpty(request.getParameter("notifyme")) ? 1 : Integer.parseInt(request.getParameter("notifyme"));
            chequeOption = StringUtil.isNullOrEmpty(request.getParameter("chequeOption")) ? 1 : Integer.parseInt(request.getParameter("chequeOption"));
            if (notifyme == 1) {  // 0 : Auto Recurring, 1: Pending Recurring MP
                dataMap.put("isactivate", false);
                approver = !StringUtil.isNullOrEmpty(request.getParameter("approver")) ? request.getParameter("approver") : "";
                dataMap.put("approver", approver);
                dataMap.put("ispendingapproval", true);    //1: Pending Recurring MP
                requestParams.put("ispendingapproval", true);
            } else {    //Auto Entry
                dataMap.put("approver", approver);
                dataMap.put("isactivate", isActivate);  //isActivate=true means recurring invoice is in active mode.                    
                dataMap.put("ispendingapproval", false);
                requestParams.put("ispendingapproval", false);
            }
            if (chequeOption == 1) {
                dataMap.put("autoGenerateChequeNumber", false);
            } else {
                dataMap.put("autoGenerateChequeNumber", true);
            }

            String repeateId = request.getParameter("repeateid");
            if (StringUtil.isNullOrEmpty(repeateId)) {
                dataMap.put("startDate", startDate);
                dataMap.put("nextDate", startDate);
                requestParams.put("nextDate", startDate);
                gc.setTime(startDate);
            } else {
                dataMap.put("id", repeateId);
                dataMap.put("nextDate", startDate); //In edit case, next generation date should not be increase.
                action = "updated";
                requestParams.put("nextDate", startDate);
                gc.setTime(startDate);
            }
            gc.add(Calendar.DAY_OF_YEAR, -1);
            Date prevDate = gc.getTime();
            
            String pdate=datef.format(prevDate);
            try{
                prevDate=datef.parse(pdate);
            }catch(ParseException ex){
                prevDate=gc.getTime();
            }
            
            dataMap.put("prevDate", prevDate);

            if (!StringUtil.isNullOrEmpty(request.getParameter("expireDate"))) {
                dataMap.put("expireDate", df.parse(request.getParameter("expireDate")));
                requestParams.put("prevDate", prevDate);
            }
            KwlReturnObject rObj = accVendorPaymentobj.saveRepeatMPInfo(dataMap);
            RepeatedPayment rMP = (RepeatedPayment) rObj.getEntityList().get(0);

            JSONObject MPjson = new JSONObject();
            String paymentId = request.getParameter("MPId") != null ? request.getParameter("MPId") : "";

            List<Payment> paymentList = new ArrayList<Payment>();
            KwlReturnObject paymentResult = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentId);
            Payment payment = (Payment) paymentResult.getEntityList().get(0);
            payment.setRepeatedPayment(rMP);
            paymentList.add(payment);
            accVendorPaymentobj.savePaymentObject(paymentList);
            if (!StringUtil.isNullOrEmpty(request.getParameter("detail"))) {
                repeateid = rMP.getId();
                int delcount = accVendorPaymentobj.DelRepeateJEMemo(repeateid, "RepeatedPaymentId");
                detail = request.getParameter("detail");
                JSONArray arrMemo = new JSONArray(detail);
                for (int i = 0; i < arrMemo.length(); i++) {
                    JSONObject jsonmemo = arrMemo.getJSONObject(i);
                    HashMap<String, Object> dataMapformemo = new HashMap<String, Object>();
                    dataMapformemo.put("no", Integer.parseInt(jsonmemo.get("no").toString()));
                    dataMapformemo.put("memo", jsonmemo.get("memo"));
                    dataMapformemo.put("RepeatedPaymentID", rMP.getId());
                    KwlReturnObject savememo = accJournalEntryobj.saveRepeateJEMemo(dataMapformemo);
                }
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("chequedetail"))) {
                repeateid = rMP.getId();
                int delcount = accVendorPaymentobj.DelRepeatePaymentChequeDetails(repeateid);
                detail = request.getParameter("chequedetail");
                JSONArray arrCheque = new JSONArray(detail);
                for (int i = 0; i < arrCheque.length(); i++) {
                    JSONObject jsonCheque = arrCheque.getJSONObject(i);
                    HashMap<String, Object> dataMapforCheque = new HashMap<String, Object>();
                    dataMapforCheque.put("no", Integer.parseInt(jsonCheque.get("no").toString()));
                    dataMapforCheque.put("date", df.parse(jsonCheque.getString("date")));
                    dataMapforCheque.put("RepeatedPaymentID", rMP.getId());
                    if (chequeOption == 1) {
                        dataMapforCheque.put("chequenumber", jsonCheque.get("chequeno").toString());
                    }
                    KwlReturnObject saveChequeData = accJournalEntryobj.saveRepeatePaymentChequeDetail(dataMapforCheque);
                }
            }
            String entryno = request.getParameter("entryno");
            requestParams.put("entryno", entryno);
            requestParams.put(Constants.PAGE_URL, URLUtil.getPageURL(request, loginpageFull));
            auditTrailObj.insertAuditLog(AuditAction.MAKE_PAYMENT, "User " + sessionHandlerImpl.getUserFullName(request) + " has " + action + " a Recursive Payment " + payment.getPaymentNumber() + "", request, rMP.getId());
            msg = messageSource.getMessage("acc.makepayment.recurringPayment.savedMsg", null, RequestContextUtils.getLocale(request));
            issuccess = true;
            SendMailForRecurringPayment(requestParams);    //Notification Mail
            txnManager.commit(status);
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = "" + ex.getMessage();
            Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public void SendMailForRecurringPayment(HashMap requestParams) throws ServiceException {
        String loginUserId = (String) requestParams.get("loginUserId");
        User user = (User) accJournalEntryobj.getUserObject(loginUserId);
        KwlReturnObject returnObject = accountingHandlerDAOobj.getObject(Company.class.getName(), user.getCompany().getCompanyID());
        Company company = (Company) returnObject.getEntityList().get(0);
        String companyName = company.getCompanyName();
        String sendorInfo = (!company.isEmailFromCompanyCreator())?Constants.ADMIN_EMAILID:authHandlerDAOObj.getSysEmailIdByCompanyID(company.getCompanyID());
        boolean ispendingapproval = (Boolean) requestParams.get("ispendingapproval");
        String entryno = (String) requestParams.get("entryno");
        SimpleDateFormat sdf = new SimpleDateFormat();        
        String cEmail = user.getEmailID() != null ? user.getEmailID() : "";        
        if (!StringUtil.isNullOrEmpty(cEmail)) {
            try {
                String subject = "Recurring Payment Status Notification";
                //String sendorInfo = "admin@deskera.com";
                String htmlTextC = "";
                htmlTextC += "<br/>Hello " + user.getFirstName() + "<br/>";
                if (ispendingapproval) {
                    htmlTextC += "<br/>Recurring Payment <b>\"" + entryno + "\"</b> has been generated successfully <br/><br/> and sent it to you for approval.<br/>"
                            + "<p>Please review and approve it.</p>"
                            + "<p>Company Name:- %s</p>"
                            + "<p>Please check on Url:- %s</p>";
                } else {
                    htmlTextC += "<br/>Recurring Payment <b>\"" + entryno + "\"</b> has been generated successfully.<br/>";
                }
                htmlTextC += "<br/>Regards,<br/>";
                htmlTextC += "<br/>ERP System<br/>";
                htmlTextC += "<br/><br/>";
                htmlTextC += "<br/>This is an auto generated email. Do not reply<br/>";

                String plainMsgC = "";
                plainMsgC += "\nHello " + user.getFirstName() + "\n";
                if (ispendingapproval) {
                    plainMsgC += "\nRecurring Payment <b>\"" + entryno + "\"</b> has been generated successfully.<br/><br/> and sent it to you for approval.\n"
                            + "Company Name:- %s \n"
                            + "Please check on Url:- %s \n\n";
                } else {
                    plainMsgC += "\nRecurring Payment <b>\"" + entryno + "\"</b> has been generated successfully.<br/><br/>\n";
                }
                plainMsgC += "\nRegards,\n";
                plainMsgC += "\nERP System\n";
                plainMsgC += "\n\n";
                plainMsgC += "\nThis is an auto generated email. Do not reply.\n";
                
                if (requestParams.containsKey(Constants.PAGE_URL)) {
                     htmlTextC = String.format(htmlTextC, companyName, (String) requestParams.get(Constants.PAGE_URL));
                     plainMsgC = String.format(plainMsgC, companyName, (String) requestParams.get(Constants.PAGE_URL));
                }
                Map<String, Object> smtpConfigMap = authHandler.getSMTPConfigMap(company);
                SendMailHandler.postMail(new String[]{cEmail}, subject, htmlTextC, plainMsgC, sendorInfo, smtpConfigMap);
            } catch (Exception ex) {
                Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
}
    public ModelAndView activateDeactivatePayment(HttpServletRequest request, HttpServletResponse response) throws SessionExpiredException {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("JEC_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

        TransactionStatus status = txnManager.getTransaction(def);
        try {
            msg = activateDeactivatePayment(request);
            txnManager.commit(status);
            issuccess = true;            
        } catch (AccountingException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, "accVendorPaymentControllerNew.activateDeactivatePayment", ex);
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, "accVendorPaymentControllerNew.activateDeactivatePayment", ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (Exception ex) {
                Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, "accVendorPaymentControllerNew.activateDeactivatePayments", ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public String activateDeactivatePayment(HttpServletRequest request) throws SessionExpiredException, AccountingException, ServiceException {
        String msg = "";
        try {
            JSONArray jArr = new JSONArray(request.getParameter("data"));
            String companyid = sessionHandlerImpl.getCompanyid(request);
            for (int i = 0; i < jArr.length(); i++) {
                JSONObject jobj = jArr.getJSONObject(i);
                if (!StringUtil.isNullOrEmpty(jobj.getString("repeatedid"))) {
                    String repeateid  = jobj.getString("repeatedid");
                    boolean isactivate = jobj.optBoolean("isactivate");
                    boolean ispendingapproval = jobj.optBoolean("ispendingapproval");
                    if(ispendingapproval){
                        accJournalEntryobj.approveRecurringJE(repeateid, false);    
                        msg = "Recurring Payment(s) has been approved successfully.";
                    } else {
                        accVendorPaymentobj.activateDeactivatePayment(repeateid, isactivate);
                        msg = "Recurring Payment(s) has been updated successfully.";                       
                    }
                }
            }
        } catch(Exception ex){
            Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, "accVendorPaymentControllerNew.activateDeactivatePayment", ex);
        }
        return msg;
    }
    @Deprecated     // FOR SDP-6095 Moved to Service Layer
    public double RefundPaymentForexGailLossAmount(HttpServletRequest request,JSONObject jobj, Payment payment ,String transactionCurrencyId, String currencyid, double externalCurrencyRate) throws ServiceException, SessionExpiredException, JSONException {        
        HashMap<String, Object> requestParams = new HashMap<String, Object>();
        requestParams.put("gcurrencyid",sessionHandlerImpl.getCurrencyID(request));
        requestParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
        requestParams.put("dateformat", authHandler.getDateOnlyFormat(request));
        double enterAmountPaymentCurrencyOld=0;
        double enterAmountTrancastionCurrencyNew=0;
        double amountdiff=0;
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            Date receiptDate=null;
            Double enteramount = jobj.getDouble("enteramount");
            String documentId = jobj.getString("documentid");

            KwlReturnObject resultObject = accountingHandlerDAOobj.getObject(ReceiptAdvanceDetail.class.getName(), documentId);
            ReceiptAdvanceDetail rad = (ReceiptAdvanceDetail) resultObject.getEntityList().get(0);
//                receiptDate = rad.getReceipt().getJournalEntry().getEntryDate();
                receiptDate = rad.getReceipt().getCreationDate();
                externalCurrencyRate = rad.getReceipt().getExternalCurrencyRate();

            //if Advance is Revaluated then we will revaluated rate
            HashMap<String, Object> invoiceId = new HashMap<>();
            invoiceId.put("invoiceid", rad.getReceipt().getID());
            invoiceId.put("companyid", sessionHandlerImpl.getCompanyid(request));
            KwlReturnObject result = accJournalEntryobj.getRevalInvoiceId(invoiceId);
            RevaluationHistory history = (result.getEntityList().size()) != 0 ? (RevaluationHistory) result.getEntityList().get(0) : null;
            if (history != null) {
                    externalCurrencyRate = history.getEvalrate();
            }
    
                enterAmountTrancastionCurrencyNew = enteramount;
            if (!StringUtil.isNullOrEmpty(jobj.optString("exchangeratefortransaction", "").toString())) {
                    double exchangeratefortransaction = Double.parseDouble(jobj.optString("exchangeratefortransaction", "1"));
                    enterAmountTrancastionCurrencyNew = enteramount / exchangeratefortransaction;
                    enterAmountTrancastionCurrencyNew = authHandler.round(enterAmountTrancastionCurrencyNew, companyid);
                    KwlReturnObject bAmtCurrencyFilter = null;
                    bAmtCurrencyFilter = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, enterAmountTrancastionCurrencyNew, transactionCurrencyId, currencyid, receiptDate, externalCurrencyRate);
                    enterAmountPaymentCurrencyOld = authHandler.round((Double) bAmtCurrencyFilter.getEntityList().get(0), companyid);
                    amountdiff=enteramount-enterAmountPaymentCurrencyOld;
                }

        }catch (Exception ex) {
            throw ServiceException.FAILURE("cndnPaymentForexGailLossAmount : " + ex.getMessage(), ex);
        }
        return (amountdiff);
    }
    
    public ModelAndView getChequeDetailsForRepeatedPayment(HttpServletRequest request, HttpServletResponse response) throws ServiceException {
        JSONObject jobj = new JSONObject();
        String msg = "";
        int count = 0;
        boolean isSuccess = false;
        try {
            String repeatePaymentId = request.getParameter("repeateid") == null ? "" : request.getParameter("repeateid");
            String companyId = sessionHandlerImpl.getCompanyid(request);
            DateFormat df = authHandler.getDateOnlyFormat(request);
            KwlReturnObject result = accVendorPaymentobj.getChequeDetailsForRepeatedPayment(repeatePaymentId);
            List<RepeatedPaymentChequeDetail> list = result.getEntityList();
            JSONArray jArr = new JSONArray();
            for (RepeatedPaymentChequeDetail r : list) {
                JSONObject obj = new JSONObject();
                obj.put("no", r.getCount());
                obj.put("chequedate", df.format(r.getChequeDate()));
                obj.put("chequeno", r.getChequeNumber() == null ? "" : r.getChequeNumber());
                jArr.put(obj);
            }
            jobj.put("data", jArr);
            isSuccess = true;
            count = jArr.length();
        } catch (Exception ex) {
            msg = ex.getMessage();
            throw ServiceException.FAILURE("accVendorPaymentControllernew.getChequeDetailsForRepeatedPayment : " + msg, ex);
        } finally {
            try {
                jobj.put("success", isSuccess);
                jobj.put("msg", msg);
                jobj.put("count", count);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        return new ModelAndView("jsonView", "model", jobj.toString());

    }
    
    public ModelAndView getPaymentLinkedInTransaction(HttpServletRequest request,HttpServletResponse response){
        JSONObject jobj = new JSONObject();
        String msg="";
        boolean issuccess=false;
        try{
        jobj = getPaymentLinkedInTransactions(request);
        issuccess=true;
        } catch(Exception ex){
            msg = "accvendorPaymentControllerNew.getPaymentLinkedInTransaction:" + ex.getMessage();
            Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public JSONObject getPaymentLinkedInTransactions(HttpServletRequest request) throws ServiceException{
        JSONObject obj = new JSONObject();
        JSONArray jArr = new JSONArray();
        try{
            String billid = request.getParameter("billid");
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String isFixedAsset = request.getParameter("isFixedAsset");
            DateFormat df = authHandler.getDateOnlyFormat();
            Map<String, Object> requestParams = new HashMap<>();
            requestParams.put(Constants.df, df);
            requestParams.put(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
            requestParams.put(Constants.companyKey, companyid);
        KwlReturnObject paymentResult = accountingHandlerDAOobj.getObject(Payment.class.getName(), billid);
        Payment payment = (Payment)paymentResult.getEntityList().get(0);
        if(payment.getLinkDetailPayments()!=null && !payment.getLinkDetailPayments().isEmpty()){            
            for(LinkDetailPayment adv:payment.getLinkDetailPayments()){
                JSONObject invobj =new JSONObject();
                GoodsReceipt goodsreceipt = adv.getGoodsReceipt();
                Date linkdate = adv.getPaymentLinkDate();
                Vendor vendor = goodsreceipt.getVendor();
                    invobj.put("billid", goodsreceipt.getID());
                    invobj.put("companyid", goodsreceipt.getCompany().getCompanyID());
                    invobj.put("companyname", goodsreceipt.getCompany().getCompanyName());
                    invobj.put("withoutinventory", "");
                    invobj.put("transactionNo", goodsreceipt.getGoodsReceiptNumber());   //delivery order no
                    invobj.put("duedate", goodsreceipt.getDueDate() != null ? df.format(goodsreceipt.getDueDate()) : "");
                    if (goodsreceipt.getJournalEntry() != null) {
                        invobj.put("date", df.format(goodsreceipt.getJournalEntry().getEntryDate()));
                        invobj.put("journalEntryId", goodsreceipt.getJournalEntry().getID());
                        invobj.put("journalEntryNo", goodsreceipt.getJournalEntry().getEntryNumber());  //journal entry no
                    }else{
                        Date tempdate = new Date(goodsreceipt.getCreatedon());
                        invobj.put("date", df.format(tempdate));  //date of invoice
                    }
                    invobj.put("linkingdate",df.format(linkdate));
                    invobj.put("mergedCategoryData", "Vendor Invoice");  //type of data
                    invobj.put("personname", vendor.getName());
                    invobj.put("personid", vendor.getID());
                    JournalEntry je = null;
                    JournalEntryDetail d = null;
                    if (goodsreceipt.isNormalInvoice()) {
                        je = goodsreceipt.getJournalEntry();
                        d = goodsreceipt.getVendorEntry();
                    }
                    double externalCurrencyRate = 0d;
                    Date creationDate = null;
                    String currencyid = goodsreceipt.getCurrency().getCurrencyID();
                    KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
                    KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
                    Account account = null;
                    creationDate = goodsreceipt.getCreationDate();
                    if (goodsreceipt.isIsOpeningBalenceInvoice() && !goodsreceipt.isNormalInvoice()) {
                        KwlReturnObject accObjItr = accountingHandlerDAOobj.getObject(Account.class.getName(), goodsreceipt.getVendor().getAccount().getID());
                        account = (Account) accObjItr.getEntityList().get(0);
                        externalCurrencyRate = goodsreceipt.getExchangeRateForOpeningTransaction();
                    } else {
                        account = d.getAccount();
                        externalCurrencyRate = je.getExternalCurrencyRate();
//                        creationDate = je.getEntryDate();
                    }
                    invobj.put("isOpeningBalanceTransaction", goodsreceipt.isIsOpeningBalenceInvoice());
                    invobj.put("isNormalTransaction", goodsreceipt.isNormalInvoice());
                    invobj.put("parentinvoiceid", goodsreceipt.getParentInvoice() != null ? goodsreceipt.getParentInvoice().getID() : "");
                    invobj.put("companyid", goodsreceipt.getCompany().getCompanyID());
                    invobj.put("companyname", goodsreceipt.getCompany().getCompanyName());
                    invobj.put("personid", vendor == null ? account.getID() : vendor.getID());
                    invobj.put("aliasname", vendor == null ? "" : vendor.getAliasname());
                    invobj.put("personemail", vendor == null ? "" : vendor.getEmail());
                    invobj.put("billno", goodsreceipt.getGoodsReceiptNumber());
                    invobj.put("currencyid", currencyid);
                    invobj.put("currencysymbol", (goodsreceipt.getCurrency() == null ? currency.getSymbol() : goodsreceipt.getCurrency().getSymbol()));
                    invobj.put("currencycode", (goodsreceipt.getCurrency() == null ? currency.getCurrencyCode() : goodsreceipt.getCurrency().getCurrencyCode()));
                    invobj.put("currencyname", (goodsreceipt.getCurrency() == null ? currency.getName() : goodsreceipt.getCurrency().getName()));
                    invobj.put("companyaddress", goodsreceipt.getCompany().getAddress());
                    invobj.put("companyname", goodsreceipt.getCompany().getCompanyName());
                    invobj.put("billto", goodsreceipt.getBillFrom());
                    invobj.put("isexpenseinv", goodsreceipt.isIsExpenseType());
                    invobj.put("shipto", goodsreceipt.getShipFrom());
                    invobj.put("journalentryid", je != null ? je.getID() : "");
                    invobj.put("externalcurrencyrate", externalCurrencyRate);
                    invobj.put("entryno", je != null ? je.getEntryNumber() : "");
                    invobj.put("date", df.format(creationDate));
                    invobj.put("shipdate", goodsreceipt.getShipDate() == null ? "" : df.format(goodsreceipt.getShipDate()));
                    invobj.put("duedate", df.format(goodsreceipt.getDueDate()));
                    invobj.put("personname", vendor == null ? account.getName() : vendor.getName());
                    invobj.put("personcode", vendor == null ? (account.getAcccode() == null ? "" : account.getAcccode()) : (vendor.getAcccode() == null ? "" : vendor.getAcccode()));
                    invobj.put("agent", goodsreceipt.getMasterAgent() == null ? "" : goodsreceipt.getMasterAgent().getID());
                    invobj.put("memo", goodsreceipt.getMemo());
                    invobj.put("posttext", goodsreceipt.getPostText());
                    invobj.put("shiplengthval", goodsreceipt.getShiplength());
                    invobj.put("invoicetype", goodsreceipt.getInvoicetype());
                    invobj.put("termname", vendor == null ? "" : ((vendor.getDebitTerm() == null) ? "" : vendor.getDebitTerm().getTermname()));
                    invobj.put("deleted", goodsreceipt.isDeleted());
                    invobj.put("taxincluded", goodsreceipt.getTax() == null ? false : true);
                    invobj.put("taxid", goodsreceipt.getTax() == null ? "" : goodsreceipt.getTax().getID());
                    invobj.put("taxname", goodsreceipt.getTax() == null ? "" : goodsreceipt.getTax().getName());
                    invobj.put("exchangerate", "1 " + currency.getCurrencyCode() + " = " + externalCurrencyRate + " " + (goodsreceipt.getCurrency() == null ? "" : goodsreceipt.getCurrency().getCurrencyCode()));
                    invobj.put("discount", goodsreceipt.getDiscount() == null ? 0 : goodsreceipt.getDiscount().getDiscountValue());
                    invobj.put("ispercentdiscount", goodsreceipt.getDiscount() == null ? false : goodsreceipt.getDiscount().isInPercent());
                    invobj.put("discountval", goodsreceipt.getDiscount() == null ? 0 : goodsreceipt.getDiscount().getDiscount());
                    invobj.put(CCConstants.JSON_costcenterid, je != null ? (je.getCostcenter() == null ? "" : je.getCostcenter().getID()) : "");
                    invobj.put(CCConstants.JSON_costcenterName, je != null ? (je.getCostcenter() == null ? "" : je.getCostcenter().getName()) : "");
                    invobj.put("isfavourite", goodsreceipt.isFavourite());
                    invobj.put("isprinted", goodsreceipt.isPrinted());
                    invobj.put("cashtransaction", goodsreceipt.isCashtransaction());
                    invobj.put("archieve", 0);
                    invobj.put("shipvia", goodsreceipt.getShipvia() == null ? "" : goodsreceipt.getShipvia());
                    invobj.put("fob", goodsreceipt.getFob() == null ? "" : goodsreceipt.getFob());
                    if (goodsreceipt.getTermsincludegst() != null) {
                        invobj.put(Constants.termsincludegst, goodsreceipt.getTermsincludegst());
                    }
                    invobj=AccountingAddressManager.getTransactionAddressJSON(invobj,goodsreceipt.getBillingShippingAddresses(),true);
                    invobj.put("termdays", goodsreceipt.getTermid() == null ? 0 : goodsreceipt.getTermid().getTermdays());
                    invobj.put("termid", goodsreceipt.getTermid() == null ? "" : goodsreceipt.getTermid().getID());
                    if (goodsreceipt.getLandedInvoice() != null) {
                        Set<GoodsReceipt> landInvoiceSet = goodsreceipt.getLandedInvoice();
                        String landedInvoiceId = "", landedInvoiceNumber = "";
                        for (GoodsReceipt grObj : landInvoiceSet) {
                            if (!(StringUtil.isNullOrEmpty(landedInvoiceId) && StringUtil.isNullOrEmpty(landedInvoiceId))) {
                                landedInvoiceId += ",";
                                landedInvoiceNumber += ",";
                            }
                            landedInvoiceId += grObj.getID();
                            landedInvoiceNumber += grObj.getGoodsReceiptNumber();
                        }
                        invobj.put("landedInvoiceID", landedInvoiceId);
                        invobj.put("landedInvoiceNumber", landedInvoiceNumber);
                    }
                    
                    
                    invobj.put("billto", goodsreceipt.getBillTo() == null ? "" : goodsreceipt.getBillTo());
                    invobj.put("shipto", goodsreceipt.getShipTo() == null ? "" : goodsreceipt.getShipTo());
                    invobj.put("isCapitalGoodsAcquired", goodsreceipt.isCapitalGoodsAcquired());
                    invobj.put("isRetailPurchase", goodsreceipt.isRetailPurchase());
                    invobj.put("importService", goodsreceipt.isImportService());
                    double invoiceOriginalAmt = 0d;
                    if (goodsreceipt.isIsOpeningBalenceInvoice()) {
                        invoiceOriginalAmt = goodsreceipt.getOriginalOpeningBalanceAmount();
                    } else {
                        invoiceOriginalAmt = goodsreceipt.getVendorEntry().getAmount();
                    }
                    KwlReturnObject invoiceTotalAmtInBaseResult = null;
                    if (goodsreceipt.isIsOpeningBalenceInvoice() && goodsreceipt.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                        invoiceTotalAmtInBaseResult = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, invoiceOriginalAmt, currencyid, creationDate, externalCurrencyRate);
                    } else {
                        invoiceTotalAmtInBaseResult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invoiceOriginalAmt, currencyid, creationDate, externalCurrencyRate);
                    }
                    double invoiceTotalAmountInBase = authHandler.round((Double) invoiceTotalAmtInBaseResult.getEntityList().get(0), companyid);
                    invobj.put("amount", invoiceOriginalAmt);
                    invobj.put("amountinbase", invoiceTotalAmountInBase);
                    jArr.put(invobj);
                }
            } 
                /**
                 * isAdvPayment flag is use to determine whether the Refund
                 * Payment is linked with Advance Receipt or Advance Payment is
                 * linked with refund Receipt.Because If refund Payment is linked with
                 * advance Receipt we display advance Receipt in linking
                 * information so there is no need to check whether advance
                 * Payment is linked to refund Receipt and vice versa. ERP-39559
                 */
            boolean isAdvPayment = false;
            if (payment.getAdvanceDetails() != null && !payment.getAdvanceDetails().isEmpty()) {
                for (AdvanceDetail adv : payment.getAdvanceDetails()) {
                    String advanceId = adv.getId();
                    List<Object[]> resultList1 = accVendorPaymentobj.getAdvancePaymentUsedInRefundReceipt(advanceId);
                    List<Object[]> resultList = new ArrayList<>();
                    if (resultList1 != null && !resultList1.isEmpty()) {
                        resultList.addAll(resultList1);
                    }
                    //advance Receipt used in refund receipt
                    if (adv.getReceiptAdvanceDetails() != null) { // advancedetailid is not null
                        String receiptAdvanceDetailid = adv.getReceiptAdvanceDetails().getId();
                        List<Object[]> resultList2 = accVendorPaymentobj.getAdvanceReceiptUsedInRefundPayment(receiptAdvanceDetailid);
                        if (resultList2 != null && !resultList2.isEmpty()) {
                            resultList.addAll(resultList2);
                        }
                    }
                    for (int i = 0; i < resultList.size(); i++) {
                        Object[] objArray = (Object[]) resultList.get(i);
                        String receiptNumber = objArray[0].toString();
                        String receiptId = objArray[2].toString();
                        KwlReturnObject receiptResult = accountingHandlerDAOobj.getObject(Receipt.class.getName(), receiptId);
                        Receipt receipt = (Receipt) receiptResult.getEntityList().get(0);
                        String vendor = receipt.getVendor();
                        requestParams.put("receiptNumber", receiptNumber);
                        requestParams.put("vendor", vendor);
                        JSONObject receiptObj = accVendorPaymentModuleServiceObj.getReceiptJSON(receipt,requestParams);
                        jArr.put(receiptObj);
                        isAdvPayment = true;
                    }
                }
                Set<LinkDetailPaymentToAdvancePayment> linkDetailPaymentToAdvancePaymentSet = payment.getLinkDetailPaymentsToAdvancePayment();
                if (linkDetailPaymentToAdvancePaymentSet != null && !linkDetailPaymentToAdvancePaymentSet.isEmpty()) {
                    for (LinkDetailPaymentToAdvancePayment linkDetailPaymentToAdvancePayment : linkDetailPaymentToAdvancePaymentSet) {
                        Receipt receipt = linkDetailPaymentToAdvancePayment.getReceipt();
                        if (receipt != null) {
                            JSONObject paymentObj = new JSONObject();
                            String vendor = receipt.getVendor();
                            requestParams.put("receiptNumber", receipt.getReceiptNumber());
                            requestParams.put("vendor", vendor);
                            paymentObj = accVendorPaymentModuleServiceObj.getReceiptJSON(receipt, requestParams);
                            jArr.put(paymentObj);
                            isAdvPayment = true;
                        }
                    }
                }
                if (!isAdvPayment) {
                    List resultList = accVendorPaymentobj.getAdvancePaymentLinkedWithRefundReceipt(payment.getID(), companyid);
                    for (int i = 0; i < resultList.size(); i++) {
                        Object[] objArray = (Object[]) resultList.get(i);
                        String receiptId = objArray[0].toString();
                        String receiptNumber = objArray[1].toString();
                        JSONObject paymentObj = new JSONObject();
                        KwlReturnObject receiptResult = accountingHandlerDAOobj.getObject(Receipt.class.getName(), receiptId);
                        Receipt receipt = (Receipt) receiptResult.getEntityList().get(0);
                        String vendor = receipt.getVendor();
                        requestParams.put("receiptNumber", receiptNumber);
                        requestParams.put("vendor", vendor);
                        paymentObj = accVendorPaymentModuleServiceObj.getReceiptJSON(receipt, requestParams);
                        jArr.put(paymentObj);
                    }
                }
                /*
                 * Get Credit Note Linked with Payment(Advence Payment)
                 */
                Set<LinkDetailPaymentToCreditNote> linkDetailReceipt = payment.getLinkDetailPaymentToCreditNote();
                for (LinkDetailPaymentToCreditNote LDR : linkDetailReceipt) {
                    CreditNote creditNote = LDR.getCreditnote();
                    if (creditNote != null) {
                        requestParams.put("linkingdate",LDR.getPaymentLinkDate());
                        jArr = getCreditNoteLinkedWithPayment(creditNote, jArr, requestParams);
                    }
                }
            }
            
            /*
             * get Invoice linked in Payment
             */

            if (payment.getRows() != null && !payment.getRows().isEmpty()) {
                for (PaymentDetail payd : payment.getRows()) {
                    GoodsReceipt goodsreceipt = payd.getGoodsReceipt();
                    if (goodsreceipt != null) {
//                        requestParams.put("linkingdate", payment.isIsOpeningBalencePayment() ? payment.getCreationDate():payment.getJournalEntry().getEntryDate());   
                        requestParams.put("linkingdate", payment.getCreationDate());   
                        jArr = getInvoiceJsonLinkedWithPayment(goodsreceipt, jArr, requestParams);
                    }


                }
            }
    
            /*
             * Get Credit Note Linked with Payment
             */


            if (payment.getCreditNotePaymentDetails() != null && !payment.getCreditNotePaymentDetails().isEmpty()) {
                for (CreditNotePaymentDetails payd : payment.getCreditNotePaymentDetails()) {
                    CreditNote creditNote = payd.getCreditnote();
                    if (creditNote != null) {
//                        requestParams.put("linkingdate",  payment.isIsOpeningBalencePayment() ? payment.getCreationDate():payment.getJournalEntry().getEntryDate());   
                        requestParams.put("linkingdate",  payment.getCreationDate());   
                        jArr = getCreditNoteLinkedWithPayment(creditNote, jArr, requestParams);
                    }


                }
            }
            if (payment.getSalesReturn() != null&&payment.getSalesReturn().getRows()!=null ) {
                for (SalesReturnDetail payd :payment.getSalesReturn().getRows()) {
                    SalesReturn salesReturn = payd.getSalesReturn();
                    if (salesReturn != null) {
//                        requestParams.put("linkingdate",  payment.getJournalEntry().getEntryDate());   
                        requestParams.put("linkingdate",  payment.getCreationDate());   
                        jArr = getSalesReturnLinkedWithPayment(salesReturn, jArr, requestParams);
                    }


                }
            }
        
        obj.put("data", jArr);
        } catch(Exception e){
            throw ServiceException.FAILURE(e.getMessage(), e);
        }
        return obj;
    }
    
    public ModelAndView checkIfChequeNumberExists(HttpServletRequest request, HttpServletResponse response) throws ServiceException {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            boolean isAtleastOneChequeNumberExists = false;
            JSONArray chequeNumberStatus = checkIfChequeNumberExists(request);
            String duplicateChequeNumbers = "";
            for (int i = 0; i < chequeNumberStatus.length(); i++) {
                JSONObject obj = chequeNumberStatus.getJSONObject(i);
                if (obj.getBoolean("isChequeNumberExists")) {
                    isAtleastOneChequeNumberExists = true;
                    duplicateChequeNumbers += obj.getString("chequeNumber") + ",";
                }
            }
            // jobj.put("data", chequeNumberStatus);
            if (duplicateChequeNumbers != "") {
                duplicateChequeNumbers = duplicateChequeNumbers.substring(0, duplicateChequeNumbers.length() - 1);
            }
            jobj.put("duplicateChequeNumbers", duplicateChequeNumbers);
            jobj.put("isAtleastOneChequeNumberExists", isAtleastOneChequeNumberExists);
            issuccess = true;
        } catch (Exception ex) {
            msg = "accvendorPaymentControllerNew.checkIfChequeNumberExists:" + ex.getMessage();
            throw ServiceException.FAILURE("accVendorPaymentControllernew.getChequeDetailsForRepeatedPayment : " + msg, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);

            } catch (JSONException ex) {
                throw ServiceException.FAILURE("accVendorPaymentControllernew.getChequeDetailsForRepeatedPayment : " + msg, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public JSONArray checkIfChequeNumberExists(HttpServletRequest request) {
        boolean isChequeNumberExists = false;
        JSONArray returnArray = new JSONArray();
        try {
            String companyId = request.getParameter("companyId") != null ? request.getParameter("companyId") : "";
            String chequeNumber = request.getParameter("chequeNumbers");
            String[] chequeNumbers = chequeNumber.split(",");
            String bankAccountId = request.getParameter("bankAccountId") != null ? request.getParameter("bankAccountId") : "";
            for (int i = 0; i < chequeNumbers.length; i++) {
                if (StringUtil.isNullOrEmpty(chequeNumbers[i])) {
                    continue;
                }
                JSONObject jobj = new JSONObject();
                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                requestParams.put("companyId", companyId);
                requestParams.put("nextChequeNumber", chequeNumbers[i]);
                requestParams.put("bankAccountId", bankAccountId);
                requestParams.put("checkForNextSequenceNumberAlso", false);
                isChequeNumberExists = paymentService.isChequeNumberAvailable(requestParams);
                jobj.put("chequeNumber", chequeNumbers[i]);
                jobj.put("isChequeNumberExists", isChequeNumberExists);
                returnArray.put(jobj);
            }
        } catch (Exception ex) {
            Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
        }
        return returnArray;
    }
    
    public ModelAndView checkIfChequeNumberReservedForRecurringPayment(HttpServletRequest request, HttpServletResponse response) throws ServiceException {
        JSONObject jobj = new JSONObject();
        String msg = "";
        JSONArray jArr = new JSONArray();
        boolean issuccess = false;
        try {
            jArr = checkIfChequeNumberReservedForRecurringPayment(request);
            issuccess = true;
        } catch (Exception ex) {
            msg = "accvendorPaymentControllerNew.checkIfChequeNumberExists:" + ex.getMessage();
            throw ServiceException.FAILURE("accVendorPaymentControllernew.getChequeDetailsForRepeatedPayment : " + msg, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
                jobj.put("data", jArr);
            } catch (JSONException ex) {
                throw ServiceException.FAILURE("accVendorPaymentControllernew.checkIfChequeNumberReservedForRecurringPayment : " + msg, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public JSONArray checkIfChequeNumberReservedForRecurringPayment(HttpServletRequest request) {
        JSONArray returnArray = new JSONArray();
        try {
            String bankAccountId = request.getParameter("bankAccountId")!=null?request.getParameter("bankAccountId"):"";
            String chequeNumber = request.getParameter("chequenumber");
            String repeatedPaymentId = request.getParameter("repeatedPaymentId")!=null?request.getParameter("repeatedPaymentId"):"";
            String[] chequeNumbers = chequeNumber.split(",");
            String chequeNumberString="";
            for(int i=0; i<chequeNumbers.length;i++){
                chequeNumberString += "'"+chequeNumbers[i]+"'"+",";
            }
            if(!chequeNumberString.equals("")){
                chequeNumberString = chequeNumberString.substring(0, chequeNumberString.length()-1);
            }
            HashMap<String, Object> requestMap = new HashMap();
            requestMap.put("bankAccountId", bankAccountId);
            requestMap.put("chequeNumber", chequeNumberString);
            KwlReturnObject resultRepeatedPaymentChequeDetails = accPaymentDAOobj.getRepeatedPaymentChequeDetailsForPaymentMethod(requestMap);
            List RPCD = resultRepeatedPaymentChequeDetails.getEntityList();
            if(RPCD.size()>0){
                for (int i = 0; i < RPCD.size(); i++) {
                    JSONObject obj = new JSONObject();
                    Object[] object = (Object[]) RPCD.get(i);
                    String repeatPaymentId = (String) object[3];
                    if(repeatPaymentId.equals(repeatedPaymentId)){       // Edit case - Cheque no. will not be incuded if same repeated payment is being edited.
                        continue;
                    }
                    String paymentNumber = (String) object[1];
                    String ChequeNumber = (String) object[2];
                    obj.put("chequeNumber", ChequeNumber);
                    obj.put("paymentNumber", paymentNumber);
                    returnArray.put(obj);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
        }
        return returnArray;
    }
    
    public ModelAndView linkPaymentToDocuments(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("SP_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
	synchronized (this) {   //SDP-13011
            TransactionStatus status = txnManager.getTransaction(def);
            try {
                JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                String PaymentJENumber="";
                // if linking receipt of refund type
                boolean isRefundTransaction = (!StringUtil.isNullOrEmpty(request.getParameter("isRefundTransaction"))) ? Boolean.parseBoolean(request.getParameter("isRefundTransaction")) : false;
                List li = linkPaymentToDocuments(request);
                if (li.size()!= 0 && li.get(0) != null) {
                     PaymentJENumber= (String) li.get(0);
                }
                // success msg for refund transaction
                if (isRefundTransaction) {
                    msg = messageSource.getMessage("acc.field.paymentInformationHasBeenLinkedtoAdvancePaymentSuccessfully", null, RequestContextUtils.getLocale(request));
                } else {
                    msg = messageSource.getMessage("acc.field.PaymentinformationhasbeenLinkedtoPIAndCNsuccessfully", null, RequestContextUtils.getLocale(request));
                    if (!StringUtil.isNullOrEmpty(PaymentJENumber)) {
                        msg += ""+ "JE No.: " + "<b>" + PaymentJENumber + "<b>";
                    }
                }
                txnManager.commit(status);
                issuccess = true;

                //below code is for Rounding off JE Generation if needed
                status = txnManager.getTransaction(def);
                try {
                    accVendorPaymentModuleServiceObj.postRoundingJEAfterLinkingInvoiceInPayment(paramJobj);
                    txnManager.commit(status);
                } catch (Exception ex) {
                    if (status != null) {
                        txnManager.rollback(status);
                    }
                    Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (SessionExpiredException ex) {
                txnManager.rollback(status);
                msg = ex.getMessage();
                Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                txnManager.rollback(status);
                msg = "" + ex.getMessage();
                Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    jobj.put("success", issuccess);
                    jobj.put("msg", msg);
                } catch (JSONException ex) {
                    Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public List linkPaymentToDocuments(HttpServletRequest request) throws ServiceException, SessionExpiredException, AccountingException {
        List result = new ArrayList();
        List linkedInvoicesList = new ArrayList();
        List linkedNotesList = new ArrayList();
        List linkedAdvancePaymentList = new ArrayList();
        String companyId = sessionHandlerImpl.getCompanyid(request);
        try {

            JSONArray invoiceArray = new JSONArray();
            JSONArray noteArray = new JSONArray();
            JSONArray advancePaymentArray = new JSONArray();
            JSONArray linkJSONArray = request.getParameter("linkdetails") != null ? new JSONArray(request.getParameter("linkdetails")) : new JSONArray();
            Map<String,Object> counterMap=new HashMap<>();
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            /**
             * if linking date is fall in closed year the exception has been
             * thrown.
             */
            String linkingdateString = (String) request.getParameter("linkingdate");
            DateFormat df = authHandler.getDateOnlyFormat();
            if (!StringUtil.isNullOrEmpty(linkingdateString)) {
                int linkingdate = df.parse(linkingdateString).getYear();
                paramJobj.put("yearid", linkingdate+1900);
            }
            boolean isBookClose = accCompanyPreferencesObj.isBookClose(paramJobj);
            if (isBookClose) {
                throw  new AccountingException(messageSource.getMessage("acc.compref.closebook.Youcannotlinkthedocumentsinclosedyear", null, RequestContextUtils.getLocale(request)));
            }
            counterMap.put("counter", 0);
	    double linkamount = 0, paymentAmountDue = 0;
            for (int i = 0; i < linkJSONArray.length(); i++) {
                JSONObject obj = linkJSONArray.getJSONObject(i);
                int documenttype = Integer.parseInt(obj.optString("documentType"));
                if (documenttype == Constants.PaymentAgainstInvoice && obj.optDouble("linkamount", 0.0) != 0) {
		    linkamount += obj.optDouble("linkamount", 0.0);
                    invoiceArray.put(obj);
                } else if (documenttype == Constants.PaymentAgainstCNDN && obj.optDouble("linkamount", 0.0) != 0) {
		    linkamount += obj.optDouble("linkamount", 0.0);
                    noteArray.put(obj);
                } else if (documenttype == Constants.AdvancePayment && obj.optDouble("linkamount", 0.0) != 0) { // adding details of advance payment in array
		    linkamount += obj.optDouble("linkamount", 0.0);
                    advancePaymentArray.put(obj);
                }
            }
            linkamount=authHandler.round(linkamount, companyId);
	    
            /*
                Advance Payment(Make Payment) link with Invoices throug Link Transaction Button call : If link invoice(s) total amount is greater than Payment amount due 
                then only below code gets executed.
                Refer : SDP-13011
            */
            if (linkamount > 0) {
                HashMap<String, Object> requestMap = new HashMap<String, Object>();
                requestMap.put(Constants.companyKey, paramJobj.get(Constants.companyKey));
                requestMap.put(Constants.globalCurrencyKey, paramJobj.get(Constants.globalCurrencyKey));
                String paymentid = !StringUtil.isNullOrEmpty(request.getParameter("paymentid")) ? request.getParameter("paymentid") : "";
                KwlReturnObject presult = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentid);
                Payment payment = (Payment) presult.getEntityList().get(0);
                if (payment.isIsOpeningBalencePayment()) {
                    paymentAmountDue = payment.getOpeningBalanceAmountDue();
                } else if (payment.getAdvanceDetails() != null) {
                    for (AdvanceDetail advanceDetail : payment.getAdvanceDetails()) {
                        paymentAmountDue += advanceDetail.getAmountDue();
                    }
                }
		paymentAmountDue = authHandler.round(paymentAmountDue, payment.getCompany().getCompanyID());    //SDP-13452 - Need to round the receipt amount due to do comparison between receiptAmountDue and linkPayment
                if (paymentAmountDue < linkamount) {
                    throw new AccountingException(messageSource.getMessage("acc.makepayment.advpayment.amountdue.validation1", null, RequestContextUtils.getLocale(request)) + "<b>" + payment.getPaymentNumber() + "</b>" + messageSource.getMessage("acc.payment.advpayment.amountdue.validation2", null, RequestContextUtils.getLocale(request)));
                }

            }
            if (invoiceArray.length() > 0) {
                linkedInvoicesList = linkPaymentToInvoices(request, invoiceArray,counterMap);
                }
            if (noteArray.length() > 0) {
                linkedNotesList = linkPaymentToCreditNote(request, noteArray,counterMap);
            }
            // for linking advance payment to refund payment
            if (advancePaymentArray.length() > 0) {
                linkedAdvancePaymentList = linkPaymentToAdvancePayment(request, advancePaymentArray, counterMap);
            }
        } catch (SessionExpiredException ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        } catch (AccountingException e){
            throw new AccountingException(e.getMessage());
        } catch (Exception ex) {
            Logger.getLogger(accReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        result.addAll(linkedInvoicesList);
        result.addAll(linkedNotesList);
        result.addAll(linkedAdvancePaymentList);
        return result;
    }
  
    public List linkPaymentToInvoices(HttpServletRequest request, JSONArray invoiceArray, Map<String,Object> counterMap) throws ServiceException, SessionExpiredException {
        List result = new ArrayList();
        GoodsReceipt greceipt = null;
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String paymentid = request.getParameter("paymentid");
            double amount = 0;
            String amounts[] = request.getParameter("amounts").split(",");
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);

            KwlReturnObject receiptObj = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentid);
            Payment payment = (Payment) receiptObj.getEntityList().get(0);
            String paymentno = payment.getPaymentNumber();

            JournalEntry je = null;
            String jeid = "";
            String JENumber="";
            boolean isopeningBalancePayment = payment.isIsOpeningBalencePayment();
            if (payment.isNormalPayment()) {
                je = payment.getJournalEntry();
                jeid = je.getID();
            }
            double eternalCurrencyRate = 0d;
            if (!payment.isNormalPayment() && isopeningBalancePayment) {
                eternalCurrencyRate = payment.getExchangeRateForOpeningTransaction();
            }
            JSONArray jArr = new JSONArray();
            String vendorId = "";
            String accountId = "";
            String linkedInvoiceids = "";
            String linkedInvoicenos = "";
            for (int k = 0; k < invoiceArray.length(); k++) {//creating a hash map with payment and their linked invoice
                JSONObject jSONObject=invoiceArray.getJSONObject(k);
                if (jSONObject.optDouble("linkamount",0)!=0) {
                    String invoiceId=jSONObject.optString("documentid","");
                    double invAmount=jSONObject.optDouble("linkamount",0);
                    double exchangeratefortransaction=jSONObject.optDouble("exchangeratefortransaction",1);
                    double amountdue=jSONObject.optDouble("amountdue",0);
                    double amountDueOriginal=jSONObject.optDouble("amountDueOriginal",0);
                    KwlReturnObject grresult = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), invoiceId);
                    GoodsReceipt gr = (GoodsReceipt) grresult.getEntityList().get(0);
                    if(linkedInvoiceids.equals("")&&gr!=null){
                        linkedInvoiceids+=gr.getID();
                        linkedInvoicenos+=gr.getGoodsReceiptNumber();
                    }else if(gr!=null){
                        linkedInvoiceids+=","+gr.getID();
                        linkedInvoicenos+=","+gr.getGoodsReceiptNumber();
                    }
                    vendorId=gr.getVendor().getID();
                    accountId=gr.getVendor().getAccount().getID();
                    JSONObject jobj = new JSONObject();

                    jobj.put("enteramount", invAmount);
                    jobj.put("documentid", invoiceId);
                    jobj.put("isopeningBalancePayment", isopeningBalancePayment);
                    jobj.put("isConversionRateFromCurrencyToBase", payment.isConversionRateFromCurrencyToBase());
                    jobj.put("exchangeratefortransaction", exchangeratefortransaction);
                    jobj.put("amountdue", amountdue);
                    jobj.put("amountDueOriginal", amountDueOriginal);
                    jArr.put(jobj);
                    
                     /*Method is used to save linking informatio of Advance Make Payment 
                     
                     when linking with Credit Note */
                    saveLinkingInformationOfPaymentWithInvoice(gr, payment, payment.getPaymentNumber());
                    
                }
            }
            
            HashMap<String, Object> paymenthm = new HashMap<String, Object>();
            HashMap<String, Object> linkDetails = saveLinkedPaymentDetails(request, payment, company, jArr, false,Constants.AdvancePayment,counterMap);
            paymenthm.put("vendorId", vendorId);
            paymenthm.put("paymentid", payment.getID());
            paymenthm.put("linkDetails", linkDetails.get("linkDetailPayment"));
            JENumber= linkDetails.containsKey("JournalEntries")&& !StringUtil.isNullOrEmpty((String)linkDetails.get("JournalEntries"))?(String)linkDetails.get("JournalEntries"):"";
            accVendorPaymentobj.savePayment(paymenthm);
            auditTrailObj.insertAuditLog(AuditAction.LINKEDPAYMENT, "User " + sessionHandlerImpl.getUserFullName(request) + " has linked Payment "+paymentno+" to Purchase Invoice(s) "+linkedInvoicenos, request,linkedInvoiceids);
            result.add(JENumber);
        } catch (SessionExpiredException ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        } catch (Exception ex) {
            Logger.getLogger(accReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return result;
    }
    public List linkPaymentToCreditNote(HttpServletRequest request, JSONArray noteArray, Map<String,Object> counterMap) throws ServiceException, SessionExpiredException {
        List result = new ArrayList();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String paymentid = request.getParameter("paymentid");
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);

            KwlReturnObject paymentObj = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentid);
            Payment payment = (Payment) paymentObj.getEntityList().get(0);
            String paymentno = payment.getPaymentNumber();

            JournalEntry je = null;
            String jeid = "";
            boolean isopeningBalancePayment = payment.isIsOpeningBalencePayment();
            if (payment.isNormalPayment()) {
                je = payment.getJournalEntry();
                jeid = je.getID();
            }

            double externalCurrencyRate = 0d;
            if (!payment.isNormalPayment() && isopeningBalancePayment) {
                externalCurrencyRate = payment.getExchangeRateForOpeningTransaction();
            }
            JSONArray jArr = new JSONArray();
            String vendorId = "";
            String linkedNotesids = "";
            String linkedNotesnos = "";
            for (int k = 0; k < noteArray.length(); k++) {//creating a hash map with payment and their linked invoice
                JSONObject jSONObject = noteArray.getJSONObject(k);
                if (jSONObject.optDouble("linkamount", 0) != 0) {
                    String noteId = jSONObject.optString("documentid", "");
                    double invAmount = jSONObject.optDouble("linkamount", 0);
                    double exchangeratefortransaction = jSONObject.optDouble("exchangeratefortransaction", 1);
                    KwlReturnObject cnresult = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), noteId);
                    CreditNote cn = (CreditNote) cnresult.getEntityList().get(0);
                    if (linkedNotesids.equals("") && cn != null) {
                        linkedNotesids += cn.getID();
                        linkedNotesnos += cn.getCreditNoteNumber();
                    } else if (cn != null) {
                        linkedNotesids += "," + cn.getID();
                        linkedNotesnos += "," + cn.getCreditNoteNumber();
                    }
                    vendorId = cn.getVendor().getID();
                    JSONObject jobj = new JSONObject();
                    jobj.put("enteramount", invAmount);
                    jobj.put("documentid", noteId);
                    jobj.put("isopeningBalancePayment", isopeningBalancePayment);
                    jobj.put("isConversionRateFromCurrencyToBase", payment.isConversionRateFromCurrencyToBase());
                    jobj.put("exchangeratefortransaction", exchangeratefortransaction);
                    jArr.put(jobj);
                      
                    /*Method is used to save linking informatio of Advance Make Payment 
                     
                     when linking with Credit Note */
                    saveLinkingInformationOfPaymentWithCN(cn,payment,payment.getPaymentNumber());
                }
            }
            HashMap<String, Object> paymenthm = new HashMap<String, Object>();
            HashSet linkDetails = saveLinkedPaymentToCreditNoteDetails(request, payment, company, jArr, Constants.AdvancePayment,counterMap);
            paymenthm.put("paymentid", payment.getID());
            paymenthm.put("linkWithCreditNoteDetails", linkDetails);
            paymenthm.put("vendorId", vendorId);
            accVendorPaymentobj.savePayment(paymenthm);
            auditTrailObj.insertAuditLog(AuditAction.LINKEDPAYMENT, "User " + sessionHandlerImpl.getUserFullName(request) + " has linked Payment " + paymentno + " to Credit Note(s)" + linkedNotesnos, request, linkedNotesids);
        } catch (SessionExpiredException ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        } catch (Exception ex) {
            Logger.getLogger(accReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return result;
    }
    
    private HashSet saveLinkedPaymentToCreditNoteDetails(HttpServletRequest request, Payment payment, Company company, JSONArray jArr, int type,Map<String,Object> counterMap) throws JSONException, ServiceException, AccountingException, SessionExpiredException, ParseException {
        HashSet linkdetails = new HashSet();
        
        Date maxLinkingDate = null;
        String linkingdate = (String) request.getParameter("linkingdate");
        DateFormat df = authHandler.getDateOnlyFormat();
        if (!StringUtil.isNullOrEmpty(linkingdate)) {
            maxLinkingDate = df.parse(linkingdate);
        }

        String companyid = company.getCompanyID();
        KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
        CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
        if (type == Constants.AdvancePayment) {
            String baseCurrency = sessionHandlerImpl.getCurrencyID(request);
            for (int i = 0; i < jArr.length(); i++) {
                JSONObject jobj = jArr.getJSONObject(i);
                LinkDetailPaymentToCreditNote rd = new LinkDetailPaymentToCreditNote();
                rd.setSrno(i + 1);
                rd.setID(StringUtil.generateUUID());
                double amountPaid = jobj.getDouble("enteramount");// amount in receipt currency
                double amountReceivedConverted = jobj.getDouble("enteramount"); // amount in invoice currency
                rd.setAmount(jobj.getDouble("enteramount"));
                rd.setCompany(company);
                KwlReturnObject result = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), jobj.getString("documentid"));
                CreditNote cn = (CreditNote) result.getEntityList().get(0);
                rd.setCreditnote(cn);
                
                if (!StringUtil.isNullOrEmpty(jobj.optString("exchangeratefortransaction", "").toString()) && !StringUtil.isNullOrEmpty(cn.getCurrency().getCurrencyID()) && !cn.getCurrency().getCurrencyID().equals(payment.getCurrency().getCurrencyID())) {
                    rd.setExchangeRateForTransaction(Double.parseDouble(jobj.get("exchangeratefortransaction").toString()));
                    rd.setFromCurrency(cn.getCurrency());
                    rd.setToCurrency(payment.getCurrency());
                    amountReceivedConverted = amountPaid / Double.parseDouble(jobj.get("exchangeratefortransaction").toString());
                    amountReceivedConverted = authHandler.round(amountReceivedConverted, companyid);
                    rd.setAmountInCNCurrency(amountReceivedConverted);
                } else {
                    rd.setExchangeRateForTransaction(Double.parseDouble(jobj.get("exchangeratefortransaction").toString()));
                    rd.setFromCurrency(cn.getCurrency());
                    rd.setToCurrency(payment.getCurrency());
                    amountReceivedConverted = authHandler.round(amountPaid, companyid);
                    rd.setAmountInCNCurrency(amountReceivedConverted);
                }
                rd.setPayment(payment);

                Date linkingDate = new Date();
//                Date cnDate = cn.isIsOpeningBalenceCN() ? cn.getCreationDate() : cn.getJournalEntry().getEntryDate();
//                Date receiptDate = payment.isIsOpeningBalencePayment() ? payment.getCreationDate() : payment.getJournalEntry().getEntryDate();
                Date cnDate = cn.getCreationDate();
                Date receiptDate = payment.getCreationDate();
                Date maxDate = null;
                if (maxLinkingDate != null) {
                    maxDate = maxLinkingDate;
                } else {
                    List<Date> datelist = new ArrayList<Date>();
                    datelist.add(linkingDate);
                    datelist.add(receiptDate);
                    datelist.add(cnDate);
                    Collections.sort(datelist); //Sort the Date object & get the dates in ASC order. Pick-up the last record as Max Date
                    maxDate = datelist.get(datelist.size() - 1);
                    //maxDate = Math.max(Math.max(linkingDate.getTime(), cnDate.getTime()), receiptDate.getTime());
                }
                
                rd.setPaymentLinkDate(maxDate);
                
                //JE For Debit which is Linked to Receipt
                double exchangeRateforTransaction = jobj.optDouble("exchangeratefortransaction", 1.0);
                String basecurrency = sessionHandlerImpl.getCurrencyID(request);
                if (cn != null) {
                    double finalAmountReval = ReevalJournalEntryForCrediteNote(request, cn, amountPaid, exchangeRateforTransaction);
                    if (finalAmountReval != 0) {
                        /**
                         * added transactionID and transactionModuleID to
                         * Realised JE.
                         */
                        counterMap.put("transactionModuleid", cn.isIsOpeningBalenceCN() ? (cn.iscNForCustomer() ? Constants.Acc_opening_Customer_CreditNote : Constants.Acc_opening_Vendor_CreditNote) : Constants.Acc_Credit_Note_ModuleId);
                        counterMap.put("transactionId", cn.getID());
                        String revaljeid = PostJEFORReevaluation(request, finalAmountReval, company.getCompanyID(), preferences, basecurrency, null,counterMap);
                        rd.setRevalJeId(revaljeid);
                    }
                }
                //JE For Receipt which is of Opening Type
                if (payment != null && (payment.isIsOpeningBalencePayment() || (!payment.getAdvanceDetails().isEmpty())) ) {
                    double finalAmountReval = ReevalJournalEntryForPayment(request, payment, amountPaid, exchangeRateforTransaction);
                    if (finalAmountReval != 0) {
                        /**
                         * added transactionID and transactionModuleID to
                         * Realised JE.
                         */
                        counterMap.put("transactionModuleid", payment.isIsOpeningBalencePayment() ? Constants.Acc_opening_Payment : Constants.Acc_Make_Payment_ModuleId);
                        counterMap.put("transactionId", payment.getID());
                        String revaljeid = PostJEFORReevaluation(request, -(finalAmountReval), payment.getCompany().getCompanyID(), preferences, basecurrency, null,counterMap);
                        rd.setRevalJeIdPayment(revaljeid);
                    }
                }

                double amountPaidConvertedInBaseCurrency = 0d;
                HashMap<String, Object> requestParams = new HashMap();
                requestParams.put(Constants.companyid, company.getCompanyID());
                requestParams.put("gcurrencyid", company.getCurrency().getCurrencyID());
                double externalCurrencyRate = 1d;
                boolean isopeningBalanceRCP = payment.isIsOpeningBalencePayment();
                Date rcpCreationDate = null;
                rcpCreationDate = payment.getCreationDate();
                if (isopeningBalanceRCP) {
                    externalCurrencyRate = payment.getExchangeRateForOpeningTransaction();
                } else {
//                    rcpCreationDate = payment.getJournalEntry().getEntryDate();
                    externalCurrencyRate = payment.getJournalEntry().getExternalCurrencyRate();
                }
                String fromcurrencyid = payment.getCurrency().getCurrencyID();
                KwlReturnObject bAmt = null;
                if (isopeningBalanceRCP && payment.isConversionRateFromCurrencyToBase()) {// if Receipt is opening balance Receipt and Conversion rate is taken from user is Currency to base then following method will be called.
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amountPaid, fromcurrencyid, rcpCreationDate, externalCurrencyRate);
                } else {
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amountPaid, fromcurrencyid, rcpCreationDate, externalCurrencyRate);
                }
                amountPaidConvertedInBaseCurrency = (Double) bAmt.getEntityList().get(0);
                amountPaidConvertedInBaseCurrency = authHandler.round(amountPaidConvertedInBaseCurrency, companyid);

                double cnExternalCurrencyRate = 1d;
                boolean isopeningBalanceCN = cn.isIsOpeningBalenceCN();
                Date cnCreationDate = null;
                cnCreationDate = cn.getCreationDate();
                if (isopeningBalanceCN) {
                    cnExternalCurrencyRate = cn.getExchangeRateForOpeningTransaction();
                } else {
//                    cnCreationDate = cn.getJournalEntry().getEntryDate();
                    cnExternalCurrencyRate = cn.getJournalEntry().getExternalCurrencyRate();
                }
                String dnfromcurrencyid = cn.getCurrency().getCurrencyID();
                KwlReturnObject dnbAmt = null;
                if (isopeningBalanceCN && cn.isConversionRateFromCurrencyToBase()) {// if Receipt is opening balance Receipt and Conversion rate is taken from user is Currency to base then following method will be called.
                    dnbAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amountReceivedConverted, dnfromcurrencyid, cnCreationDate, cnExternalCurrencyRate);
                } else {
                    dnbAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amountReceivedConverted, dnfromcurrencyid, cnCreationDate, cnExternalCurrencyRate);
                }
                double cnamountReceivedConvertedInBaseCurrency = (Double) dnbAmt.getEntityList().get(0);
                cnamountReceivedConvertedInBaseCurrency = authHandler.round(cnamountReceivedConvertedInBaseCurrency, companyid);

                KwlReturnObject cnjedresult = accPaymentDAOobj.updateCnAmount(cn.getID(), amountReceivedConverted);
                KwlReturnObject opencnjedresult = accPaymentDAOobj.updateCnOpeningAmountDue(cn.getID(), amountReceivedConverted);
                KwlReturnObject openingDnBaseAmtDueResult = accPaymentDAOobj.updateCnOpeningBaseAmountDue(cn.getID(), cnamountReceivedConvertedInBaseCurrency);

                /*
                 * Start gains/loss calculation Calculate Gains/Loss if CN
                 * exchange rate changed at the time of linking with advance
                 * payment
                 */
                if (isopeningBalanceRCP&& payment.isConversionRateFromCurrencyToBase()) {
                    externalCurrencyRate = 1 / externalCurrencyRate;
                }
                
                if (preferences.getForeignexchange() == null) {
                    throw new AccountingException(messageSource.getMessage("acc.common.forex", null, RequestContextUtils.getLocale(request)));
                }
            double amountDiff = checkFxGainLossOnLinkCreditNote(cn, Double.parseDouble(jobj.optString("exchangeratefortransaction", "1")), externalCurrencyRate, amountPaid, payment.getCurrency().getCurrencyID(), baseCurrency, company.getCompanyID());
                if (amountDiff != 0 && preferences.getForeignexchange() != null && Math.abs(amountDiff) >= 0.000001) {//Math.abs(amountDiff) < .0000001 Added this because in case of revaluation the diff in the rates was less than .0000001 and the amount calculation was going in Exachange rate account. 
                    boolean rateDecreased = false;
                    if (amountDiff < 0) {
                        rateDecreased = true;
                    }
                    JournalEntry journalEntry = null;
                    Map<String, Object> jeDataMap = AccountingManager.getGlobalParams(request);
                    int counter = 0;
                    if(counterMap.containsKey("counter")){
                        counter=(Integer) counterMap.get("counter");
                    }
                    String jeentryNumber = null;
                    boolean jeautogenflag = false;
                    String jeSeqFormatId = "";
                    Date entryDate = maxDate;
                    synchronized (this) {
                        HashMap<String, Object> JEFormatParams = new HashMap<String, Object>();
                        JEFormatParams.put("moduleid", Constants.Acc_GENERAL_LEDGER_ModuleId);
                        JEFormatParams.put("modulename", "autojournalentry");
                        JEFormatParams.put("companyid", companyid);
                        JEFormatParams.put("isdefaultFormat", true);

                        KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(JEFormatParams);
                        SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
                        Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                        seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_JOURNALENTRY, format.getID(), false, entryDate);
                        String nextAutoNoTemp =  (String)seqNumberMap.get(Constants.AUTO_ENTRYNUMBER);  //next auto generated number
                        int sequence = Integer.parseInt((String)seqNumberMap.get(Constants.SEQNUMBER));
                        String jeDatePrefix = (String)seqNumberMap.get(Constants.DATEPREFIX);//Date Prefix Part
                        String jeDateAfterPrefix = (String)seqNumberMap.get(Constants.DATEAFTERPREFIX);  //Date After Prefix Part
                        String jeDateSuffix = (String)seqNumberMap.get(Constants.DATESUFFIX);//Date Suffix Part
                        
                        sequence = sequence + counter;
                        String number = "" + sequence;
                        String action = "" + (sequence - counter);
                        nextAutoNoTemp.replaceAll(action, number);
                        jeentryNumber = nextAutoNoTemp.replaceAll(action, number);  //next auto generated number
                        jeSeqFormatId = format.getID();
                        jeautogenflag = true;

                        jeDataMap.put("entrynumber", jeentryNumber);
                        jeDataMap.put("autogenerated", jeautogenflag);
                        jeDataMap.put(Constants.SEQFORMAT, jeSeqFormatId);
                        jeDataMap.put(Constants.SEQNUMBER, number);
                        jeDataMap.put(Constants.DATEPREFIX, jeDatePrefix);
                        jeDataMap.put(Constants.DATEAFTERPREFIX, jeDateAfterPrefix);
                        jeDataMap.put(Constants.DATESUFFIX, jeDateSuffix);
                    }
                    jeDataMap.put("entrydate", entryDate); // ERP-8987
                    jeDataMap.put("companyid", companyid);
                    jeDataMap.put("memo", "Exchange Gains/Loss posted against Advance Payment '" + payment.getPaymentNumber() + "' linked to Credit Note '" + cn.getCreditNoteNumber() + "'");
                    jeDataMap.put("currencyid", payment.getCurrency().getCurrencyID());
                    jeDataMap.put("externalCurrencyRate", externalCurrencyRate);
                    jeDataMap.put("isexchangegainslossje", true);
                    jeDataMap.put("transactionId",payment.getID() );
                    jeDataMap.put("transactionModuleid", Constants.Acc_Make_Payment_ModuleId);
                    journalEntry = accJournalEntryobj.getJournalEntry(jeDataMap);
                    accJournalEntryobj.saveJournalEntryByObject(journalEntry);

                    boolean isDebit = rateDecreased ? false : true;
                    JSONObject jedjson = new JSONObject();
                    jedjson.put("srno", 1);
                    jedjson.put("companyid", companyid);
                    jedjson.put("amount", rateDecreased ? (-1 * amountDiff) : amountDiff);
                    jedjson.put("accountid", preferences.getForeignexchange().getID());
                    jedjson.put("debit", isDebit);
                    jedjson.put("jeid", journalEntry.getID());
                    KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                    JournalEntryDetail jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                    Set<JournalEntryDetail> detail = new HashSet();
                    detail.add(jed);

                    jedjson = new JSONObject();
                    jedjson.put("srno", 2);
                    jedjson.put("companyid", companyid);
                    jedjson.put("amount", rateDecreased ? (-1 * amountDiff) : amountDiff);
                    jedjson.put("accountid", cn.getAccount() == null ? cn.getVendor().getAccount().getID() : cn.getAccount().getID());
                    jedjson.put("debit", !isDebit);
                    jedjson.put("jeid", journalEntry.getID());
                    jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                    jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                    detail.add(jed);
                    journalEntry.setDetails(detail);
                    accJournalEntryobj.saveJournalEntryDetailsSet(detail);

                    rd.setLinkedGainLossJE(journalEntry.getID());
                    counter++;
                    counterMap.put("counter", counter);
                }
                // End Gains/Loss Calculation

                for (AdvanceDetail advanceDetail : payment.getAdvanceDetails()) {
//                    advanceDetail.setAmountDue(advanceDetail.getAmountDue() - amountPaid);
                      advanceDetail.setAmountDue(authHandler.round(advanceDetail.getAmountDue()-amountPaid,company.getCompanyID()));
                }
                if (payment != null && isopeningBalanceRCP) {
                    double paymentAmountDue = payment.getOpeningBalanceAmountDue();
                    paymentAmountDue -= amountPaid;
                    payment.setOpeningBalanceAmountDue(paymentAmountDue);
                    payment.setOpeningBalanceBaseAmountDue(payment.getOpeningBalanceBaseAmountDue() - amountPaidConvertedInBaseCurrency);

                    HashMap<String, Object> paymenthm = new HashMap<String, Object>();
                    paymenthm.put("paymentid", payment.getID());
                    paymenthm.put("openingBalanceAmountDue", payment.getOpeningBalanceAmountDue());
                    paymenthm.put(Constants.openingBalanceBaseAmountDue, payment.getOpeningBalanceBaseAmountDue());
                    accVendorPaymentobj.savePayment(paymenthm);
                }
                linkdetails.add(rd);
            }
        }
        return linkdetails;
    }
    
    public double checkFxGainLossOnLinkCreditNote(CreditNote cn, double newCNExchageRate, double paymentExchangeRate, double paidCnAmount, String paymentCurrency, String baseCurrency, String companyid) throws ServiceException {
        double amount = 0;
        HashMap<String, Object> GlobalParams = new HashMap<String, Object>();
        GlobalParams.put("companyid", companyid);
        GlobalParams.put("gcurrencyid", baseCurrency);
        double cnExchangeRate = 0d;
        Date cnCreationDate = null;
        boolean isopeningBalanceCn = cn.isIsOpeningBalenceCN();
        if (cn.isNormalCN()) {
            cnExchangeRate = cn.getJournalEntry().getExternalCurrencyRate();
//            cnCreationDate = cn.getJournalEntry().getEntryDate();
        } else {
            cnExchangeRate = cn.getExchangeRateForOpeningTransaction();
            if(isopeningBalanceCn && cn.isConversionRateFromCurrencyToBase()){ //converting rate to Base to Other Currency Rate
                cnExchangeRate=1/cnExchangeRate;
            }
        }
        cnCreationDate = cn.getCreationDate();
        
         boolean revalFlag = false;
        
        HashMap<String, Object> invoiceId = new HashMap<String, Object>();
        invoiceId.put("invoiceid", cn.getID());
        invoiceId.put("companyid", companyid);
        KwlReturnObject result = accJournalEntryobj.getRevalInvoiceId(invoiceId);
        RevaluationHistory history = (result.getEntityList().size()) != 0 ? (RevaluationHistory) result.getEntityList().get(0) : null;
        if (history != null) {
            cnExchangeRate = history.getEvalrate();
            revalFlag = true;
        }
        
        String currid = cn.getCurrency().getCurrencyID();
        KwlReturnObject bAmt = null;
        if (currid.equalsIgnoreCase(paymentCurrency)) {
//            if (isopeningBalanceCn && cn.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
//                bAmt = accCurrencyDAOobj.getOneCurrencyToOtherAccordingToCurrencyToBaseExchangeRate(GlobalParams, 1.0, currid, paymentCurrency, cnCreationDate, cnExchangeRate);
//            } else {
                double paymentExternalCurrencyRate = paymentExchangeRate;
                if (cnExchangeRate != paymentExternalCurrencyRate) {
                    bAmt = accCurrencyDAOobj.getOneCurrencyToOtherWithDiffRates(GlobalParams, 1.0, currid, paymentCurrency, cnCreationDate, cnExchangeRate, paymentExternalCurrencyRate);
                } else {
                    bAmt = accCurrencyDAOobj.getOneCurrencyToOther(GlobalParams, 1.0, currid, paymentCurrency, cnCreationDate, cnExchangeRate);
                }
//            }
        } else {
//            if (isopeningBalanceCn && cn.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
//                bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModifiedAccordingToCurrencyToBaseExchangeRate(GlobalParams, 1.0, currid, paymentCurrency, cnCreationDate, cnExchangeRate);
//            } else {
                double paymentExternalCurrencyRate = paymentExchangeRate;
                if (cnExchangeRate != paymentExternalCurrencyRate) {
                    bAmt = accCurrencyDAOobj.getOneCurrencyToOtherWithDiffRates(GlobalParams, 1.0, currid, paymentCurrency, cnCreationDate, cnExchangeRate, paymentExternalCurrencyRate);
                } else {
                    bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(GlobalParams, 1.0, currid, paymentCurrency, cnCreationDate, cnExchangeRate);
                }
//            }
            }
        double oldrate = (Double) bAmt.getEntityList().get(0);
        double newrate = 0.0;
        double ratio = 0;
        if (newCNExchageRate != oldrate && newCNExchageRate != 0.0 && Math.abs(newCNExchageRate - oldrate) >= 0.000001) {
            newrate = newCNExchageRate;
            ratio = oldrate - newrate;
            amount = (paidCnAmount - (paidCnAmount / newrate) * oldrate);
        }
        return amount;
    }
    public ModelAndView unlinkPaymentDocuments(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("SP_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        try {
            // used for refund type payment
            boolean isRefundTransaction = (!StringUtil.isNullOrEmpty(request.getParameter("isRefundTransaction"))) ? Boolean.parseBoolean(request.getParameter("isRefundTransaction")) : false;
            List li = unlinkPaymentFromTransactions(request);
            issuccess = true;
            // sucess msg for refund transaction
            if (isRefundTransaction) {
                msg = messageSource.getMessage("acc.field.paymentInformationHasBeenUnLinkedfromAdvancePaymentSuccessfully", null, RequestContextUtils.getLocale(request));
            } else {
                msg = messageSource.getMessage("acc.field.PaymentinformationhasbeenUnLinkedtoPIAndCNsuccessfully", null, RequestContextUtils.getLocale(request));
            }
            txnManager.commit(status);
        } catch (AccountingException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = "" + ex.getMessage();
            Logger.getLogger(accReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public List unlinkPaymentFromTransactions(HttpServletRequest request) throws AccountingException,ServiceException, SessionExpiredException {
        List result = new ArrayList();
        try {
            //Unlink Invoices
            result = unlinkPaymentNew(request);
            //Unlink Credit Notes
            result = unlinkPaymentFromCreditNote(request);
            // Unlink Advance Payments
            result = unlinkPaymentFromAdvancePayment(request);
        } catch (AccountingException e){
            throw new AccountingException(e.getMessage());
        } catch (SessionExpiredException ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        } catch (Exception ex) {
            Logger.getLogger(accReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return result;
    }
    
    public List unlinkPaymentFromCreditNote(HttpServletRequest request) throws ServiceException, SessionExpiredException {
        List result = new ArrayList();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String paymentid = request.getParameter("paymentid");
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);

            KwlReturnObject apymentKWLObj = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentid);
            Payment payment = (Payment) apymentKWLObj.getEntityList().get(0);
            String paymentno = payment.getPaymentNumber();

            String linkedCnids = "";
            String linkedCnnos = "";
            List<String> linkedDetailCn = new ArrayList();
            JSONArray linkJSONArray = request.getParameter("linkdetails") != null ? new JSONArray(request.getParameter("linkdetails")) : new JSONArray();
            for (int k = 0; k < linkJSONArray.length(); k++) {
                JSONObject jSONObject = linkJSONArray.getJSONObject(k);
                String linkId = jSONObject.optString("linkdetailid", "");
                linkedDetailCn.add(linkId);
            }

            double receiptexternalCurrencyRate = 1d;
            boolean isopeningBalanceRCP = payment.isIsOpeningBalencePayment();
            Date rcpCreationDate = null;
            rcpCreationDate = payment.getCreationDate();
            if (isopeningBalanceRCP) {
                receiptexternalCurrencyRate = payment.getExchangeRateForOpeningTransaction();
            } else {
//                rcpCreationDate = payment.getJournalEntry().getEntryDate();
                receiptexternalCurrencyRate = payment.getJournalEntry().getExternalCurrencyRate();
            }
            String fromcurrencyid = payment.getCurrency().getCurrencyID();

            String linkedDetailIDs = "";
            for (String dnID : linkedDetailCn) {
                linkedDetailIDs = linkedDetailIDs.concat("'").concat(dnID).concat("',");
            }
            if (!StringUtil.isNullOrEmpty(linkedDetailIDs.toString())) {
                linkedDetailIDs = linkedDetailIDs.substring(0, linkedDetailIDs.length() - 1);
            }
            double sumOfTotalAmount = 0;
            List<CreditNote> CNList = new ArrayList<CreditNote>();
            List<LinkDetailPaymentToCreditNote> details = accVendorPaymentobj.getDeletedLinkedPaymentCreditNotes(payment, linkedDetailIDs, companyid);
            for (LinkDetailPaymentToCreditNote receiptDetail : details) {
                CreditNote CN = receiptDetail.getCreditnote();
                double amountdue = CN.getCnamountdue();
                CN.setCnamountdue(amountdue + receiptDetail.getAmountInCNCurrency());
                double externalCurrencyRateForLinking = 1d;
                externalCurrencyRateForLinking = receiptDetail.getExchangeRateForTransaction();
                sumOfTotalAmount += receiptDetail.getAmount();
                HashMap<String, Object> requestParams = new HashMap();
                requestParams.put(Constants.companyid, companyid);
                requestParams.put("gcurrencyid", company.getCurrency().getCurrencyID());
                KwlReturnObject bAmt = null;
                if (isopeningBalanceRCP && payment.isConversionRateFromCurrencyToBase()) {// if Receipt is opening balance Receipt and Conversion rate is taken from user is Currency to base then following method will be called.
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, receiptDetail.getAmount(), fromcurrencyid, rcpCreationDate, externalCurrencyRateForLinking);
                } else {
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, receiptDetail.getAmount(), fromcurrencyid, rcpCreationDate, externalCurrencyRateForLinking);
                }
                double amountReceivedConvertedInCNBaseCurrency = (Double) bAmt.getEntityList().get(0);

                CN.setOpeningBalanceAmountDue(CN.getOpeningBalanceAmountDue() + receiptDetail.getAmountInCNCurrency());
                CN.setOpeningBalanceBaseAmountDue(CN.getOpeningBalanceBaseAmountDue() + amountReceivedConvertedInCNBaseCurrency);
                linkedCnnos = linkedCnnos.concat(CN.getCreditNoteNumber()).concat(",");
                CNList.add(CN);

                // check if Forex/Gain Loss JE generated. If yes then need to delete JE too
                if (receiptDetail.getLinkedGainLossJE() != null && !receiptDetail.getLinkedGainLossJE().isEmpty()) {
                    deleteJEArray(receiptDetail.getLinkedGainLossJE(), companyid);
                }
                if (receiptDetail != null && !StringUtil.isNullOrEmpty(receiptDetail.getRevalJeId()) ) {
                    accJournalEntryobj.deleteJEDtails(receiptDetail.getRevalJeId(), companyid);
                    accJournalEntryobj.deleteJE(receiptDetail.getRevalJeId(), companyid);
                }
                if (receiptDetail != null && !StringUtil.isNullOrEmpty(receiptDetail.getRevalJeIdPayment()) ) {
                    accJournalEntryobj.deleteJEDtails(receiptDetail.getRevalJeIdPayment(), companyid);
                    accJournalEntryobj.deleteJE(receiptDetail.getRevalJeIdPayment(), companyid);
                }
                
                /* Deleting Linking iformation of Received Payment from Linking table if it is unlinked*/
                HashMap<String, Object> linkingrequestParams = new HashMap<String, Object>();
                linkingrequestParams.put("paymentid", payment.getID());
                linkingrequestParams.put("linkedTransactionID", receiptDetail.getCreditnote().getID());
                linkingrequestParams.put("unlinkflag", true);
                accVendorPaymentobj.deleteLinkingInformationOfMP(linkingrequestParams);

            }
            
            if (sumOfTotalAmount != 0 && payment.getAdvanceDetails() != null && !payment.getAdvanceDetails().isEmpty()) {
                for (AdvanceDetail advanceDetail : payment.getAdvanceDetails()) {
                    double linkedAmountDue = advanceDetail.getAmountDue();
                    advanceDetail.setAmountDue(linkedAmountDue + sumOfTotalAmount);
                    List<Object> objectList = new ArrayList<Object>();
                    objectList.add((Object) advanceDetail);
                    accAccountDAOobj.saveOrUpdateAll(objectList);
                }
            } else if (sumOfTotalAmount != 0 && isopeningBalanceRCP) {
                HashMap<String, Object> requestParams = new HashMap();
                requestParams.put(Constants.companyid, companyid);
                requestParams.put("gcurrencyid", company.getCurrency().getCurrencyID());
                KwlReturnObject bAmt = null;
                if (isopeningBalanceRCP && payment.isConversionRateFromCurrencyToBase()) {// if Receipt is opening balance Receipt and Conversion rate is taken from user is Currency to base then following method will be called.
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, sumOfTotalAmount, fromcurrencyid, rcpCreationDate, receiptexternalCurrencyRate);
                } else {
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, sumOfTotalAmount, fromcurrencyid, rcpCreationDate, receiptexternalCurrencyRate);
                }
                double amountPaymentConvertedInBaseCurrency = (Double) bAmt.getEntityList().get(0);
                payment.setOpeningBalanceAmountDue(sumOfTotalAmount + payment.getOpeningBalanceAmountDue());
                payment.setOpeningBalanceBaseAmountDue(amountPaymentConvertedInBaseCurrency + payment.getOpeningBalanceBaseAmountDue());
                List<Object> objectList = new ArrayList<Object>();
                objectList.add((Object) payment);
                accAccountDAOobj.saveOrUpdateAll(objectList);
            }
            if (!CNList.isEmpty()) {
                List<Object> objectList = new ArrayList<Object>(CNList);
                accAccountDAOobj.saveOrUpdateAll(objectList);
            }
            if (!StringUtil.isNullOrEmpty(linkedCnnos)) {
                linkedCnnos = linkedCnnos.substring(0, linkedCnnos.length() - 1);
            }
            accVendorPaymentobj.deleteSelectedLinkedPaymentCreditNotes(payment.getID(), linkedDetailIDs, companyid);
            if(!StringUtil.isNullOrEmpty(linkedCnnos)){
              auditTrailObj.insertAuditLog(AuditAction.LINKEDPAYMENT, "User " + sessionHandlerImpl.getUserFullName(request) + " has unlinked Payment " + paymentno + " from Credit Note(s) " + linkedCnnos, request, linkedCnids);  
            }
            
        } catch (SessionExpiredException ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        } catch (Exception ex) {
            Logger.getLogger(accReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return result;
    }

    public ModelAndView activateDeactivateVendorPayment(HttpServletRequest request, HttpServletResponse response) throws SessionExpiredException {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("JEC_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

        TransactionStatus status = txnManager.getTransaction(def);
        try {
            msg = activateDeactivateVendorPayment(request);
            txnManager.commit(status);
            issuccess = true;
        } catch (AccountingException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (Exception ex) {
                Logger.getLogger(accReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public String activateDeactivateVendorPayment(HttpServletRequest request) throws SessionExpiredException, AccountingException, ServiceException {
        String msg = "";
        try {
            JSONArray jArr = new JSONArray(request.getParameter("data"));
            //String companyid = sessionHandlerImpl.getCompanyid(request);
            for (int i = 0; i < jArr.length(); i++) {
                JSONObject jobj = jArr.getJSONObject(i);
                if (!StringUtil.isNullOrEmpty(jobj.getString("repeatedid"))) {
                    String repeateid = jobj.getString("repeatedid");
                    boolean isactivate = jobj.optBoolean("isactivate");
                    boolean ispendingapproval = jobj.optBoolean("ispendingapproval");
                    if (ispendingapproval) {
                        accVendorPaymentobj.approveRecurringMakePayment(repeateid, false);    //Journal Entry Approved here
                        msg = "Recurring Make Payment Entry has been approved successfully.";
                    } else {
                        accVendorPaymentobj.activateDeactivateMakePayment(repeateid, isactivate);
                        msg = messageSource.getMessage("acc.makepayment.RecurringMakePaymentEntryhasbeenupdatedsuccessfully", null, RequestContextUtils.getLocale(request));
                    }
                }//if
            }//for            
        } catch (Exception ex) {//try
            Logger.getLogger(accReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }//catch
        return msg;
    }//method-end
    
        public ModelAndView deleteRecurringMakePayment(HttpServletRequest request, HttpServletResponse response) throws SessionExpiredException {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put("data", request.getParameter("data"));

            //Below Params Added for Audit Trial Entry
            requestParams.put("reqHeader", request.getHeader("x-real-ip"));
            requestParams.put("remoteAddress", request.getRemoteAddr());
            requestParams.put("userid", sessionHandlerImpl.getUserid(request));
            requestParams.put("userFullName", sessionHandlerImpl.getUserFullName(request));
            requestParams.put("locale", RequestContextUtils.getLocale(request));
            msg = deleteRecurringMakePayment(requestParams);
            issuccess = true;
        } catch (Exception ex) {
            msg = ex.getMessage();
            Logger.getLogger(accReceiptController.class.getName()).log(Level.SEVERE, "accVendorPaymentControllerNew.deleteRecurringMakePayment", ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (Exception ex) {
                Logger.getLogger(accReceiptController.class.getName()).log(Level.SEVERE, "accVendorPaymentControllerNew.deleteRecurringMakePayment", ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public String deleteRecurringMakePayment(HashMap<String, Object> requestParams) throws ServiceException, SessionExpiredException {
        String msg = "";
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("Delete_RMP_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = null;
        Locale locale = null;
        if (requestParams.containsKey("locale")) {
            locale = (Locale) requestParams.get("locale");
        }
        try {
            String nonDeletedRepeatedMPs = "";
            JSONArray dataArray = new JSONArray();
            String userFullName = (String) requestParams.get("userFullName");
            dataArray = new JSONArray((String) requestParams.get("data"));
            for (int i = 0; i < dataArray.length(); i++) {
                JSONObject obj = dataArray.getJSONObject(i);
                String invoicenumber = obj.optString("invoicenumber", "");
                String invoiceid = obj.getString("invoiceid");
                String repeateid = obj.getString("repeatedid");
                try {
                    status = txnManager.getTransaction(def);

                    //repeatJE is foreign key in Make Payment so setting it null for removing dependency before deleting Repeated MP 
                    accVendorPaymentobj.updateToNullRepeatedMPOfMakePayment(invoiceid, repeateid);

                    //Deleting entry from RepeateJEMemo as it is redundant after deleting RepeatedJEJE
                    accJournalEntryobj.DelRepeateJEMemo(repeateid, "RepeatedPaymentId");

                    //Finally Deleting Repeated MP Record From Recurring / Pending Recurring Tab
                    accVendorPaymentobj.deleteRepeatedMP(repeateid);

                    auditTrailObj.insertAuditLog(AuditAction.REPEATED_MP_DELETE, "User " + userFullName + " has deleted a recurring Make Payment " + invoicenumber, requestParams, repeateid);
                    txnManager.commit(status);
                } catch (Exception ex) {
                    nonDeletedRepeatedMPs += nonDeletedRepeatedMPs.equals("") ? invoicenumber : "," + invoicenumber;
                    txnManager.rollback(status);
                    Logger.getLogger(accReceiptController.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (!StringUtil.isNullOrEmpty(nonDeletedRepeatedMPs)) {
                msg = "Except Rerord(s) " + nonDeletedRepeatedMPs + " all selected records have been deleted successfully.";
            } else {
                msg = messageSource.getMessage("acc.commo.Allselectedrecord(s)havebeendeletedsuccessfully", null, locale);
            }

        } catch (Exception ex) {
            Logger.getLogger(accReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("deleteRecurringMPRule: " + ex.getMessage(), ex);
        }
        return msg;
    }
    
       /**
     * Description : Method is used to Build Purchase Invoice record Json
     *
     * @param <jsonarray> Used to build array of Linked documents Purchase
     * Invoice linked in Payment
     *
     * @param <goodsreceipt> Object of Invoice linked in Payment
     *
     * @param <requestParams> map to get parameters which are required for processing data
     * @return :JSONArray
     */
    
        public JSONArray getInvoiceJsonLinkedWithPayment(GoodsReceipt goodsreceipt, JSONArray jsonArray, Map<String,Object> requestParams) {
        try {

            DateFormat df = (DateFormat) requestParams.get(Constants.df);
            Date linkingdate = (Date)requestParams.get("linkingdate");
            JSONObject obj = new JSONObject();
            /*
             * getting document currency
             */
            String companyid = "";
            if (requestParams.containsKey("companyid")) {
                companyid = (String) requestParams.get("companyid");
            }
            String currencyid = goodsreceipt.getCurrency().getCurrencyID();
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);

            Vendor vendor = goodsreceipt.getVendor();
            boolean isOpeningBalanceInvoice=goodsreceipt.isIsOpeningBalenceInvoice();
            obj.put("billid", goodsreceipt.getID());
            obj.put("companyid", goodsreceipt.getCompany().getCompanyID());
            obj.put("companyname", goodsreceipt.getCompany().getCompanyName());
            obj.put("withoutinventory", "");
            obj.put("transactionNo", goodsreceipt.getGoodsReceiptNumber());   //delivery order no
            obj.put("sequenceformatid", goodsreceipt.getSeqformat() == null ? "" : goodsreceipt.getSeqformat().getID());
            obj.put("billno", goodsreceipt.getGoodsReceiptNumber());
            obj.put("linkingdate", df.format(linkingdate));
            obj.put("duedate", goodsreceipt.getDueDate() != null ? df.format(goodsreceipt.getDueDate()) : "");
//            obj.put("date", isOpeningBalanceInvoice?df.format(goodsreceipt.getCreationDate()):df.format(goodsreceipt.getJournalEntry().getEntryDate()));
            obj.put("date", df.format(goodsreceipt.getCreationDate()));
            obj.put("journalEntryId", isOpeningBalanceInvoice?"":goodsreceipt.getJournalEntry().getID());
            obj.put("journalEntryNo", isOpeningBalanceInvoice?"":goodsreceipt.getJournalEntry().getEntryNumber());  //journal entry no
            obj.put("shipvia", goodsreceipt.getShipvia() == null ? "" : goodsreceipt.getShipvia());
            obj.put("fob", goodsreceipt.getFob() == null ? "" : goodsreceipt.getFob());
            obj.put("shipdate", goodsreceipt.getShipDate() == null ? "" : df.format(goodsreceipt.getShipDate()));
            obj.put("memo", goodsreceipt.getMemo());
            obj.put("agent", goodsreceipt.getMasterAgent() == null ? "" : goodsreceipt.getMasterAgent().getID());
            obj.put("agentname", goodsreceipt.getMasterAgent() == null ? "" : goodsreceipt.getMasterAgent().getValue());
            obj.put("termname", vendor == null ? "" : ((vendor.getDebitTerm() == null) ? "" : vendor.getDebitTerm().getTermname()));
            obj.put("termid", vendor == null ? "" : ((vendor.getDebitTerm() == null) ? "" : vendor.getDebitTerm().getID()));//ERP-16831
            obj.put("currencyid", currencyid);
            obj.put("currencysymbol", (goodsreceipt.getCurrency() == null ? currency.getSymbol() : goodsreceipt.getCurrency().getSymbol()));
            obj.put(Constants.TAXID, goodsreceipt.getTax() == null ? "" : goodsreceipt.getTax().getID());

            if (goodsreceipt.isIsconsignment()) {
                obj.put("mergedCategoryData", "Consignment Vendor Invoice");  //type of data
            } else if (goodsreceipt.isFixedAssetInvoice()) {
                obj.put("mergedCategoryData", "Fixed Asset Acquired Invoice");  //type of data
            } else {
                obj.put("mergedCategoryData", "Vendor Invoice");  //type of data
            }
            obj.put("personname", vendor.getName());
            obj.put("personid", vendor.getID());
            if (goodsreceipt.getModifiedby() != null) {
                obj.put("lasteditedby", StringUtil.getFullName(goodsreceipt.getModifiedby()));
            }
            obj.put("isOpeningBalanceTransaction", isOpeningBalanceInvoice);
            double invoiceOriginalAmt = 0d;
            if(goodsreceipt.isIsOpeningBalenceInvoice()){
                invoiceOriginalAmt=goodsreceipt.getOriginalOpeningBalanceAmount();
            }else{
                invoiceOriginalAmt=goodsreceipt.getVendorEntry().getAmount();
            }
            Date creationDate = null;
            double externalCurrencyRate = 0d;
            creationDate = goodsreceipt.getCreationDate();
            if (isOpeningBalanceInvoice) {
                externalCurrencyRate = goodsreceipt.getExchangeRateForOpeningTransaction();
            } else {
//                creationDate = goodsreceipt.getJournalEntry().getEntryDate();
                externalCurrencyRate = goodsreceipt.getJournalEntry().getExternalCurrencyRate();
            }
            KwlReturnObject invoiceTotalAmtInBaseResult = null;
            if (isOpeningBalanceInvoice && goodsreceipt.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                invoiceTotalAmtInBaseResult = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, invoiceOriginalAmt, currencyid, creationDate, externalCurrencyRate);
            } else {
                invoiceTotalAmtInBaseResult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invoiceOriginalAmt, currencyid, creationDate, externalCurrencyRate);
            }
            double invoiceTotalAmountInBase = authHandler.round((Double) invoiceTotalAmtInBaseResult.getEntityList().get(0), companyid);
            obj.put("amount", invoiceOriginalAmt);
            obj.put("amountinbase", invoiceTotalAmountInBase);

            /*
             * Method is used for building address json
             *
             * showing in view mode of Purchase Invoice
             */

            obj = AccountingAddressManager.getTransactionAddressJSON(obj, goodsreceipt.getBillingShippingAddresses(), true);
            jsonArray.put(obj);


        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            return jsonArray;
        }

    }
      
    /**
     * Description : Method is used to Build Credit Note record Json
     *
     * @param <jsonarray> Used to build array of Linked documents Credit Note in
     * Payment
     *
     * @param <creditNote> Object of Credit Note linked in Payment Return
   
     * @param <requestParams> map to get parameters which are required for processing data
     * @return :JSONArray
     */
        
    public JSONArray getCreditNoteLinkedWithPayment(CreditNote creditNote, JSONArray jsonArray, Map<String,Object> requestParams) {
        try {
            DateFormat df = (DateFormat) requestParams.get(Constants.df);
            String companyid = requestParams.get(Constants.companyKey).toString();
            Date linkdate = (Date)requestParams.get("linkingdate"); 
            
            
            JSONObject obj = new JSONObject();
            JournalEntry je = null;
            boolean isOpeningCreditNote = creditNote.isIsOpeningBalenceCN();
            if (!isOpeningCreditNote) {
                je = creditNote.getJournalEntry();
            }
            /*
             * getting document currency
             */
            String currencyid = creditNote.getCurrency().getCurrencyID();
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            
            obj.put("billid", creditNote.getID());
            obj.put("noteid", creditNote.getID());
            obj.put("noteno", creditNote.getCreditNoteNumber());
            obj.put("companyid", creditNote.getCompany().getCompanyID());
            obj.put("companyname", creditNote.getCompany().getCompanyName());
            obj.put("withoutinventory", "");
            obj.put("transactionNo", creditNote.getCreditNoteNumber());   //delivery order no
            obj.put("billno", creditNote.getCreditNoteNumber());
            obj.put("linkingdate", df.format(linkdate));
//            obj.put("date", isOpeningCreditNote ? df.format(creditNote.getCreationDate()) : df.format(creditNote.getJournalEntry().getEntryDate()));
            obj.put("date", df.format(creditNote.getCreationDate()));
            obj.put("journalEntryId", isOpeningCreditNote ? "" : creditNote.getJournalEntry().getID());
            obj.put("journalEntryNo", isOpeningCreditNote ? "" : creditNote.getJournalEntry().getEntryNumber());  //journal entry no
            obj.put("costcenterid", isOpeningCreditNote?"":(je.getCostcenter() == null ? "" : je.getCostcenter().getID()));
            obj.put("costcenterName", isOpeningCreditNote?"":(je.getCostcenter() == null ? "" : je.getCostcenter().getName()));
            obj.put("currencycode", (creditNote.getCurrency() == null ? currency.getCurrencyCode() : creditNote.getCurrency().getCurrencyCode()));
            obj.put("currencysymbol", (creditNote.getCurrency() == null ? currency.getSymbol() : creditNote.getCurrency().getSymbol()));
            obj.put("currencyid", (creditNote.getCurrency() == null ? currency.getCurrencyID() : creditNote.getCurrency().getCurrencyID()));
            obj.put("memo", creditNote.getMemo());
            obj.put("cntype",creditNote.getCntype());
            if (creditNote.getModifiedby() != null) {
                obj.put("lasteditedby", StringUtil.getFullName(creditNote.getModifiedby()));
            }
            obj.put("mergedCategoryData", "Credit Note");  //type of data
            obj.put("isOpeningBalanceTransaction", isOpeningCreditNote);
            
            double paidAmount = creditNote.isOtherwise() ? creditNote.getCnamount(): creditNote.getCustomerEntry().getAmount();
            KwlReturnObject bAmt = null;
            Date cnDate = creditNote.getCreationDate();
            double externalCurrencyRate = creditNote.getExchangeRateForOpeningTransaction();
            if (je != null) {
//                cnDate = je.getEntryDate();
                externalCurrencyRate = je.getExternalCurrencyRate();
            }
            if (creditNote.isIsOpeningBalenceCN() && creditNote.isConversionRateFromCurrencyToBase()) {
                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, paidAmount, currencyid, cnDate, externalCurrencyRate);
            } else {
                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, paidAmount, currencyid, cnDate, externalCurrencyRate);
            }
            double amountinbase = (Double) bAmt.getEntityList().get(0);
            obj.put("amount", paidAmount);
            obj.put("amountinbase", amountinbase);
            if (creditNote.getVendor() != null) {
                obj.put("personname", creditNote.getVendor().getName());
                obj.put("personid", creditNote.getVendor().getID());
                obj.put("personcode", creditNote.getVendor().getAcccode() != null ? creditNote.getVendor().getAcccode() : "");
            } else if (creditNote.getCustomer() != null) {
                obj.put("personname", creditNote.getCustomer().getName());
                obj.put("personid", creditNote.getCustomer().getID());
                obj.put("personcode", creditNote.getCustomer().getAcccode() != null ? creditNote.getCustomer().getAcccode() : "");
            }
            obj.put("salesPersonID", creditNote.getSalesPerson() == null ? "" : creditNote.getSalesPerson().getID());
            obj.put("journalentryid", isOpeningCreditNote ? "" : creditNote.getJournalEntry().getID());
            jsonArray.put(obj);

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            return jsonArray;
        }
    }
     public JSONArray getSalesReturnLinkedWithPayment(SalesReturn salesReturn, JSONArray jsonArray, Map<String, Object> requestParams) {
        try {
            DateFormat df = (DateFormat) requestParams.get(Constants.df);
            String companyid = requestParams.get(Constants.companyKey).toString();
            Date linkdate = (Date) requestParams.get("linkingdate");


            JSONObject obj = new JSONObject();
            JournalEntry je = null;
            String currencyid = salesReturn.getCurrency().getCurrencyID();
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);

            obj.put("billid", salesReturn.getID());
            obj.put("noteid", salesReturn.getID());
            obj.put("isPaymentAlso", salesReturn.isIsPayment());
            obj.put("noteno", salesReturn.getSalesReturnNumber());
            obj.put("companyid", salesReturn.getCompany().getCompanyID());
            obj.put("companyname", salesReturn.getCompany().getCompanyName());
            obj.put("withoutinventory", "");
            obj.put("transactionNo", salesReturn.getSalesReturnNumber());   //delivery order no
            obj.put("billno", salesReturn.getSalesReturnNumber());
            obj.put("linkingdate", df.format(linkdate));
            obj.put("date", df.format(salesReturn.getOrderDate()));
            obj.put("currencycode", (salesReturn.getCurrency() == null ? currency.getCurrencyCode() : salesReturn.getCurrency().getCurrencyCode()));
            obj.put("currencysymbol", (salesReturn.getCurrency() == null ? currency.getSymbol() : salesReturn.getCurrency().getSymbol()));
            obj.put("currencyid", (salesReturn.getCurrency() == null ? currency.getCurrencyID() : salesReturn.getCurrency().getCurrencyID()));
            obj.put("memo", salesReturn.getMemo());
            if (salesReturn.getModifiedby() != null) {
                obj.put("lasteditedby", StringUtil.getFullName(salesReturn.getModifiedby()));
            }
            obj.put("mergedCategoryData", "Sales Return");  
            double paidAmount = salesReturn.getTotalamount();
            KwlReturnObject bAmt = null;
            Date date = salesReturn.getOrderDate();
            double externalCurrencyRate = salesReturn.getExternalCurrencyRate();
            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, paidAmount, currencyid, date, externalCurrencyRate);
            double amountinbase = (Double) bAmt.getEntityList().get(0);
            obj.put("amount", paidAmount);
            obj.put("amountinbase", amountinbase);
            if (salesReturn.getCustomer() != null) {
                obj.put("personname", salesReturn.getCustomer().getName());
                obj.put("personid", salesReturn.getCustomer().getID());
                obj.put("personcode", salesReturn.getCustomer().getAcccode() != null ? salesReturn.getCustomer().getAcccode() : "");
            }
            jsonArray.put(obj);

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            return jsonArray;
        }
    }
     public ModelAndView saveDishonouredPayment(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray jArr = new JSONArray();
        boolean issuccess = false;
        String msg = "";
        String paymentid = "";
        String billno = "";
        String JENumBer = "";;
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("BR_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        try {
            List li = saveDashonouredPayment(request);
            paymentid = (String) li.get(0);
            billno = li.get(1).toString();
            JENumBer = li.get(2).toString();
            issuccess = true;
            msg = messageSource.getMessage("acc.makepayment.ChequeforPayment", null, RequestContextUtils.getLocale(request))+" "+ billno +" "+messageSource.getMessage("acc.paymentreceived.hasDishonouredDishonouredChequeJENo", null, RequestContextUtils.getLocale(request))+ ": <b>" + JENumBer + "</b>";  
            txnManager.commit(status);
        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
            msg = ex.getMessage();
        } catch (ServiceException ex) {
            txnManager.rollback(status);
            Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
            msg = ex.getMessage();
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = "" + ex.getMessage();
            Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
                jobj.put("paymentid", paymentid);
                jobj.put("data", jArr);
                jobj.put("billno", billno);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }   
    public List saveDashonouredPayment(HttpServletRequest request) throws ServiceException, SessionExpiredException, AccountingException {
        Payment payment = null;
        String oldjeid = null;
        List ll = new ArrayList();
        Set<String> amountDueUpdatedInvoiceIDSet = new HashSet<>();
        try {
            String paymentid = request.getParameter("billid");
            String cheque_Dis_Date = !StringUtil.isNullOrEmpty(request.getParameter("entrydate")) ? request.getParameter("entrydate") : "";
            DateFormat df = authHandler.getDateOnlyFormat();
            String jeid = null;
            boolean jeautogenflag = false;
            String jeSeqFormatId = "";
            String jeIntegerPart = "";
            String jeDatePrefix = "";
            String jeDateAfterPrefix = "";
            String jeDateSuffix = "";
            
            HashMap<String, JSONArray> Map1 = new HashMap();
            String jeentryNumber = null;
            JSONObject jedjson = null;
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String createdby = sessionHandlerImpl.getUserid(request);
            JournalEntry journalEntry = null;

            if (!StringUtil.isNullOrEmpty(paymentid)) {
                KwlReturnObject paymentObj = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentid);
                payment = (Payment) paymentObj.getEntityList().get(0);
                oldjeid = payment.getJournalEntry().getID();
                JournalEntry jetemp = payment.getJournalEntry();
                // Creation of reverse JE for payment JE
                synchronized (this) {
                    HashMap<String, Object> JEFormatParams = new HashMap<String, Object>();
                    JEFormatParams.put("moduleid", Constants.Acc_GENERAL_LEDGER_ModuleId);
                    JEFormatParams.put("modulename", CompanyPreferencesConstants.AUTOJOURNALENTRY);
                    JEFormatParams.put("companyid", companyid);
                    JEFormatParams.put("isdefaultFormat", true);

                    KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(JEFormatParams);
                    SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
                    Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                    seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_JOURNALENTRY, format.getID(), false, jetemp.getEntryDate());
                    jeentryNumber = (String)seqNumberMap.get(Constants.AUTO_ENTRYNUMBER);  //next auto generated number
                    jeIntegerPart = (String)seqNumberMap.get(Constants.SEQNUMBER);//integer Part
                    jeDatePrefix = (String)seqNumberMap.get(Constants.DATEPREFIX);//Date Prefix Part
                    jeDateAfterPrefix = (String)seqNumberMap.get(Constants.DATEAFTERPREFIX);  //Date After Prefix Part
                    jeDateSuffix = (String)seqNumberMap.get(Constants.DATESUFFIX);//Date Suffix Part
                    jeSeqFormatId = format.getID();
                    jeautogenflag = true;
                }

                Map<String, Object> jeDataMap = AccountingManager.getGlobalParams(request);
                jeDataMap.put("entrynumber", jeentryNumber);
                jeDataMap.put("autogenerated", jeautogenflag);
                jeDataMap.put(Constants.SEQFORMAT, jeSeqFormatId);
                jeDataMap.put(Constants.SEQNUMBER, jeIntegerPart);
                jeDataMap.put(Constants.DATEPREFIX, jeDatePrefix);
                jeDataMap.put(Constants.DATEAFTERPREFIX, jeDateAfterPrefix);
                jeDataMap.put(Constants.DATESUFFIX, jeDateSuffix);
                if (!cheque_Dis_Date.equals("")) {
                    jeDataMap.put("entrydate", df.parse(cheque_Dis_Date));
                } else {
                    jeDataMap.put("entrydate", jetemp.getEntryDate());
                }           
                jeDataMap.put("companyid", companyid);
                jeDataMap.put("createdby", createdby);
                String name = " ";
                if (payment.getVendor() != null) {
                    name += ", "+payment.getVendor().getName();
                } else if (payment.getCustomer() != null && !payment.getCustomer().equals("")) {
                    KwlReturnObject customerResult = accountingHandlerDAOobj.getObject(Customer.class.getName(), payment.getCustomer());
                    Customer customer = (Customer) customerResult.getEntityList().get(0);
                    name += ", "+customer.getName();
                }
                jeDataMap.put("memo", "Cancelled/Dishonored Cheque For Payment " + payment.getPaymentNumber() + name);            //ERM-744

                jeDataMap.put("currencyid", jetemp.getCurrency().getCurrencyID());
                //adding external currency rate for document create in foreing currency with exchange rate
                jeDataMap.put(Constants.EXTERNALCURRENCYRATE, !StringUtil.isNullObject(jetemp.getExternalCurrencyRate()) ? jetemp.getExternalCurrencyRate() : "");
                HashSet jedetails = new HashSet();
                KwlReturnObject jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Create Journal entry without JEdetails
                journalEntry = (JournalEntry) jeresult.getEntityList().get(0);
                journalEntry.setIsDishonouredCheque(true);
                journalEntry.setTransactionModuleid(Constants.Acc_Dishonoured_Make_Payment_ModuleId);
                journalEntry.setTransactionId(paymentid);
                jetemp.setIsDishonouredCheque(true);
                jeid = journalEntry.getID();
                jeDataMap.put("jeid", jeid);

                KwlReturnObject jeDetailsResult = accJournalEntryobj.getJournalEntryDetail(oldjeid, companyid);
                List list = jeDetailsResult.getEntityList();
                Iterator itr = list.iterator();
                while (itr.hasNext()) {
                    JournalEntryDetail jed = (JournalEntryDetail) itr.next();
                    jedjson = new JSONObject();
                    jedjson.put("srno", jedetails.size() + 1);
                    jedjson.put("companyid", companyid);
                    jedjson.put("amount", authHandler.formattedAmount(jed.getAmount(), companyid));
                    jedjson.put("accountid", jed.getAccount().getID());
                    jedjson.put("debit", !jed.isDebit());
                    jedjson.put("jeid", jeid);
                    jedjson.put("description", jed.getDescription());
                    jedjson.put(Constants.ISSEPARATED, jed.isIsSeparated());
                    KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                    JournalEntryDetail tempjed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                    jedetails.add(tempjed);
                }
            }
            /*
             * Restoring the amount of invoices linked to this payment if this payment is advance payment
             */
            Set<LinkDetailPayment> linkedDetais = payment.getLinkDetailPayments();
            for (LinkDetailPayment ldr : linkedDetais) {
                GoodsReceipt gr = ldr.getGoodsReceipt();
                double amountPaidConvertedInBaseCurrency = 0d;
                HashMap<String, Object> requestParams = new HashMap();
                requestParams.put(Constants.companyid, companyid);
                requestParams.put("gcurrencyid", payment.getCompany().getCurrency().getCurrencyID());
                double externalCurrencyRate = 1d;
                boolean isopeningBalanceRCP = payment.isIsOpeningBalencePayment();
                Date creationDate = null;
                creationDate = payment.getCreationDate();
                if (isopeningBalanceRCP) {
                    externalCurrencyRate = payment.getExchangeRateForOpeningTransaction();
                } else {
//                    creationDate = payment.getJournalEntry().getEntryDate();
                    externalCurrencyRate = payment.getJournalEntry().getExternalCurrencyRate();
                }
                String fromcurrencyid = payment.getCurrency().getCurrencyID();
                KwlReturnObject bAmt = null;
                if (isopeningBalanceRCP && payment.isConversionRateFromCurrencyToBase()) {// if Receipt is opening balance Receipt and Conversion rate is taken from user is Currency to base then following method will be called.
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, ldr.getAmount(), fromcurrencyid, creationDate, externalCurrencyRate);
                } else {
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, ldr.getAmount(), fromcurrencyid, creationDate, externalCurrencyRate);
                }
                amountPaidConvertedInBaseCurrency = (Double) bAmt.getEntityList().get(0);
                KwlReturnObject invoiceResult = updateInvoiceAmountDueAndReturnResult(gr, payment, payment.getCompany(), -ldr.getAmountInGrCurrency(), -amountPaidConvertedInBaseCurrency);
                if (invoiceResult != null && invoiceResult.getEntityList() != null && invoiceResult.getEntityList().size() > 0) {
                    gr = (GoodsReceipt) invoiceResult.getEntityList().get(0);
                    if ((gr.isIsOpeningBalenceInvoice() && gr.getOpeningBalanceAmountDue() != 0) || (!gr.isIsOpeningBalenceInvoice() && gr.getInvoiceamountdue() != 0)) {
                        gr.setAmountDueDate(null);//If amount due becomes non zero setting amountduedate to null
                    }
                }
                amountDueUpdatedInvoiceIDSet.add(gr.getID());
            }
            /*
             * Restoring the amount of invoices used in payment
             */
            Set<PaymentDetail> details = payment.getRows();
            if (details != null && !details.isEmpty()) {
                for (PaymentDetail detail : details) {
                    GoodsReceipt gr = detail.getGoodsReceipt();
                    double amountPaidConvertedInBaseCurrency = 0d;
                    HashMap<String, Object> requestParams = new HashMap();
                    requestParams.put(Constants.companyid, companyid);
                    requestParams.put("gcurrencyid", payment.getCompany().getCurrency().getCurrencyID());
                    double externalCurrencyRate = 1d;
                    boolean isopeningBalanceRCP = payment.isIsOpeningBalencePayment();
                    Date creationDate = null;
                    creationDate = payment.getCreationDate();
                    if (isopeningBalanceRCP) {
                        externalCurrencyRate = payment.getExchangeRateForOpeningTransaction();
                    } else {
//                        creationDate = payment.getJournalEntry().getEntryDate();
                        externalCurrencyRate = payment.getJournalEntry().getExternalCurrencyRate();
                    }
                    String fromcurrencyid = payment.getCurrency().getCurrencyID();
                    KwlReturnObject bAmt = null;
                    KwlReturnObject bDiscountAmt = null;
                    double discountAmtInInvoiceCurrency = authHandler.round(detail.getDiscountAmount() / detail.getExchangeRateForTransaction(), payment.getCompany().getCompanyID());
                    double discountAmount = detail.getDiscountAmount();
                    if (isopeningBalanceRCP && payment.isConversionRateFromCurrencyToBase()) {// if Receipt is opening balance Receipt and Conversion rate is taken from user is Currency to base then following method will be called.
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, detail.getAmount(), fromcurrencyid, creationDate, externalCurrencyRate);
                        bDiscountAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, discountAmount, fromcurrencyid, creationDate, externalCurrencyRate);
                    } else {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, detail.getAmount(), fromcurrencyid, creationDate, externalCurrencyRate);
                        bDiscountAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, discountAmount, fromcurrencyid, creationDate, externalCurrencyRate);
                    }
                    amountPaidConvertedInBaseCurrency = (Double) bAmt.getEntityList().get(0);
                    discountAmount=(Double) bDiscountAmt.getEntityList().get(0);
                    KwlReturnObject invoiceResult = updateInvoiceAmountDueAndReturnResult(gr, payment, payment.getCompany(), -(detail.getAmountInGrCurrency()+discountAmtInInvoiceCurrency), -(amountPaidConvertedInBaseCurrency+discountAmount));
                    if (invoiceResult != null && invoiceResult.getEntityList() != null && invoiceResult.getEntityList().size() > 0) {
                        gr = (GoodsReceipt) invoiceResult.getEntityList().get(0);
                        if ((gr.isIsOpeningBalenceInvoice() && gr.getOpeningBalanceAmountDue() != 0) || (!gr.isIsOpeningBalenceInvoice() && gr.getInvoiceamountdue() != 0)) {
                            gr.setAmountDueDate(null);//If amount due becomes non zero setting amountduedate to null
                        }
                    }
                    amountDueUpdatedInvoiceIDSet.add(gr.getID());
                }
            }

            /*
             * restoring the amount of credit notes linked to advance payment if payment is advance payment
             */
            Set<LinkDetailPaymentToCreditNote >linkedDetaisPaymentToCn = payment.getLinkDetailPaymentToCreditNote();
            for (LinkDetailPaymentToCreditNote ldr : linkedDetaisPaymentToCn) {
                CreditNote CN = ldr.getCreditnote();
                double amountPaidConvertedInBaseCurrency = 0d;
                HashMap<String, Object> requestParams = new HashMap();
                requestParams.put(Constants.companyid, payment.getCompany().getCompanyID());
                requestParams.put("gcurrencyid", payment.getCompany().getCurrency().getCurrencyID());
                double externalCurrencyRate = 1d;
                boolean isopeningBalanceRCP = payment.isIsOpeningBalencePayment();
                Date creationDate = null;
                creationDate = payment.getCreationDate();
                if (isopeningBalanceRCP) {
                    externalCurrencyRate = payment.getExchangeRateForOpeningTransaction();
                } else {
//                    creationDate = payment.getJournalEntry().getEntryDate();
                    externalCurrencyRate = payment.getJournalEntry().getExternalCurrencyRate();
                }
                String fromcurrencyid = payment.getCurrency().getCurrencyID();
                KwlReturnObject bAmt = null;
                if (isopeningBalanceRCP && payment.isConversionRateFromCurrencyToBase()) {// if Receipt is opening balance Receipt and Conversion rate is taken from user is Currency to base then following method will be called.
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, ldr.getAmount(), fromcurrencyid, creationDate, externalCurrencyRate);
                } else {
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, ldr.getAmount(), fromcurrencyid, creationDate, externalCurrencyRate);
                }
                amountPaidConvertedInBaseCurrency = (Double) bAmt.getEntityList().get(0);
                double paidncamount = ldr.getAmountInCNCurrency();
                KwlReturnObject cnjedresult = accPaymentDAOobj.updateCnAmount(CN.getID(), -paidncamount);
                KwlReturnObject cnopeningjedresult = accPaymentDAOobj.updateCnOpeningAmountDue(CN.getID(), -paidncamount);
                KwlReturnObject cnopeningbasejedresult = accPaymentDAOobj.updateCnOpeningBaseAmountDue(CN.getID(),-amountPaidConvertedInBaseCurrency);
            }
            /*
             * Restoring the amount of credit notes used in payment
             */
            Set<CreditNotePaymentDetails> notePaymentDetailses = payment.getCreditNotePaymentDetails();
            if (notePaymentDetailses != null && !notePaymentDetailses.isEmpty()) {
                for (CreditNotePaymentDetails cnpd : notePaymentDetailses) {
                    CreditNote note = cnpd.getCreditnote();
                    double paidncamount = cnpd.getAmountPaid();
                    KwlReturnObject cnjedresult = accPaymentDAOobj.updateCnAmount(note.getID(), -paidncamount);
                    KwlReturnObject cnopeningjedresult = accPaymentDAOobj.updateCnOpeningAmountDue(note.getID(), -paidncamount);
                    KwlReturnObject cnopeningbasejedresult = accPaymentDAOobj.updateCnOpeningBaseAmountDue(note.getID(), -cnpd.getAmountInBaseCurrency());
                }
            }
            /**
             * Restoring the amount due of Advance Receive payment used in
             * Make payment if Advance receive payment is externally linked from
             * report then we store entries in LinkDetailPaymentToAdvancePayment
             * because we can link multiple advance payment to refund Make
             * payment when we link externally from report. ERP-39559
             */
//            boolean isPaymentLinkedFromReport = false;
            Set<LinkDetailPaymentToAdvancePayment> linkDetailPaymentToAdvancePayment = payment.getLinkDetailPaymentsToAdvancePayment();
            for (LinkDetailPaymentToAdvancePayment ldp : linkDetailPaymentToAdvancePayment) {
//                isPaymentLinkedFromReport = true;
                Receipt receipt = ldp.getReceipt();
                if (receipt != null) {
                    Set<ReceiptAdvanceDetail> receiptAdvanceDetail = receipt.getReceiptAdvanceDetails();
                    for (ReceiptAdvanceDetail rad : receiptAdvanceDetail) {
                        if (!StringUtil.isNullObject(rad)) {
                            double advReceiptAmtDue = rad.getAmountDue();
                            double finalAmountDue = authHandler.round((advReceiptAmtDue + ldp.getAmountInPaymentCurrency()), companyid);
                            rad.setAmountDue(finalAmountDue);
                        }
                    }
                }
            }
            /**
             * If payment is linked to receipt at transaction time on line level
             * then we store the entry of linked advance receive payment in
             * AdvanceDetail as only one advance receive payment can be linked to
             * one refund line item on line level but we can take multiple
             * refund or deposit on line level. ERP-39559
             */
//            if (!isPaymentLinkedFromReport) {
                Set<AdvanceDetail> advanceDetails = payment.getAdvanceDetails();
                if (!StringUtil.isNullObject(advanceDetails) && !advanceDetails.isEmpty()) {
                    for (AdvanceDetail ad : advanceDetails) {
                        ReceiptAdvanceDetail receiptAdvanceDetail = ad.getReceiptAdvanceDetails();
                        if (receiptAdvanceDetail != null) {
                            if (!StringUtil.isNullObject(receiptAdvanceDetail)) {
                                double advancePaymentAmount = ad.getAmount();
                                double exchangeRate = ad.getExchangeratefortransaction();
                                double convertedAmountInReceiveCurrency = (advancePaymentAmount / exchangeRate);
                                double advReceiptAmtDue = receiptAdvanceDetail.getAmountDue();
                                double finalAmountDue = authHandler.round((advReceiptAmtDue + convertedAmountInReceiveCurrency), companyid);
                                receiptAdvanceDetail.setAmountDue(finalAmountDue);
                            }
                        }
                        /**
                         * Restoring the amount due of Refund Receipt which is
                         * linked to Advance Payment in case Payment is marked
                         * as dishonoured.
                         */
                        String paymentAdvanceDetailsId = ad.getId();
                        JSONObject params = new JSONObject();
                        params.put("paymentadvancedetail", paymentAdvanceDetailsId);
                        params.put(Constants.companyid, companyid);
                        int updateCnt = accPaymentDAOobj.updateRefundReceiptLinkedWithAdvance(params);
                        
                    }
                    /**
                     * Restoring the amount due of Refund Receipt which is
                     * externally i.e from report linked to Advance Payment in
                     * case Payment is marked as dishonoured.
                     */
                    JSONObject params = new JSONObject();
                    params.put("paymentId", paymentid);
                    params.put(Constants.companyid, companyid);
                    KwlReturnObject refundReceiptDetailsReturnObj = accPaymentDAOobj.getRefundReceiptLinkDetailsLinkedWithAdvance(params);
                    if (refundReceiptDetailsReturnObj.getEntityList() != null && refundReceiptDetailsReturnObj.getEntityList().size() > 0) {
                        Iterator itr = refundReceiptDetailsReturnObj.getEntityList().iterator();
                        while (itr.hasNext()) {
                            LinkDetailReceiptToAdvancePayment linkDetailReceiptToAdvancePayment = (LinkDetailReceiptToAdvancePayment) itr.next();
                            Receipt receipt = linkDetailReceiptToAdvancePayment.getReceipt();
                            Set<ReceiptAdvanceDetail> receiptAdvanceDetailSet = receipt.getReceiptAdvanceDetails();
                            for (ReceiptAdvanceDetail receiptAdvanceDetail : receiptAdvanceDetailSet) {
                                if (StringUtil.isNullOrEmpty(receiptAdvanceDetail.getAdvancedetailid())) {
                                    double amountDue = receiptAdvanceDetail.getAmountDue();
                                    double amountReceivedInreceitpCurrency = linkDetailReceiptToAdvancePayment.getAmountInPaymentCurrency();
                                    double exchangeRate = linkDetailReceiptToAdvancePayment.getExchangeRateForTransaction();
                                    double finalAmountDue = authHandler.round((amountDue+(amountReceivedInreceitpCurrency*exchangeRate)), companyid);
                                    params.put("amountDue", finalAmountDue);
                                    int cnt = accPaymentDAOobj.updateRefundReceiptExternallyLinkedWithAdvance(params);
                                }
                            }
                        }
                    }
                }
//            }

            /*
             * set payment as not dihonoured and set the corresponding JE
             */
            payment.setIsDishonouredCheque(true);
            payment.setDisHonouredChequeJe(journalEntry);

            String roundingJENo = "";
            String roundingJEIds = "";
            //Deleting Rounding JE of thoses Invoices whose amount due updated due to dishouned cheque
            if (!amountDueUpdatedInvoiceIDSet.isEmpty()) {
                String invIDs = "";
                for (String invID : amountDueUpdatedInvoiceIDSet) {
                    invIDs = invID + ",";
                }
                if (!StringUtil.isNullOrEmpty(invIDs)) {
                    invIDs = invIDs.substring(0, invIDs.length() - 1);
                }
                KwlReturnObject jeResult = accJournalEntryobj.getRoundingJournalEntryByGRIds(invIDs, companyid);
                List<JournalEntry> jeList = jeResult.getEntityList();
                for (JournalEntry roundingJE : jeList) {
                    roundingJENo = roundingJE.getEntryNumber() + ",";
                    roundingJEIds = roundingJE.getID() + ",";
                    deleteJEArray(roundingJE.getID(), companyid);
                }
                if (!StringUtil.isNullOrEmpty(roundingJENo)) {
                    roundingJENo = roundingJENo.substring(0, roundingJENo.length() - 1);
                }
                if (!StringUtil.isNullOrEmpty(roundingJEIds)) {
                    roundingJEIds = roundingJEIds.substring(0, roundingJEIds.length() - 1);
                }
            }
            auditTrailObj.insertAuditLog(AuditAction.MAKE_PAYMENT, "User " + sessionHandlerImpl.getUserFullName(request) + " has updated a payment " + payment.getPaymentNumber() + " for Cancelled/Dishonored Cheque with Cancelled/Dishonored JE No. " + payment.getDisHonouredChequeJe().getEntryNumber(), request, payment.getID());
            if (!StringUtil.isNullOrEmpty(roundingJENo)) {
                auditTrailObj.insertAuditLog(AuditAction.ROUNDING_OFF_JE_DELETED, "User " + sessionHandlerImpl.getUserFullName(request) + " has updated a payment " + payment.getPaymentNumber() + " for Cancelled/Dishonored Cheque." + messageSource.getMessage("acc.roundingje.roundingje", null, RequestContextUtils.getLocale(request)) + " " + roundingJENo + " " + messageSource.getMessage("acc.roundingje.roundingjedelted", null, RequestContextUtils.getLocale(request)) + ".", request, roundingJEIds);
            }
            
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("accVendorPaymentControllerNew.saveDashonouredPayment : " + ex.getMessage(), ex);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accVendorPaymentControllerNew.saveDashonouredPayment : " + ex.getMessage(), ex);
        }
        ll.add(payment.getID());
        ll.add(payment.getPaymentNumber());
        ll.add(payment.getDisHonouredChequeJe().getEntryNumber());
        return (ArrayList) ll;
    } 
    public ModelAndView revertDishonouredPayment(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        String paymentid = "";
        String billno = "";
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("BR_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            List li = revertDishonouredPayment(request);
            paymentid = (String) li.get(0);
            billno = li.get(1).toString();
            Set<String> amountDueUpdatedInvoiceIDSet = (Set<String>) li.get(2);
            issuccess = true;
            msg = messageSource.getMessage("acc.makepayment.DishonouredChequeforPayment", null, RequestContextUtils.getLocale(request))+" "+ billno +" "+messageSource.getMessage("acc.paymentreceived.hasbeenrevertedSuccessfully", null, RequestContextUtils.getLocale(request));  
            txnManager.commit(status);
            
            //========Code for Rounding JE Started=============
            paramJobj.put("paymentNumber", billno);
            try{
                accVendorPaymentModuleServiceObj.postRoundingJEOnRevertDishonouredPayment(paramJobj,amountDueUpdatedInvoiceIDSet);
            }catch(Exception ex){
                Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
            }
            //========Code for Rounding JE Ended=============
        } catch (AccountingException ex) {
            txnManager.rollback(status);
            Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
            msg = ex.getMessage();
        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
            msg = ex.getMessage();
        } catch (ServiceException ex) {
            txnManager.rollback(status);
            Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
            msg = ex.getMessage();
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = "" + ex.getMessage();
            Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
                jobj.put("paymentid", paymentid);
                jobj.put("billno", billno);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public List revertDishonouredPayment(HttpServletRequest request) throws ServiceException, SessionExpiredException, AccountingException {
        Payment payment = null;
        String disHonouredChequeJE = null,disHonouredChequeJENumber="";
        KwlReturnObject jeDetailsResult = null;
        Set<String> amountDueUpdatedInvoiceIDSet = new HashSet<>();
        List ll = new ArrayList();
        try {
            String paymentid = request.getParameter("billid");
            String companyid = sessionHandlerImpl.getCompanyid(request);
            JournalEntry journalEntry = null;

            if (!StringUtil.isNullOrEmpty(paymentid)) {
                KwlReturnObject paymentObj = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentid);
                payment = (Payment) paymentObj.getEntityList().get(0);
                if (payment != null && payment.getDisHonouredChequeJe() != null) {
                    disHonouredChequeJE = payment.getDisHonouredChequeJe().getID();
                    journalEntry = payment.getDisHonouredChequeJe();
                    disHonouredChequeJENumber=journalEntry.getEntryNumber();
                }
            }
            /*
             * Recalculating the amounts of invoices linked to advance payment
             */
            Set<LinkDetailPayment> linkedDetais = payment.getLinkDetailPayments();
            for (LinkDetailPayment ldr : linkedDetais) {
                GoodsReceipt gr = ldr.getGoodsReceipt();
                double amountPaidConvertedInBaseCurrency = 0d;
                HashMap<String, Object> requestParams = new HashMap();
                requestParams.put(Constants.companyid, payment.getCompany().getCompanyID());
                requestParams.put("gcurrencyid", payment.getCompany().getCurrency().getCurrencyID());
                double externalCurrencyRate = 1d;
                boolean isopeningBalanceRCP = payment.isIsOpeningBalencePayment();
                Date creationDate = null;
                creationDate = payment.getCreationDate();
                if (isopeningBalanceRCP) {
                    externalCurrencyRate = payment.getExchangeRateForOpeningTransaction();
                } else {
//                    creationDate = payment.getJournalEntry().getEntryDate();
                    externalCurrencyRate = payment.getJournalEntry().getExternalCurrencyRate();
                }
                String fromcurrencyid = payment.getCurrency().getCurrencyID();
                KwlReturnObject bAmt = null;
                if (isopeningBalanceRCP && payment.isConversionRateFromCurrencyToBase()) {// if Receipt is opening balance Receipt and Conversion rate is taken from user is Currency to base then following method will be called.
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, ldr.getAmount(), fromcurrencyid, creationDate, externalCurrencyRate);
                } else {
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, ldr.getAmount(), fromcurrencyid, creationDate, externalCurrencyRate);
                }
                amountPaidConvertedInBaseCurrency = (Double) bAmt.getEntityList().get(0);
                double amountDue=0.0;
                if (gr.isIsOpeningBalenceInvoice()) {
                    amountDue = gr.getOpeningBalanceAmountDue();
                } else {
                    amountDue = gr.getInvoiceamountdue();
                }
                if (amountDue < ldr.getAmountInGrCurrency()) {
                     throw new AccountingException("Invoice(s) linked with selected payment are already paid, so can not be reverted.");
                    
                } else {
                    KwlReturnObject invoiceResult = updateInvoiceAmountDueAndReturnResult(gr, payment, payment.getCompany(), ldr.getAmountInGrCurrency(), amountPaidConvertedInBaseCurrency);
                    /*
                     * Update the amountduedate while Reverting Dishounered cheque
                     */
                    if (invoiceResult != null && invoiceResult.getEntityList() != null && invoiceResult.getEntityList().size() > 0) {
                        gr = (GoodsReceipt) invoiceResult.getEntityList().get(0);
                        if ((gr.isIsOpeningBalenceInvoice() && gr.getOpeningBalanceAmountDue() == 0) || (!gr.isIsOpeningBalenceInvoice() && gr.getInvoiceamountdue() == 0)) {
                            try {
                                HashMap<String, Object> dataMap = new HashMap<>();
//                                dataMap.put("amountduedate", payment != null ? (payment.isIsOpeningBalencePayment() ? payment.getCreationDate() : payment.getJournalEntry().getEntryDate()) : null);
                                dataMap.put("amountduedate", payment != null ? payment.getCreationDate() : null);
                                accGoodsReceiptobj.saveGoodsReceiptAmountDueZeroDate(gr, dataMap);
                            } catch (Exception ex) {
                                System.out.println("" + ex.getMessage());
                            }
                        }
                    }
                }
                amountDueUpdatedInvoiceIDSet.add(gr.getID());
            }

            /*
             * Recalculating the amount due of invocies used in payment.
             */
            Set<PaymentDetail> details = payment.getRows();
            if (details != null && !details.isEmpty()) {
                for (PaymentDetail detail : details) {
                    GoodsReceipt gr = detail.getGoodsReceipt();
                    double amountPaidConvertedInBaseCurrency = 0d;
                    HashMap<String, Object> requestParams = new HashMap();
                    requestParams.put(Constants.companyid, companyid);
                    requestParams.put("gcurrencyid", payment.getCompany().getCurrency().getCurrencyID());
                    double externalCurrencyRate = 1d;
                    boolean isopeningBalanceRCP = payment.isIsOpeningBalencePayment();
                    Date creationDate = null;
                    creationDate = payment.getCreationDate();
                    if (isopeningBalanceRCP) {
                        externalCurrencyRate = payment.getExchangeRateForOpeningTransaction();
                    } else {
//                        creationDate = payment.getJournalEntry().getEntryDate();
                        externalCurrencyRate = payment.getJournalEntry().getExternalCurrencyRate();
                    }
                    String fromcurrencyid = payment.getCurrency().getCurrencyID();
                    KwlReturnObject bAmt = null;
                    KwlReturnObject bDiscountAmt = null;
                    double discountAmtInInvoiceCurrency = authHandler.round(detail.getDiscountAmount() / detail.getExchangeRateForTransaction(), payment.getCompany().getCompanyID());
                    double discountAmount = detail.getDiscountAmount();
                    
                    if (isopeningBalanceRCP && payment.isConversionRateFromCurrencyToBase()) {// if Receipt is opening balance Receipt and Conversion rate is taken from user is Currency to base then following method will be called.
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, detail.getAmount(), fromcurrencyid, creationDate, externalCurrencyRate);
                        bDiscountAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, discountAmount, fromcurrencyid, creationDate, externalCurrencyRate);
                    } else {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, detail.getAmount(), fromcurrencyid, creationDate, externalCurrencyRate);
                        bDiscountAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, discountAmount, fromcurrencyid, creationDate, externalCurrencyRate);
                    }
                    amountPaidConvertedInBaseCurrency = (Double) bAmt.getEntityList().get(0);
                    double amountDue = 0.0;
                    if (gr.isIsOpeningBalenceInvoice()) {
                        amountDue = gr.getOpeningBalanceAmountDue();
                    } else {
                        amountDue = gr.getInvoiceamountdue();
                    }
                    if (amountDue < detail.getAmountInGrCurrency()+discountAmtInInvoiceCurrency) {
                        throw new AccountingException("Invoice(s) linked with selected payment are already paid,so can not be reverted.");
                    } else {
                        KwlReturnObject invoiceResult = updateInvoiceAmountDueAndReturnResult(gr, payment, payment.getCompany(), (detail.getAmountInGrCurrency() + discountAmtInInvoiceCurrency), (amountPaidConvertedInBaseCurrency + discountAmount));
                        /*
                         * Update the amountduedate while Reverting Dishounered
                         * cheque
                         */
                        if (invoiceResult != null && invoiceResult.getEntityList() != null && invoiceResult.getEntityList().size() > 0) {
                            gr = (GoodsReceipt) invoiceResult.getEntityList().get(0);
                            if ((gr.isIsOpeningBalenceInvoice() && gr.getOpeningBalanceAmountDue() == 0) || (!gr.isIsOpeningBalenceInvoice() && gr.getInvoiceamountdue() == 0)) {
                                try {
                                    HashMap<String, Object> dataMap = new HashMap<>();
//                                    dataMap.put("amountduedate", payment != null ? (payment.isIsOpeningBalencePayment() ? payment.getCreationDate() : payment.getJournalEntry().getEntryDate()) : null);
                                    dataMap.put("amountduedate", payment != null ? payment.getCreationDate() : null);
                                    accGoodsReceiptobj.saveGoodsReceiptAmountDueZeroDate(gr, dataMap);
                                } catch (Exception ex) {
                                    System.out.println("" + ex.getMessage());
                                }
                            }
                        }
                    }
                    amountDueUpdatedInvoiceIDSet.add(gr.getID());
                }
            }

            /*
             * Recalculating the amount due of CNs linked to advance payment
             */
            Set<LinkDetailPaymentToCreditNote>linkedDetaispaymentToCn = payment.getLinkDetailPaymentToCreditNote();
            for (LinkDetailPaymentToCreditNote ldr : linkedDetaispaymentToCn) {
                CreditNote CN = ldr.getCreditnote();
                double amountReceivedConvertedInBaseCurrency = 0d;
                HashMap<String, Object> requestParams = new HashMap();
                requestParams.put(Constants.companyid, companyid);
                requestParams.put("gcurrencyid", payment.getCompany().getCurrency().getCurrencyID());
                double externalCurrencyRate = 1d;
                boolean isopeningBalanceRCP = payment.isIsOpeningBalencePayment();
                Date creationDate = null;
                creationDate = payment.getCreationDate();
                if (isopeningBalanceRCP) {
                    externalCurrencyRate = payment.getExchangeRateForOpeningTransaction();
                } else {
//                    creationDate = payment.getJournalEntry().getEntryDate();
                    externalCurrencyRate = payment.getJournalEntry().getExternalCurrencyRate();
                }
                String fromcurrencyid = payment.getCurrency().getCurrencyID();
                KwlReturnObject bAmt = null;
                if (isopeningBalanceRCP && payment.isConversionRateFromCurrencyToBase()) {// if Receipt is opening balance Receipt and Conversion rate is taken from user is Currency to base then following method will be called.
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, ldr.getAmount(), fromcurrencyid, creationDate, externalCurrencyRate);
                } else {
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, ldr.getAmount(), fromcurrencyid, creationDate, externalCurrencyRate);
                }
                amountReceivedConvertedInBaseCurrency = (Double) bAmt.getEntityList().get(0);
                double paidcnamount = ldr.getAmountInCNCurrency();
                    double amountDue = 0.0;
                    if (CN.isIsOpeningBalenceCN()) {
                        amountDue = CN.getOpeningBalanceAmountDue();
                    } else {
                        amountDue = CN.getCnamountdue();
                    }
                    if (amountDue < paidcnamount) {
                        throw new AccountingException("Credit note linked with selected payment is already paid,so can not be reverted.");
                    } else {
                        KwlReturnObject cnjedresult = accPaymentDAOobj.updateCnAmount(CN.getID(), paidcnamount);
                        KwlReturnObject cnopeningjedresult = accPaymentDAOobj.updateCnOpeningAmountDue(CN.getID(), paidcnamount);
                        KwlReturnObject cnopeningbasejedresult = accPaymentDAOobj.updateCnOpeningBaseAmountDue(CN.getID(),amountReceivedConvertedInBaseCurrency);
                    }                
            }
            /*
             * Recalculating the amount due of CNs used in payment
             */
            Set<CreditNotePaymentDetails> notePaymentDetails = payment.getCreditNotePaymentDetails();
            if (notePaymentDetails != null && !notePaymentDetails.isEmpty()) {
                for (CreditNotePaymentDetails cnpd : notePaymentDetails) {
                    CreditNote note = cnpd.getCreditnote();
                    double paidcnamount = cnpd.getAmountPaid();
                    double amountDue = 0.0;
                    if (note.isIsOpeningBalenceCN()) {
                        amountDue = note.getOpeningBalanceAmountDue();
                    } else {
                        amountDue = note.getCnamountdue();
                    }
                    if (amountDue < paidcnamount) {
                        throw new AccountingException("Credit note linked with selected payment is already paid,so can not be reverted.");
                    } else {
                        KwlReturnObject cnjedresult = accPaymentDAOobj.updateCnAmount(note.getID(), paidcnamount);
                        KwlReturnObject cnopeningjedresult = accPaymentDAOobj.updateCnOpeningAmountDue(note.getID(), paidcnamount);
                        KwlReturnObject cnopeningbasejedresult = accPaymentDAOobj.updateCnOpeningBaseAmountDue(note.getID(), cnpd.getAmountInBaseCurrency());
                    }
                }
            }
            
            /**
             * Recalculating the amount due of Advance Receive payment used in Make
             * payment if Advance receive payment is externally linked from
             * report then we store entries in LinkDetailPaymentToAdvancePayment
             * because we can link multiple advance payment to refund Make
             * payment when we link externally from report. ERP-39559
             */
//            boolean isPaymentLinkedFromReport = false;
            Set<LinkDetailPaymentToAdvancePayment> linkDetailPaymentToAdvancePayment = payment.getLinkDetailPaymentsToAdvancePayment();
            for (LinkDetailPaymentToAdvancePayment ldp : linkDetailPaymentToAdvancePayment) {
//                isPaymentLinkedFromReport = true;
                Receipt receipt = ldp.getReceipt();
                if (receipt != null) {
                    Set<ReceiptAdvanceDetail> receiptAdvanceDetail = receipt.getReceiptAdvanceDetails();
                    for (ReceiptAdvanceDetail rad : receiptAdvanceDetail) {
                        if (!StringUtil.isNullObject(receiptAdvanceDetail)) {
                            double advReceiptAmtDue = rad.getAmountDue();
                            double finalAmountDue = authHandler.round((advReceiptAmtDue - ldp.getAmountInPaymentCurrency()), companyid);
                            if (advReceiptAmtDue < ldp.getAmountInPaymentCurrency()) {
                                throw new AccountingException("Advance receive payment linked with selected payment is already paid,so can not be reverted.");
                            }
                            rad.setAmountDue(finalAmountDue);
                        }
                    }
                }
            }
            /**
             * If payment is linked to receipt at transaction time on line level
             * then we store the entry of linked advance receive payment in
             * AdvanceDetail as only one advance receive payment can be linked
             * to one refund line item on line level but we can take multiple
             * refund or deposit on line level. ERP-39559
             */
//            if (!isPaymentLinkedFromReport) {
                Set<AdvanceDetail> advanceDetails = payment.getAdvanceDetails();
                if (!StringUtil.isNullObject(advanceDetails) && !advanceDetails.isEmpty()) {
                    for (AdvanceDetail ad : advanceDetails) {
                        ReceiptAdvanceDetail receiptAdvanceDetail = ad.getReceiptAdvanceDetails();
                        if (receiptAdvanceDetail != null) {         //For Refund payment
                            double advancePaymentAmount = ad.getAmount();
                            double amountDue = receiptAdvanceDetail.getAmountDue();
                            double exchangeRate = ad.getExchangeratefortransaction();
                            double amountConvertedInReceiptAdvanceCurrency = advancePaymentAmount / exchangeRate;
                            double finalAmtDue = authHandler.round((amountDue - amountConvertedInReceiptAdvanceCurrency), companyid);
                            amountConvertedInReceiptAdvanceCurrency = authHandler.round((amountConvertedInReceiptAdvanceCurrency), companyid);
                            if (amountDue < amountConvertedInReceiptAdvanceCurrency) {
                                throw new AccountingException("Advance receive payment linked with selected payment is already paid,so can not be reverted.");
                            }
                            receiptAdvanceDetail.setAmountDue(finalAmtDue);
                        }
                        /**
                         * Recalculating and Reverting the amount due of Refund Payment which is
                         * linked to Advance payment in case payment is marked
                         * as dishonoured.
                         */
                        String paymentAdvanceDetail = ad.getId();           //For Advance payment
                        JSONObject params = new JSONObject();
                        params.put("paymentadvancedetail", paymentAdvanceDetail);
                        params.put("isToRevertAmtDue", true);
                        params.put(Constants.companyid, companyid);
                        /**
                         * Below code gets the refund receipt details which is
                         * linked to Advance payment which is being reverted and
                         * checks if amount due is less then the amount paid in
                         * adv payment if yes then throws an exception else
                         * updates the amount due of refund receipt.
                         */
                        KwlReturnObject receiptDetailsReturnObj = accPaymentDAOobj.getRefundReceiptDetailsLinkedToAdvance(params);
                        if (receiptDetailsReturnObj.getEntityList() != null && receiptDetailsReturnObj.getEntityList().size() > 0) {
                            Iterator itr = receiptDetailsReturnObj.getEntityList().iterator();
                            while (itr.hasNext()) {
                                ReceiptAdvanceDetail receiptAdvanceDetail1 = (ReceiptAdvanceDetail) itr.next();
                                double advancePaymentAmount = ad.getAmount();
                                double amountDue = receiptAdvanceDetail1.getAmountDue();
                                double exchangeRate = ad.getExchangeratefortransaction();
                                double amountConvertedInReceiptRefundCurrency = receiptAdvanceDetail1.getAmount();
                                if (amountDue < amountConvertedInReceiptRefundCurrency) {
                                    throw new AccountingException("Refund Receipt linked with selected payment is already paid, so can not be reverted.");
                                }
                            }
                            accPaymentDAOobj.updateRefundReceiptLinkedWithAdvance(params);
                        }
                    }
                /**
                 * Restoring the amount due of Refund Receipt which is
                 * externally i.e from report linked to Advance payment in case
                 * payment is marked as dishonoured.
                 */
                JSONObject params = new JSONObject();
                params.put("paymentId", paymentid);
                params.put(Constants.companyid, companyid);
                params.put("isToSubtractAmount", true);
                /**
                 * Below code gets the linking information of advance
                 * receipt of payment and checks if amount due is less
                 * then the amount received in receipt currency if yes then throws an
                 * exception else updates the amount due of refund receipt .
                 */
                KwlReturnObject refundReceiptDetailsReturnObj = accPaymentDAOobj.getRefundReceiptLinkDetailsLinkedWithAdvance(params);
                if (refundReceiptDetailsReturnObj.getEntityList() != null && refundReceiptDetailsReturnObj.getEntityList().size() > 0) {
                    Iterator itr = refundReceiptDetailsReturnObj.getEntityList().iterator();
                    while (itr.hasNext()) {
                        LinkDetailReceiptToAdvancePayment linkDetailReceiptToAdvancePayment = (LinkDetailReceiptToAdvancePayment) itr.next();
                        Receipt receipt = linkDetailReceiptToAdvancePayment.getReceipt();
                        Set<ReceiptAdvanceDetail> receiptAdvanceDetailSet = receipt.getReceiptAdvanceDetails();
                        for (ReceiptAdvanceDetail receiptAdvanceDetail : receiptAdvanceDetailSet) {
                            if (StringUtil.isNullOrEmpty(receiptAdvanceDetail.getAdvancedetailid())) {
                                double amountDue = receiptAdvanceDetail.getAmountDue();
                                double amountReceivedInreceitpCurrency = linkDetailReceiptToAdvancePayment.getAmountInPaymentCurrency();
                                double exchangeRateForTransaction = linkDetailReceiptToAdvancePayment.getExchangeRateForTransaction();
                                double amountConvertedInPaymentRefundCurrency = (amountReceivedInreceitpCurrency * exchangeRateForTransaction);
                                double finalAmountDue = authHandler.round((amountDue - amountConvertedInPaymentRefundCurrency), companyid);
                                if (amountDue < amountReceivedInreceitpCurrency) {
                                    throw new AccountingException("Refund Receipt linked with selected payment is already paid, so can not be reverted.");
                                }
                                params.put("amountDue", finalAmountDue);
                                accPaymentDAOobj.updateRefundReceiptExternallyLinkedWithAdvance(params);
                            }
                        }
                    }
                }
            }
//            }
            /*
             * Setting dishonoured flag false and deleting the dishonoured JE
             */
            payment.setIsDishonouredCheque(false);
            payment.getJournalEntry().setIsDishonouredCheque(false);
            accPaymentDAOobj.updateDisHonouredJEFromPayment(paymentid, companyid);
            jeDetailsResult = accJournalEntryobj.deleteJEDtails(disHonouredChequeJE, companyid);
            jeDetailsResult = accJournalEntryobj.deleteJE(disHonouredChequeJE, companyid);
            auditTrailObj.insertAuditLog(AuditAction.MAKE_PAYMENT, "User " + sessionHandlerImpl.getUserFullName(request) + " has reverted Cancelled/Dishonored Cheque for Payment " + payment.getPaymentNumber()+" along with Cancelled/Dishonored JE No. "+disHonouredChequeJENumber+" has deleted.", request, payment.getID());

        } catch (AccountingException ex) {
            throw new AccountingException(ex.getMessage(), ex);

        } catch (Exception ex) {
            throw ServiceException.FAILURE("accVendorPaymentControllerNew.revertDishonouredPayment : " + ex.getMessage(), ex);
        }
        ll.add(payment.getID());
        ll.add(payment.getPaymentNumber());
        ll.add(amountDueUpdatedInvoiceIDSet);
        return (ArrayList) ll;
    }

    /* saving linking information in Make Payment & Credit Note table If Payment is made with Credit Note*/
    
    public void saveLinkingInformationOfPaymentWithCN(CreditNote creditNote, Payment payment, String paymentNo) throws ServiceException {

        try {
            /* Save Credit Note Linking & Make Paymnet Linking information in linking table*/
            HashMap<String, Object> requestParamsLinking = new HashMap<String, Object>();
            requestParamsLinking.put("linkeddocid", payment.getID());
            requestParamsLinking.put("docid", creditNote.getID());
            requestParamsLinking.put("moduleid", Constants.Acc_Make_Payment_ModuleId);
            requestParamsLinking.put("linkeddocno", paymentNo);
            requestParamsLinking.put("sourceflag", 0);
            KwlReturnObject result = accVendorPaymentobj.updateEntryInCreditNoteLinkingTable(requestParamsLinking);

            requestParamsLinking.put("linkeddocid", creditNote.getID());
            requestParamsLinking.put("docid", payment.getID());
            requestParamsLinking.put("moduleid", Constants.Acc_Credit_Note_ModuleId);
            requestParamsLinking.put("linkeddocno", creditNote.getCreditNoteNumber());
            requestParamsLinking.put("sourceflag", 1);
            result = accVendorPaymentobj.savePaymentLinking(requestParamsLinking);

        } catch (Exception ex) {
            Logger.getLogger(accReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
    }
    
    /* saving linking information in Make Payment & Purchase Invoice table If Payment is made against Purchase Invoice*/
    public void saveLinkingInformationOfPaymentWithInvoice(GoodsReceipt invoice, Payment payment, String paymentNo) throws ServiceException {

        try {
            /* Save Purchase Invoice Linking & Make Paymnet Linking information in linking table*/
            HashMap<String, Object> requestParamsLinking = new HashMap<String, Object>();
            requestParamsLinking.put("linkeddocid", payment.getID());
            requestParamsLinking.put("docid", invoice.getID());
            requestParamsLinking.put("moduleid", Constants.Acc_Make_Payment_ModuleId);
            requestParamsLinking.put("linkeddocno", paymentNo);
            requestParamsLinking.put("sourceflag", 0);
            KwlReturnObject result = accGoodsReceiptobj.saveVILinking(requestParamsLinking);

            requestParamsLinking.put("linkeddocid", invoice.getID());
            requestParamsLinking.put("docid", payment.getID());
            requestParamsLinking.put("moduleid", Constants.Acc_Vendor_Invoice_ModuleId);
            requestParamsLinking.put("linkeddocno", invoice.getGoodsReceiptNumber());
            requestParamsLinking.put("sourceflag", 1);
            result = accVendorPaymentobj.savePaymentLinking(requestParamsLinking);

        } catch (Exception ex) {
            Logger.getLogger(accReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
    }
    
    /**
     * Description : Method is used to link Refund Payment to Advance Payment
     * @param <request> used to get companyid, paymentid, User full name
     * @param <advancePaymentArray> used to get details of Advance Payment
     * @param <counterMap> used for counter
     * @return List
     * @throws ServiceException
     * @throws SessionExpiredException 
     */
    public List linkPaymentToAdvancePayment(HttpServletRequest request, JSONArray advancePaymentArray, Map<String, Object> counterMap) throws ServiceException, SessionExpiredException, AccountingException {
        List result = new ArrayList();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String paymentid = request.getParameter("paymentid");
            // get company object
            KwlReturnObject cmpResult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpResult.getEntityList().get(0);
            // get payment object
            KwlReturnObject paymentObj = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentid);
            Payment payment = (Payment) paymentObj.getEntityList().get(0);
            String paymentNo = payment.getPaymentNumber();

            JSONArray jArr = new JSONArray();
            String linkedAdvPaymentIds = "";
            String linkedAdvPaymentNos = "";
            double currentAmtDueOfAdvDetail=0.0d;
            double linkedAmtInPaymentCurrency=0.0d;
            // creating a hash map with payment and their linked advance payment
            for (int k = 0; k < advancePaymentArray.length(); k++) {
                JSONObject jSONObject = advancePaymentArray.getJSONObject(k);
                if (jSONObject.optDouble("linkamount", 0) != 0) {
                    String advanceDetailId = jSONObject.optString("documentid", "");
                    double paymentAmount = jSONObject.optDouble("linkamount", 0);
                    double exchangeratefortransaction = jSONObject.optDouble("exchangeratefortransaction", 1);
                    
                    KwlReturnObject receiptAdvanceDetailObj = accountingHandlerDAOobj.getObject(ReceiptAdvanceDetail.class.getName(), advanceDetailId);
                    ReceiptAdvanceDetail receiptAdvanceDetail = (ReceiptAdvanceDetail) receiptAdvanceDetailObj.getEntityList().get(0);
                    Receipt receipt = receiptAdvanceDetail.getReceipt();
                    currentAmtDueOfAdvDetail = receiptAdvanceDetail.getAmountDue();
                    currentAmtDueOfAdvDetail = authHandler.round(currentAmtDueOfAdvDetail, companyid);
                    linkedAmtInPaymentCurrency = paymentAmount/exchangeratefortransaction;
                    linkedAmtInPaymentCurrency = authHandler.round(linkedAmtInPaymentCurrency, companyid);
                    if(linkedAmtInPaymentCurrency>currentAmtDueOfAdvDetail){
                        throw new AccountingException("Amount entered for receipt cannot be greater than it's amount due. Please check the amount due of receipt "+receipt.getReceiptNumber()+" before proceeding.");
                    }
                    if (linkedAdvPaymentIds.equals("") && receipt != null) {
                        linkedAdvPaymentIds += receipt.getID();
                        linkedAdvPaymentNos += receipt.getReceiptNumber();
                    } else if (receipt != null) {
                        linkedAdvPaymentIds += "," + receipt.getID();
                        linkedAdvPaymentNos += "," + receipt.getReceiptNumber();
                    }

                    JSONObject jobj = new JSONObject();
                    jobj.put("enteramount", paymentAmount);
                    jobj.put("documentid", advanceDetailId);
                    jobj.put("isConversionRateFromCurrencyToBase", receipt.isConversionRateFromCurrencyToBase());
                    jobj.put("exchangeratefortransaction", exchangeratefortransaction);
                    jArr.put(jobj);

                    // Method is used to save linking informatio of Refund Payment when linking with Advance Payment
                    saveLinkingInformationOfRefundPaymentWithAdvancePayment(receipt.getID(), receipt.getReceiptNumber(), payment);
                }
            }

            // save linked payment to advance payment details
            HashSet linkDetails = saveLinkedPaymentToAdvancePaymentDetails(request, payment, company, jArr, counterMap);

            // update linked advance details in payment
            HashMap<String, Object> paymenthm = new HashMap<>();
            paymenthm.put("paymentid", payment.getID());
            paymenthm.put("linkWithAdvancePaymentDetails", linkDetails);
            accVendorPaymentobj.savePayment(paymenthm);

            // insert audit trial entry
            auditTrailObj.insertAuditLog(AuditAction.LINKEDRECEIPT, "User " + sessionHandlerImpl.getUserFullName(request) + " has linked Payment " + paymentNo + " to Advance Payment(s) " + linkedAdvPaymentNos, request, linkedAdvPaymentIds);
        } catch (SessionExpiredException ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        } catch (AccountingException e){
            throw new AccountingException(e.getMessage());
        } catch (Exception ex) {
            Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return result;
    }
    
    /**
     * Description : Method is used to save Advance Payment details of Refund Payment
     * @param <request> used to get dateformat, currencyid, linkingdate
     * @param <payment> used to get Payment information
     * @param <company> used to get Comany information
     * @param <jArr> used to get Advance Payment details
     * @param <counterMap> used for counter
     * @return HashSet
     * @throws JSONException
     * @throws ServiceException
     * @throws AccountingException
     * @throws SessionExpiredException
     * @throws ParseException 
     */
    private HashSet saveLinkedPaymentToAdvancePaymentDetails(HttpServletRequest request, Payment payment, Company company, JSONArray jArr, Map<String, Object> counterMap) throws JSONException, ServiceException, AccountingException, SessionExpiredException, ParseException {
        HashSet linkdetails = new HashSet();
        String companyid = company.getCompanyID();
        String baseCurrency = sessionHandlerImpl.getCurrencyID(request);
        DateFormat df = authHandler.getDateOnlyFormat();
        Date maxLinkingDate = null;
        String linkingdate = (String) request.getParameter("linkingdate");
        if (!StringUtil.isNullOrEmpty(linkingdate)) {
            maxLinkingDate = df.parse(linkingdate);
        }

        KwlReturnObject capResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
        CompanyAccountPreferences preferences = (CompanyAccountPreferences) capResult.getEntityList().get(0);

        for (int i = 0; i < jArr.length(); i++) {
            JSONObject jobj = jArr.getJSONObject(i);
            LinkDetailPaymentToAdvancePayment rd = new LinkDetailPaymentToAdvancePayment();
            rd.setSrno(i + 1);
            rd.setID(StringUtil.generateUUID());
            double amountReceived = jobj.getDouble("enteramount"); // amount in receipt currency
            double amountReceivedConverted = jobj.getDouble("enteramount"); // amount in advance payment currency
            rd.setAmount(jobj.getDouble("enteramount"));
            rd.setCompany(company);

            KwlReturnObject receiptAdvanceDetailObj = accountingHandlerDAOobj.getObject(ReceiptAdvanceDetail.class.getName(), jobj.getString("documentid"));
            ReceiptAdvanceDetail receiptAdvanceDetail = (ReceiptAdvanceDetail) receiptAdvanceDetailObj.getEntityList().get(0);
            Receipt receipt = receiptAdvanceDetail.getReceipt();

            rd.setReceipt(receipt);
            if (!StringUtil.isNullOrEmpty(jobj.optString("exchangeratefortransaction", "").toString()) && receipt.getCurrency() != null && !receipt.getCurrency().getCurrencyID().equals(payment.getCurrency().getCurrencyID())) {
                rd.setExchangeRateForTransaction(Double.parseDouble(jobj.get("exchangeratefortransaction").toString()));
                rd.setFromCurrency(receipt.getCurrency());
                rd.setToCurrency(payment.getCurrency());
                amountReceivedConverted = amountReceived / Double.parseDouble(jobj.get("exchangeratefortransaction").toString());
                amountReceivedConverted = authHandler.round(amountReceivedConverted, companyid);
                rd.setAmountInPaymentCurrency(amountReceivedConverted);
            } else {
                rd.setExchangeRateForTransaction(Double.parseDouble(jobj.get("exchangeratefortransaction").toString()));
                rd.setFromCurrency(receipt.getCurrency());
                rd.setToCurrency(payment.getCurrency());
                amountReceivedConverted = authHandler.round(amountReceived, companyid);
                rd.setAmountInPaymentCurrency(amountReceivedConverted);
            } 
            rd.setPayment(payment);
           
            // JE For Advance Receipt which is Linked to Payment
            double exchangeRateforTransaction = jobj.optDouble("exchangeratefortransaction", 1.0);
            if (receipt != null) {
                double finalAmountReval = ReevalJournalEntryForAdvanceReceipt(request, receipt, amountReceived, exchangeRateforTransaction);
                if (finalAmountReval != 0) {
                    /**
                     * added transactionID and transactionModuleID to Realised
                     * JE.
                     */
                    counterMap.put("transactionModuleid", receipt.isIsOpeningBalenceReceipt() ? Constants.Acc_opening_Receipt : Constants.Acc_Receive_Payment_ModuleId);
                    counterMap.put("transactionId", receipt.getID());
                    String revaljeid = PostJEFORReevaluation(request, finalAmountReval, companyid, preferences, baseCurrency, null, counterMap);
                    rd.setRevalJeId(revaljeid);
                }
            }
            // JE For Payment 
            if (payment != null && (payment.isIsOpeningBalencePayment() || (!payment.getAdvanceDetails().isEmpty()))) {
                double finalAmountReval = ReevalJournalEntryForPayment(request, payment, amountReceived, exchangeRateforTransaction);
                if (finalAmountReval != 0) {
                    /**
                     * added transactionID and transactionModuleID to Realised
                     * JE.
                     */
                    counterMap.put("transactionModuleid", payment.isIsOpeningBalencePayment() ? Constants.Acc_opening_Payment : Constants.Acc_Make_Payment_ModuleId);
                    counterMap.put("transactionId", payment.getID());
                    String revaljeid = PostJEFORReevaluation(request, -(finalAmountReval), payment.getCompany().getCompanyID(), preferences, baseCurrency, null, counterMap);
                    rd.setRevalJeIdReceipt(revaljeid);
                }
            }

            Date linkingDate = new Date();
//            Date advPaymentDate = receipt.getJournalEntry().getEntryDate();
//            Date paymentDate = payment.getJournalEntry().getEntryDate();
            Date advPaymentDate = receipt.getCreationDate();
            Date paymentDate = payment.getCreationDate();
            Date maxDate = null;
            if (maxLinkingDate != null) {
                maxDate = maxLinkingDate;
            } else {
                List<Date> datelist = new ArrayList<Date>();
                datelist.add(linkingDate);
                datelist.add(advPaymentDate);
                datelist.add(paymentDate);
                Collections.sort(datelist); //Sort the Date object & get the dates in ASC order. Pick-up the last record as Max Date
                maxDate = datelist.get(datelist.size() - 1);
                //maxDate = Math.max(Math.max(linkingDate.getTime(), advPaymentDate.getTime()), paymentDate.getTime());
            }
            rd.setPaymentLinkDate(maxDate);

            HashMap<String, Object> requestParams = new HashMap();
            requestParams.put(Constants.companyid, companyid);
            requestParams.put("gcurrencyid", company.getCurrency().getCurrencyID());

//            Date rcpCreationDate = payment.getJournalEntry().getEntryDate();
            Date rcpCreationDate = payment.getCreationDate();
            double externalCurrencyRate = payment.getJournalEntry().getExternalCurrencyRate();
            String fromcurrencyid = payment.getCurrency().getCurrencyID();
            KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amountReceived, fromcurrencyid, rcpCreationDate, externalCurrencyRate);
            double amountReceivedConvertedInBaseCurrency = (Double) bAmt.getEntityList().get(0);
            amountReceivedConvertedInBaseCurrency = authHandler.round(amountReceivedConvertedInBaseCurrency, companyid);

//            Date advPaymentCreationDate = receipt.getJournalEntry().getEntryDate();
            Date advPaymentCreationDate = receipt.getCreationDate();
            double advPaymentExternalCurrencyRate = receipt.getJournalEntry().getExternalCurrencyRate();
            String advPaymentFromCurrencyId = receipt.getCurrency().getCurrencyID();
            KwlReturnObject advPaymentbAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amountReceivedConverted, advPaymentFromCurrencyId, advPaymentCreationDate, advPaymentExternalCurrencyRate);
            double advPaymentAmountReceivedConvertedInBaseCurrency = (Double) advPaymentbAmt.getEntityList().get(0);
            advPaymentAmountReceivedConvertedInBaseCurrency = authHandler.round(advPaymentAmountReceivedConvertedInBaseCurrency, companyid);

            // for updating amount due of advance payment
            receiptAdvanceDetail.setAmountDue(receiptAdvanceDetail.getAmountDue() - amountReceivedConverted);

            /*
             * Start gains/loss calculation Calculate Gains/Loss if Advance
             * Payment exchange rate changed at the time of linking with refund
             * receipt payment
             */
            if (preferences.getForeignexchange() == null) {
                throw new AccountingException(messageSource.getMessage("acc.common.forex", null, RequestContextUtils.getLocale(request)));
            }
            // Call Service layer function to calulate Rfefund Payment Gain Loss
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            paramJobj.put(Constants.currencyKey, sessionHandlerImpl.getCurrencyID(request));
            double amountDiff = accVendorPaymentModuleServiceObj.RefundPaymentForexGailLossAmount(paramJobj, jobj, payment, receipt.getCurrency().getCurrencyID(), payment.getCurrency().getCurrencyID(), externalCurrencyRate);

            if (amountDiff != 0 && preferences.getForeignexchange() != null && Math.abs(amountDiff) >= 0.000001) { // Math.abs(amountDiff) < .0000001 Added this because in case of revaluation the diff in the rates was less than .0000001 and the amount calculation was going in Exachange rate account. 
                boolean rateDecreased = false;
                if (amountDiff < 0) {
                    rateDecreased = true;
                }
                JournalEntry journalEntry = null;
                Map<String, Object> jeDataMap = AccountingManager.getGlobalParams(request);
                int counter = 0;
                if (counterMap.containsKey("counter")) {
                    counter = (Integer) counterMap.get("counter");
                }

                Date entryDate = maxDate;
                synchronized (this) {
                    HashMap<String, Object> JEFormatParams = new HashMap<>();
                    JEFormatParams.put("moduleid", Constants.Acc_GENERAL_LEDGER_ModuleId);
                    JEFormatParams.put("modulename", "autojournalentry");
                    JEFormatParams.put("companyid", companyid);
                    JEFormatParams.put("isdefaultFormat", true);

                    KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(JEFormatParams);
                    SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
                    Map<String, Object> seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_JOURNALENTRY, format.getID(), false, entryDate);
                    String nextAutoNoTemp = (String) seqNumberMap.get(Constants.AUTO_ENTRYNUMBER); // next auto generated number
                    int sequence = Integer.parseInt((String) seqNumberMap.get(Constants.SEQNUMBER));
                    String jeDatePrefix = (String) seqNumberMap.get(Constants.DATEPREFIX); // Date Prefix Part
                    String jeDateAfterPrefix = (String)seqNumberMap.get(Constants.DATEAFTERPREFIX);  //Date After Prefix Part
                    String jeDateSuffix = (String) seqNumberMap.get(Constants.DATESUFFIX); // Date Suffix Part

                    sequence = sequence + counter;
                    String number = "" + sequence;
                    String action = "" + (sequence - counter);
                    nextAutoNoTemp.replaceAll(action, number);
                    String jeentryNumber = nextAutoNoTemp.replaceAll(action, number); // next auto generated number
                    String jeSeqFormatId = format.getID();
                    boolean jeautogenflag = true;
                    counter++;
                    counterMap.put("counter", counter);
                    jeDataMap.put("entrynumber", jeentryNumber);
                    jeDataMap.put("autogenerated", jeautogenflag);
                    jeDataMap.put(Constants.SEQFORMAT, jeSeqFormatId);
                    jeDataMap.put(Constants.SEQNUMBER, number);
                    jeDataMap.put(Constants.DATEPREFIX, jeDatePrefix);
                    jeDataMap.put(Constants.DATEAFTERPREFIX, jeDateAfterPrefix);
                    jeDataMap.put(Constants.DATESUFFIX, jeDateSuffix);
                }
                jeDataMap.put("entrydate", entryDate); // ERP-8987
                jeDataMap.put("companyid", companyid);
                jeDataMap.put("memo", "Exchange Gains/Loss posted against Refund Payment '" + payment.getPaymentNumber() + "' linked to Advance Payment '" + receipt.getReceiptNumber() + "'");
                jeDataMap.put("currencyid", payment.getCurrency().getCurrencyID());
                jeDataMap.put("externalCurrencyRate", externalCurrencyRate);
                jeDataMap.put("isexchangegainslossje", true);
                jeDataMap.put("transactionId",payment.getID());
                jeDataMap.put("transactionModuleid", Constants.Acc_Make_Payment_ModuleId);
                journalEntry = accJournalEntryobj.getJournalEntry(jeDataMap);
                accJournalEntryobj.saveJournalEntryByObject(journalEntry);

                boolean isDebit = rateDecreased ? false : true;
                JSONObject jedjson = new JSONObject();
                jedjson.put("srno", 1);
                jedjson.put("companyid", companyid);
                jedjson.put("amount", rateDecreased ? (-1 * amountDiff) : amountDiff);
                jedjson.put("accountid", preferences.getForeignexchange().getID());
                jedjson.put("debit", isDebit);
                jedjson.put("jeid", journalEntry.getID());
                KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                JournalEntryDetail jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                Set<JournalEntryDetail> detail = new HashSet();
                detail.add(jed);

                jedjson = new JSONObject();
                jedjson.put("srno", 2);
                jedjson.put("companyid", companyid);
                jedjson.put("amount", rateDecreased ? (-1 * amountDiff) : amountDiff);
                jedjson.put("accountid", receipt.getCustomer().getAccount().getID());
                jedjson.put("debit", !isDebit);
                jedjson.put("jeid", journalEntry.getID());
                jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                detail.add(jed);
                journalEntry.setDetails(detail);
                accJournalEntryobj.saveJournalEntryDetailsSet(detail);

                rd.setLinkedGainLossJE(journalEntry.getID());
            }
            // End Gains/Loss Calculation
            for (AdvanceDetail advanceDetail : payment.getAdvanceDetails()) {
                if (advanceDetail.getAmountDue() > 0) {
//                    advanceDetail.setAmountDue(advanceDetail.getAmountDue() - amountReceived);
                    advanceDetail.setAmountDue(authHandler.round(advanceDetail.getAmountDue()-amountReceived,company.getCompanyID()));
                    /*
                     * Set receiptAdvanceDetail id in advancedetails.
                     */
//                    advanceDetail.setReceiptAdvanceDetails(receiptAdvanceDetail);
                }
            }
            linkdetails.add(rd);
        }
        return linkdetails;
    }
    
    /**
     * Description : Method is used to save linking information of Refund Payment and Advance Payment
     * @param <advPaymentId> used to get Advance Payment id
     * @param <advPaymentNo> used to get Advance Payment number
     * @param <payment> used to get Payment information
     * @return void
     * @throws ServiceException 
     */
    public void saveLinkingInformationOfRefundPaymentWithAdvancePayment(String advPaymentId, String advPaymentNo, Payment payment) throws ServiceException {
        try {
            // Save Advance Payment Linking & Paymnet Linking information in linking table
            HashMap<String, Object> requestParamsLinking = new HashMap<>();
            requestParamsLinking.put("linkeddocid", payment.getID());
            requestParamsLinking.put("docid", advPaymentId);
            requestParamsLinking.put("moduleid", Constants.Acc_Make_Payment_ModuleId);
            requestParamsLinking.put("linkeddocno", payment.getPaymentNumber());
            requestParamsLinking.put("sourceflag", 0);
            accGoodsReceiptobj.saveReceiptLinking(requestParamsLinking);

            requestParamsLinking.clear();
            requestParamsLinking.put("linkeddocid", advPaymentId);
            requestParamsLinking.put("docid", payment.getID());
            requestParamsLinking.put("moduleid", Constants.Acc_Receive_Payment_ModuleId);
            requestParamsLinking.put("linkeddocno", advPaymentNo);
            requestParamsLinking.put("sourceflag", 1);
            accGoodsReceiptobj.savePaymentLinking(requestParamsLinking);
        } catch (Exception ex) {
            Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
    }
    
    /**
     * Description : Method is used to unlink Refund Payment form linked Advance Payment
     * @param <request> used to get companyid, paymentid, linkdetails, user full name
     * @return List
     * @throws ServiceException
     * @throws SessionExpiredException 
     */
    public List unlinkPaymentFromAdvancePayment(HttpServletRequest request) throws AccountingException,ServiceException, SessionExpiredException {
        List result = new ArrayList();
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String paymentid = request.getParameter("paymentid");

            KwlReturnObject receiptKWLObj = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentid);
            Payment payment = (Payment) receiptKWLObj.getEntityList().get(0);
            String paymentNo = payment.getPaymentNumber();

            String linkedAdvancePaymentids = "";
            String linkedAdvancePaymentnos = "";
            List<String> linkedDetailAdvancePayment = new ArrayList();
            JSONArray linkJSONArray = request.getParameter("linkdetails") != null ? new JSONArray(request.getParameter("linkdetails")) : new JSONArray();
            String invoicelinkingyearArr = request.getParameter("invoicelinkingyearArr") != null ? request.getParameter("invoicelinkingyearArr") : "";
            for (int k = 0; k < linkJSONArray.length(); k++) { // creating a hash map with payment and their linked advance payment
                JSONObject jSONObject = linkJSONArray.getJSONObject(k);
                String linkId = jSONObject.optString("linkdetailid", "");
                linkedDetailAdvancePayment.add(linkId);
            }
            String[] invoicelinkingarr = invoicelinkingyearArr.split(",");
            for (int l = 0; l < invoicelinkingarr.length; l++) {
                String linkingyear = invoicelinkingarr[l];
                /**
                 * if linking date is fall in closed year the exception has been
                 * thrown.
                 */
                boolean isBookClose = false;
                if (!StringUtil.isNullOrEmpty(linkingyear)) {
                    paramJobj.put("yearid", linkingyear);
                    isBookClose = accCompanyPreferencesObj.isBookClose(paramJobj);
                }
                if (isBookClose) {
                    throw new AccountingException(messageSource.getMessage("acc.compref.closebook.Youcannotunlinkthedocumentsinclosedyear", null, RequestContextUtils.getLocale(request)));
                }
            }
            String linkedDetailIDs = "";
            for (String advPaymentID : linkedDetailAdvancePayment) {
                linkedDetailIDs = linkedDetailIDs.concat("'").concat(advPaymentID).concat("',");
            }
            if (!StringUtil.isNullOrEmpty(linkedDetailIDs.toString())) {
                linkedDetailIDs = linkedDetailIDs.substring(0, linkedDetailIDs.length() - 1);
            }

            double sumOfTotalAmount = 0;
            List<LinkDetailPaymentToAdvancePayment> details = accVendorPaymentobj.getDeletedLinkedPaymentAdvancePayment(payment, linkedDetailIDs, companyid);
            for (LinkDetailPaymentToAdvancePayment paymentDetail : details) {
                Receipt receipt = paymentDetail.getReceipt();

                // for updating amount due of advance payment
                for (ReceiptAdvanceDetail advDetails : receipt.getReceiptAdvanceDetails()) {
                    advDetails.setAmountDue(advDetails.getAmountDue() + paymentDetail.getAmountInPaymentCurrency());
                }
                
                /**
                 * We need to add amount only if receipt is not dishonoured if
                 * receipt is already dishonoured then the amountdue is already
                 * restored at the time of marking receipt dishonoured.
                 */
                if (!receipt.isIsDishonouredCheque()) {
                    sumOfTotalAmount += paymentDetail.getAmount();
                }
                linkedAdvancePaymentnos = linkedAdvancePaymentnos.concat(receipt.getReceiptNumber()).concat(",");

                // check if Forex/Gain Loss JE generated. If yes then need to delete JE too
                if (paymentDetail.getLinkedGainLossJE() != null && !paymentDetail.getLinkedGainLossJE().isEmpty()) {
                    deleteJEArray(paymentDetail.getLinkedGainLossJE(), companyid);
                }
                if (paymentDetail != null && !StringUtil.isNullOrEmpty(paymentDetail.getRevalJeId())) {
                    accJournalEntryobj.deleteJEDtails(paymentDetail.getRevalJeId(), companyid);
                    accJournalEntryobj.deleteJE(paymentDetail.getRevalJeId(), companyid);
                }
                if (paymentDetail != null && !StringUtil.isNullOrEmpty(paymentDetail.getRevalJeIdReceipt())) {
                    accJournalEntryobj.deleteJEDtails(paymentDetail.getRevalJeIdReceipt(), companyid);
                    accJournalEntryobj.deleteJE(paymentDetail.getRevalJeIdReceipt(), companyid);
                }

                /*
                 * Deleting Linking iformation of Payment from Linking
                 * table if it is unlinked
                 */
                HashMap<String, Object> linkingrequestParams = new HashMap<>();
                linkingrequestParams.put("paymentid", receipt.getID());
                linkingrequestParams.put("linkedTransactionID", paymentDetail.getPayment().getID());
                linkingrequestParams.put("unlinkflag", true);
                accVendorPaymentobj.deleteLinkingInformationOfMP(linkingrequestParams);
            }

            if (sumOfTotalAmount != 0 && payment.getAdvanceDetails() != null && !payment.getAdvanceDetails().isEmpty()) {
                for (AdvanceDetail advanceDetail : payment.getAdvanceDetails()) {
                    /**
                     * updating amount due even when linked payment is marked
                     * dishonoured.This code is written because we can link
                     * advance receipt at line level and externally i.e from
                     * report to refund payment.
                     */
                    boolean isLinkedReceiptDishonoured = (advanceDetail.getReceiptAdvanceDetails() != null && advanceDetail.getReceiptAdvanceDetails().getReceipt() != null && advanceDetail.getReceiptAdvanceDetails().getReceipt().isIsDishonouredCheque());
                    if (advanceDetail.getReceiptAdvanceDetails() == null || isLinkedReceiptDishonoured) {
                        double linkedAmountDue = advanceDetail.getAmountDue();
                        advanceDetail.setAmountDue(linkedAmountDue + sumOfTotalAmount);
                        List<Object> objectList = new ArrayList<>();
                        objectList.add((Object) advanceDetail);
                        accAccountDAOobj.saveOrUpdateAll(objectList);
                    }
                    
//                    if (advanceDetail.getReceiptAdvanceDetails() != null) {
//                        double linkedAmountDue = advanceDetail.getAmountDue();
//                        advanceDetail.setAmountDue(linkedAmountDue + sumOfTotalAmount);
//                        advanceDetail.setReceiptAdvanceDetails(null);
//                        List<Object> objectList = new ArrayList<>();
//                        objectList.add((Object) advanceDetail);
//                        accAccountDAOobj.saveOrUpdateAll(objectList);
//                    }
                }
            }

            if (!StringUtil.isNullOrEmpty(linkedAdvancePaymentnos)) {
                linkedAdvancePaymentnos = linkedAdvancePaymentnos.substring(0, linkedAdvancePaymentnos.length() - 1);
            }
            accVendorPaymentobj.deleteSelectedLinkedPaymentAdvanceDetails(payment.getID(), linkedDetailIDs, companyid);
            if (!StringUtil.isNullOrEmpty(linkedAdvancePaymentnos)) {
                auditTrailObj.insertAuditLog(AuditAction.LINKEDRECEIPT, "User " + sessionHandlerImpl.getUserFullName(request) + " has unlinked Payment " + paymentNo + " from " + linkedAdvancePaymentnos, request, linkedAdvancePaymentids);
            }
        } catch (AccountingException e){
            throw new AccountingException(e.getMessage());
        } catch (SessionExpiredException ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        } catch (Exception ex) {
            Logger.getLogger(accReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return result;
    }
  
     public Map getExpenseGRAmount(GoodsReceipt gr) throws ServiceException {
        Map<ExpenseGRDetail, Object[]> hm = new HashMap<ExpenseGRDetail, Object[]>();
        Set<ExpenseGRDetail> invRows = gr.getExpenserows();
//        Iterator itr = invRows.iterator();
//        while (itr.hasNext()) {
//            ExpenseGRDetail temp = (ExpenseGRDetail) itr.next();
        if (invRows != null && !invRows.isEmpty())
        {
            for (ExpenseGRDetail temp: invRows)
            {
                double rdisc = (temp.getDiscount() == null ? 0 : temp.getDiscount().getDiscountValue());
                double rowTaxPercent = 0;
                double rowTaxAmount=0;
                boolean isRowTaxApplicable=false;
                if (temp.getTax() != null) {

    //                            percent = CompanyHandler.getTaxPercent(session, request, invoice.getJournalEntry().getEntryDate(), invoice.getTax().getID());
//                    KwlReturnObject perresult = accTaxObj.getTaxPercent( gr.getCompany().getCompanyID(), gr.getJournalEntry().getEntryDate(), temp.getTax().getID());
                    KwlReturnObject perresult = accTaxObj.getTaxPercent( gr.getCompany().getCompanyID(), gr.getCreationDate(), temp.getTax().getID());
                    rowTaxPercent = (Double) perresult.getEntityList().get(0);
                    isRowTaxApplicable = (Boolean) perresult.getEntityList().get(1);
                }
                if (temp.isWasRowTaxFieldEditable()) {//After made row tax field editable tax calculation will be take place according to row tax amount. -From DATE - 28 -Jan-2014
                    if (isRowTaxApplicable) {
                        rowTaxAmount = temp.getRowTaxAmount();
                    }
                } else {// for earlier invoices it will be done according to row tax percent as selected in Tax combo column.
                    rowTaxAmount = (temp.getRate() - rdisc) * rowTaxPercent / 100;
                }
                 double ramount=temp.getRate() - rdisc;
                 ramount+=rowTaxAmount;//ramount+=ramount*rowTaxPercent/100;
                hm.put(temp, new Object[]{ramount,rowTaxAmount});
                if (gr == null) {
                    gr = temp.getGoodsReceipt();
                }
            }
        }
        return hm;
    }
    public Map getGoodsReceiptProductAmount(GoodsReceipt gr, String companyid) throws ServiceException {
        Map<GoodsReceiptDetail, Object[]> hm = new HashMap<GoodsReceiptDetail, Object[]>();
        Set<GoodsReceiptDetail> invRows = gr.getRows();
        double amount;
        double quantity;
//        Iterator itr = invRows.iterator();
//        while (itr.hasNext()) {
//        GoodsReceiptDetail temp = (GoodsReceiptDetail) itr.next();
         if (invRows != null && !invRows.isEmpty())
        {
            for (GoodsReceiptDetail temp: invRows)
            {
//                quantity = (gr.getPendingapproval() == 1)? temp.getInventory().getActquantity() : (temp.getInventory().isInvrecord() ? temp.getInventory().getQuantity() : temp.getInventory().getActquantity());
                quantity = temp.getInventory().getQuantity();
                amount = authHandler.round(temp.getRate() * quantity, companyid);
                double rdisc = (temp.getDiscount() == null ? 0 : temp.getDiscount().getDiscountValue());
                 double rowTaxPercent = 0;
                 double rowTaxAmount=0;
                 boolean isRowTaxApplicable=false;
                if (temp.getTax() != null) {
    //                            percent = CompanyHandler.getTaxPercent(session, request, invoice.getJournalEntry().getEntryDate(), invoice.getTax().getID());
//                    KwlReturnObject perresult = accTaxObj.getTaxPercent( gr.getCompany().getCompanyID(), gr.getJournalEntry().getEntryDate(), temp.getTax().getID());
                    KwlReturnObject perresult = accTaxObj.getTaxPercent( gr.getCompany().getCompanyID(), gr.getCreationDate(), temp.getTax().getID());
                    rowTaxPercent = (Double) perresult.getEntityList().get(0);
                    isRowTaxApplicable = (Boolean) perresult.getEntityList().get(1);
                }
                if (temp.isWasRowTaxFieldEditable()) {//After made row tax field editable tax calculation will be take place according to row tax amount. -From DATE - 28 -Jan-2014
                    if (isRowTaxApplicable) {
                        rowTaxAmount = temp.getRowTaxAmount() + temp.getRowTermTaxAmount();
                    }
                } else {// for earlier invoices it will be done according to row tax percent as selected in Tax combo column.
                    rowTaxAmount = (amount - rdisc) * rowTaxPercent / 100;
                }
                 double ramount=amount - rdisc;
                 double amountWithoutTax=amount - rdisc;
                 ramount+=rowTaxAmount;//ramount+=ramount*rowTaxPercent/100;
                hm.put(temp, new Object[]{ramount, quantity,rowTaxAmount,amountWithoutTax});
                if (gr == null) {
                    gr = temp.getGoodsReceipt();
                }
            }
         }
        return hm;
    }
    public ModelAndView getTDSDetailsAtPayment(HttpServletRequest request, HttpServletResponse response) {
        
        KwlReturnObject result = null;
        boolean issuccess = false;
        JSONObject jobj = new JSONObject();
        String msg = "";
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String documentType= request.getParameter("documenttype");
            String documentid= request.getParameter("bills");
            String rowdetailid= request.getParameter("rowdetailid");
            String vendorId= request.getParameter("vendorid");
            String deducteetype= request.getParameter("deducteetype");
            String residentialstatus= request.getParameter("residentialstatus");
            String advNOP= "";
            String amount= request.getParameter("amount");
            String tdsAssessableAmount= request.getParameter("tdsAssessableAmount");
            boolean isBasicExemptionExceeded= !StringUtil.isNullOrEmpty(request.getParameter("isbasicexemptionexceeded"))?Boolean.parseBoolean(request.getParameter("isbasicexemptionexceeded")):false;
            boolean isIngoreExemptLimit = true;
            double additionalLineTDSAssesableAmount=0.0;
            if(!StringUtil.isNullOrEmpty(request.getParameter("additionalAmount"))){
                additionalLineTDSAssesableAmount=Double.parseDouble(request.getParameter("additionalAmount"));
            }
            String billdate = "";
            if (!StringUtil.isNullOrEmpty(request.getParameter("isIngoreExemptLimit"))) {
                isIngoreExemptLimit = Boolean.parseBoolean(request.getParameter("isIngoreExemptLimit"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("billdate"))) {
                billdate =request.getParameter("billdate");
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("natureofPayment"))) {
                advNOP =request.getParameter("natureofPayment");
            }
            HashMap<String, Object> dataMap=new HashMap<String,Object>();
            dataMap.put("documentType",documentType);
            dataMap.put("documentid",documentid);            
            dataMap.put("rowdetailid",rowdetailid);            
            
            // Get Financial Year Start Date and End Date
            KwlReturnObject companyAccprefresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) companyAccprefresult.getEntityList().get(0);
            
            HashMap<String,Date> hmFinancialsdate = authHandler.getFinancialsDates(companyAccountPreferences.getFinancialYearFrom(),sdf.parse(billdate));
            Date financialYearStartDate = hmFinancialsdate.get("financialstartdate");
            Date financialYearEndDate = hmFinancialsdate.get("financialenddate");
            
            dataMap.put("activeFromDate", sdf.format(financialYearStartDate));
            dataMap.put("activeToDate", sdf.format(financialYearEndDate));            
            dataMap.put("deducteeType", deducteetype);
            dataMap.put("residentialstatus",residentialstatus);
            dataMap.put("vendorID",vendorId);
            dataMap.put("amount",amount);
            dataMap.put("tdsAssessableAmount",tdsAssessableAmount);
            dataMap.put("isBasicExemptionExceeded",isBasicExemptionExceeded);
            dataMap.put("isIngoreExemptLimit",isIngoreExemptLimit);
            dataMap.put("billdate",billdate);
            dataMap.put("advNOP",advNOP);
            dataMap.put("additionalLineTDSAssesableAmount",additionalLineTDSAssesableAmount);
            jobj=getJsonOfTdsDetails(dataMap);
            issuccess=true;  
        }catch (AccountingException ex) {
            msg = "" + ex.getMessage();
        }catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    } 
    public JSONObject getTDSCalculationDetailsJobj(HashMap<String, Object> requestParams) throws AccountingException, ServiceException, JSONException {
        JSONObject jobj = new JSONObject();
        double rate = 0.0;
        double exemptLimit = 0.0;
        double amount = 0.0;
        double tdsAssessableAmount = 0.0;
        double totalamount = 0.0;
        String id = "";
        String deducteeTypeName = "";
        String companyid = "";
            if (requestParams.containsKey("companyid")) {
                companyid = (String) requestParams.get("companyid");
            }
        amount = Double.parseDouble(requestParams.get("amount").toString());
        tdsAssessableAmount = Double.parseDouble(requestParams.get("amount").toString());
        requestParams.put("totalamount", amount);
        String vendorID = (String) requestParams.get("vendorID");
        KwlReturnObject vendorresult = accountingHandlerDAOobj.getObject(Vendor.class.getName(), vendorID);
        Vendor vendor = (Vendor) vendorresult.getEntityList().get(0);
        boolean isIngoreExemptLimit = (boolean)requestParams.get("isIngoreExemptLimit");
//        KwlReturnObject kjobjAmount = accVendorPaymentobj.getTotalAmountofVendorpayment(requestParams);
//        List listobjAmount = kjobjAmount.getEntityList();
//        if (listobjAmount.size() > 0) {
//            if (listobjAmount.get(0) != null) {
//                totalamount = (Double) listobjAmount.get(0);
//                totalamount = amount + totalamount;
//                requestParams.put("totalamount", totalamount);
//            } else {
//                requestParams.put("totalamount", amount);
//            }
//        } else {
            requestParams.put("totalamount", amount);
//        }
        if (requestParams.containsKey("deducteeType")) {
            MasterItem masterItem = null;
            if (!StringUtil.isNullOrEmpty((String) requestParams.get("deducteeType"))) {
                KwlReturnObject result = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), (String) requestParams.get("deducteeType"));
                masterItem = (MasterItem) result.getEntityList().get(0);
                if (masterItem != null) {
                    deducteeTypeName = masterItem.getValue();
                }
            }
        }
        
        KwlReturnObject kjobj = accCommonTablesDAO.getTDSRate(requestParams);
        List listobj = kjobj.getEntityList();
        amount = Double.parseDouble(requestParams.get("amount").toString());
        if (listobj.size() > 0) {
            Object[] row = (Object[]) listobj.get(0);
            if (row != null) {
                exemptLimit = Double.parseDouble(row[2].toString());
            }
        } else {
            jobj.put("success", false);
            throw new AccountingException("TDS rule is not created for the given Nature of Payment.");
        }
        
        if (deducteeTypeName.equalsIgnoreCase(IndiaComplianceConstants.DEDUCTEETYPE_UNKNOWN)) {
            jobj.put("success", true);
            rate = 0.0;
            id = "";
        } else if (vendor != null && vendor.getNonLowerDedutionApplicable().equals(IndiaComplianceConstants.NonLowerDedutionApplicable)) {//Check Whether Non Deduction or Lower Deduction Applicable
            if (vendor.getDeductionReason().equals(IndiaComplianceConstants.Reason_Non_Deduction_or_Lower_Deduction)) {//If Reason is Lower Deduction or Non Deduction then Rate will be Lower Rate Fetched.
                rate = vendor.getLowerRate();
            } else if (vendor.getDeductionReason().equals(IndiaComplianceConstants.Reason_Non_Deduction_Declaration) || vendor.getDeductionReason().equals(IndiaComplianceConstants.Reason_Deduction_Transporter)) {
                //Else if Reason is Non Deduction then Rate will be Zero.
                rate = 0;
            } else if (vendor.getDeductionReason().equals(IndiaComplianceConstants.Reason_Basic_Exemption_Reached) ) {
                    amount = Double.parseDouble(requestParams.get("amount").toString());
                    if (listobj.size() > 0) {
                        Object[] row = (Object[]) listobj.get(0);
                        if (row != null) {
                            rate = Double.parseDouble(row[0].toString());
                            id = row[1].toString();
                        }
                        jobj.put("success", true);
                    } else {
                        jobj.put("success", false);
                        throw new AccountingException("TDS Rate is not set for the given Nature of Payment.");
                    }
            }
            jobj.put("success", true);
        } else if (vendor != null && !StringUtil.isNullOrEmpty(vendor.getPanStatus()) && StringUtil.isNullOrEmpty(vendor.getPANnumber()) && vendor.getResidentialstatus() == IndiaComplianceConstants.ResidentialStatus_Resident) {
            rate = vendor.getHigherTDSRate();
            jobj.put("success", true);
        } else {
            amount = Double.parseDouble(requestParams.get("amount").toString());
            if (listobj.size() > 0) {
                Object[] row = (Object[]) listobj.get(0);
                if (row != null) {
                    rate = Double.parseDouble(row[0].toString());
                    id = row[1].toString();
                }
                jobj.put("success", true);
            } else {
                jobj.put("success", false);
                throw new AccountingException("TDS Rate is not set for the given Nature of Payment.");
            }
        }
        double tdsamount = 0;
        if(isIngoreExemptLimit){
            tdsamount = (amount * rate) / 100;
            jobj.put("tdspercentage", rate);
            jobj.put("isExemptLimitCrossed", true);
        }else{
            double additionalLineTDSAssesableAmount = (double)requestParams.get("additionalLineTDSAssesableAmount");
            JSONObject jobjAmount = accCommonTablesDAO.totalTDSAssessableAmountForExemptLimit(requestParams);
            double totalAssesableAmount = jobjAmount.getDouble("totalTDSAssesableAmount");
            double totalTDSamountdeducted = jobjAmount.getDouble("totalTDSamountdeducted");
            boolean tdsjemeppeing_deducted = jobjAmount.getBoolean("deductedWithMapping");
            double assesebleAmount = (totalAssesableAmount+additionalLineTDSAssesableAmount) + amount;
            if (totalTDSamountdeducted > 0 || assesebleAmount > exemptLimit || isIngoreExemptLimit || tdsjemeppeing_deducted) { // Limit crossed || Ignore exempt limit for advance payment| totalTDSamountdeducted>0 meanse once TDS is dedected in any invoice we do not need to check it
                tdsamount = (amount * rate) / 100;
                jobj.put("tdspercentage", rate);
                jobj.put("isExemptLimitCrossed", true);
            } else { // Limit not corssed
                jobj.put("tdspercentage", 0.0);
                jobj.put("isExemptLimitCrossed", false);
            }
        }
        jobj.put("ruleid", id);
        jobj.put("tdsamount", Math.ceil(tdsamount));
        jobj.put("tdsAssessableAmount", authHandler.round(tdsAssessableAmount, companyid));
        return jobj;
    }
    public JSONObject getJsonOfTdsDetails(HashMap<String, Object> dataMap) throws AccountingException{
        JSONObject jsonObj = new JSONObject();
        JSONArray jsonArray = new JSONArray();
        KwlReturnObject result = null;
        try {
            result = accVendorPaymentobj.getInvoiceDetailsAndTDSDetails(dataMap);
            List list = result.getEntityList();
            String companyid = "";
            if (dataMap.containsKey("companyid")) {
                companyid = (String) dataMap.get("companyid");
            }
            if (list.isEmpty()) {
                if (dataMap.get("documentType").equals(Constants.PaymentAgainstInvoice + "")) {
                    String bill = dataMap.get("documentid").toString();
                    String enteramount = dataMap.get("amount") != null ? dataMap.get("amount").toString():"0";
                    String tdsAssessableAmount = dataMap.get("tdsAssessableAmount") != null ? dataMap.get("tdsAssessableAmount").toString():"0";
                    KwlReturnObject grresult = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), bill);
                    GoodsReceipt gReceipt = (GoodsReceipt) grresult.getEntityList().get(0);
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    HashMap<String, Object> grRequestParams = new HashMap<String, Object>();
                    filter_names.add("goodsReceipt.ID");
                    filter_params.add(bill);
                    order_by.add("srno");
                    order_type.add("asc");
                    grRequestParams.put("filter_names", filter_names);
                    grRequestParams.put("filter_params", filter_params);
                    grRequestParams.put("order_by", order_by);
                    grRequestParams.put("order_type", order_type);
                    if (gReceipt.isIsExpenseType()) {
                        KwlReturnObject grdresult = accGoodsReceiptobj.getExpenseGRDetails(grRequestParams);
                        List<ExpenseGRDetail> expenseGRDetailList = grdresult.getEntityList();
                        if (expenseGRDetailList != null && !expenseGRDetailList.isEmpty()) {
                            for (ExpenseGRDetail expenseGRDetail : expenseGRDetailList) {
                                double rowTaxAmount = 0;
                                Map amthm = getExpenseGRAmount(gReceipt);
                                Object[] val = (Object[]) amthm.get(expenseGRDetail);
                                double amount = (Double) val[0];
                                rowTaxAmount = (Double) val[1];
                                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                                requestParams.putAll(dataMap);
                                requestParams.put("natureofPayment", expenseGRDetail.getNatureOfPayment()!=null ? expenseGRDetail.getNatureOfPayment().getID() : "");
                                requestParams.put("amount", amount);
                                requestParams.put("isBasicExemptionExceeded", dataMap.get("isBasicExemptionExceeded"));
                                JSONObject jsonTemp = new JSONObject(getTDSCalculationDetailsJobj(requestParams).toString());
                                jsonTemp.put("accountid", expenseGRDetail.getAccount().getID());
                                jsonTemp.put("natureofpayment", expenseGRDetail.getNatureOfPayment()!=null ? expenseGRDetail.getNatureOfPayment().getID() : "");
                                jsonTemp.put("amount", authHandler.round(amount, companyid));
                                jsonTemp.put("enteramount", authHandler.round(Double.parseDouble(enteramount), companyid));
                                jsonTemp.put("tdsAssessableAmount", authHandler.round(Double.parseDouble(tdsAssessableAmount), companyid));
                                jsonTemp.put("amountdue", authHandler.round(Double.parseDouble(enteramount), companyid));
                                jsonTemp.put("rowTaxAmount", authHandler.round(rowTaxAmount, companyid));
                                jsonTemp.put("includetax", false); // send ID field Value for Include Tax Combo
                                jsonTemp.put("rowid", expenseGRDetail.getID());
                                jsonArray.put(jsonTemp);
                            }
                        }
                    } else {
                        KwlReturnObject grdresult = accGoodsReceiptobj.getGoodsReceiptDetails(grRequestParams);
                        List<GoodsReceiptDetail> goodsReceiptDetailList = grdresult.getEntityList();
                        if (goodsReceiptDetailList != null && !goodsReceiptDetailList.isEmpty()) {
                            Map<GoodsReceiptDetail, GoodsReceiptOrderDetails> goodsReceiptAndOrderMap = new HashMap<>();
                            StringBuilder documentIDs = new StringBuilder();
                            for (GoodsReceiptDetail row : goodsReceiptDetailList) {
                                double rowTaxAmount = 0;
                                double amount = 0;
                                Map amthm = getGoodsReceiptProductAmount(gReceipt, companyid);
                                Object[] val = (Object[]) amthm.get(row);
                                amount = (Double) val[0];
                                rowTaxAmount = (Double) val[2];
                                JSONObject jsonTemp = new JSONObject();
                                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                                requestParams.putAll(dataMap);
                                requestParams.put("natureofPayment", row.getNatureOfPayment()!=null ? row.getNatureOfPayment().getID() : "");
                                requestParams.put("amount", enteramount);
                                jsonTemp = getTDSCalculationDetailsJobj(requestParams);
                                jsonTemp.put("productid", row.getInventory().getProduct().getID());
                                jsonTemp.put("productname", row.getInventory().getProduct().getName());
                                jsonTemp.put("accountid", row.getInventory().getProduct().getPurchaseAccount().getID());
                                jsonTemp.put("natureofpayment", row.getNatureOfPayment()!=null ? row.getNatureOfPayment().getID() : "");
                                jsonTemp.put("amount", authHandler.round(amount, companyid));
                                jsonTemp.put("tdsAssessableAmount", authHandler.round(Double.parseDouble(tdsAssessableAmount), companyid));
                                jsonTemp.put("enteramount", authHandler.round(Double.parseDouble(enteramount), companyid));
                                jsonTemp.put("amountdue", authHandler.round(Double.parseDouble(enteramount), companyid));
                                jsonTemp.put("rowTaxAmount", authHandler.round(rowTaxAmount, companyid));
                                jsonTemp.put("includetax", false); // send ID field Value for Include Tax Combo
                                jsonTemp.put("rowid", row.getID());                                
                                jsonArray.put(jsonTemp);
                            }
                        }
                    }
                } else if (dataMap.get("documentType").equals(Constants.PaymentAgainstCNDN + "")) {
                    String bill = dataMap.get("documentid").toString();
                    String enteramount = dataMap.get("amount")==null?"":dataMap.get("amount").toString();
                    String tdsAssessableAmount = dataMap.get("tdsAssessableAmount")==null?enteramount:dataMap.get("tdsAssessableAmount").toString();
                    KwlReturnObject grresult = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), bill);
                    CreditNote creditNote = (CreditNote) grresult.getEntityList().get(0);
                    if (creditNote.getCntype() == 4) {
                        Set<CreditNoteTaxEntry> cnDetailsSet = creditNote.getCnTaxEntryDetails();
                        for (CreditNoteTaxEntry rowObj : cnDetailsSet) {
                            JSONObject jsonTemp = new JSONObject();
                            HashMap<String, Object> requestParams = new HashMap<String, Object>();
                            requestParams.putAll(dataMap);
                            requestParams.put("natureofPayment", rowObj.getCreditNote().getVendor().getNatureOfPayment());
                            requestParams.put("amount", rowObj.getAmount());
                            jsonTemp = getTDSCalculationDetailsJobj(requestParams);
                            jsonTemp.put("accountid", rowObj.getAccount().getID());
                            jsonTemp.put("natureofpayment", rowObj.getCreditNote().getVendor().getNatureOfPayment());
                            jsonTemp.put("amount", authHandler.round(rowObj.getAmount(), companyid));
                            jsonTemp.put("enteramount", authHandler.round(Double.parseDouble(enteramount), companyid));
                            jsonTemp.put("tdsAssessableAmount", authHandler.round(Double.parseDouble(tdsAssessableAmount), companyid));
                            jsonTemp.put("amountdue", authHandler.round(Double.parseDouble(enteramount), companyid));
                            jsonTemp.put("rowTaxAmount", authHandler.round(rowObj.getTaxamount(), companyid));           
                            jsonTemp.put("includetax", false); // send ID field Value for Include Tax Combo
                            jsonTemp.put("rowid", rowObj.getID());
                            jsonArray.put(jsonTemp);
                        }
                    }
                }else{
                    JSONObject jsonTemp = new JSONObject();
                    JSONObject jobj = new JSONObject();
                    if (dataMap.containsKey("vendorID")) {//INDIAN Company for TDS Calculation in Make Payment
                        String vendorID = dataMap.get("vendorID") != null ? (String) dataMap.get("vendorID") : "";
                        String amount = dataMap.get("amount") != null ? (String) dataMap.get("amount") : "";
                        String tdsAssessableAmount = dataMap.get("tdsAssessableAmount") != null ? (String) dataMap.get("tdsAssessableAmount") : amount;
                        jsonTemp.put("enteramount", !StringUtil.isNullOrEmpty(amount) ? authHandler.round(Double.parseDouble(amount), companyid) : 0);
                        jsonTemp.put("tdsAssessableAmount", authHandler.round(Double.parseDouble(tdsAssessableAmount), companyid));
                        KwlReturnObject grresult = accountingHandlerDAOobj.getObject(Vendor.class.getName(), vendorID);
                        Vendor vendor = (Vendor) grresult.getEntityList().get(0);
                        if (vendor != null) {
                            if (!StringUtil.isNullOrEmpty(vendor.getDeducteeType())) {
                                jsonTemp.put("deducteetype", vendor.getDeducteeType());
                                MasterItem masterItem = null;
                                KwlReturnObject catresult = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), vendor.getDeducteeType());
                                masterItem = (MasterItem) catresult.getEntityList().get(0);
                                jsonTemp.put("deducteetypename", masterItem.getValue());
                            } else {
                                jsonTemp.put("deducteetypename", "");
                            }
                            String tdsPayableAccountId = "";
                            if (!StringUtil.isNullOrEmpty(vendor.getNatureOfPayment())) {
                                if(dataMap.containsKey("advNOP") && !StringUtil.isNullOrEmpty(dataMap.get("advNOP").toString())){
                                    jsonTemp.put("natureofpayment", dataMap.get("advNOP").toString());
                                }else{
                                    jsonTemp.put("natureofpayment", vendor.getNatureOfPayment());
                                }
                                KwlReturnObject catresult = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), jsonTemp.getString("natureofpayment"));
                                MasterItem masterItem = (MasterItem) catresult.getEntityList().get(0);
                                if(masterItem != null){
                                    tdsPayableAccountId = masterItem.getAccID();
                                }
                            }
                            jsonTemp.put("tdsaccountid", tdsPayableAccountId);
                            if (dataMap.containsKey("advNOP") && !StringUtil.isNullOrEmpty(dataMap.get("advNOP").toString())) {
                                dataMap.put("natureofPayment", dataMap.get("advNOP").toString());
                            } else {
                                dataMap.put("natureofPayment", vendor.getNatureOfPayment());
                            }
                            dataMap.put("amount", tdsAssessableAmount); // TDS calculation is on TDS assessable value 
                            jobj = getTDSCalculationDetailsJobj(dataMap);
                            if ((boolean) jobj.get("success")) {
                                jsonTemp.put("tdspercentage", jobj.get("tdspercentage"));
                                jsonTemp.put("ruleid", jobj.get("ruleid"));
                                jsonTemp.put("tdsamount", jobj.getDouble("tdsamount"));
                                jsonTemp.put("tdsAssessableAmount", jobj.getDouble("tdsAssessableAmount"));
                            }else{
                                throw new AccountingException("TDS Rate is not set for the given Nature of Payment.");
                            }
                        }
                        jsonArray.put(jsonTemp);
                    }
                }
            } else {
                list = result.getEntityList();
                ListIterator listItr = list.listIterator();
                while (listItr.hasNext()) {
                    TdsDetails tdsDetails = (TdsDetails) listItr.next();
                    JSONObject jsonTemp = new JSONObject();

                    jsonTemp.put("ruleid", tdsDetails.getRuleid() != null ? tdsDetails.getRuleid().getId(): "");
                    jsonTemp.put("accountid", tdsDetails.getAccount()!= null? tdsDetails.getAccount().getID():"");
                    if (tdsDetails.getAdvanceDetail() != null ) {
                        jsonTemp.put("natureofpayment", tdsDetails.getNatureOfPayment().getID());
                        jsonTemp.put("deducteetype", tdsDetails.getAdvanceDetail().getPayment().getVendor().getDeducteeType());
                        MasterItem masterItem = null;
                        KwlReturnObject catresult = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), tdsDetails.getAdvanceDetail().getPayment().getVendor().getDeducteeType());
                        masterItem = (MasterItem) catresult.getEntityList().get(0);
                        jsonTemp.put("deducteetypename", masterItem.getValue());//INDIAN Company for TDS Calculation in Make Payment
                    } else {
                        jsonTemp.put("deducteetypename", "");
                        jsonTemp.put("natureofpayment", "");
                    }
                    jsonTemp.put("tdspercentage", tdsDetails.getTdspercentage());
                    jsonTemp.put("tdsamount", authHandler.round(tdsDetails.getTdsamount(), companyid));
                    jsonTemp.put("tdsamount", authHandler.round(tdsDetails.getTdsamount(), companyid));                    
                    jsonTemp.put("includetax", tdsDetails.isIncludetaxamount());
                    jsonTemp.put("tdsaccountid", tdsDetails.getTdspayableaccount().getID());

                    if (tdsDetails.getDocumenttype().equals(Constants.PaymentAgainstInvoice + "")) {

                        KwlReturnObject receiptKWLObj = accountingHandlerDAOobj.getObject(GoodsReceiptDetail.class.getName(), tdsDetails.getDocumentdetails());
                        if (receiptKWLObj.getEntityList().size() > 0 && receiptKWLObj.getEntityList().get(0) != null) {
                            GoodsReceiptDetail grDetail = (GoodsReceiptDetail) receiptKWLObj.getEntityList().get(0);

                            double rowTaxAmount = 0;
                            double amount = 0;
                            Map amthm = getGoodsReceiptProductAmount(grDetail.getGoodsReceipt(), companyid);
                            Object[] val = (Object[]) amthm.get(grDetail);
                            amount = (Double) val[0];
                            rowTaxAmount = (Double) val[1];

                            jsonTemp.put("productid", grDetail.getInventory().getProduct().getID());
                            jsonTemp.put("productname", grDetail.getInventory().getProduct().getProductName());
                            jsonTemp.put("amount", authHandler.round(amount, companyid));
                            jsonTemp.put("rowTaxAmount", authHandler.round(rowTaxAmount, companyid));
                            jsonTemp.put("amountdue", authHandler.round(amount - tdsDetails.getEnteramount(), companyid));
                            jsonTemp.put("enteramount", authHandler.round(tdsDetails.getEnteramount(), companyid));
                            jsonTemp.put("tdsAssessableAmount", authHandler.round(tdsDetails.getTdsAssessableAmount(), companyid));
                            jsonTemp.put("includetax", tdsDetails.isIncludetaxamount());
                            jsonTemp.put("rowid", grDetail.getID());
                        }
                        receiptKWLObj = accountingHandlerDAOobj.getObject(ExpenseGRDetail.class.getName(), tdsDetails.getDocumentdetails());
                        if (receiptKWLObj.getEntityList().size() > 0 && receiptKWLObj.getEntityList().get(0) != null) {
                            ExpenseGRDetail grDetail = (ExpenseGRDetail) receiptKWLObj.getEntityList().get(0);

                            double rowTaxAmount = 0;
                            double amount = 0;
                            Map amthm = getExpenseGRAmount(grDetail.getGoodsReceipt());
                            Object[] val = (Object[]) amthm.get(grDetail);
                            amount = (Double) val[0];
                            rowTaxAmount = (Double) val[1];
                            jsonTemp.put("amount", authHandler.round(amount, companyid));
                            jsonTemp.put("amountdue", authHandler.round(amount - tdsDetails.getEnteramount(), companyid));
                            jsonTemp.put("enteramount", authHandler.round(tdsDetails.getEnteramount(), companyid));
                            jsonTemp.put("tdsAssessableAmount", authHandler.round(tdsDetails.getTdsAssessableAmount(), companyid));
                            jsonTemp.put("rowTaxAmount", authHandler.round(rowTaxAmount, companyid));
                            jsonTemp.put("includetax", tdsDetails.isIncludetaxamount());
                            jsonTemp.put("rowid", grDetail.getID());
                        }
                    } else if (tdsDetails.getDocumenttype().equals(Constants.PaymentAgainstCNDN + "")) {
                        KwlReturnObject receiptKWLObj = accountingHandlerDAOobj.getObject(CreditNoteTaxEntry.class.getName(), tdsDetails.getDocumentdetails());
                        CreditNoteTaxEntry cnDetail = (CreditNoteTaxEntry) receiptKWLObj.getEntityList().get(0);
                        jsonTemp.put("amount", authHandler.round(cnDetail.getAmount(), companyid));
                        jsonTemp.put("amountdue", authHandler.round(cnDetail.getAmount(), companyid));
                        jsonTemp.put("enteramount", authHandler.round(cnDetail.getAmount(), companyid));
                        jsonTemp.put("tdsAssessableAmount", authHandler.round(cnDetail.getAmount(), companyid)); // not for credit only implemented in advance
                        jsonTemp.put("rowTaxAmount",authHandler.round(cnDetail.getTaxamount(), companyid));
                        jsonTemp.put("includetax", false); // send ID field Value for Include Tax Combo
                        jsonTemp.put("rowid", cnDetail.getID());
                    } else if (tdsDetails.getDocumenttype().equals(Constants.AdvancePayment + "")) {
                        jsonTemp.put("amount", authHandler.round(tdsDetails.getAdvanceDetail().getAmount(), companyid));
                        jsonTemp.put("amountdue", authHandler.round(tdsDetails.getAdvanceDetail().getAmount(), companyid));
                        jsonTemp.put("enteramount", authHandler.round(tdsDetails.getAdvanceDetail().getAmount(), companyid));
                        jsonTemp.put("tdsAssessableAmount", authHandler.round(tdsDetails.getTdsAssessableAmount(), companyid));
                        jsonTemp.put("rowTaxAmount", "0");
                        jsonTemp.put("includetax", false); // send ID field Value for Include Tax Combo
                        jsonTemp.put("rowid", tdsDetails.getAdvanceDetail().getId());
                    } else if (tdsDetails.getDocumenttype().equals(Constants.GLPayment + "")) {
                        jsonTemp.put("amount", authHandler.round(tdsDetails.getPaymentdetailotherwise().getAmount(), companyid));
                        jsonTemp.put("amountdue", authHandler.round(tdsDetails.getPaymentdetailotherwise().getAmount(), companyid));
                        jsonTemp.put("enteramount", authHandler.round(tdsDetails.getPaymentdetailotherwise().getAmount(), companyid));
                        jsonTemp.put("tdsAssessableAmount", authHandler.round(tdsDetails.getTdsAssessableAmount(), companyid));
                        jsonTemp.put("rowTaxAmount", authHandler.round(tdsDetails.getPaymentdetailotherwise().getTaxamount(), companyid));
                        jsonTemp.put("includetax", false); // send ID field Value for Include Tax Combo
                        jsonTemp.put("rowid", tdsDetails.getPaymentdetailotherwise().getID());
                    }

                    jsonArray.put(jsonTemp);
                }
            }
            jsonObj.put("data", jsonArray);
            jsonObj.put("totalCount", jsonArray.length());
        } catch (ServiceException ex ) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JSONException ex) {
            Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jsonObj;
    }
   
    /*
     * Method to save Opening Balance Payments For customer.
     */
    public ModelAndView saveAccountOpeningBalanceTransaction(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray jArr = new JSONArray();
        boolean issuccess = false;
        String msg = "";
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("BR_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = null;
        boolean isAccountingExe = false;
        boolean isEdit = false;
        String paymentNumber = null;
        String companyid = "";
        String chequeNumber="";
        try {
            paymentNumber = request.getParameter("number");
            String paymentId = request.getParameter("transactionId");
            companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject cncount = null;
            if (StringUtil.isNullOrEmpty(paymentId)) {
                /*
                 * Checks duplicate number while creating new record
                 */
                cncount = accVendorPaymentobj.getAccountOpeningBalanceTransactionFromNo(paymentNumber, companyid);
                if (cncount.getRecordTotalCount() > 0) {
                    isAccountingExe = true;
                    throw new AccountingException(messageSource.getMessage("acc.cnList.TransNo", null, RequestContextUtils.getLocale(request)) + " '<b>" +paymentNumber + "</b>"+ messageSource.getMessage("acc.field.alreadyexists.", null, RequestContextUtils.getLocale(request)) + " "  +messageSource.getMessage("acc.account.OpeningBalanceType.enteranotherNo", null, RequestContextUtils.getLocale(request)));
                }
                
            } else {
                isEdit = true;
            }
            synchronized (this) {
                /*
                 * Checks duplicate number for simultaneous transactions
                 */
                status = txnManager.getTransaction(def);
                KwlReturnObject resultInv = accCommonTablesDAO.getTransactionInTemp(paymentNumber, companyid, Constants.Acc_Make_Payment_ModuleId);//Get entry from temporary table
                if (resultInv.getRecordTotalCount() > 0) {
                    isAccountingExe = true;
                    throw new AccountingException(messageSource.getMessage("acc.PO.selectedPamentNo", null, RequestContextUtils.getLocale(request)) + paymentNumber + messageSource.getMessage("acc.field.alreadyinprocess.", null, RequestContextUtils.getLocale(request)));
                } else {
                    accCommonTablesDAO.insertTransactionInTemp(paymentNumber, companyid, Constants.Acc_Make_Payment_ModuleId);//Insert entry in temporary table
                }


                /*
                 * Check for invalid cheque number
                 */

                KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
                CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);

                if (preferences.getChequeNoDuplicate() != Constants.ChequeNoIgnore) {// Ignore case 
                    checkForInvalidChequeNumber(request, null);
                }
                if (!StringUtil.isNullOrEmpty(request.getParameter("paydetail"))) {
                    JSONObject obj = new JSONObject(request.getParameter("paydetail"));
                    chequeNumber = obj.optString("chequenumber");
                    String methodid = request.getParameter("paymentMethodID");
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), methodid);
                    PaymentMethod payMethod = (PaymentMethod) result1.getEntityList().get(0);
                    String bankId = payMethod.getAccount().getID();

                    KwlReturnObject resultInv1 = accPaymentDAOobj.getSearchChequeNoTemp(chequeNumber, companyid, Constants.Cheque_ModuleId, bankId);
                    if (resultInv1.getRecordTotalCount() > 0 && !isEdit) {
                        throw new AccountingException("Cheque Number : <b>" + chequeNumber + "</b> is already exist, Please enter different one");
                    } else {
                        accPaymentDAOobj.insertInvoiceOrCheque(chequeNumber, companyid, Constants.Cheque_ModuleId, bankId);
                    }
                }
                txnManager.commit(status);
            }
            status = txnManager.getTransaction(def);
            List li = saveAccountOpeningBalanceTransaction(request);
            boolean isEditInv = false;
            String succMsg = messageSource.getMessage("acc.field.saved", null, RequestContextUtils.getLocale(request));
            if (!li.isEmpty()) {
                paymentNumber = li.get(0).toString();
                isEditInv = (Boolean) li.get(1);
            }
            if (isEditInv) {
                succMsg = messageSource.getMessage("acc.field.updated", null, RequestContextUtils.getLocale(request));
            }
            issuccess = true;
            msg = "Account Opening Transaction " + " " + paymentNumber + " " + messageSource.getMessage("acc.field.hasbeen", null, RequestContextUtils.getLocale(request)) + " " + succMsg + " " + messageSource.getMessage("acc.field.successfully", null, RequestContextUtils.getLocale(request));
            accCommonTablesDAO.deleteTransactionInTemp(paymentNumber, companyid, Constants.Acc_Make_Payment_ModuleId);//Delete entry in temporary table
            accPaymentDAOobj.deleteUsedInvoiceOrCheque(chequeNumber, companyid); //Delete entry in temporary table
            txnManager.commit(status);

        } catch (SessionExpiredException ex) {
            if (status != null) {
                txnManager.rollback(status);
            }
            try {
                accCommonTablesDAO.deleteTransactionInTemp(paymentNumber, companyid, Constants.Acc_Make_Payment_ModuleId);//Delete entry in temporary table
                accPaymentDAOobj.deleteUsedInvoiceOrCheque(chequeNumber, companyid); //Delete entry in temporary table
            } catch (ServiceException ex1) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex1);
            }
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            msg = ex.getMessage();
        } catch (ServiceException ex) {
            if (status != null) {
                txnManager.rollback(status);
            }
            try {
                accCommonTablesDAO.deleteTransactionInTemp(paymentNumber, companyid, Constants.Acc_Make_Payment_ModuleId);//Delete entry in temporary table
                accPaymentDAOobj.deleteUsedInvoiceOrCheque(chequeNumber, companyid); //Delete entry in temporary table
            } catch (ServiceException ex1) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex1);
            }
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            msg = ex.getMessage();
        } catch (Exception ex) {
            if (status != null) {
                txnManager.rollback(status);
            }
            try {
                accCommonTablesDAO.deleteTransactionInTemp(paymentNumber, companyid, Constants.Acc_Make_Payment_ModuleId);//Delete entry in temporary table
                accPaymentDAOobj.deleteUsedInvoiceOrCheque(chequeNumber, companyid); //Delete entry in temporary table
            } catch (ServiceException ex1) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex1);
            }
            msg = "" + ex.getMessage();
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
                jobj.put("data", jArr);
                jobj.put("accException", isAccountingExe);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public List saveAccountOpeningBalanceTransaction(HttpServletRequest request) throws SessionExpiredException, AccountingException, ServiceException, UnsupportedEncodingException {
        List returnList = new ArrayList();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            DateFormat df = authHandler.getDateOnlyFormat(request);
            KwlReturnObject result;
            boolean isEditInvoice = false;
            String auditMsg = "", auditID = "", memo = "";
            auditMsg = "added";
            auditID = AuditAction.OPENING_BALANCE_CREATED;
            // Fetching request parameters

            String paymentNumber = request.getParameter("number");
            String transactionDateStr = request.getParameter("billdate");
            String currencyid = (request.getParameter("currencyid") == null ? sessionHandlerImpl.getCurrencyID(request) : request.getParameter("currencyid"));
            String transactionAmountStr = request.getParameter("transactionAmount");
            String paymentId = request.getParameter("transactionId");
            String accId = request.getParameter("accountId");
            double externalCurrencyRate = StringUtil.getDouble(request.getParameter("externalcurrencyrate"));

            boolean conversionRateFromCurrencyToBase = true;
            if (request.getParameter("CurrencyToBaseExchangeRate") != null) {
                conversionRateFromCurrencyToBase = Boolean.parseBoolean(request.getParameter("CurrencyToBaseExchangeRate"));
            }

            double exchangeRateForOpeningTransaction = 1;
            if (!StringUtil.isNullOrEmpty(request.getParameter("exchangeRateForOpeningTransaction"))) {
                exchangeRateForOpeningTransaction = Double.parseDouble(request.getParameter("exchangeRateForOpeningTransaction"));
            }

            String accountId = "";
            if (!StringUtil.isNullOrEmpty(accId)) {
                KwlReturnObject venresult = accountingHandlerDAOobj.getObject(Account.class.getName(), accId);
                Account account = (Account) venresult.getEntityList().get(0);
                accountId = account.getID();
            }

            Date transactionDate = df.parse(df.format(new Date()));

            if (!StringUtil.isNullOrEmpty(transactionDateStr)) {
                transactionDate = df.parse(transactionDateStr);
            }

            double transactionAmount = 0d;
            if (!StringUtil.isNullOrEmpty(transactionAmountStr)) {
                transactionAmount = Double.parseDouble(transactionAmountStr);
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("memo"))) {
                memo = request.getParameter("memo").toString();
            }

            boolean isPayment = true;
            if (request.getParameter("isPayment") != null) {
                isPayment = Boolean.parseBoolean(request.getParameter("isPayment"));
            }

            HashMap paymenthm = new HashMap();

            /*
             * as user can not chnaged entered number in edit so we have not
             * cheked duplicate entry in edit. if this logic change we need to
             * change here as well
             */
            if (StringUtil.isNullOrEmpty(paymentId)) {

                paymenthm.put("entrynumber", paymentNumber);
                paymenthm.put("autogenerated", false);

                /*
                 * code for checking wheather entered number can be generated by
                 * sequence format or not
                 */
            }


            if (!StringUtil.isNullOrEmpty(paymentId)) {
                isEditInvoice = true;
                auditMsg = "updated";
                auditID = AuditAction.OPENING_BALANCE_UPDATED;
                paymenthm.put("paymentid", paymentId);
            }

            if (conversionRateFromCurrencyToBase) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                paymenthm.put("depositamountinbase", authHandler.round(transactionAmount * exchangeRateForOpeningTransaction, companyid));
            } else {
                paymenthm.put("depositamountinbase", authHandler.round(transactionAmount / exchangeRateForOpeningTransaction, companyid));
            }
            paymenthm.put("exchangeRateForOpeningTransaction", exchangeRateForOpeningTransaction);
            paymenthm.put("conversionRateFromCurrencyToBase", conversionRateFromCurrencyToBase);

            paymenthm.put("depositamount", transactionAmount);//
            paymenthm.put("currencyid", currencyid);//
            paymenthm.put("externalCurrencyRate", externalCurrencyRate);//
            paymenthm.put("memo", memo);//
            paymenthm.put("companyid", companyid);//
            paymenthm.put("creationDate", transactionDate);
            paymenthm.put("accountId", accountId);

            String createdby = sessionHandlerImpl.getUserid(request);
            String modifiedby = sessionHandlerImpl.getUserid(request);
            long createdon = System.currentTimeMillis();
            long updatedon = System.currentTimeMillis();

            paymenthm.put("createdby", createdby);
            paymenthm.put("modifiedby", modifiedby);
            paymenthm.put("createdon", createdon);
            paymenthm.put("updatedon", updatedon);
            paymenthm.put("ispayment", isPayment);

            String oldChequeNo = "";
            JSONObject obj = null;
            if (!StringUtil.isNullOrEmpty(request.getParameter("paydetail"))) {
                obj = new JSONObject(request.getParameter("paydetail"));
            }
            if (!StringUtil.isNullOrEmpty(paymentId)) {// for edit case
                KwlReturnObject receiptObj = accountingHandlerDAOobj.getObject(AccountOpeningTransaction.class.getName(), paymentId);
                AccountOpeningTransaction payment = (AccountOpeningTransaction) receiptObj.getEntityList().get(0);
                if (payment != null && payment.getPayDetail() != null) {
                    if (payment.getPayDetail().getCheque() != null) {
                        oldChequeNo = payment.getPayDetail().getCheque().getChequeNo();
                        accVendorPaymentobj.updateChequeNumber(oldChequeNo, obj.optString("chequenumber"), companyid);
                    }
                }
            }

            String payDetailID = null;

            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);

            KwlReturnObject extcapresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extcapresult.getEntityList().get(0);

            result = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), request.getParameter("paymentMethodID"));
            PaymentMethod payMethod = (PaymentMethod) result.getEntityList().get(0);
            Account depositTo = payMethod.getAccount();
            HashMap pdetailhm = new HashMap();
            pdetailhm.put("paymethodid", payMethod.getID());
            pdetailhm.put("companyid", companyid);
            
            Date startDate = preferences.getFinancialYearFrom();
            Calendar startCal = Calendar.getInstance();
            startCal.setTime(startDate);
            startCal.add(Calendar.YEAR, 1);
            startCal.add(Calendar.DAY_OF_YEAR, -1);
            Date endDate = startCal.getTime();
            List list = new ArrayList();

            if (payMethod.getDetailType() != PaymentMethod.TYPE_CASH) {
                if (payMethod.getDetailType() == PaymentMethod.TYPE_BANK) {
                    HashMap chequehm = new HashMap();
                    BigInteger nextSeqNumber = new BigInteger("0");
                    boolean checkForNextSequenceNumberAlso = true;
                    boolean isChequeNumberInString = false;
                    if (extraCompanyPreferences != null && extraCompanyPreferences.isShowAutoGeneratedChequeNumber()) {
                        try {// USER can enter String values also in such case exception will come

                            nextSeqNumber = new BigInteger(obj.getString("chequenumber"));
                            // cheque whether Cheque Number exist or not if already exist then don't let it save
                        } catch (Exception ex) {
                            checkForNextSequenceNumberAlso = false;
                            isChequeNumberInString = true;
                        }
                    } else {
                        checkForNextSequenceNumberAlso = false;
                    }

                    boolean isChequeNumberAvailable = false;

                    boolean isEditCaseButChqNoChanged = false;
                    if (!StringUtil.isNullOrEmpty(obj.optString("chequenumber")) && extraCompanyPreferences != null && extraCompanyPreferences.isShowAutoGeneratedChequeNumber()) {
                        try {// OLD CHQ NO. can be String value also in such case exception will come

                            HashMap chequeNohm = new HashMap();
                            chequeNohm.put("companyId", companyid);
                            chequeNohm.put("sequenceNumber", nextSeqNumber);
                            chequeNohm.put("checkForNextSequenceNumberAlso", checkForNextSequenceNumberAlso);
                            chequeNohm.put("nextChequeNumber", obj.optString("chequenumber"));
                            chequeNohm.put("bankAccountId", payMethod.getAccount().getID());
                            isChequeNumberAvailable = paymentService.isChequeNumberAvailable(chequeNohm);

                            BigInteger oldChqNoIntValue = new BigInteger("0");
                            if (!StringUtil.isNullOrEmpty(oldChequeNo)) {
                                oldChqNoIntValue = new BigInteger(oldChequeNo);
                            }


                            if (!StringUtil.isNullOrEmpty(obj.optString("sequenceformat"))  && !oldChqNoIntValue.equals(nextSeqNumber) && !StringUtil.isNullOrEmpty(oldChequeNo)) {
                                isEditCaseButChqNoChanged = true;
                            }

                            if (isChequeNumberInString) {
                                if (!oldChequeNo.equals(obj.optString("chequenumber"))) {
                                    isEditCaseButChqNoChanged = true;
                                }
                            }

                        } catch (Exception ex) {
                            if (!oldChequeNo.equals(obj.optString("chequenumber"))) {
                                isEditCaseButChqNoChanged = true;
                            }
                        }
                    } else {
                        if (!oldChequeNo.equals(obj.optString("chequenumber"))) {
                            isEditCaseButChqNoChanged = true;
                        }
                    }


                    if (!StringUtil.isNullOrEmpty(obj.optString("chequenumber")) && isChequeNumberAvailable && isEditCaseButChqNoChanged) {
                        throw new AccountingException("Cheque Number : <b>" + obj.getString("chequenumber") + "</b> is already exist, Please enter different one");
                    }
                    
                    if (!StringUtil.isNullOrEmpty(oldChequeNo)) {
                        KwlReturnObject chkresult = null;
                        chkresult = accVendorPaymentobj.getChequeIDByNumber(obj.optString("chequenumber"), companyid);   // GET chequeid  from cheque
                        list = chkresult.getEntityList();
                        if(!list.isEmpty()){
                            chequehm.put("chequeID", list.get(0));
                        }
                    }
                    chequehm.put("chequeno", obj.optString("chequenumber"));
                    chequehm.put("companyId", companyid);
                    chequehm.put("createdFrom", 1);
                    chequehm.put("sequenceNumber", nextSeqNumber);

                    String autoGenNextChqNo = paymentService.getNextChequeNumber(request, payMethod.getAccount().getID());
                    if (!StringUtil.isNullOrEmpty(obj.optString("chequenumber")) && (autoGenNextChqNo.equals(obj.optString("chequenumber")) || oldChequeNo.equals(obj.optString("chequenumber")))) {// if cheque Number is auto Generated OR for edit case if old cheque no. == coming chequenumber
                        chequehm.put("isAutoGeneratedChequeNumber", true);
                    }

                    chequehm.put("bankAccount", (payMethod.getAccount() != null) ? payMethod.getAccount().getID() : "");
                    chequehm.put("description", StringUtil.DecodeText(obj.optString("description")));
                    if(isPayment){
                        chequehm.put("bankname", StringUtil.DecodeText(obj.optString("paymentthrough")));
                    }else{
                        chequehm.put("bankname", StringUtil.DecodeText(obj.optString("paymentthrough")));
                        chequehm.put("bankmasteritemid", obj.optString("paymentthroughid",""));
                    }
                    chequehm.put("duedate", df.parse(obj.getString("postdate")));
                    Map<String, Object> seqchequehm = new HashMap<>();
                    obj.put(Constants.companyKey, companyid);
                    String chequesequenceformat =  obj.optString("sequenceformat");
                    /**
                     * getNextChequeNumber method to generate next sequence number using
                     * sequence format,also saving the dateprefix and datesuffix in cheque table.
                     */
                    if (!StringUtil.isNullOrEmpty(chequesequenceformat) && !chequesequenceformat.equals("NA")) {
                        seqchequehm = accCompanyPreferencesObj.getNextChequeNumber(obj);
                    }
                  
                    if (seqchequehm.containsKey(Constants.AUTO_ENTRYNUMBER)) {
                        chequehm.put("chequeno", (String) seqchequehm.get(Constants.AUTO_ENTRYNUMBER));
                    }
                    if (seqchequehm.containsKey(Constants.SEQNUMBER)) {
                        chequehm.put("sequenceNumber", (String) seqchequehm.get(Constants.SEQNUMBER));
                    }
                    if (seqchequehm.containsKey(Constants.DATEPREFIX)) {
                        chequehm.put(Constants.DATEPREFIX, (String) seqchequehm.get(Constants.DATEPREFIX));
                    }
                    if (seqchequehm.containsKey(Constants.DATEAFTERPREFIX)) {
                        chequehm.put(Constants.DATEAFTERPREFIX, (String) seqchequehm.get(Constants.DATEAFTERPREFIX));
                    }
                    if (seqchequehm.containsKey(Constants.DATESUFFIX)) {
                        chequehm.put(Constants.DATESUFFIX, (String) seqchequehm.get(Constants.DATESUFFIX));
                    }
                    KwlReturnObject cqresult = accPaymentDAOobj.addCheque(chequehm);
                    Cheque cheque = (Cheque) cqresult.getEntityList().get(0);
                    pdetailhm.put("chequeid", cheque.getID());
                } else if (payMethod.getDetailType() == PaymentMethod.TYPE_CARD) {
                    HashMap cardhm = new HashMap();
                    cardhm.put("cardno", obj.getString("CardNo"));
                    cardhm.put("nameoncard", obj.getString("nameoncard"));
                    //cardhm.put("expirydate", obj.getString("expirydate"));
                    cardhm.put("expirydate", df.parse(obj.getString("expirydate")));
                    cardhm.put("cardtype", obj.getString("cardtype"));
                    cardhm.put("refno", obj.getString("refno"));
                    KwlReturnObject cdresult = accPaymentDAOobj.addCard(cardhm);
                    Card card = (Card) cdresult.getEntityList().get(0);
                    pdetailhm.put("cardid", card.getID());
                }
            }
            KwlReturnObject pdresult = null;
            if (!StringUtil.isNullOrEmpty(paymentId)) {
                if (!StringUtil.isNullOrEmpty(oldChequeNo)) {
                    List list1 = new ArrayList();
                    KwlReturnObject chkresult1 = null;
                    chkresult1 = accVendorPaymentobj.getPayDetailIDByChequeID(list.get(0).toString(), companyid);   // GET paydetailid from chequeid
                    list1 = chkresult1.getEntityList();
                    if (!list1.isEmpty()) {
                        pdetailhm.put("paydetailid", list1.get(0));
                    }
                }
            }
            pdresult = accPaymentDAOobj.addPayDetail(pdetailhm);

            PayDetail pdetail = (PayDetail) pdresult.getEntityList().get(0);
            paymenthm.put("paydetailsid", pdetail.getID());

            result = accVendorPaymentobj.saveAccountOpeningTransaction(paymenthm);

            AccountOpeningTransaction payment = (AccountOpeningTransaction) result.getEntityList().get(0);
            returnList.add(payment.getTransactionNumber());
            returnList.add(isEditInvoice);

            auditTrailObj.insertAuditLog(auditID, "User " + sessionHandlerImpl.getUserFullName(request) + " has  " + auditMsg + " a Account Opening Transaction " + paymentNumber, request, paymentNumber);
        } catch (JSONException | ParseException ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return returnList;
    }

    public ModelAndView getAccountOpeningBalanceTransaction(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        boolean issuccess = false;
        String msg = "";
        try {
            HashMap<String, Object> requestParams = getPaymentMap(request);
            String accID = request.getParameter("custVenId");
            requestParams.put("accountId", accID);

            KwlReturnObject result = accVendorPaymentobj.getAccountOpeningBalanceTransaction(requestParams);
            List<AccountOpeningTransaction> list = result.getEntityList();
            getAccountOpeningBalanceTransaction(request, list, DataJArr);

            int count = result.getRecordTotalCount();
            JSONArray pagedJson = DataJArr;
            String start = request.getParameter("start");
            String limit = request.getParameter("limit");
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }

            jobj.put("data", pagedJson);
            jobj.put("count", count);
            issuccess = true;
        } catch (JSONException ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (ServiceException ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (Exception ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }

        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public void getAccountOpeningBalanceTransaction(HttpServletRequest request, List<AccountOpeningTransaction> list, JSONArray dataArray) {
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            DateFormat df = authHandler.getDateOnlyFormat(request);
            HashMap<String, Object> requestParams = getPaymentMap(request);
            if (list != null && !list.isEmpty()) {
                Iterator it = list.iterator();
                while (it.hasNext()) {
                    AccountOpeningTransaction payment = (AccountOpeningTransaction) it.next();

                    Date receiptCreationDate = null;
                    Double receiptAmount = 0d;

                    receiptCreationDate = payment.getCreationDate();
                    receiptAmount = payment.getDepositAmount();

                    double exchangeRateForOtherCurrency = payment.getExchangeRateForOpeningTransaction();
                    JSONObject receiptJson = new JSONObject();
                    receiptJson.put("methodid", payment.getPayDetail() == null ? "" : payment.getPayDetail().getPaymentMethod() == null ? "" : payment.getPayDetail().getPaymentMethod().getID());
                    receiptJson.put("detailtype", (payment.getPayDetail() == null ? "" : payment.getPayDetail().getPaymentMethod().getDetailType()));
                    if (payment.getPayDetail() != null) {
                        try {
                            receiptJson.put("expirydate", (payment.getPayDetail().getCard() == null ? "" : df.format(payment.getPayDetail().getCard().getExpiryDate())));
                        } catch (IllegalArgumentException ae) {
                            receiptJson.put("expirydate", "");
                        }
                        try {
                            receiptJson.put("dueDate", (payment.getPayDetail().getCheque() == null ? "" : df.format(payment.getPayDetail().getCheque().getDueDate())));
                        } catch (IllegalArgumentException ae) {
                            receiptJson.put("dueDate", "");
                        }
                        receiptJson.put("refdetail", (payment.getPayDetail().getCard() == null ? (payment.getPayDetail().getCheque() == null ? "" : payment.getPayDetail().getCheque().getDescription()) : payment.getPayDetail().getCard().getCardType()));
                        receiptJson.put("refno", (payment.getPayDetail().getCard() == null ? (payment.getPayDetail().getCheque() == null ? "" : payment.getPayDetail().getCheque().getChequeNo()) : payment.getPayDetail().getCard().getRefNo()));
                        if(payment.isIsPayment()){
                            receiptJson.put("refname", (payment.getPayDetail().getCard() == null ? (payment.getPayDetail().getCheque() == null ? "" : payment.getPayDetail().getCheque().getBankName()) : payment.getPayDetail().getCard().getCardHolder()));
                        }else{
                            receiptJson.put("refname", (payment.getPayDetail().getCard() == null ? (payment.getPayDetail().getCheque() == null ? "" : (payment.getPayDetail().getCheque().getBankMasterItem() == null ? payment.getPayDetail().getCheque().getBankName() : payment.getPayDetail().getCheque().getBankMasterItem().getID())) : payment.getPayDetail().getCard().getCardHolder()));
                        }
                        if (payment.getPayDetail().getCard() != null) {
                            receiptJson.put("refcardno", payment.getPayDetail().getCard().getCardNo());
                        }
                    }
                    receiptJson.put("clearanceDate", "");
                    receiptJson.put("paymentStatus", false);
                    if (payment.getPayDetail() != null) {
                        KwlReturnObject clearanceDate = accBankReconciliationObj.getBRWithoutJE(payment.getID(), payment.getCompany().getCompanyID(), Constants.Account_Opening_Transaction_ModuleId);
                        if (clearanceDate != null && clearanceDate.getEntityList() != null && clearanceDate.getEntityList().size() > 0) {
                            BankReconciliationDetail brd = (BankReconciliationDetail) clearanceDate.getEntityList().get(0);
                            if (brd.getBankReconciliation().getClearanceDate() != null) {
                                receiptJson.put("clearanceDate", df.format(brd.getBankReconciliation().getClearanceDate()));
                                receiptJson.put("paymentStatus", true);
                            }
                        }
                    }
                    receiptJson.put("transactionId", payment.getID());
                    receiptJson.put("exchangeRateForOtherCurrency", exchangeRateForOtherCurrency);
                    receiptJson.put("isCurrencyToBaseExchangeRate", payment.isConversionRateFromCurrencyToBase());
                    receiptJson.put("transactionNo", payment.getTransactionNumber());
                    receiptJson.put("transactionAmount", authHandler.formattedAmount(receiptAmount, companyid));
                    receiptJson.put("transactionDate", df.format(receiptCreationDate));
                    receiptJson.put("currencysymbol", (payment.getCurrency() == null ? "" : payment.getCurrency().getSymbol()));
                    receiptJson.put("currencyid", (payment.getCurrency() == null ? "" : payment.getCurrency().getCurrencyID()));
                    receiptJson.put("transactionAmountDue", authHandler.formattedAmount(receiptAmount, companyid));
                    receiptJson.put("memo", (StringUtil.isNullOrEmpty(payment.getMemo()) ? "" : payment.getMemo()));
                    receiptJson.put("transactiontype", payment.isIsPayment() ? "Withdraw" : "Deposit");
                    receiptJson.put("chequeNumber", payment != null ? payment.getPayDetail() != null ? payment.getPayDetail().getCheque() !=null ? payment.getPayDetail().getCheque().getChequeNo() : "" : "" : "");
                    receiptJson.put("chequeId", payment != null ? payment.getPayDetail() != null ? payment.getPayDetail().getCheque() !=null ? payment.getPayDetail().getCheque().getID() : "" : "" : "");
                    double transactionAmountInBase = 0d;
                    if (Constants.OpeningBalanceBaseAmountFlag) {
                        transactionAmountInBase = payment.getDepositamountinbase();
                    } else {
                        KwlReturnObject bAmt = null;
                        if (payment.isConversionRateFromCurrencyToBase()) {// if payment is opening balance payment and Conversion rate is taken from user is Currency to base then following method will be called.
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, receiptAmount, payment.getCurrency().getCurrencyID(), payment.getCreationDate(), exchangeRateForOtherCurrency);
                        } else {
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, receiptAmount, payment.getCurrency().getCurrencyID(), payment.getCreationDate(), exchangeRateForOtherCurrency);
                        }
                        transactionAmountInBase = (Double) bAmt.getEntityList().get(0);
                    }
                    receiptJson.put("transactionAmountInBase", authHandler.formattedAmount(transactionAmountInBase, companyid));
                    dataArray.put(receiptJson);
                }
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (JSONException ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
    }

    public ModelAndView deleteAccountOpeningBalanceTransaction(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;

        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("VP_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        try {
            deleteAccountOpeningBalanceTransaction(request);
            txnManager.commit(status);
            issuccess = true;
            msg = messageSource.getMessage("acc.account.OpeningBalanceType.delete", null, RequestContextUtils.getLocale(request));  //"Payment(s) has been deleted successfully";
        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = "" + ex.getMessage();
            Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accVendorPaymentController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public void deleteAccountOpeningBalanceTransaction(HttpServletRequest request) throws AccountingException, SessionExpiredException, ServiceException {
        String companyid = sessionHandlerImpl.getCompanyid(request);
        String paymentid[] = request.getParameterValues("billidArray");
        String paymentno[] = request.getParameterValues("invoicenoArray");
        String chequeid[] = request.getParameterValues("chequeArray");
        for (int count = 0; count < paymentid.length; count++) {
            HashMap<String, Object> requestParams = new HashMap<>();
            requestParams.put("paymentid", paymentid[count]);
            requestParams.put("companyid", companyid);
            try {
                if (!StringUtil.isNullOrEmpty(paymentid[count])) {
                    accVendorPaymentobj.deleteAccountOpeningTransactionPemanently(paymentid[count], companyid);
                    requestParams.put("transactionID", paymentid[count]);
                    deleteBankReconcilationOfOpeningBalances(requestParams);
                    auditTrailObj.insertAuditLog(AuditAction.OPENING_BALANCE_DELETED, "User " + sessionHandlerImpl.getUserFullName(request) + " has deleted Account Opening Transaction Permanently " + paymentno[count], request, paymentid[count]);
                }

            } catch (Exception ex) {
                throw new AccountingException(messageSource.getMessage("acc.pay1.excp1", null, RequestContextUtils.getLocale(request)));
            }
        }
        //To delete cheque number from cheque table.
        for (int chequecount = 0; chequecount < chequeid.length; chequecount++) {
            HashMap<String, Object> requestParams = new HashMap<>();
            requestParams.put("chequeid", chequeid[chequecount]);
            requestParams.put("companyid", companyid);
            try {
                if (!StringUtil.isNullOrEmpty(chequeid[chequecount])) {
                    accVendorPaymentobj.deleteChequeNumberPemanently(chequeid[chequecount], companyid);
                }
            } catch (Exception ex) {
                throw new AccountingException(messageSource.getMessage("acc.pay1.excp1", null, RequestContextUtils.getLocale(request)));
            }
        }
    }

    private void deleteBankReconcilationOfOpeningBalances(Map<String, Object> requestParams) throws ServiceException {
        if (requestParams.containsKey("transactionID")) {
            String reconsilationID = "";
            String unReconsilationID = "";
            String transactionID = (String) requestParams.get("transactionID");
            String companyid = (String) requestParams.get("companyId");

            //Deleting  BankReconciliationDetail
            KwlReturnObject reconsiledDetails = accBankReconciliationObj.getBRWithoutJE(transactionID, companyid, Constants.Acc_Make_Payment_ModuleId);
            if (reconsiledDetails.getRecordTotalCount() > 0) {
                List<BankReconciliationDetail> brd = reconsiledDetails.getEntityList();
                for (BankReconciliationDetail reconciliation : brd) {
                    accBankReconciliationObj.permenantDeleteBankReconciliationDetail(reconciliation.getID(), companyid);
                    reconsilationID = reconciliation.getBankReconciliation().getID();
                }
            }

            //Deleting  BankUnreconciliationDetail
            KwlReturnObject unReconsiledDetails = accBankReconciliationObj.getBankUnReconsiledWithoutJE(transactionID, companyid, Constants.Acc_Make_Payment_ModuleId);
            if (unReconsiledDetails.getRecordTotalCount() > 0) {
                List<BankUnreconciliationDetail> brd = unReconsiledDetails.getEntityList();
                for (BankUnreconciliationDetail reconciliation : brd) {
                    accBankReconciliationObj.permenantDeleteBankUnReconciliationDetail(reconciliation.getID(), companyid);
                    unReconsilationID = reconciliation.getBankReconciliation().getID();
                }
            }
            if (!StringUtil.isNullOrEmpty(reconsilationID)) {
                accBankReconciliationObj.deleteBankReconciliation(reconsilationID, companyid);
            }
            if (!StringUtil.isNullOrEmpty(unReconsilationID)) {
                accBankReconciliationObj.deleteBankReconciliation(unReconsilationID, companyid);
            }
        }
    }
    /**
     * This Method is used to Imports Make Payment 
     * @param request
     * @param response
     * @return 
     */
    public ModelAndView importMakePayment(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        try {
            /* Get Import related global parameters */
            JSONObject paramJobj = getMakePaymentParams(request);
            /* Call validate and import data of VQ. */
            jobj = accVendorPaymentModuleServiceObj.importMakePaymentJSON(paramJobj);
        } catch (Exception ex) {
            Logger.getLogger(accVendorPaymentControllerNew.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
     /**
     * Description : This Method is used to Get Request params for import Make Payment
     * @param request
     * @return JSONObject
     * @throws JSONException
     * @throws SessionExpiredException 
     */
    public JSONObject getMakePaymentParams(HttpServletRequest request) throws JSONException, SessionExpiredException {
        JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
        paramJobj.put("servletContext", this.getServletContext());
        return paramJobj;
    }
}
